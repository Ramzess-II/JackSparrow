
JackSparrow.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000000c0  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0000a6bc  080000c0  080000c0  000100c0  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000960  0800a780  0800a780  0001a780  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  0800b0e0  0800b0e0  00020074  2**0
                  CONTENTS
  4 .ARM          00000000  0800b0e0  0800b0e0  00020074  2**0
                  CONTENTS
  5 .preinit_array 00000000  0800b0e0  0800b0e0  00020074  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000008  0800b0e0  0800b0e0  0001b0e0  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  0800b0e8  0800b0e8  0001b0e8  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000074  20000000  0800b0ec  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00000360  20000074  0800b160  00020074  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  200003d4  0800b160  000203d4  2**0
                  ALLOC
 11 .ARM.attributes 00000028  00000000  00000000  00020074  2**0
                  CONTENTS, READONLY
 12 .debug_info   0001ed36  00000000  00000000  0002009c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00003262  00000000  00000000  0003edd2  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00001130  00000000  00000000  00042038  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 00000fd8  00000000  00000000  00043168  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  0001e050  00000000  00000000  00044140  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   00016494  00000000  00000000  00062190  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    000a44b3  00000000  00000000  00078624  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000050  00000000  00000000  0011cad7  2**0
                  CONTENTS, READONLY
 20 .debug_frame  0000463c  00000000  00000000  0011cb28  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080000c0 <__do_global_dtors_aux>:
 80000c0:	b510      	push	{r4, lr}
 80000c2:	4c06      	ldr	r4, [pc, #24]	; (80000dc <__do_global_dtors_aux+0x1c>)
 80000c4:	7823      	ldrb	r3, [r4, #0]
 80000c6:	2b00      	cmp	r3, #0
 80000c8:	d107      	bne.n	80000da <__do_global_dtors_aux+0x1a>
 80000ca:	4b05      	ldr	r3, [pc, #20]	; (80000e0 <__do_global_dtors_aux+0x20>)
 80000cc:	2b00      	cmp	r3, #0
 80000ce:	d002      	beq.n	80000d6 <__do_global_dtors_aux+0x16>
 80000d0:	4804      	ldr	r0, [pc, #16]	; (80000e4 <__do_global_dtors_aux+0x24>)
 80000d2:	e000      	b.n	80000d6 <__do_global_dtors_aux+0x16>
 80000d4:	bf00      	nop
 80000d6:	2301      	movs	r3, #1
 80000d8:	7023      	strb	r3, [r4, #0]
 80000da:	bd10      	pop	{r4, pc}
 80000dc:	20000074 	.word	0x20000074
 80000e0:	00000000 	.word	0x00000000
 80000e4:	0800a764 	.word	0x0800a764

080000e8 <frame_dummy>:
 80000e8:	4b04      	ldr	r3, [pc, #16]	; (80000fc <frame_dummy+0x14>)
 80000ea:	b510      	push	{r4, lr}
 80000ec:	2b00      	cmp	r3, #0
 80000ee:	d003      	beq.n	80000f8 <frame_dummy+0x10>
 80000f0:	4903      	ldr	r1, [pc, #12]	; (8000100 <frame_dummy+0x18>)
 80000f2:	4804      	ldr	r0, [pc, #16]	; (8000104 <frame_dummy+0x1c>)
 80000f4:	e000      	b.n	80000f8 <frame_dummy+0x10>
 80000f6:	bf00      	nop
 80000f8:	bd10      	pop	{r4, pc}
 80000fa:	46c0      	nop			; (mov r8, r8)
 80000fc:	00000000 	.word	0x00000000
 8000100:	20000078 	.word	0x20000078
 8000104:	0800a764 	.word	0x0800a764

08000108 <__udivsi3>:
 8000108:	2200      	movs	r2, #0
 800010a:	0843      	lsrs	r3, r0, #1
 800010c:	428b      	cmp	r3, r1
 800010e:	d374      	bcc.n	80001fa <__udivsi3+0xf2>
 8000110:	0903      	lsrs	r3, r0, #4
 8000112:	428b      	cmp	r3, r1
 8000114:	d35f      	bcc.n	80001d6 <__udivsi3+0xce>
 8000116:	0a03      	lsrs	r3, r0, #8
 8000118:	428b      	cmp	r3, r1
 800011a:	d344      	bcc.n	80001a6 <__udivsi3+0x9e>
 800011c:	0b03      	lsrs	r3, r0, #12
 800011e:	428b      	cmp	r3, r1
 8000120:	d328      	bcc.n	8000174 <__udivsi3+0x6c>
 8000122:	0c03      	lsrs	r3, r0, #16
 8000124:	428b      	cmp	r3, r1
 8000126:	d30d      	bcc.n	8000144 <__udivsi3+0x3c>
 8000128:	22ff      	movs	r2, #255	; 0xff
 800012a:	0209      	lsls	r1, r1, #8
 800012c:	ba12      	rev	r2, r2
 800012e:	0c03      	lsrs	r3, r0, #16
 8000130:	428b      	cmp	r3, r1
 8000132:	d302      	bcc.n	800013a <__udivsi3+0x32>
 8000134:	1212      	asrs	r2, r2, #8
 8000136:	0209      	lsls	r1, r1, #8
 8000138:	d065      	beq.n	8000206 <__udivsi3+0xfe>
 800013a:	0b03      	lsrs	r3, r0, #12
 800013c:	428b      	cmp	r3, r1
 800013e:	d319      	bcc.n	8000174 <__udivsi3+0x6c>
 8000140:	e000      	b.n	8000144 <__udivsi3+0x3c>
 8000142:	0a09      	lsrs	r1, r1, #8
 8000144:	0bc3      	lsrs	r3, r0, #15
 8000146:	428b      	cmp	r3, r1
 8000148:	d301      	bcc.n	800014e <__udivsi3+0x46>
 800014a:	03cb      	lsls	r3, r1, #15
 800014c:	1ac0      	subs	r0, r0, r3
 800014e:	4152      	adcs	r2, r2
 8000150:	0b83      	lsrs	r3, r0, #14
 8000152:	428b      	cmp	r3, r1
 8000154:	d301      	bcc.n	800015a <__udivsi3+0x52>
 8000156:	038b      	lsls	r3, r1, #14
 8000158:	1ac0      	subs	r0, r0, r3
 800015a:	4152      	adcs	r2, r2
 800015c:	0b43      	lsrs	r3, r0, #13
 800015e:	428b      	cmp	r3, r1
 8000160:	d301      	bcc.n	8000166 <__udivsi3+0x5e>
 8000162:	034b      	lsls	r3, r1, #13
 8000164:	1ac0      	subs	r0, r0, r3
 8000166:	4152      	adcs	r2, r2
 8000168:	0b03      	lsrs	r3, r0, #12
 800016a:	428b      	cmp	r3, r1
 800016c:	d301      	bcc.n	8000172 <__udivsi3+0x6a>
 800016e:	030b      	lsls	r3, r1, #12
 8000170:	1ac0      	subs	r0, r0, r3
 8000172:	4152      	adcs	r2, r2
 8000174:	0ac3      	lsrs	r3, r0, #11
 8000176:	428b      	cmp	r3, r1
 8000178:	d301      	bcc.n	800017e <__udivsi3+0x76>
 800017a:	02cb      	lsls	r3, r1, #11
 800017c:	1ac0      	subs	r0, r0, r3
 800017e:	4152      	adcs	r2, r2
 8000180:	0a83      	lsrs	r3, r0, #10
 8000182:	428b      	cmp	r3, r1
 8000184:	d301      	bcc.n	800018a <__udivsi3+0x82>
 8000186:	028b      	lsls	r3, r1, #10
 8000188:	1ac0      	subs	r0, r0, r3
 800018a:	4152      	adcs	r2, r2
 800018c:	0a43      	lsrs	r3, r0, #9
 800018e:	428b      	cmp	r3, r1
 8000190:	d301      	bcc.n	8000196 <__udivsi3+0x8e>
 8000192:	024b      	lsls	r3, r1, #9
 8000194:	1ac0      	subs	r0, r0, r3
 8000196:	4152      	adcs	r2, r2
 8000198:	0a03      	lsrs	r3, r0, #8
 800019a:	428b      	cmp	r3, r1
 800019c:	d301      	bcc.n	80001a2 <__udivsi3+0x9a>
 800019e:	020b      	lsls	r3, r1, #8
 80001a0:	1ac0      	subs	r0, r0, r3
 80001a2:	4152      	adcs	r2, r2
 80001a4:	d2cd      	bcs.n	8000142 <__udivsi3+0x3a>
 80001a6:	09c3      	lsrs	r3, r0, #7
 80001a8:	428b      	cmp	r3, r1
 80001aa:	d301      	bcc.n	80001b0 <__udivsi3+0xa8>
 80001ac:	01cb      	lsls	r3, r1, #7
 80001ae:	1ac0      	subs	r0, r0, r3
 80001b0:	4152      	adcs	r2, r2
 80001b2:	0983      	lsrs	r3, r0, #6
 80001b4:	428b      	cmp	r3, r1
 80001b6:	d301      	bcc.n	80001bc <__udivsi3+0xb4>
 80001b8:	018b      	lsls	r3, r1, #6
 80001ba:	1ac0      	subs	r0, r0, r3
 80001bc:	4152      	adcs	r2, r2
 80001be:	0943      	lsrs	r3, r0, #5
 80001c0:	428b      	cmp	r3, r1
 80001c2:	d301      	bcc.n	80001c8 <__udivsi3+0xc0>
 80001c4:	014b      	lsls	r3, r1, #5
 80001c6:	1ac0      	subs	r0, r0, r3
 80001c8:	4152      	adcs	r2, r2
 80001ca:	0903      	lsrs	r3, r0, #4
 80001cc:	428b      	cmp	r3, r1
 80001ce:	d301      	bcc.n	80001d4 <__udivsi3+0xcc>
 80001d0:	010b      	lsls	r3, r1, #4
 80001d2:	1ac0      	subs	r0, r0, r3
 80001d4:	4152      	adcs	r2, r2
 80001d6:	08c3      	lsrs	r3, r0, #3
 80001d8:	428b      	cmp	r3, r1
 80001da:	d301      	bcc.n	80001e0 <__udivsi3+0xd8>
 80001dc:	00cb      	lsls	r3, r1, #3
 80001de:	1ac0      	subs	r0, r0, r3
 80001e0:	4152      	adcs	r2, r2
 80001e2:	0883      	lsrs	r3, r0, #2
 80001e4:	428b      	cmp	r3, r1
 80001e6:	d301      	bcc.n	80001ec <__udivsi3+0xe4>
 80001e8:	008b      	lsls	r3, r1, #2
 80001ea:	1ac0      	subs	r0, r0, r3
 80001ec:	4152      	adcs	r2, r2
 80001ee:	0843      	lsrs	r3, r0, #1
 80001f0:	428b      	cmp	r3, r1
 80001f2:	d301      	bcc.n	80001f8 <__udivsi3+0xf0>
 80001f4:	004b      	lsls	r3, r1, #1
 80001f6:	1ac0      	subs	r0, r0, r3
 80001f8:	4152      	adcs	r2, r2
 80001fa:	1a41      	subs	r1, r0, r1
 80001fc:	d200      	bcs.n	8000200 <__udivsi3+0xf8>
 80001fe:	4601      	mov	r1, r0
 8000200:	4152      	adcs	r2, r2
 8000202:	4610      	mov	r0, r2
 8000204:	4770      	bx	lr
 8000206:	e7ff      	b.n	8000208 <__udivsi3+0x100>
 8000208:	b501      	push	{r0, lr}
 800020a:	2000      	movs	r0, #0
 800020c:	f000 f8f0 	bl	80003f0 <__aeabi_idiv0>
 8000210:	bd02      	pop	{r1, pc}
 8000212:	46c0      	nop			; (mov r8, r8)

08000214 <__aeabi_uidivmod>:
 8000214:	2900      	cmp	r1, #0
 8000216:	d0f7      	beq.n	8000208 <__udivsi3+0x100>
 8000218:	e776      	b.n	8000108 <__udivsi3>
 800021a:	4770      	bx	lr

0800021c <__divsi3>:
 800021c:	4603      	mov	r3, r0
 800021e:	430b      	orrs	r3, r1
 8000220:	d47f      	bmi.n	8000322 <__divsi3+0x106>
 8000222:	2200      	movs	r2, #0
 8000224:	0843      	lsrs	r3, r0, #1
 8000226:	428b      	cmp	r3, r1
 8000228:	d374      	bcc.n	8000314 <__divsi3+0xf8>
 800022a:	0903      	lsrs	r3, r0, #4
 800022c:	428b      	cmp	r3, r1
 800022e:	d35f      	bcc.n	80002f0 <__divsi3+0xd4>
 8000230:	0a03      	lsrs	r3, r0, #8
 8000232:	428b      	cmp	r3, r1
 8000234:	d344      	bcc.n	80002c0 <__divsi3+0xa4>
 8000236:	0b03      	lsrs	r3, r0, #12
 8000238:	428b      	cmp	r3, r1
 800023a:	d328      	bcc.n	800028e <__divsi3+0x72>
 800023c:	0c03      	lsrs	r3, r0, #16
 800023e:	428b      	cmp	r3, r1
 8000240:	d30d      	bcc.n	800025e <__divsi3+0x42>
 8000242:	22ff      	movs	r2, #255	; 0xff
 8000244:	0209      	lsls	r1, r1, #8
 8000246:	ba12      	rev	r2, r2
 8000248:	0c03      	lsrs	r3, r0, #16
 800024a:	428b      	cmp	r3, r1
 800024c:	d302      	bcc.n	8000254 <__divsi3+0x38>
 800024e:	1212      	asrs	r2, r2, #8
 8000250:	0209      	lsls	r1, r1, #8
 8000252:	d065      	beq.n	8000320 <__divsi3+0x104>
 8000254:	0b03      	lsrs	r3, r0, #12
 8000256:	428b      	cmp	r3, r1
 8000258:	d319      	bcc.n	800028e <__divsi3+0x72>
 800025a:	e000      	b.n	800025e <__divsi3+0x42>
 800025c:	0a09      	lsrs	r1, r1, #8
 800025e:	0bc3      	lsrs	r3, r0, #15
 8000260:	428b      	cmp	r3, r1
 8000262:	d301      	bcc.n	8000268 <__divsi3+0x4c>
 8000264:	03cb      	lsls	r3, r1, #15
 8000266:	1ac0      	subs	r0, r0, r3
 8000268:	4152      	adcs	r2, r2
 800026a:	0b83      	lsrs	r3, r0, #14
 800026c:	428b      	cmp	r3, r1
 800026e:	d301      	bcc.n	8000274 <__divsi3+0x58>
 8000270:	038b      	lsls	r3, r1, #14
 8000272:	1ac0      	subs	r0, r0, r3
 8000274:	4152      	adcs	r2, r2
 8000276:	0b43      	lsrs	r3, r0, #13
 8000278:	428b      	cmp	r3, r1
 800027a:	d301      	bcc.n	8000280 <__divsi3+0x64>
 800027c:	034b      	lsls	r3, r1, #13
 800027e:	1ac0      	subs	r0, r0, r3
 8000280:	4152      	adcs	r2, r2
 8000282:	0b03      	lsrs	r3, r0, #12
 8000284:	428b      	cmp	r3, r1
 8000286:	d301      	bcc.n	800028c <__divsi3+0x70>
 8000288:	030b      	lsls	r3, r1, #12
 800028a:	1ac0      	subs	r0, r0, r3
 800028c:	4152      	adcs	r2, r2
 800028e:	0ac3      	lsrs	r3, r0, #11
 8000290:	428b      	cmp	r3, r1
 8000292:	d301      	bcc.n	8000298 <__divsi3+0x7c>
 8000294:	02cb      	lsls	r3, r1, #11
 8000296:	1ac0      	subs	r0, r0, r3
 8000298:	4152      	adcs	r2, r2
 800029a:	0a83      	lsrs	r3, r0, #10
 800029c:	428b      	cmp	r3, r1
 800029e:	d301      	bcc.n	80002a4 <__divsi3+0x88>
 80002a0:	028b      	lsls	r3, r1, #10
 80002a2:	1ac0      	subs	r0, r0, r3
 80002a4:	4152      	adcs	r2, r2
 80002a6:	0a43      	lsrs	r3, r0, #9
 80002a8:	428b      	cmp	r3, r1
 80002aa:	d301      	bcc.n	80002b0 <__divsi3+0x94>
 80002ac:	024b      	lsls	r3, r1, #9
 80002ae:	1ac0      	subs	r0, r0, r3
 80002b0:	4152      	adcs	r2, r2
 80002b2:	0a03      	lsrs	r3, r0, #8
 80002b4:	428b      	cmp	r3, r1
 80002b6:	d301      	bcc.n	80002bc <__divsi3+0xa0>
 80002b8:	020b      	lsls	r3, r1, #8
 80002ba:	1ac0      	subs	r0, r0, r3
 80002bc:	4152      	adcs	r2, r2
 80002be:	d2cd      	bcs.n	800025c <__divsi3+0x40>
 80002c0:	09c3      	lsrs	r3, r0, #7
 80002c2:	428b      	cmp	r3, r1
 80002c4:	d301      	bcc.n	80002ca <__divsi3+0xae>
 80002c6:	01cb      	lsls	r3, r1, #7
 80002c8:	1ac0      	subs	r0, r0, r3
 80002ca:	4152      	adcs	r2, r2
 80002cc:	0983      	lsrs	r3, r0, #6
 80002ce:	428b      	cmp	r3, r1
 80002d0:	d301      	bcc.n	80002d6 <__divsi3+0xba>
 80002d2:	018b      	lsls	r3, r1, #6
 80002d4:	1ac0      	subs	r0, r0, r3
 80002d6:	4152      	adcs	r2, r2
 80002d8:	0943      	lsrs	r3, r0, #5
 80002da:	428b      	cmp	r3, r1
 80002dc:	d301      	bcc.n	80002e2 <__divsi3+0xc6>
 80002de:	014b      	lsls	r3, r1, #5
 80002e0:	1ac0      	subs	r0, r0, r3
 80002e2:	4152      	adcs	r2, r2
 80002e4:	0903      	lsrs	r3, r0, #4
 80002e6:	428b      	cmp	r3, r1
 80002e8:	d301      	bcc.n	80002ee <__divsi3+0xd2>
 80002ea:	010b      	lsls	r3, r1, #4
 80002ec:	1ac0      	subs	r0, r0, r3
 80002ee:	4152      	adcs	r2, r2
 80002f0:	08c3      	lsrs	r3, r0, #3
 80002f2:	428b      	cmp	r3, r1
 80002f4:	d301      	bcc.n	80002fa <__divsi3+0xde>
 80002f6:	00cb      	lsls	r3, r1, #3
 80002f8:	1ac0      	subs	r0, r0, r3
 80002fa:	4152      	adcs	r2, r2
 80002fc:	0883      	lsrs	r3, r0, #2
 80002fe:	428b      	cmp	r3, r1
 8000300:	d301      	bcc.n	8000306 <__divsi3+0xea>
 8000302:	008b      	lsls	r3, r1, #2
 8000304:	1ac0      	subs	r0, r0, r3
 8000306:	4152      	adcs	r2, r2
 8000308:	0843      	lsrs	r3, r0, #1
 800030a:	428b      	cmp	r3, r1
 800030c:	d301      	bcc.n	8000312 <__divsi3+0xf6>
 800030e:	004b      	lsls	r3, r1, #1
 8000310:	1ac0      	subs	r0, r0, r3
 8000312:	4152      	adcs	r2, r2
 8000314:	1a41      	subs	r1, r0, r1
 8000316:	d200      	bcs.n	800031a <__divsi3+0xfe>
 8000318:	4601      	mov	r1, r0
 800031a:	4152      	adcs	r2, r2
 800031c:	4610      	mov	r0, r2
 800031e:	4770      	bx	lr
 8000320:	e05d      	b.n	80003de <__divsi3+0x1c2>
 8000322:	0fca      	lsrs	r2, r1, #31
 8000324:	d000      	beq.n	8000328 <__divsi3+0x10c>
 8000326:	4249      	negs	r1, r1
 8000328:	1003      	asrs	r3, r0, #32
 800032a:	d300      	bcc.n	800032e <__divsi3+0x112>
 800032c:	4240      	negs	r0, r0
 800032e:	4053      	eors	r3, r2
 8000330:	2200      	movs	r2, #0
 8000332:	469c      	mov	ip, r3
 8000334:	0903      	lsrs	r3, r0, #4
 8000336:	428b      	cmp	r3, r1
 8000338:	d32d      	bcc.n	8000396 <__divsi3+0x17a>
 800033a:	0a03      	lsrs	r3, r0, #8
 800033c:	428b      	cmp	r3, r1
 800033e:	d312      	bcc.n	8000366 <__divsi3+0x14a>
 8000340:	22fc      	movs	r2, #252	; 0xfc
 8000342:	0189      	lsls	r1, r1, #6
 8000344:	ba12      	rev	r2, r2
 8000346:	0a03      	lsrs	r3, r0, #8
 8000348:	428b      	cmp	r3, r1
 800034a:	d30c      	bcc.n	8000366 <__divsi3+0x14a>
 800034c:	0189      	lsls	r1, r1, #6
 800034e:	1192      	asrs	r2, r2, #6
 8000350:	428b      	cmp	r3, r1
 8000352:	d308      	bcc.n	8000366 <__divsi3+0x14a>
 8000354:	0189      	lsls	r1, r1, #6
 8000356:	1192      	asrs	r2, r2, #6
 8000358:	428b      	cmp	r3, r1
 800035a:	d304      	bcc.n	8000366 <__divsi3+0x14a>
 800035c:	0189      	lsls	r1, r1, #6
 800035e:	d03a      	beq.n	80003d6 <__divsi3+0x1ba>
 8000360:	1192      	asrs	r2, r2, #6
 8000362:	e000      	b.n	8000366 <__divsi3+0x14a>
 8000364:	0989      	lsrs	r1, r1, #6
 8000366:	09c3      	lsrs	r3, r0, #7
 8000368:	428b      	cmp	r3, r1
 800036a:	d301      	bcc.n	8000370 <__divsi3+0x154>
 800036c:	01cb      	lsls	r3, r1, #7
 800036e:	1ac0      	subs	r0, r0, r3
 8000370:	4152      	adcs	r2, r2
 8000372:	0983      	lsrs	r3, r0, #6
 8000374:	428b      	cmp	r3, r1
 8000376:	d301      	bcc.n	800037c <__divsi3+0x160>
 8000378:	018b      	lsls	r3, r1, #6
 800037a:	1ac0      	subs	r0, r0, r3
 800037c:	4152      	adcs	r2, r2
 800037e:	0943      	lsrs	r3, r0, #5
 8000380:	428b      	cmp	r3, r1
 8000382:	d301      	bcc.n	8000388 <__divsi3+0x16c>
 8000384:	014b      	lsls	r3, r1, #5
 8000386:	1ac0      	subs	r0, r0, r3
 8000388:	4152      	adcs	r2, r2
 800038a:	0903      	lsrs	r3, r0, #4
 800038c:	428b      	cmp	r3, r1
 800038e:	d301      	bcc.n	8000394 <__divsi3+0x178>
 8000390:	010b      	lsls	r3, r1, #4
 8000392:	1ac0      	subs	r0, r0, r3
 8000394:	4152      	adcs	r2, r2
 8000396:	08c3      	lsrs	r3, r0, #3
 8000398:	428b      	cmp	r3, r1
 800039a:	d301      	bcc.n	80003a0 <__divsi3+0x184>
 800039c:	00cb      	lsls	r3, r1, #3
 800039e:	1ac0      	subs	r0, r0, r3
 80003a0:	4152      	adcs	r2, r2
 80003a2:	0883      	lsrs	r3, r0, #2
 80003a4:	428b      	cmp	r3, r1
 80003a6:	d301      	bcc.n	80003ac <__divsi3+0x190>
 80003a8:	008b      	lsls	r3, r1, #2
 80003aa:	1ac0      	subs	r0, r0, r3
 80003ac:	4152      	adcs	r2, r2
 80003ae:	d2d9      	bcs.n	8000364 <__divsi3+0x148>
 80003b0:	0843      	lsrs	r3, r0, #1
 80003b2:	428b      	cmp	r3, r1
 80003b4:	d301      	bcc.n	80003ba <__divsi3+0x19e>
 80003b6:	004b      	lsls	r3, r1, #1
 80003b8:	1ac0      	subs	r0, r0, r3
 80003ba:	4152      	adcs	r2, r2
 80003bc:	1a41      	subs	r1, r0, r1
 80003be:	d200      	bcs.n	80003c2 <__divsi3+0x1a6>
 80003c0:	4601      	mov	r1, r0
 80003c2:	4663      	mov	r3, ip
 80003c4:	4152      	adcs	r2, r2
 80003c6:	105b      	asrs	r3, r3, #1
 80003c8:	4610      	mov	r0, r2
 80003ca:	d301      	bcc.n	80003d0 <__divsi3+0x1b4>
 80003cc:	4240      	negs	r0, r0
 80003ce:	2b00      	cmp	r3, #0
 80003d0:	d500      	bpl.n	80003d4 <__divsi3+0x1b8>
 80003d2:	4249      	negs	r1, r1
 80003d4:	4770      	bx	lr
 80003d6:	4663      	mov	r3, ip
 80003d8:	105b      	asrs	r3, r3, #1
 80003da:	d300      	bcc.n	80003de <__divsi3+0x1c2>
 80003dc:	4240      	negs	r0, r0
 80003de:	b501      	push	{r0, lr}
 80003e0:	2000      	movs	r0, #0
 80003e2:	f000 f805 	bl	80003f0 <__aeabi_idiv0>
 80003e6:	bd02      	pop	{r1, pc}

080003e8 <__aeabi_idivmod>:
 80003e8:	2900      	cmp	r1, #0
 80003ea:	d0f8      	beq.n	80003de <__divsi3+0x1c2>
 80003ec:	e716      	b.n	800021c <__divsi3>
 80003ee:	4770      	bx	lr

080003f0 <__aeabi_idiv0>:
 80003f0:	4770      	bx	lr
 80003f2:	46c0      	nop			; (mov r8, r8)

080003f4 <__aeabi_cdrcmple>:
 80003f4:	4684      	mov	ip, r0
 80003f6:	0010      	movs	r0, r2
 80003f8:	4662      	mov	r2, ip
 80003fa:	468c      	mov	ip, r1
 80003fc:	0019      	movs	r1, r3
 80003fe:	4663      	mov	r3, ip
 8000400:	e000      	b.n	8000404 <__aeabi_cdcmpeq>
 8000402:	46c0      	nop			; (mov r8, r8)

08000404 <__aeabi_cdcmpeq>:
 8000404:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 8000406:	f001 fe7d 	bl	8002104 <__ledf2>
 800040a:	2800      	cmp	r0, #0
 800040c:	d401      	bmi.n	8000412 <__aeabi_cdcmpeq+0xe>
 800040e:	2100      	movs	r1, #0
 8000410:	42c8      	cmn	r0, r1
 8000412:	bd1f      	pop	{r0, r1, r2, r3, r4, pc}

08000414 <__aeabi_dcmpeq>:
 8000414:	b510      	push	{r4, lr}
 8000416:	f001 fdcd 	bl	8001fb4 <__eqdf2>
 800041a:	4240      	negs	r0, r0
 800041c:	3001      	adds	r0, #1
 800041e:	bd10      	pop	{r4, pc}

08000420 <__aeabi_dcmplt>:
 8000420:	b510      	push	{r4, lr}
 8000422:	f001 fe6f 	bl	8002104 <__ledf2>
 8000426:	2800      	cmp	r0, #0
 8000428:	db01      	blt.n	800042e <__aeabi_dcmplt+0xe>
 800042a:	2000      	movs	r0, #0
 800042c:	bd10      	pop	{r4, pc}
 800042e:	2001      	movs	r0, #1
 8000430:	bd10      	pop	{r4, pc}
 8000432:	46c0      	nop			; (mov r8, r8)

08000434 <__aeabi_dcmple>:
 8000434:	b510      	push	{r4, lr}
 8000436:	f001 fe65 	bl	8002104 <__ledf2>
 800043a:	2800      	cmp	r0, #0
 800043c:	dd01      	ble.n	8000442 <__aeabi_dcmple+0xe>
 800043e:	2000      	movs	r0, #0
 8000440:	bd10      	pop	{r4, pc}
 8000442:	2001      	movs	r0, #1
 8000444:	bd10      	pop	{r4, pc}
 8000446:	46c0      	nop			; (mov r8, r8)

08000448 <__aeabi_dcmpgt>:
 8000448:	b510      	push	{r4, lr}
 800044a:	f001 fdf5 	bl	8002038 <__gedf2>
 800044e:	2800      	cmp	r0, #0
 8000450:	dc01      	bgt.n	8000456 <__aeabi_dcmpgt+0xe>
 8000452:	2000      	movs	r0, #0
 8000454:	bd10      	pop	{r4, pc}
 8000456:	2001      	movs	r0, #1
 8000458:	bd10      	pop	{r4, pc}
 800045a:	46c0      	nop			; (mov r8, r8)

0800045c <__aeabi_dcmpge>:
 800045c:	b510      	push	{r4, lr}
 800045e:	f001 fdeb 	bl	8002038 <__gedf2>
 8000462:	2800      	cmp	r0, #0
 8000464:	da01      	bge.n	800046a <__aeabi_dcmpge+0xe>
 8000466:	2000      	movs	r0, #0
 8000468:	bd10      	pop	{r4, pc}
 800046a:	2001      	movs	r0, #1
 800046c:	bd10      	pop	{r4, pc}
 800046e:	46c0      	nop			; (mov r8, r8)

08000470 <__aeabi_cfrcmple>:
 8000470:	4684      	mov	ip, r0
 8000472:	0008      	movs	r0, r1
 8000474:	4661      	mov	r1, ip
 8000476:	e7ff      	b.n	8000478 <__aeabi_cfcmpeq>

08000478 <__aeabi_cfcmpeq>:
 8000478:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 800047a:	f000 fb8b 	bl	8000b94 <__lesf2>
 800047e:	2800      	cmp	r0, #0
 8000480:	d401      	bmi.n	8000486 <__aeabi_cfcmpeq+0xe>
 8000482:	2100      	movs	r1, #0
 8000484:	42c8      	cmn	r0, r1
 8000486:	bd1f      	pop	{r0, r1, r2, r3, r4, pc}

08000488 <__aeabi_fcmpeq>:
 8000488:	b510      	push	{r4, lr}
 800048a:	f000 fb17 	bl	8000abc <__eqsf2>
 800048e:	4240      	negs	r0, r0
 8000490:	3001      	adds	r0, #1
 8000492:	bd10      	pop	{r4, pc}

08000494 <__aeabi_fcmplt>:
 8000494:	b510      	push	{r4, lr}
 8000496:	f000 fb7d 	bl	8000b94 <__lesf2>
 800049a:	2800      	cmp	r0, #0
 800049c:	db01      	blt.n	80004a2 <__aeabi_fcmplt+0xe>
 800049e:	2000      	movs	r0, #0
 80004a0:	bd10      	pop	{r4, pc}
 80004a2:	2001      	movs	r0, #1
 80004a4:	bd10      	pop	{r4, pc}
 80004a6:	46c0      	nop			; (mov r8, r8)

080004a8 <__aeabi_fcmple>:
 80004a8:	b510      	push	{r4, lr}
 80004aa:	f000 fb73 	bl	8000b94 <__lesf2>
 80004ae:	2800      	cmp	r0, #0
 80004b0:	dd01      	ble.n	80004b6 <__aeabi_fcmple+0xe>
 80004b2:	2000      	movs	r0, #0
 80004b4:	bd10      	pop	{r4, pc}
 80004b6:	2001      	movs	r0, #1
 80004b8:	bd10      	pop	{r4, pc}
 80004ba:	46c0      	nop			; (mov r8, r8)

080004bc <__aeabi_fcmpgt>:
 80004bc:	b510      	push	{r4, lr}
 80004be:	f000 fb23 	bl	8000b08 <__gesf2>
 80004c2:	2800      	cmp	r0, #0
 80004c4:	dc01      	bgt.n	80004ca <__aeabi_fcmpgt+0xe>
 80004c6:	2000      	movs	r0, #0
 80004c8:	bd10      	pop	{r4, pc}
 80004ca:	2001      	movs	r0, #1
 80004cc:	bd10      	pop	{r4, pc}
 80004ce:	46c0      	nop			; (mov r8, r8)

080004d0 <__aeabi_fcmpge>:
 80004d0:	b510      	push	{r4, lr}
 80004d2:	f000 fb19 	bl	8000b08 <__gesf2>
 80004d6:	2800      	cmp	r0, #0
 80004d8:	da01      	bge.n	80004de <__aeabi_fcmpge+0xe>
 80004da:	2000      	movs	r0, #0
 80004dc:	bd10      	pop	{r4, pc}
 80004de:	2001      	movs	r0, #1
 80004e0:	bd10      	pop	{r4, pc}
 80004e2:	46c0      	nop			; (mov r8, r8)

080004e4 <__aeabi_f2uiz>:
 80004e4:	219e      	movs	r1, #158	; 0x9e
 80004e6:	b510      	push	{r4, lr}
 80004e8:	05c9      	lsls	r1, r1, #23
 80004ea:	1c04      	adds	r4, r0, #0
 80004ec:	f7ff fff0 	bl	80004d0 <__aeabi_fcmpge>
 80004f0:	2800      	cmp	r0, #0
 80004f2:	d103      	bne.n	80004fc <__aeabi_f2uiz+0x18>
 80004f4:	1c20      	adds	r0, r4, #0
 80004f6:	f000 fe7b 	bl	80011f0 <__aeabi_f2iz>
 80004fa:	bd10      	pop	{r4, pc}
 80004fc:	219e      	movs	r1, #158	; 0x9e
 80004fe:	1c20      	adds	r0, r4, #0
 8000500:	05c9      	lsls	r1, r1, #23
 8000502:	f000 fcb1 	bl	8000e68 <__aeabi_fsub>
 8000506:	f000 fe73 	bl	80011f0 <__aeabi_f2iz>
 800050a:	2380      	movs	r3, #128	; 0x80
 800050c:	061b      	lsls	r3, r3, #24
 800050e:	469c      	mov	ip, r3
 8000510:	4460      	add	r0, ip
 8000512:	e7f2      	b.n	80004fa <__aeabi_f2uiz+0x16>

08000514 <__aeabi_d2uiz>:
 8000514:	b570      	push	{r4, r5, r6, lr}
 8000516:	2200      	movs	r2, #0
 8000518:	4b0c      	ldr	r3, [pc, #48]	; (800054c <__aeabi_d2uiz+0x38>)
 800051a:	0004      	movs	r4, r0
 800051c:	000d      	movs	r5, r1
 800051e:	f7ff ff9d 	bl	800045c <__aeabi_dcmpge>
 8000522:	2800      	cmp	r0, #0
 8000524:	d104      	bne.n	8000530 <__aeabi_d2uiz+0x1c>
 8000526:	0020      	movs	r0, r4
 8000528:	0029      	movs	r1, r5
 800052a:	f002 fc6b 	bl	8002e04 <__aeabi_d2iz>
 800052e:	bd70      	pop	{r4, r5, r6, pc}
 8000530:	4b06      	ldr	r3, [pc, #24]	; (800054c <__aeabi_d2uiz+0x38>)
 8000532:	2200      	movs	r2, #0
 8000534:	0020      	movs	r0, r4
 8000536:	0029      	movs	r1, r5
 8000538:	f002 f8b4 	bl	80026a4 <__aeabi_dsub>
 800053c:	f002 fc62 	bl	8002e04 <__aeabi_d2iz>
 8000540:	2380      	movs	r3, #128	; 0x80
 8000542:	061b      	lsls	r3, r3, #24
 8000544:	469c      	mov	ip, r3
 8000546:	4460      	add	r0, ip
 8000548:	e7f1      	b.n	800052e <__aeabi_d2uiz+0x1a>
 800054a:	46c0      	nop			; (mov r8, r8)
 800054c:	41e00000 	.word	0x41e00000

08000550 <__aeabi_fadd>:
 8000550:	b5f0      	push	{r4, r5, r6, r7, lr}
 8000552:	46c6      	mov	lr, r8
 8000554:	0243      	lsls	r3, r0, #9
 8000556:	0a5b      	lsrs	r3, r3, #9
 8000558:	024e      	lsls	r6, r1, #9
 800055a:	0045      	lsls	r5, r0, #1
 800055c:	004f      	lsls	r7, r1, #1
 800055e:	00da      	lsls	r2, r3, #3
 8000560:	0fc4      	lsrs	r4, r0, #31
 8000562:	469c      	mov	ip, r3
 8000564:	0a70      	lsrs	r0, r6, #9
 8000566:	4690      	mov	r8, r2
 8000568:	b500      	push	{lr}
 800056a:	0e2d      	lsrs	r5, r5, #24
 800056c:	0e3f      	lsrs	r7, r7, #24
 800056e:	0fc9      	lsrs	r1, r1, #31
 8000570:	09b6      	lsrs	r6, r6, #6
 8000572:	428c      	cmp	r4, r1
 8000574:	d04b      	beq.n	800060e <__aeabi_fadd+0xbe>
 8000576:	1bea      	subs	r2, r5, r7
 8000578:	2a00      	cmp	r2, #0
 800057a:	dd36      	ble.n	80005ea <__aeabi_fadd+0x9a>
 800057c:	2f00      	cmp	r7, #0
 800057e:	d061      	beq.n	8000644 <__aeabi_fadd+0xf4>
 8000580:	2dff      	cmp	r5, #255	; 0xff
 8000582:	d100      	bne.n	8000586 <__aeabi_fadd+0x36>
 8000584:	e0ad      	b.n	80006e2 <__aeabi_fadd+0x192>
 8000586:	2380      	movs	r3, #128	; 0x80
 8000588:	04db      	lsls	r3, r3, #19
 800058a:	431e      	orrs	r6, r3
 800058c:	2a1b      	cmp	r2, #27
 800058e:	dc00      	bgt.n	8000592 <__aeabi_fadd+0x42>
 8000590:	e0d3      	b.n	800073a <__aeabi_fadd+0x1ea>
 8000592:	2001      	movs	r0, #1
 8000594:	4643      	mov	r3, r8
 8000596:	1a18      	subs	r0, r3, r0
 8000598:	0143      	lsls	r3, r0, #5
 800059a:	d400      	bmi.n	800059e <__aeabi_fadd+0x4e>
 800059c:	e08c      	b.n	80006b8 <__aeabi_fadd+0x168>
 800059e:	0180      	lsls	r0, r0, #6
 80005a0:	0987      	lsrs	r7, r0, #6
 80005a2:	0038      	movs	r0, r7
 80005a4:	f002 fd8a 	bl	80030bc <__clzsi2>
 80005a8:	3805      	subs	r0, #5
 80005aa:	4087      	lsls	r7, r0
 80005ac:	4285      	cmp	r5, r0
 80005ae:	dc00      	bgt.n	80005b2 <__aeabi_fadd+0x62>
 80005b0:	e0b6      	b.n	8000720 <__aeabi_fadd+0x1d0>
 80005b2:	1a2d      	subs	r5, r5, r0
 80005b4:	48b3      	ldr	r0, [pc, #716]	; (8000884 <__aeabi_fadd+0x334>)
 80005b6:	4038      	ands	r0, r7
 80005b8:	0743      	lsls	r3, r0, #29
 80005ba:	d004      	beq.n	80005c6 <__aeabi_fadd+0x76>
 80005bc:	230f      	movs	r3, #15
 80005be:	4003      	ands	r3, r0
 80005c0:	2b04      	cmp	r3, #4
 80005c2:	d000      	beq.n	80005c6 <__aeabi_fadd+0x76>
 80005c4:	3004      	adds	r0, #4
 80005c6:	0143      	lsls	r3, r0, #5
 80005c8:	d400      	bmi.n	80005cc <__aeabi_fadd+0x7c>
 80005ca:	e078      	b.n	80006be <__aeabi_fadd+0x16e>
 80005cc:	1c6a      	adds	r2, r5, #1
 80005ce:	2dfe      	cmp	r5, #254	; 0xfe
 80005d0:	d065      	beq.n	800069e <__aeabi_fadd+0x14e>
 80005d2:	0180      	lsls	r0, r0, #6
 80005d4:	0a43      	lsrs	r3, r0, #9
 80005d6:	469c      	mov	ip, r3
 80005d8:	b2d2      	uxtb	r2, r2
 80005da:	4663      	mov	r3, ip
 80005dc:	05d0      	lsls	r0, r2, #23
 80005de:	4318      	orrs	r0, r3
 80005e0:	07e4      	lsls	r4, r4, #31
 80005e2:	4320      	orrs	r0, r4
 80005e4:	bc80      	pop	{r7}
 80005e6:	46b8      	mov	r8, r7
 80005e8:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80005ea:	2a00      	cmp	r2, #0
 80005ec:	d035      	beq.n	800065a <__aeabi_fadd+0x10a>
 80005ee:	1b7a      	subs	r2, r7, r5
 80005f0:	2d00      	cmp	r5, #0
 80005f2:	d000      	beq.n	80005f6 <__aeabi_fadd+0xa6>
 80005f4:	e0af      	b.n	8000756 <__aeabi_fadd+0x206>
 80005f6:	4643      	mov	r3, r8
 80005f8:	2b00      	cmp	r3, #0
 80005fa:	d100      	bne.n	80005fe <__aeabi_fadd+0xae>
 80005fc:	e0a7      	b.n	800074e <__aeabi_fadd+0x1fe>
 80005fe:	1e53      	subs	r3, r2, #1
 8000600:	2a01      	cmp	r2, #1
 8000602:	d100      	bne.n	8000606 <__aeabi_fadd+0xb6>
 8000604:	e12f      	b.n	8000866 <__aeabi_fadd+0x316>
 8000606:	2aff      	cmp	r2, #255	; 0xff
 8000608:	d069      	beq.n	80006de <__aeabi_fadd+0x18e>
 800060a:	001a      	movs	r2, r3
 800060c:	e0aa      	b.n	8000764 <__aeabi_fadd+0x214>
 800060e:	1be9      	subs	r1, r5, r7
 8000610:	2900      	cmp	r1, #0
 8000612:	dd70      	ble.n	80006f6 <__aeabi_fadd+0x1a6>
 8000614:	2f00      	cmp	r7, #0
 8000616:	d037      	beq.n	8000688 <__aeabi_fadd+0x138>
 8000618:	2dff      	cmp	r5, #255	; 0xff
 800061a:	d062      	beq.n	80006e2 <__aeabi_fadd+0x192>
 800061c:	2380      	movs	r3, #128	; 0x80
 800061e:	04db      	lsls	r3, r3, #19
 8000620:	431e      	orrs	r6, r3
 8000622:	291b      	cmp	r1, #27
 8000624:	dc00      	bgt.n	8000628 <__aeabi_fadd+0xd8>
 8000626:	e0b0      	b.n	800078a <__aeabi_fadd+0x23a>
 8000628:	2001      	movs	r0, #1
 800062a:	4440      	add	r0, r8
 800062c:	0143      	lsls	r3, r0, #5
 800062e:	d543      	bpl.n	80006b8 <__aeabi_fadd+0x168>
 8000630:	3501      	adds	r5, #1
 8000632:	2dff      	cmp	r5, #255	; 0xff
 8000634:	d033      	beq.n	800069e <__aeabi_fadd+0x14e>
 8000636:	2301      	movs	r3, #1
 8000638:	4a93      	ldr	r2, [pc, #588]	; (8000888 <__aeabi_fadd+0x338>)
 800063a:	4003      	ands	r3, r0
 800063c:	0840      	lsrs	r0, r0, #1
 800063e:	4010      	ands	r0, r2
 8000640:	4318      	orrs	r0, r3
 8000642:	e7b9      	b.n	80005b8 <__aeabi_fadd+0x68>
 8000644:	2e00      	cmp	r6, #0
 8000646:	d100      	bne.n	800064a <__aeabi_fadd+0xfa>
 8000648:	e083      	b.n	8000752 <__aeabi_fadd+0x202>
 800064a:	1e51      	subs	r1, r2, #1
 800064c:	2a01      	cmp	r2, #1
 800064e:	d100      	bne.n	8000652 <__aeabi_fadd+0x102>
 8000650:	e0d8      	b.n	8000804 <__aeabi_fadd+0x2b4>
 8000652:	2aff      	cmp	r2, #255	; 0xff
 8000654:	d045      	beq.n	80006e2 <__aeabi_fadd+0x192>
 8000656:	000a      	movs	r2, r1
 8000658:	e798      	b.n	800058c <__aeabi_fadd+0x3c>
 800065a:	27fe      	movs	r7, #254	; 0xfe
 800065c:	1c6a      	adds	r2, r5, #1
 800065e:	4217      	tst	r7, r2
 8000660:	d000      	beq.n	8000664 <__aeabi_fadd+0x114>
 8000662:	e086      	b.n	8000772 <__aeabi_fadd+0x222>
 8000664:	2d00      	cmp	r5, #0
 8000666:	d000      	beq.n	800066a <__aeabi_fadd+0x11a>
 8000668:	e0b7      	b.n	80007da <__aeabi_fadd+0x28a>
 800066a:	4643      	mov	r3, r8
 800066c:	2b00      	cmp	r3, #0
 800066e:	d100      	bne.n	8000672 <__aeabi_fadd+0x122>
 8000670:	e0f3      	b.n	800085a <__aeabi_fadd+0x30a>
 8000672:	2200      	movs	r2, #0
 8000674:	2e00      	cmp	r6, #0
 8000676:	d0b0      	beq.n	80005da <__aeabi_fadd+0x8a>
 8000678:	1b98      	subs	r0, r3, r6
 800067a:	0143      	lsls	r3, r0, #5
 800067c:	d400      	bmi.n	8000680 <__aeabi_fadd+0x130>
 800067e:	e0fa      	b.n	8000876 <__aeabi_fadd+0x326>
 8000680:	4643      	mov	r3, r8
 8000682:	000c      	movs	r4, r1
 8000684:	1af0      	subs	r0, r6, r3
 8000686:	e797      	b.n	80005b8 <__aeabi_fadd+0x68>
 8000688:	2e00      	cmp	r6, #0
 800068a:	d100      	bne.n	800068e <__aeabi_fadd+0x13e>
 800068c:	e0c8      	b.n	8000820 <__aeabi_fadd+0x2d0>
 800068e:	1e4a      	subs	r2, r1, #1
 8000690:	2901      	cmp	r1, #1
 8000692:	d100      	bne.n	8000696 <__aeabi_fadd+0x146>
 8000694:	e0ae      	b.n	80007f4 <__aeabi_fadd+0x2a4>
 8000696:	29ff      	cmp	r1, #255	; 0xff
 8000698:	d023      	beq.n	80006e2 <__aeabi_fadd+0x192>
 800069a:	0011      	movs	r1, r2
 800069c:	e7c1      	b.n	8000622 <__aeabi_fadd+0xd2>
 800069e:	2300      	movs	r3, #0
 80006a0:	22ff      	movs	r2, #255	; 0xff
 80006a2:	469c      	mov	ip, r3
 80006a4:	e799      	b.n	80005da <__aeabi_fadd+0x8a>
 80006a6:	21fe      	movs	r1, #254	; 0xfe
 80006a8:	1c6a      	adds	r2, r5, #1
 80006aa:	4211      	tst	r1, r2
 80006ac:	d077      	beq.n	800079e <__aeabi_fadd+0x24e>
 80006ae:	2aff      	cmp	r2, #255	; 0xff
 80006b0:	d0f5      	beq.n	800069e <__aeabi_fadd+0x14e>
 80006b2:	0015      	movs	r5, r2
 80006b4:	4446      	add	r6, r8
 80006b6:	0870      	lsrs	r0, r6, #1
 80006b8:	0743      	lsls	r3, r0, #29
 80006ba:	d000      	beq.n	80006be <__aeabi_fadd+0x16e>
 80006bc:	e77e      	b.n	80005bc <__aeabi_fadd+0x6c>
 80006be:	08c3      	lsrs	r3, r0, #3
 80006c0:	2dff      	cmp	r5, #255	; 0xff
 80006c2:	d00e      	beq.n	80006e2 <__aeabi_fadd+0x192>
 80006c4:	025b      	lsls	r3, r3, #9
 80006c6:	0a5b      	lsrs	r3, r3, #9
 80006c8:	469c      	mov	ip, r3
 80006ca:	b2ea      	uxtb	r2, r5
 80006cc:	e785      	b.n	80005da <__aeabi_fadd+0x8a>
 80006ce:	2e00      	cmp	r6, #0
 80006d0:	d007      	beq.n	80006e2 <__aeabi_fadd+0x192>
 80006d2:	2280      	movs	r2, #128	; 0x80
 80006d4:	03d2      	lsls	r2, r2, #15
 80006d6:	4213      	tst	r3, r2
 80006d8:	d003      	beq.n	80006e2 <__aeabi_fadd+0x192>
 80006da:	4210      	tst	r0, r2
 80006dc:	d101      	bne.n	80006e2 <__aeabi_fadd+0x192>
 80006de:	000c      	movs	r4, r1
 80006e0:	0003      	movs	r3, r0
 80006e2:	2b00      	cmp	r3, #0
 80006e4:	d0db      	beq.n	800069e <__aeabi_fadd+0x14e>
 80006e6:	2080      	movs	r0, #128	; 0x80
 80006e8:	03c0      	lsls	r0, r0, #15
 80006ea:	4318      	orrs	r0, r3
 80006ec:	0240      	lsls	r0, r0, #9
 80006ee:	0a43      	lsrs	r3, r0, #9
 80006f0:	469c      	mov	ip, r3
 80006f2:	22ff      	movs	r2, #255	; 0xff
 80006f4:	e771      	b.n	80005da <__aeabi_fadd+0x8a>
 80006f6:	2900      	cmp	r1, #0
 80006f8:	d0d5      	beq.n	80006a6 <__aeabi_fadd+0x156>
 80006fa:	1b7a      	subs	r2, r7, r5
 80006fc:	2d00      	cmp	r5, #0
 80006fe:	d160      	bne.n	80007c2 <__aeabi_fadd+0x272>
 8000700:	4643      	mov	r3, r8
 8000702:	2b00      	cmp	r3, #0
 8000704:	d024      	beq.n	8000750 <__aeabi_fadd+0x200>
 8000706:	1e53      	subs	r3, r2, #1
 8000708:	2a01      	cmp	r2, #1
 800070a:	d073      	beq.n	80007f4 <__aeabi_fadd+0x2a4>
 800070c:	2aff      	cmp	r2, #255	; 0xff
 800070e:	d0e7      	beq.n	80006e0 <__aeabi_fadd+0x190>
 8000710:	001a      	movs	r2, r3
 8000712:	2a1b      	cmp	r2, #27
 8000714:	dc00      	bgt.n	8000718 <__aeabi_fadd+0x1c8>
 8000716:	e085      	b.n	8000824 <__aeabi_fadd+0x2d4>
 8000718:	2001      	movs	r0, #1
 800071a:	003d      	movs	r5, r7
 800071c:	1980      	adds	r0, r0, r6
 800071e:	e785      	b.n	800062c <__aeabi_fadd+0xdc>
 8000720:	2320      	movs	r3, #32
 8000722:	003a      	movs	r2, r7
 8000724:	1b45      	subs	r5, r0, r5
 8000726:	0038      	movs	r0, r7
 8000728:	3501      	adds	r5, #1
 800072a:	40ea      	lsrs	r2, r5
 800072c:	1b5d      	subs	r5, r3, r5
 800072e:	40a8      	lsls	r0, r5
 8000730:	1e43      	subs	r3, r0, #1
 8000732:	4198      	sbcs	r0, r3
 8000734:	2500      	movs	r5, #0
 8000736:	4310      	orrs	r0, r2
 8000738:	e73e      	b.n	80005b8 <__aeabi_fadd+0x68>
 800073a:	2320      	movs	r3, #32
 800073c:	0030      	movs	r0, r6
 800073e:	1a9b      	subs	r3, r3, r2
 8000740:	0031      	movs	r1, r6
 8000742:	4098      	lsls	r0, r3
 8000744:	40d1      	lsrs	r1, r2
 8000746:	1e43      	subs	r3, r0, #1
 8000748:	4198      	sbcs	r0, r3
 800074a:	4308      	orrs	r0, r1
 800074c:	e722      	b.n	8000594 <__aeabi_fadd+0x44>
 800074e:	000c      	movs	r4, r1
 8000750:	0003      	movs	r3, r0
 8000752:	0015      	movs	r5, r2
 8000754:	e7b4      	b.n	80006c0 <__aeabi_fadd+0x170>
 8000756:	2fff      	cmp	r7, #255	; 0xff
 8000758:	d0c1      	beq.n	80006de <__aeabi_fadd+0x18e>
 800075a:	2380      	movs	r3, #128	; 0x80
 800075c:	4640      	mov	r0, r8
 800075e:	04db      	lsls	r3, r3, #19
 8000760:	4318      	orrs	r0, r3
 8000762:	4680      	mov	r8, r0
 8000764:	2a1b      	cmp	r2, #27
 8000766:	dd51      	ble.n	800080c <__aeabi_fadd+0x2bc>
 8000768:	2001      	movs	r0, #1
 800076a:	000c      	movs	r4, r1
 800076c:	003d      	movs	r5, r7
 800076e:	1a30      	subs	r0, r6, r0
 8000770:	e712      	b.n	8000598 <__aeabi_fadd+0x48>
 8000772:	4643      	mov	r3, r8
 8000774:	1b9f      	subs	r7, r3, r6
 8000776:	017b      	lsls	r3, r7, #5
 8000778:	d42b      	bmi.n	80007d2 <__aeabi_fadd+0x282>
 800077a:	2f00      	cmp	r7, #0
 800077c:	d000      	beq.n	8000780 <__aeabi_fadd+0x230>
 800077e:	e710      	b.n	80005a2 <__aeabi_fadd+0x52>
 8000780:	2300      	movs	r3, #0
 8000782:	2400      	movs	r4, #0
 8000784:	2200      	movs	r2, #0
 8000786:	469c      	mov	ip, r3
 8000788:	e727      	b.n	80005da <__aeabi_fadd+0x8a>
 800078a:	2320      	movs	r3, #32
 800078c:	0032      	movs	r2, r6
 800078e:	0030      	movs	r0, r6
 8000790:	40ca      	lsrs	r2, r1
 8000792:	1a59      	subs	r1, r3, r1
 8000794:	4088      	lsls	r0, r1
 8000796:	1e43      	subs	r3, r0, #1
 8000798:	4198      	sbcs	r0, r3
 800079a:	4310      	orrs	r0, r2
 800079c:	e745      	b.n	800062a <__aeabi_fadd+0xda>
 800079e:	2d00      	cmp	r5, #0
 80007a0:	d14a      	bne.n	8000838 <__aeabi_fadd+0x2e8>
 80007a2:	4643      	mov	r3, r8
 80007a4:	2b00      	cmp	r3, #0
 80007a6:	d063      	beq.n	8000870 <__aeabi_fadd+0x320>
 80007a8:	2200      	movs	r2, #0
 80007aa:	2e00      	cmp	r6, #0
 80007ac:	d100      	bne.n	80007b0 <__aeabi_fadd+0x260>
 80007ae:	e714      	b.n	80005da <__aeabi_fadd+0x8a>
 80007b0:	0030      	movs	r0, r6
 80007b2:	4440      	add	r0, r8
 80007b4:	0143      	lsls	r3, r0, #5
 80007b6:	d400      	bmi.n	80007ba <__aeabi_fadd+0x26a>
 80007b8:	e77e      	b.n	80006b8 <__aeabi_fadd+0x168>
 80007ba:	4b32      	ldr	r3, [pc, #200]	; (8000884 <__aeabi_fadd+0x334>)
 80007bc:	3501      	adds	r5, #1
 80007be:	4018      	ands	r0, r3
 80007c0:	e77a      	b.n	80006b8 <__aeabi_fadd+0x168>
 80007c2:	2fff      	cmp	r7, #255	; 0xff
 80007c4:	d08c      	beq.n	80006e0 <__aeabi_fadd+0x190>
 80007c6:	2380      	movs	r3, #128	; 0x80
 80007c8:	4641      	mov	r1, r8
 80007ca:	04db      	lsls	r3, r3, #19
 80007cc:	4319      	orrs	r1, r3
 80007ce:	4688      	mov	r8, r1
 80007d0:	e79f      	b.n	8000712 <__aeabi_fadd+0x1c2>
 80007d2:	4643      	mov	r3, r8
 80007d4:	000c      	movs	r4, r1
 80007d6:	1af7      	subs	r7, r6, r3
 80007d8:	e6e3      	b.n	80005a2 <__aeabi_fadd+0x52>
 80007da:	4642      	mov	r2, r8
 80007dc:	2a00      	cmp	r2, #0
 80007de:	d000      	beq.n	80007e2 <__aeabi_fadd+0x292>
 80007e0:	e775      	b.n	80006ce <__aeabi_fadd+0x17e>
 80007e2:	2e00      	cmp	r6, #0
 80007e4:	d000      	beq.n	80007e8 <__aeabi_fadd+0x298>
 80007e6:	e77a      	b.n	80006de <__aeabi_fadd+0x18e>
 80007e8:	2380      	movs	r3, #128	; 0x80
 80007ea:	03db      	lsls	r3, r3, #15
 80007ec:	2400      	movs	r4, #0
 80007ee:	469c      	mov	ip, r3
 80007f0:	22ff      	movs	r2, #255	; 0xff
 80007f2:	e6f2      	b.n	80005da <__aeabi_fadd+0x8a>
 80007f4:	0030      	movs	r0, r6
 80007f6:	4440      	add	r0, r8
 80007f8:	2501      	movs	r5, #1
 80007fa:	0143      	lsls	r3, r0, #5
 80007fc:	d400      	bmi.n	8000800 <__aeabi_fadd+0x2b0>
 80007fe:	e75b      	b.n	80006b8 <__aeabi_fadd+0x168>
 8000800:	2502      	movs	r5, #2
 8000802:	e718      	b.n	8000636 <__aeabi_fadd+0xe6>
 8000804:	4643      	mov	r3, r8
 8000806:	2501      	movs	r5, #1
 8000808:	1b98      	subs	r0, r3, r6
 800080a:	e6c5      	b.n	8000598 <__aeabi_fadd+0x48>
 800080c:	2320      	movs	r3, #32
 800080e:	4644      	mov	r4, r8
 8000810:	4640      	mov	r0, r8
 8000812:	40d4      	lsrs	r4, r2
 8000814:	1a9a      	subs	r2, r3, r2
 8000816:	4090      	lsls	r0, r2
 8000818:	1e43      	subs	r3, r0, #1
 800081a:	4198      	sbcs	r0, r3
 800081c:	4320      	orrs	r0, r4
 800081e:	e7a4      	b.n	800076a <__aeabi_fadd+0x21a>
 8000820:	000d      	movs	r5, r1
 8000822:	e74d      	b.n	80006c0 <__aeabi_fadd+0x170>
 8000824:	2320      	movs	r3, #32
 8000826:	4641      	mov	r1, r8
 8000828:	4640      	mov	r0, r8
 800082a:	40d1      	lsrs	r1, r2
 800082c:	1a9a      	subs	r2, r3, r2
 800082e:	4090      	lsls	r0, r2
 8000830:	1e43      	subs	r3, r0, #1
 8000832:	4198      	sbcs	r0, r3
 8000834:	4308      	orrs	r0, r1
 8000836:	e770      	b.n	800071a <__aeabi_fadd+0x1ca>
 8000838:	4642      	mov	r2, r8
 800083a:	2a00      	cmp	r2, #0
 800083c:	d100      	bne.n	8000840 <__aeabi_fadd+0x2f0>
 800083e:	e74f      	b.n	80006e0 <__aeabi_fadd+0x190>
 8000840:	2e00      	cmp	r6, #0
 8000842:	d100      	bne.n	8000846 <__aeabi_fadd+0x2f6>
 8000844:	e74d      	b.n	80006e2 <__aeabi_fadd+0x192>
 8000846:	2280      	movs	r2, #128	; 0x80
 8000848:	03d2      	lsls	r2, r2, #15
 800084a:	4213      	tst	r3, r2
 800084c:	d100      	bne.n	8000850 <__aeabi_fadd+0x300>
 800084e:	e748      	b.n	80006e2 <__aeabi_fadd+0x192>
 8000850:	4210      	tst	r0, r2
 8000852:	d000      	beq.n	8000856 <__aeabi_fadd+0x306>
 8000854:	e745      	b.n	80006e2 <__aeabi_fadd+0x192>
 8000856:	0003      	movs	r3, r0
 8000858:	e743      	b.n	80006e2 <__aeabi_fadd+0x192>
 800085a:	2e00      	cmp	r6, #0
 800085c:	d090      	beq.n	8000780 <__aeabi_fadd+0x230>
 800085e:	000c      	movs	r4, r1
 8000860:	4684      	mov	ip, r0
 8000862:	2200      	movs	r2, #0
 8000864:	e6b9      	b.n	80005da <__aeabi_fadd+0x8a>
 8000866:	4643      	mov	r3, r8
 8000868:	000c      	movs	r4, r1
 800086a:	1af0      	subs	r0, r6, r3
 800086c:	3501      	adds	r5, #1
 800086e:	e693      	b.n	8000598 <__aeabi_fadd+0x48>
 8000870:	4684      	mov	ip, r0
 8000872:	2200      	movs	r2, #0
 8000874:	e6b1      	b.n	80005da <__aeabi_fadd+0x8a>
 8000876:	2800      	cmp	r0, #0
 8000878:	d000      	beq.n	800087c <__aeabi_fadd+0x32c>
 800087a:	e71d      	b.n	80006b8 <__aeabi_fadd+0x168>
 800087c:	2300      	movs	r3, #0
 800087e:	2400      	movs	r4, #0
 8000880:	469c      	mov	ip, r3
 8000882:	e6aa      	b.n	80005da <__aeabi_fadd+0x8a>
 8000884:	fbffffff 	.word	0xfbffffff
 8000888:	7dffffff 	.word	0x7dffffff

0800088c <__aeabi_fdiv>:
 800088c:	b5f0      	push	{r4, r5, r6, r7, lr}
 800088e:	464f      	mov	r7, r9
 8000890:	4646      	mov	r6, r8
 8000892:	46d6      	mov	lr, sl
 8000894:	0245      	lsls	r5, r0, #9
 8000896:	b5c0      	push	{r6, r7, lr}
 8000898:	0047      	lsls	r7, r0, #1
 800089a:	1c0c      	adds	r4, r1, #0
 800089c:	0a6d      	lsrs	r5, r5, #9
 800089e:	0e3f      	lsrs	r7, r7, #24
 80008a0:	0fc6      	lsrs	r6, r0, #31
 80008a2:	2f00      	cmp	r7, #0
 80008a4:	d100      	bne.n	80008a8 <__aeabi_fdiv+0x1c>
 80008a6:	e070      	b.n	800098a <__aeabi_fdiv+0xfe>
 80008a8:	2fff      	cmp	r7, #255	; 0xff
 80008aa:	d100      	bne.n	80008ae <__aeabi_fdiv+0x22>
 80008ac:	e075      	b.n	800099a <__aeabi_fdiv+0x10e>
 80008ae:	00eb      	lsls	r3, r5, #3
 80008b0:	2580      	movs	r5, #128	; 0x80
 80008b2:	04ed      	lsls	r5, r5, #19
 80008b4:	431d      	orrs	r5, r3
 80008b6:	2300      	movs	r3, #0
 80008b8:	4699      	mov	r9, r3
 80008ba:	469a      	mov	sl, r3
 80008bc:	3f7f      	subs	r7, #127	; 0x7f
 80008be:	0260      	lsls	r0, r4, #9
 80008c0:	0a43      	lsrs	r3, r0, #9
 80008c2:	4698      	mov	r8, r3
 80008c4:	0063      	lsls	r3, r4, #1
 80008c6:	0e1b      	lsrs	r3, r3, #24
 80008c8:	0fe4      	lsrs	r4, r4, #31
 80008ca:	2b00      	cmp	r3, #0
 80008cc:	d04e      	beq.n	800096c <__aeabi_fdiv+0xe0>
 80008ce:	2bff      	cmp	r3, #255	; 0xff
 80008d0:	d046      	beq.n	8000960 <__aeabi_fdiv+0xd4>
 80008d2:	4642      	mov	r2, r8
 80008d4:	00d0      	lsls	r0, r2, #3
 80008d6:	2280      	movs	r2, #128	; 0x80
 80008d8:	04d2      	lsls	r2, r2, #19
 80008da:	4302      	orrs	r2, r0
 80008dc:	4690      	mov	r8, r2
 80008de:	2200      	movs	r2, #0
 80008e0:	3b7f      	subs	r3, #127	; 0x7f
 80008e2:	0031      	movs	r1, r6
 80008e4:	1aff      	subs	r7, r7, r3
 80008e6:	464b      	mov	r3, r9
 80008e8:	4061      	eors	r1, r4
 80008ea:	b2c9      	uxtb	r1, r1
 80008ec:	4313      	orrs	r3, r2
 80008ee:	2b0f      	cmp	r3, #15
 80008f0:	d900      	bls.n	80008f4 <__aeabi_fdiv+0x68>
 80008f2:	e0b5      	b.n	8000a60 <__aeabi_fdiv+0x1d4>
 80008f4:	486e      	ldr	r0, [pc, #440]	; (8000ab0 <__aeabi_fdiv+0x224>)
 80008f6:	009b      	lsls	r3, r3, #2
 80008f8:	58c3      	ldr	r3, [r0, r3]
 80008fa:	469f      	mov	pc, r3
 80008fc:	2300      	movs	r3, #0
 80008fe:	4698      	mov	r8, r3
 8000900:	0026      	movs	r6, r4
 8000902:	4645      	mov	r5, r8
 8000904:	4692      	mov	sl, r2
 8000906:	4653      	mov	r3, sl
 8000908:	2b02      	cmp	r3, #2
 800090a:	d100      	bne.n	800090e <__aeabi_fdiv+0x82>
 800090c:	e089      	b.n	8000a22 <__aeabi_fdiv+0x196>
 800090e:	2b03      	cmp	r3, #3
 8000910:	d100      	bne.n	8000914 <__aeabi_fdiv+0x88>
 8000912:	e09e      	b.n	8000a52 <__aeabi_fdiv+0x1c6>
 8000914:	2b01      	cmp	r3, #1
 8000916:	d018      	beq.n	800094a <__aeabi_fdiv+0xbe>
 8000918:	003b      	movs	r3, r7
 800091a:	337f      	adds	r3, #127	; 0x7f
 800091c:	2b00      	cmp	r3, #0
 800091e:	dd69      	ble.n	80009f4 <__aeabi_fdiv+0x168>
 8000920:	076a      	lsls	r2, r5, #29
 8000922:	d004      	beq.n	800092e <__aeabi_fdiv+0xa2>
 8000924:	220f      	movs	r2, #15
 8000926:	402a      	ands	r2, r5
 8000928:	2a04      	cmp	r2, #4
 800092a:	d000      	beq.n	800092e <__aeabi_fdiv+0xa2>
 800092c:	3504      	adds	r5, #4
 800092e:	012a      	lsls	r2, r5, #4
 8000930:	d503      	bpl.n	800093a <__aeabi_fdiv+0xae>
 8000932:	4b60      	ldr	r3, [pc, #384]	; (8000ab4 <__aeabi_fdiv+0x228>)
 8000934:	401d      	ands	r5, r3
 8000936:	003b      	movs	r3, r7
 8000938:	3380      	adds	r3, #128	; 0x80
 800093a:	2bfe      	cmp	r3, #254	; 0xfe
 800093c:	dd00      	ble.n	8000940 <__aeabi_fdiv+0xb4>
 800093e:	e070      	b.n	8000a22 <__aeabi_fdiv+0x196>
 8000940:	01ad      	lsls	r5, r5, #6
 8000942:	0a6d      	lsrs	r5, r5, #9
 8000944:	b2d8      	uxtb	r0, r3
 8000946:	e002      	b.n	800094e <__aeabi_fdiv+0xc2>
 8000948:	000e      	movs	r6, r1
 800094a:	2000      	movs	r0, #0
 800094c:	2500      	movs	r5, #0
 800094e:	05c0      	lsls	r0, r0, #23
 8000950:	4328      	orrs	r0, r5
 8000952:	07f6      	lsls	r6, r6, #31
 8000954:	4330      	orrs	r0, r6
 8000956:	bce0      	pop	{r5, r6, r7}
 8000958:	46ba      	mov	sl, r7
 800095a:	46b1      	mov	r9, r6
 800095c:	46a8      	mov	r8, r5
 800095e:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8000960:	4643      	mov	r3, r8
 8000962:	2b00      	cmp	r3, #0
 8000964:	d13f      	bne.n	80009e6 <__aeabi_fdiv+0x15a>
 8000966:	2202      	movs	r2, #2
 8000968:	3fff      	subs	r7, #255	; 0xff
 800096a:	e003      	b.n	8000974 <__aeabi_fdiv+0xe8>
 800096c:	4643      	mov	r3, r8
 800096e:	2b00      	cmp	r3, #0
 8000970:	d12d      	bne.n	80009ce <__aeabi_fdiv+0x142>
 8000972:	2201      	movs	r2, #1
 8000974:	0031      	movs	r1, r6
 8000976:	464b      	mov	r3, r9
 8000978:	4061      	eors	r1, r4
 800097a:	b2c9      	uxtb	r1, r1
 800097c:	4313      	orrs	r3, r2
 800097e:	2b0f      	cmp	r3, #15
 8000980:	d834      	bhi.n	80009ec <__aeabi_fdiv+0x160>
 8000982:	484d      	ldr	r0, [pc, #308]	; (8000ab8 <__aeabi_fdiv+0x22c>)
 8000984:	009b      	lsls	r3, r3, #2
 8000986:	58c3      	ldr	r3, [r0, r3]
 8000988:	469f      	mov	pc, r3
 800098a:	2d00      	cmp	r5, #0
 800098c:	d113      	bne.n	80009b6 <__aeabi_fdiv+0x12a>
 800098e:	2304      	movs	r3, #4
 8000990:	4699      	mov	r9, r3
 8000992:	3b03      	subs	r3, #3
 8000994:	2700      	movs	r7, #0
 8000996:	469a      	mov	sl, r3
 8000998:	e791      	b.n	80008be <__aeabi_fdiv+0x32>
 800099a:	2d00      	cmp	r5, #0
 800099c:	d105      	bne.n	80009aa <__aeabi_fdiv+0x11e>
 800099e:	2308      	movs	r3, #8
 80009a0:	4699      	mov	r9, r3
 80009a2:	3b06      	subs	r3, #6
 80009a4:	27ff      	movs	r7, #255	; 0xff
 80009a6:	469a      	mov	sl, r3
 80009a8:	e789      	b.n	80008be <__aeabi_fdiv+0x32>
 80009aa:	230c      	movs	r3, #12
 80009ac:	4699      	mov	r9, r3
 80009ae:	3b09      	subs	r3, #9
 80009b0:	27ff      	movs	r7, #255	; 0xff
 80009b2:	469a      	mov	sl, r3
 80009b4:	e783      	b.n	80008be <__aeabi_fdiv+0x32>
 80009b6:	0028      	movs	r0, r5
 80009b8:	f002 fb80 	bl	80030bc <__clzsi2>
 80009bc:	2776      	movs	r7, #118	; 0x76
 80009be:	1f43      	subs	r3, r0, #5
 80009c0:	409d      	lsls	r5, r3
 80009c2:	2300      	movs	r3, #0
 80009c4:	427f      	negs	r7, r7
 80009c6:	4699      	mov	r9, r3
 80009c8:	469a      	mov	sl, r3
 80009ca:	1a3f      	subs	r7, r7, r0
 80009cc:	e777      	b.n	80008be <__aeabi_fdiv+0x32>
 80009ce:	4640      	mov	r0, r8
 80009d0:	f002 fb74 	bl	80030bc <__clzsi2>
 80009d4:	4642      	mov	r2, r8
 80009d6:	1f43      	subs	r3, r0, #5
 80009d8:	409a      	lsls	r2, r3
 80009da:	2376      	movs	r3, #118	; 0x76
 80009dc:	425b      	negs	r3, r3
 80009de:	4690      	mov	r8, r2
 80009e0:	1a1b      	subs	r3, r3, r0
 80009e2:	2200      	movs	r2, #0
 80009e4:	e77d      	b.n	80008e2 <__aeabi_fdiv+0x56>
 80009e6:	23ff      	movs	r3, #255	; 0xff
 80009e8:	2203      	movs	r2, #3
 80009ea:	e77a      	b.n	80008e2 <__aeabi_fdiv+0x56>
 80009ec:	000e      	movs	r6, r1
 80009ee:	20ff      	movs	r0, #255	; 0xff
 80009f0:	2500      	movs	r5, #0
 80009f2:	e7ac      	b.n	800094e <__aeabi_fdiv+0xc2>
 80009f4:	2001      	movs	r0, #1
 80009f6:	1ac0      	subs	r0, r0, r3
 80009f8:	281b      	cmp	r0, #27
 80009fa:	dca6      	bgt.n	800094a <__aeabi_fdiv+0xbe>
 80009fc:	379e      	adds	r7, #158	; 0x9e
 80009fe:	002a      	movs	r2, r5
 8000a00:	40bd      	lsls	r5, r7
 8000a02:	40c2      	lsrs	r2, r0
 8000a04:	1e6b      	subs	r3, r5, #1
 8000a06:	419d      	sbcs	r5, r3
 8000a08:	4315      	orrs	r5, r2
 8000a0a:	076b      	lsls	r3, r5, #29
 8000a0c:	d004      	beq.n	8000a18 <__aeabi_fdiv+0x18c>
 8000a0e:	230f      	movs	r3, #15
 8000a10:	402b      	ands	r3, r5
 8000a12:	2b04      	cmp	r3, #4
 8000a14:	d000      	beq.n	8000a18 <__aeabi_fdiv+0x18c>
 8000a16:	3504      	adds	r5, #4
 8000a18:	016b      	lsls	r3, r5, #5
 8000a1a:	d544      	bpl.n	8000aa6 <__aeabi_fdiv+0x21a>
 8000a1c:	2001      	movs	r0, #1
 8000a1e:	2500      	movs	r5, #0
 8000a20:	e795      	b.n	800094e <__aeabi_fdiv+0xc2>
 8000a22:	20ff      	movs	r0, #255	; 0xff
 8000a24:	2500      	movs	r5, #0
 8000a26:	e792      	b.n	800094e <__aeabi_fdiv+0xc2>
 8000a28:	2580      	movs	r5, #128	; 0x80
 8000a2a:	2600      	movs	r6, #0
 8000a2c:	20ff      	movs	r0, #255	; 0xff
 8000a2e:	03ed      	lsls	r5, r5, #15
 8000a30:	e78d      	b.n	800094e <__aeabi_fdiv+0xc2>
 8000a32:	2300      	movs	r3, #0
 8000a34:	4698      	mov	r8, r3
 8000a36:	2080      	movs	r0, #128	; 0x80
 8000a38:	03c0      	lsls	r0, r0, #15
 8000a3a:	4205      	tst	r5, r0
 8000a3c:	d009      	beq.n	8000a52 <__aeabi_fdiv+0x1c6>
 8000a3e:	4643      	mov	r3, r8
 8000a40:	4203      	tst	r3, r0
 8000a42:	d106      	bne.n	8000a52 <__aeabi_fdiv+0x1c6>
 8000a44:	4645      	mov	r5, r8
 8000a46:	4305      	orrs	r5, r0
 8000a48:	026d      	lsls	r5, r5, #9
 8000a4a:	0026      	movs	r6, r4
 8000a4c:	20ff      	movs	r0, #255	; 0xff
 8000a4e:	0a6d      	lsrs	r5, r5, #9
 8000a50:	e77d      	b.n	800094e <__aeabi_fdiv+0xc2>
 8000a52:	2080      	movs	r0, #128	; 0x80
 8000a54:	03c0      	lsls	r0, r0, #15
 8000a56:	4305      	orrs	r5, r0
 8000a58:	026d      	lsls	r5, r5, #9
 8000a5a:	20ff      	movs	r0, #255	; 0xff
 8000a5c:	0a6d      	lsrs	r5, r5, #9
 8000a5e:	e776      	b.n	800094e <__aeabi_fdiv+0xc2>
 8000a60:	4642      	mov	r2, r8
 8000a62:	016b      	lsls	r3, r5, #5
 8000a64:	0150      	lsls	r0, r2, #5
 8000a66:	4283      	cmp	r3, r0
 8000a68:	d219      	bcs.n	8000a9e <__aeabi_fdiv+0x212>
 8000a6a:	221b      	movs	r2, #27
 8000a6c:	2500      	movs	r5, #0
 8000a6e:	3f01      	subs	r7, #1
 8000a70:	2601      	movs	r6, #1
 8000a72:	001c      	movs	r4, r3
 8000a74:	006d      	lsls	r5, r5, #1
 8000a76:	005b      	lsls	r3, r3, #1
 8000a78:	2c00      	cmp	r4, #0
 8000a7a:	db01      	blt.n	8000a80 <__aeabi_fdiv+0x1f4>
 8000a7c:	4298      	cmp	r0, r3
 8000a7e:	d801      	bhi.n	8000a84 <__aeabi_fdiv+0x1f8>
 8000a80:	1a1b      	subs	r3, r3, r0
 8000a82:	4335      	orrs	r5, r6
 8000a84:	3a01      	subs	r2, #1
 8000a86:	2a00      	cmp	r2, #0
 8000a88:	d1f3      	bne.n	8000a72 <__aeabi_fdiv+0x1e6>
 8000a8a:	1e5a      	subs	r2, r3, #1
 8000a8c:	4193      	sbcs	r3, r2
 8000a8e:	431d      	orrs	r5, r3
 8000a90:	003b      	movs	r3, r7
 8000a92:	337f      	adds	r3, #127	; 0x7f
 8000a94:	000e      	movs	r6, r1
 8000a96:	2b00      	cmp	r3, #0
 8000a98:	dd00      	ble.n	8000a9c <__aeabi_fdiv+0x210>
 8000a9a:	e741      	b.n	8000920 <__aeabi_fdiv+0x94>
 8000a9c:	e7aa      	b.n	80009f4 <__aeabi_fdiv+0x168>
 8000a9e:	221a      	movs	r2, #26
 8000aa0:	2501      	movs	r5, #1
 8000aa2:	1a1b      	subs	r3, r3, r0
 8000aa4:	e7e4      	b.n	8000a70 <__aeabi_fdiv+0x1e4>
 8000aa6:	01ad      	lsls	r5, r5, #6
 8000aa8:	2000      	movs	r0, #0
 8000aaa:	0a6d      	lsrs	r5, r5, #9
 8000aac:	e74f      	b.n	800094e <__aeabi_fdiv+0xc2>
 8000aae:	46c0      	nop			; (mov r8, r8)
 8000ab0:	0800a780 	.word	0x0800a780
 8000ab4:	f7ffffff 	.word	0xf7ffffff
 8000ab8:	0800a7c0 	.word	0x0800a7c0

08000abc <__eqsf2>:
 8000abc:	b570      	push	{r4, r5, r6, lr}
 8000abe:	0042      	lsls	r2, r0, #1
 8000ac0:	0245      	lsls	r5, r0, #9
 8000ac2:	024e      	lsls	r6, r1, #9
 8000ac4:	004c      	lsls	r4, r1, #1
 8000ac6:	0fc3      	lsrs	r3, r0, #31
 8000ac8:	0a6d      	lsrs	r5, r5, #9
 8000aca:	2001      	movs	r0, #1
 8000acc:	0e12      	lsrs	r2, r2, #24
 8000ace:	0a76      	lsrs	r6, r6, #9
 8000ad0:	0e24      	lsrs	r4, r4, #24
 8000ad2:	0fc9      	lsrs	r1, r1, #31
 8000ad4:	2aff      	cmp	r2, #255	; 0xff
 8000ad6:	d006      	beq.n	8000ae6 <__eqsf2+0x2a>
 8000ad8:	2cff      	cmp	r4, #255	; 0xff
 8000ada:	d003      	beq.n	8000ae4 <__eqsf2+0x28>
 8000adc:	42a2      	cmp	r2, r4
 8000ade:	d101      	bne.n	8000ae4 <__eqsf2+0x28>
 8000ae0:	42b5      	cmp	r5, r6
 8000ae2:	d006      	beq.n	8000af2 <__eqsf2+0x36>
 8000ae4:	bd70      	pop	{r4, r5, r6, pc}
 8000ae6:	2d00      	cmp	r5, #0
 8000ae8:	d1fc      	bne.n	8000ae4 <__eqsf2+0x28>
 8000aea:	2cff      	cmp	r4, #255	; 0xff
 8000aec:	d1fa      	bne.n	8000ae4 <__eqsf2+0x28>
 8000aee:	2e00      	cmp	r6, #0
 8000af0:	d1f8      	bne.n	8000ae4 <__eqsf2+0x28>
 8000af2:	428b      	cmp	r3, r1
 8000af4:	d006      	beq.n	8000b04 <__eqsf2+0x48>
 8000af6:	2001      	movs	r0, #1
 8000af8:	2a00      	cmp	r2, #0
 8000afa:	d1f3      	bne.n	8000ae4 <__eqsf2+0x28>
 8000afc:	0028      	movs	r0, r5
 8000afe:	1e43      	subs	r3, r0, #1
 8000b00:	4198      	sbcs	r0, r3
 8000b02:	e7ef      	b.n	8000ae4 <__eqsf2+0x28>
 8000b04:	2000      	movs	r0, #0
 8000b06:	e7ed      	b.n	8000ae4 <__eqsf2+0x28>

08000b08 <__gesf2>:
 8000b08:	b570      	push	{r4, r5, r6, lr}
 8000b0a:	0042      	lsls	r2, r0, #1
 8000b0c:	0245      	lsls	r5, r0, #9
 8000b0e:	024e      	lsls	r6, r1, #9
 8000b10:	004c      	lsls	r4, r1, #1
 8000b12:	0fc3      	lsrs	r3, r0, #31
 8000b14:	0a6d      	lsrs	r5, r5, #9
 8000b16:	0e12      	lsrs	r2, r2, #24
 8000b18:	0a76      	lsrs	r6, r6, #9
 8000b1a:	0e24      	lsrs	r4, r4, #24
 8000b1c:	0fc8      	lsrs	r0, r1, #31
 8000b1e:	2aff      	cmp	r2, #255	; 0xff
 8000b20:	d01b      	beq.n	8000b5a <__gesf2+0x52>
 8000b22:	2cff      	cmp	r4, #255	; 0xff
 8000b24:	d00e      	beq.n	8000b44 <__gesf2+0x3c>
 8000b26:	2a00      	cmp	r2, #0
 8000b28:	d11b      	bne.n	8000b62 <__gesf2+0x5a>
 8000b2a:	2c00      	cmp	r4, #0
 8000b2c:	d101      	bne.n	8000b32 <__gesf2+0x2a>
 8000b2e:	2e00      	cmp	r6, #0
 8000b30:	d01c      	beq.n	8000b6c <__gesf2+0x64>
 8000b32:	2d00      	cmp	r5, #0
 8000b34:	d00c      	beq.n	8000b50 <__gesf2+0x48>
 8000b36:	4283      	cmp	r3, r0
 8000b38:	d01c      	beq.n	8000b74 <__gesf2+0x6c>
 8000b3a:	2102      	movs	r1, #2
 8000b3c:	1e58      	subs	r0, r3, #1
 8000b3e:	4008      	ands	r0, r1
 8000b40:	3801      	subs	r0, #1
 8000b42:	bd70      	pop	{r4, r5, r6, pc}
 8000b44:	2e00      	cmp	r6, #0
 8000b46:	d122      	bne.n	8000b8e <__gesf2+0x86>
 8000b48:	2a00      	cmp	r2, #0
 8000b4a:	d1f4      	bne.n	8000b36 <__gesf2+0x2e>
 8000b4c:	2d00      	cmp	r5, #0
 8000b4e:	d1f2      	bne.n	8000b36 <__gesf2+0x2e>
 8000b50:	2800      	cmp	r0, #0
 8000b52:	d1f6      	bne.n	8000b42 <__gesf2+0x3a>
 8000b54:	2001      	movs	r0, #1
 8000b56:	4240      	negs	r0, r0
 8000b58:	e7f3      	b.n	8000b42 <__gesf2+0x3a>
 8000b5a:	2d00      	cmp	r5, #0
 8000b5c:	d117      	bne.n	8000b8e <__gesf2+0x86>
 8000b5e:	2cff      	cmp	r4, #255	; 0xff
 8000b60:	d0f0      	beq.n	8000b44 <__gesf2+0x3c>
 8000b62:	2c00      	cmp	r4, #0
 8000b64:	d1e7      	bne.n	8000b36 <__gesf2+0x2e>
 8000b66:	2e00      	cmp	r6, #0
 8000b68:	d1e5      	bne.n	8000b36 <__gesf2+0x2e>
 8000b6a:	e7e6      	b.n	8000b3a <__gesf2+0x32>
 8000b6c:	2000      	movs	r0, #0
 8000b6e:	2d00      	cmp	r5, #0
 8000b70:	d0e7      	beq.n	8000b42 <__gesf2+0x3a>
 8000b72:	e7e2      	b.n	8000b3a <__gesf2+0x32>
 8000b74:	42a2      	cmp	r2, r4
 8000b76:	dc05      	bgt.n	8000b84 <__gesf2+0x7c>
 8000b78:	dbea      	blt.n	8000b50 <__gesf2+0x48>
 8000b7a:	42b5      	cmp	r5, r6
 8000b7c:	d802      	bhi.n	8000b84 <__gesf2+0x7c>
 8000b7e:	d3e7      	bcc.n	8000b50 <__gesf2+0x48>
 8000b80:	2000      	movs	r0, #0
 8000b82:	e7de      	b.n	8000b42 <__gesf2+0x3a>
 8000b84:	4243      	negs	r3, r0
 8000b86:	4158      	adcs	r0, r3
 8000b88:	0040      	lsls	r0, r0, #1
 8000b8a:	3801      	subs	r0, #1
 8000b8c:	e7d9      	b.n	8000b42 <__gesf2+0x3a>
 8000b8e:	2002      	movs	r0, #2
 8000b90:	4240      	negs	r0, r0
 8000b92:	e7d6      	b.n	8000b42 <__gesf2+0x3a>

08000b94 <__lesf2>:
 8000b94:	b570      	push	{r4, r5, r6, lr}
 8000b96:	0042      	lsls	r2, r0, #1
 8000b98:	0245      	lsls	r5, r0, #9
 8000b9a:	024e      	lsls	r6, r1, #9
 8000b9c:	004c      	lsls	r4, r1, #1
 8000b9e:	0fc3      	lsrs	r3, r0, #31
 8000ba0:	0a6d      	lsrs	r5, r5, #9
 8000ba2:	0e12      	lsrs	r2, r2, #24
 8000ba4:	0a76      	lsrs	r6, r6, #9
 8000ba6:	0e24      	lsrs	r4, r4, #24
 8000ba8:	0fc8      	lsrs	r0, r1, #31
 8000baa:	2aff      	cmp	r2, #255	; 0xff
 8000bac:	d00b      	beq.n	8000bc6 <__lesf2+0x32>
 8000bae:	2cff      	cmp	r4, #255	; 0xff
 8000bb0:	d00d      	beq.n	8000bce <__lesf2+0x3a>
 8000bb2:	2a00      	cmp	r2, #0
 8000bb4:	d11f      	bne.n	8000bf6 <__lesf2+0x62>
 8000bb6:	2c00      	cmp	r4, #0
 8000bb8:	d116      	bne.n	8000be8 <__lesf2+0x54>
 8000bba:	2e00      	cmp	r6, #0
 8000bbc:	d114      	bne.n	8000be8 <__lesf2+0x54>
 8000bbe:	2000      	movs	r0, #0
 8000bc0:	2d00      	cmp	r5, #0
 8000bc2:	d010      	beq.n	8000be6 <__lesf2+0x52>
 8000bc4:	e009      	b.n	8000bda <__lesf2+0x46>
 8000bc6:	2d00      	cmp	r5, #0
 8000bc8:	d10c      	bne.n	8000be4 <__lesf2+0x50>
 8000bca:	2cff      	cmp	r4, #255	; 0xff
 8000bcc:	d113      	bne.n	8000bf6 <__lesf2+0x62>
 8000bce:	2e00      	cmp	r6, #0
 8000bd0:	d108      	bne.n	8000be4 <__lesf2+0x50>
 8000bd2:	2a00      	cmp	r2, #0
 8000bd4:	d008      	beq.n	8000be8 <__lesf2+0x54>
 8000bd6:	4283      	cmp	r3, r0
 8000bd8:	d012      	beq.n	8000c00 <__lesf2+0x6c>
 8000bda:	2102      	movs	r1, #2
 8000bdc:	1e58      	subs	r0, r3, #1
 8000bde:	4008      	ands	r0, r1
 8000be0:	3801      	subs	r0, #1
 8000be2:	e000      	b.n	8000be6 <__lesf2+0x52>
 8000be4:	2002      	movs	r0, #2
 8000be6:	bd70      	pop	{r4, r5, r6, pc}
 8000be8:	2d00      	cmp	r5, #0
 8000bea:	d1f4      	bne.n	8000bd6 <__lesf2+0x42>
 8000bec:	2800      	cmp	r0, #0
 8000bee:	d1fa      	bne.n	8000be6 <__lesf2+0x52>
 8000bf0:	2001      	movs	r0, #1
 8000bf2:	4240      	negs	r0, r0
 8000bf4:	e7f7      	b.n	8000be6 <__lesf2+0x52>
 8000bf6:	2c00      	cmp	r4, #0
 8000bf8:	d1ed      	bne.n	8000bd6 <__lesf2+0x42>
 8000bfa:	2e00      	cmp	r6, #0
 8000bfc:	d1eb      	bne.n	8000bd6 <__lesf2+0x42>
 8000bfe:	e7ec      	b.n	8000bda <__lesf2+0x46>
 8000c00:	42a2      	cmp	r2, r4
 8000c02:	dc05      	bgt.n	8000c10 <__lesf2+0x7c>
 8000c04:	dbf2      	blt.n	8000bec <__lesf2+0x58>
 8000c06:	42b5      	cmp	r5, r6
 8000c08:	d802      	bhi.n	8000c10 <__lesf2+0x7c>
 8000c0a:	d3ef      	bcc.n	8000bec <__lesf2+0x58>
 8000c0c:	2000      	movs	r0, #0
 8000c0e:	e7ea      	b.n	8000be6 <__lesf2+0x52>
 8000c10:	4243      	negs	r3, r0
 8000c12:	4158      	adcs	r0, r3
 8000c14:	0040      	lsls	r0, r0, #1
 8000c16:	3801      	subs	r0, #1
 8000c18:	e7e5      	b.n	8000be6 <__lesf2+0x52>
 8000c1a:	46c0      	nop			; (mov r8, r8)

08000c1c <__aeabi_fmul>:
 8000c1c:	b5f0      	push	{r4, r5, r6, r7, lr}
 8000c1e:	464f      	mov	r7, r9
 8000c20:	4646      	mov	r6, r8
 8000c22:	46d6      	mov	lr, sl
 8000c24:	0244      	lsls	r4, r0, #9
 8000c26:	0045      	lsls	r5, r0, #1
 8000c28:	b5c0      	push	{r6, r7, lr}
 8000c2a:	0a64      	lsrs	r4, r4, #9
 8000c2c:	1c0f      	adds	r7, r1, #0
 8000c2e:	0e2d      	lsrs	r5, r5, #24
 8000c30:	0fc6      	lsrs	r6, r0, #31
 8000c32:	2d00      	cmp	r5, #0
 8000c34:	d100      	bne.n	8000c38 <__aeabi_fmul+0x1c>
 8000c36:	e08d      	b.n	8000d54 <__aeabi_fmul+0x138>
 8000c38:	2dff      	cmp	r5, #255	; 0xff
 8000c3a:	d100      	bne.n	8000c3e <__aeabi_fmul+0x22>
 8000c3c:	e092      	b.n	8000d64 <__aeabi_fmul+0x148>
 8000c3e:	2300      	movs	r3, #0
 8000c40:	2080      	movs	r0, #128	; 0x80
 8000c42:	4699      	mov	r9, r3
 8000c44:	469a      	mov	sl, r3
 8000c46:	00e4      	lsls	r4, r4, #3
 8000c48:	04c0      	lsls	r0, r0, #19
 8000c4a:	4304      	orrs	r4, r0
 8000c4c:	3d7f      	subs	r5, #127	; 0x7f
 8000c4e:	0278      	lsls	r0, r7, #9
 8000c50:	0a43      	lsrs	r3, r0, #9
 8000c52:	4698      	mov	r8, r3
 8000c54:	007b      	lsls	r3, r7, #1
 8000c56:	0e1b      	lsrs	r3, r3, #24
 8000c58:	0fff      	lsrs	r7, r7, #31
 8000c5a:	2b00      	cmp	r3, #0
 8000c5c:	d100      	bne.n	8000c60 <__aeabi_fmul+0x44>
 8000c5e:	e070      	b.n	8000d42 <__aeabi_fmul+0x126>
 8000c60:	2bff      	cmp	r3, #255	; 0xff
 8000c62:	d100      	bne.n	8000c66 <__aeabi_fmul+0x4a>
 8000c64:	e086      	b.n	8000d74 <__aeabi_fmul+0x158>
 8000c66:	4642      	mov	r2, r8
 8000c68:	00d0      	lsls	r0, r2, #3
 8000c6a:	2280      	movs	r2, #128	; 0x80
 8000c6c:	3b7f      	subs	r3, #127	; 0x7f
 8000c6e:	18ed      	adds	r5, r5, r3
 8000c70:	2300      	movs	r3, #0
 8000c72:	04d2      	lsls	r2, r2, #19
 8000c74:	4302      	orrs	r2, r0
 8000c76:	4690      	mov	r8, r2
 8000c78:	469c      	mov	ip, r3
 8000c7a:	0031      	movs	r1, r6
 8000c7c:	464b      	mov	r3, r9
 8000c7e:	4079      	eors	r1, r7
 8000c80:	1c68      	adds	r0, r5, #1
 8000c82:	2b0f      	cmp	r3, #15
 8000c84:	d81c      	bhi.n	8000cc0 <__aeabi_fmul+0xa4>
 8000c86:	4a76      	ldr	r2, [pc, #472]	; (8000e60 <__aeabi_fmul+0x244>)
 8000c88:	009b      	lsls	r3, r3, #2
 8000c8a:	58d3      	ldr	r3, [r2, r3]
 8000c8c:	469f      	mov	pc, r3
 8000c8e:	0039      	movs	r1, r7
 8000c90:	4644      	mov	r4, r8
 8000c92:	46e2      	mov	sl, ip
 8000c94:	4653      	mov	r3, sl
 8000c96:	2b02      	cmp	r3, #2
 8000c98:	d00f      	beq.n	8000cba <__aeabi_fmul+0x9e>
 8000c9a:	2b03      	cmp	r3, #3
 8000c9c:	d100      	bne.n	8000ca0 <__aeabi_fmul+0x84>
 8000c9e:	e0d7      	b.n	8000e50 <__aeabi_fmul+0x234>
 8000ca0:	2b01      	cmp	r3, #1
 8000ca2:	d137      	bne.n	8000d14 <__aeabi_fmul+0xf8>
 8000ca4:	2000      	movs	r0, #0
 8000ca6:	2400      	movs	r4, #0
 8000ca8:	05c0      	lsls	r0, r0, #23
 8000caa:	4320      	orrs	r0, r4
 8000cac:	07c9      	lsls	r1, r1, #31
 8000cae:	4308      	orrs	r0, r1
 8000cb0:	bce0      	pop	{r5, r6, r7}
 8000cb2:	46ba      	mov	sl, r7
 8000cb4:	46b1      	mov	r9, r6
 8000cb6:	46a8      	mov	r8, r5
 8000cb8:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8000cba:	20ff      	movs	r0, #255	; 0xff
 8000cbc:	2400      	movs	r4, #0
 8000cbe:	e7f3      	b.n	8000ca8 <__aeabi_fmul+0x8c>
 8000cc0:	0c26      	lsrs	r6, r4, #16
 8000cc2:	0424      	lsls	r4, r4, #16
 8000cc4:	0c22      	lsrs	r2, r4, #16
 8000cc6:	4644      	mov	r4, r8
 8000cc8:	0424      	lsls	r4, r4, #16
 8000cca:	0c24      	lsrs	r4, r4, #16
 8000ccc:	4643      	mov	r3, r8
 8000cce:	0027      	movs	r7, r4
 8000cd0:	0c1b      	lsrs	r3, r3, #16
 8000cd2:	4357      	muls	r7, r2
 8000cd4:	4374      	muls	r4, r6
 8000cd6:	435a      	muls	r2, r3
 8000cd8:	435e      	muls	r6, r3
 8000cda:	1912      	adds	r2, r2, r4
 8000cdc:	0c3b      	lsrs	r3, r7, #16
 8000cde:	189b      	adds	r3, r3, r2
 8000ce0:	429c      	cmp	r4, r3
 8000ce2:	d903      	bls.n	8000cec <__aeabi_fmul+0xd0>
 8000ce4:	2280      	movs	r2, #128	; 0x80
 8000ce6:	0252      	lsls	r2, r2, #9
 8000ce8:	4694      	mov	ip, r2
 8000cea:	4466      	add	r6, ip
 8000cec:	043f      	lsls	r7, r7, #16
 8000cee:	041a      	lsls	r2, r3, #16
 8000cf0:	0c3f      	lsrs	r7, r7, #16
 8000cf2:	19d2      	adds	r2, r2, r7
 8000cf4:	0194      	lsls	r4, r2, #6
 8000cf6:	1e67      	subs	r7, r4, #1
 8000cf8:	41bc      	sbcs	r4, r7
 8000cfa:	0c1b      	lsrs	r3, r3, #16
 8000cfc:	0e92      	lsrs	r2, r2, #26
 8000cfe:	199b      	adds	r3, r3, r6
 8000d00:	4314      	orrs	r4, r2
 8000d02:	019b      	lsls	r3, r3, #6
 8000d04:	431c      	orrs	r4, r3
 8000d06:	011b      	lsls	r3, r3, #4
 8000d08:	d400      	bmi.n	8000d0c <__aeabi_fmul+0xf0>
 8000d0a:	e09b      	b.n	8000e44 <__aeabi_fmul+0x228>
 8000d0c:	2301      	movs	r3, #1
 8000d0e:	0862      	lsrs	r2, r4, #1
 8000d10:	401c      	ands	r4, r3
 8000d12:	4314      	orrs	r4, r2
 8000d14:	0002      	movs	r2, r0
 8000d16:	327f      	adds	r2, #127	; 0x7f
 8000d18:	2a00      	cmp	r2, #0
 8000d1a:	dd64      	ble.n	8000de6 <__aeabi_fmul+0x1ca>
 8000d1c:	0763      	lsls	r3, r4, #29
 8000d1e:	d004      	beq.n	8000d2a <__aeabi_fmul+0x10e>
 8000d20:	230f      	movs	r3, #15
 8000d22:	4023      	ands	r3, r4
 8000d24:	2b04      	cmp	r3, #4
 8000d26:	d000      	beq.n	8000d2a <__aeabi_fmul+0x10e>
 8000d28:	3404      	adds	r4, #4
 8000d2a:	0123      	lsls	r3, r4, #4
 8000d2c:	d503      	bpl.n	8000d36 <__aeabi_fmul+0x11a>
 8000d2e:	0002      	movs	r2, r0
 8000d30:	4b4c      	ldr	r3, [pc, #304]	; (8000e64 <__aeabi_fmul+0x248>)
 8000d32:	3280      	adds	r2, #128	; 0x80
 8000d34:	401c      	ands	r4, r3
 8000d36:	2afe      	cmp	r2, #254	; 0xfe
 8000d38:	dcbf      	bgt.n	8000cba <__aeabi_fmul+0x9e>
 8000d3a:	01a4      	lsls	r4, r4, #6
 8000d3c:	0a64      	lsrs	r4, r4, #9
 8000d3e:	b2d0      	uxtb	r0, r2
 8000d40:	e7b2      	b.n	8000ca8 <__aeabi_fmul+0x8c>
 8000d42:	4643      	mov	r3, r8
 8000d44:	2b00      	cmp	r3, #0
 8000d46:	d13d      	bne.n	8000dc4 <__aeabi_fmul+0x1a8>
 8000d48:	464a      	mov	r2, r9
 8000d4a:	3301      	adds	r3, #1
 8000d4c:	431a      	orrs	r2, r3
 8000d4e:	4691      	mov	r9, r2
 8000d50:	469c      	mov	ip, r3
 8000d52:	e792      	b.n	8000c7a <__aeabi_fmul+0x5e>
 8000d54:	2c00      	cmp	r4, #0
 8000d56:	d129      	bne.n	8000dac <__aeabi_fmul+0x190>
 8000d58:	2304      	movs	r3, #4
 8000d5a:	4699      	mov	r9, r3
 8000d5c:	3b03      	subs	r3, #3
 8000d5e:	2500      	movs	r5, #0
 8000d60:	469a      	mov	sl, r3
 8000d62:	e774      	b.n	8000c4e <__aeabi_fmul+0x32>
 8000d64:	2c00      	cmp	r4, #0
 8000d66:	d11b      	bne.n	8000da0 <__aeabi_fmul+0x184>
 8000d68:	2308      	movs	r3, #8
 8000d6a:	4699      	mov	r9, r3
 8000d6c:	3b06      	subs	r3, #6
 8000d6e:	25ff      	movs	r5, #255	; 0xff
 8000d70:	469a      	mov	sl, r3
 8000d72:	e76c      	b.n	8000c4e <__aeabi_fmul+0x32>
 8000d74:	4643      	mov	r3, r8
 8000d76:	35ff      	adds	r5, #255	; 0xff
 8000d78:	2b00      	cmp	r3, #0
 8000d7a:	d10b      	bne.n	8000d94 <__aeabi_fmul+0x178>
 8000d7c:	2302      	movs	r3, #2
 8000d7e:	464a      	mov	r2, r9
 8000d80:	431a      	orrs	r2, r3
 8000d82:	4691      	mov	r9, r2
 8000d84:	469c      	mov	ip, r3
 8000d86:	e778      	b.n	8000c7a <__aeabi_fmul+0x5e>
 8000d88:	4653      	mov	r3, sl
 8000d8a:	0031      	movs	r1, r6
 8000d8c:	2b02      	cmp	r3, #2
 8000d8e:	d000      	beq.n	8000d92 <__aeabi_fmul+0x176>
 8000d90:	e783      	b.n	8000c9a <__aeabi_fmul+0x7e>
 8000d92:	e792      	b.n	8000cba <__aeabi_fmul+0x9e>
 8000d94:	2303      	movs	r3, #3
 8000d96:	464a      	mov	r2, r9
 8000d98:	431a      	orrs	r2, r3
 8000d9a:	4691      	mov	r9, r2
 8000d9c:	469c      	mov	ip, r3
 8000d9e:	e76c      	b.n	8000c7a <__aeabi_fmul+0x5e>
 8000da0:	230c      	movs	r3, #12
 8000da2:	4699      	mov	r9, r3
 8000da4:	3b09      	subs	r3, #9
 8000da6:	25ff      	movs	r5, #255	; 0xff
 8000da8:	469a      	mov	sl, r3
 8000daa:	e750      	b.n	8000c4e <__aeabi_fmul+0x32>
 8000dac:	0020      	movs	r0, r4
 8000dae:	f002 f985 	bl	80030bc <__clzsi2>
 8000db2:	2576      	movs	r5, #118	; 0x76
 8000db4:	1f43      	subs	r3, r0, #5
 8000db6:	409c      	lsls	r4, r3
 8000db8:	2300      	movs	r3, #0
 8000dba:	426d      	negs	r5, r5
 8000dbc:	4699      	mov	r9, r3
 8000dbe:	469a      	mov	sl, r3
 8000dc0:	1a2d      	subs	r5, r5, r0
 8000dc2:	e744      	b.n	8000c4e <__aeabi_fmul+0x32>
 8000dc4:	4640      	mov	r0, r8
 8000dc6:	f002 f979 	bl	80030bc <__clzsi2>
 8000dca:	4642      	mov	r2, r8
 8000dcc:	1f43      	subs	r3, r0, #5
 8000dce:	409a      	lsls	r2, r3
 8000dd0:	2300      	movs	r3, #0
 8000dd2:	1a2d      	subs	r5, r5, r0
 8000dd4:	4690      	mov	r8, r2
 8000dd6:	469c      	mov	ip, r3
 8000dd8:	3d76      	subs	r5, #118	; 0x76
 8000dda:	e74e      	b.n	8000c7a <__aeabi_fmul+0x5e>
 8000ddc:	2480      	movs	r4, #128	; 0x80
 8000dde:	2100      	movs	r1, #0
 8000de0:	20ff      	movs	r0, #255	; 0xff
 8000de2:	03e4      	lsls	r4, r4, #15
 8000de4:	e760      	b.n	8000ca8 <__aeabi_fmul+0x8c>
 8000de6:	2301      	movs	r3, #1
 8000de8:	1a9b      	subs	r3, r3, r2
 8000dea:	2b1b      	cmp	r3, #27
 8000dec:	dd00      	ble.n	8000df0 <__aeabi_fmul+0x1d4>
 8000dee:	e759      	b.n	8000ca4 <__aeabi_fmul+0x88>
 8000df0:	0022      	movs	r2, r4
 8000df2:	309e      	adds	r0, #158	; 0x9e
 8000df4:	40da      	lsrs	r2, r3
 8000df6:	4084      	lsls	r4, r0
 8000df8:	0013      	movs	r3, r2
 8000dfa:	1e62      	subs	r2, r4, #1
 8000dfc:	4194      	sbcs	r4, r2
 8000dfe:	431c      	orrs	r4, r3
 8000e00:	0763      	lsls	r3, r4, #29
 8000e02:	d004      	beq.n	8000e0e <__aeabi_fmul+0x1f2>
 8000e04:	230f      	movs	r3, #15
 8000e06:	4023      	ands	r3, r4
 8000e08:	2b04      	cmp	r3, #4
 8000e0a:	d000      	beq.n	8000e0e <__aeabi_fmul+0x1f2>
 8000e0c:	3404      	adds	r4, #4
 8000e0e:	0163      	lsls	r3, r4, #5
 8000e10:	d51a      	bpl.n	8000e48 <__aeabi_fmul+0x22c>
 8000e12:	2001      	movs	r0, #1
 8000e14:	2400      	movs	r4, #0
 8000e16:	e747      	b.n	8000ca8 <__aeabi_fmul+0x8c>
 8000e18:	2080      	movs	r0, #128	; 0x80
 8000e1a:	03c0      	lsls	r0, r0, #15
 8000e1c:	4204      	tst	r4, r0
 8000e1e:	d009      	beq.n	8000e34 <__aeabi_fmul+0x218>
 8000e20:	4643      	mov	r3, r8
 8000e22:	4203      	tst	r3, r0
 8000e24:	d106      	bne.n	8000e34 <__aeabi_fmul+0x218>
 8000e26:	4644      	mov	r4, r8
 8000e28:	4304      	orrs	r4, r0
 8000e2a:	0264      	lsls	r4, r4, #9
 8000e2c:	0039      	movs	r1, r7
 8000e2e:	20ff      	movs	r0, #255	; 0xff
 8000e30:	0a64      	lsrs	r4, r4, #9
 8000e32:	e739      	b.n	8000ca8 <__aeabi_fmul+0x8c>
 8000e34:	2080      	movs	r0, #128	; 0x80
 8000e36:	03c0      	lsls	r0, r0, #15
 8000e38:	4304      	orrs	r4, r0
 8000e3a:	0264      	lsls	r4, r4, #9
 8000e3c:	0031      	movs	r1, r6
 8000e3e:	20ff      	movs	r0, #255	; 0xff
 8000e40:	0a64      	lsrs	r4, r4, #9
 8000e42:	e731      	b.n	8000ca8 <__aeabi_fmul+0x8c>
 8000e44:	0028      	movs	r0, r5
 8000e46:	e765      	b.n	8000d14 <__aeabi_fmul+0xf8>
 8000e48:	01a4      	lsls	r4, r4, #6
 8000e4a:	2000      	movs	r0, #0
 8000e4c:	0a64      	lsrs	r4, r4, #9
 8000e4e:	e72b      	b.n	8000ca8 <__aeabi_fmul+0x8c>
 8000e50:	2080      	movs	r0, #128	; 0x80
 8000e52:	03c0      	lsls	r0, r0, #15
 8000e54:	4304      	orrs	r4, r0
 8000e56:	0264      	lsls	r4, r4, #9
 8000e58:	20ff      	movs	r0, #255	; 0xff
 8000e5a:	0a64      	lsrs	r4, r4, #9
 8000e5c:	e724      	b.n	8000ca8 <__aeabi_fmul+0x8c>
 8000e5e:	46c0      	nop			; (mov r8, r8)
 8000e60:	0800a800 	.word	0x0800a800
 8000e64:	f7ffffff 	.word	0xf7ffffff

08000e68 <__aeabi_fsub>:
 8000e68:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8000e6a:	46ce      	mov	lr, r9
 8000e6c:	4647      	mov	r7, r8
 8000e6e:	0243      	lsls	r3, r0, #9
 8000e70:	0a5b      	lsrs	r3, r3, #9
 8000e72:	024e      	lsls	r6, r1, #9
 8000e74:	00da      	lsls	r2, r3, #3
 8000e76:	4694      	mov	ip, r2
 8000e78:	0a72      	lsrs	r2, r6, #9
 8000e7a:	4691      	mov	r9, r2
 8000e7c:	0045      	lsls	r5, r0, #1
 8000e7e:	004a      	lsls	r2, r1, #1
 8000e80:	b580      	push	{r7, lr}
 8000e82:	0e2d      	lsrs	r5, r5, #24
 8000e84:	001f      	movs	r7, r3
 8000e86:	0fc4      	lsrs	r4, r0, #31
 8000e88:	0e12      	lsrs	r2, r2, #24
 8000e8a:	0fc9      	lsrs	r1, r1, #31
 8000e8c:	09b6      	lsrs	r6, r6, #6
 8000e8e:	2aff      	cmp	r2, #255	; 0xff
 8000e90:	d05b      	beq.n	8000f4a <__aeabi_fsub+0xe2>
 8000e92:	2001      	movs	r0, #1
 8000e94:	4041      	eors	r1, r0
 8000e96:	428c      	cmp	r4, r1
 8000e98:	d039      	beq.n	8000f0e <__aeabi_fsub+0xa6>
 8000e9a:	1aa8      	subs	r0, r5, r2
 8000e9c:	2800      	cmp	r0, #0
 8000e9e:	dd5a      	ble.n	8000f56 <__aeabi_fsub+0xee>
 8000ea0:	2a00      	cmp	r2, #0
 8000ea2:	d06a      	beq.n	8000f7a <__aeabi_fsub+0x112>
 8000ea4:	2dff      	cmp	r5, #255	; 0xff
 8000ea6:	d100      	bne.n	8000eaa <__aeabi_fsub+0x42>
 8000ea8:	e0d9      	b.n	800105e <__aeabi_fsub+0x1f6>
 8000eaa:	2280      	movs	r2, #128	; 0x80
 8000eac:	04d2      	lsls	r2, r2, #19
 8000eae:	4316      	orrs	r6, r2
 8000eb0:	281b      	cmp	r0, #27
 8000eb2:	dc00      	bgt.n	8000eb6 <__aeabi_fsub+0x4e>
 8000eb4:	e0e9      	b.n	800108a <__aeabi_fsub+0x222>
 8000eb6:	2001      	movs	r0, #1
 8000eb8:	4663      	mov	r3, ip
 8000eba:	1a18      	subs	r0, r3, r0
 8000ebc:	0143      	lsls	r3, r0, #5
 8000ebe:	d400      	bmi.n	8000ec2 <__aeabi_fsub+0x5a>
 8000ec0:	e0b4      	b.n	800102c <__aeabi_fsub+0x1c4>
 8000ec2:	0180      	lsls	r0, r0, #6
 8000ec4:	0987      	lsrs	r7, r0, #6
 8000ec6:	0038      	movs	r0, r7
 8000ec8:	f002 f8f8 	bl	80030bc <__clzsi2>
 8000ecc:	3805      	subs	r0, #5
 8000ece:	4087      	lsls	r7, r0
 8000ed0:	4285      	cmp	r5, r0
 8000ed2:	dc00      	bgt.n	8000ed6 <__aeabi_fsub+0x6e>
 8000ed4:	e0cc      	b.n	8001070 <__aeabi_fsub+0x208>
 8000ed6:	1a2d      	subs	r5, r5, r0
 8000ed8:	48b5      	ldr	r0, [pc, #724]	; (80011b0 <__aeabi_fsub+0x348>)
 8000eda:	4038      	ands	r0, r7
 8000edc:	0743      	lsls	r3, r0, #29
 8000ede:	d004      	beq.n	8000eea <__aeabi_fsub+0x82>
 8000ee0:	230f      	movs	r3, #15
 8000ee2:	4003      	ands	r3, r0
 8000ee4:	2b04      	cmp	r3, #4
 8000ee6:	d000      	beq.n	8000eea <__aeabi_fsub+0x82>
 8000ee8:	3004      	adds	r0, #4
 8000eea:	0143      	lsls	r3, r0, #5
 8000eec:	d400      	bmi.n	8000ef0 <__aeabi_fsub+0x88>
 8000eee:	e0a0      	b.n	8001032 <__aeabi_fsub+0x1ca>
 8000ef0:	1c6a      	adds	r2, r5, #1
 8000ef2:	2dfe      	cmp	r5, #254	; 0xfe
 8000ef4:	d100      	bne.n	8000ef8 <__aeabi_fsub+0x90>
 8000ef6:	e08d      	b.n	8001014 <__aeabi_fsub+0x1ac>
 8000ef8:	0180      	lsls	r0, r0, #6
 8000efa:	0a47      	lsrs	r7, r0, #9
 8000efc:	b2d2      	uxtb	r2, r2
 8000efe:	05d0      	lsls	r0, r2, #23
 8000f00:	4338      	orrs	r0, r7
 8000f02:	07e4      	lsls	r4, r4, #31
 8000f04:	4320      	orrs	r0, r4
 8000f06:	bcc0      	pop	{r6, r7}
 8000f08:	46b9      	mov	r9, r7
 8000f0a:	46b0      	mov	r8, r6
 8000f0c:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8000f0e:	1aa8      	subs	r0, r5, r2
 8000f10:	4680      	mov	r8, r0
 8000f12:	2800      	cmp	r0, #0
 8000f14:	dd45      	ble.n	8000fa2 <__aeabi_fsub+0x13a>
 8000f16:	2a00      	cmp	r2, #0
 8000f18:	d070      	beq.n	8000ffc <__aeabi_fsub+0x194>
 8000f1a:	2dff      	cmp	r5, #255	; 0xff
 8000f1c:	d100      	bne.n	8000f20 <__aeabi_fsub+0xb8>
 8000f1e:	e09e      	b.n	800105e <__aeabi_fsub+0x1f6>
 8000f20:	2380      	movs	r3, #128	; 0x80
 8000f22:	04db      	lsls	r3, r3, #19
 8000f24:	431e      	orrs	r6, r3
 8000f26:	4643      	mov	r3, r8
 8000f28:	2b1b      	cmp	r3, #27
 8000f2a:	dc00      	bgt.n	8000f2e <__aeabi_fsub+0xc6>
 8000f2c:	e0d2      	b.n	80010d4 <__aeabi_fsub+0x26c>
 8000f2e:	2001      	movs	r0, #1
 8000f30:	4460      	add	r0, ip
 8000f32:	0143      	lsls	r3, r0, #5
 8000f34:	d57a      	bpl.n	800102c <__aeabi_fsub+0x1c4>
 8000f36:	3501      	adds	r5, #1
 8000f38:	2dff      	cmp	r5, #255	; 0xff
 8000f3a:	d06b      	beq.n	8001014 <__aeabi_fsub+0x1ac>
 8000f3c:	2301      	movs	r3, #1
 8000f3e:	4a9d      	ldr	r2, [pc, #628]	; (80011b4 <__aeabi_fsub+0x34c>)
 8000f40:	4003      	ands	r3, r0
 8000f42:	0840      	lsrs	r0, r0, #1
 8000f44:	4010      	ands	r0, r2
 8000f46:	4318      	orrs	r0, r3
 8000f48:	e7c8      	b.n	8000edc <__aeabi_fsub+0x74>
 8000f4a:	2e00      	cmp	r6, #0
 8000f4c:	d020      	beq.n	8000f90 <__aeabi_fsub+0x128>
 8000f4e:	428c      	cmp	r4, r1
 8000f50:	d023      	beq.n	8000f9a <__aeabi_fsub+0x132>
 8000f52:	0028      	movs	r0, r5
 8000f54:	38ff      	subs	r0, #255	; 0xff
 8000f56:	2800      	cmp	r0, #0
 8000f58:	d039      	beq.n	8000fce <__aeabi_fsub+0x166>
 8000f5a:	1b57      	subs	r7, r2, r5
 8000f5c:	2d00      	cmp	r5, #0
 8000f5e:	d000      	beq.n	8000f62 <__aeabi_fsub+0xfa>
 8000f60:	e09d      	b.n	800109e <__aeabi_fsub+0x236>
 8000f62:	4663      	mov	r3, ip
 8000f64:	2b00      	cmp	r3, #0
 8000f66:	d100      	bne.n	8000f6a <__aeabi_fsub+0x102>
 8000f68:	e0db      	b.n	8001122 <__aeabi_fsub+0x2ba>
 8000f6a:	1e7b      	subs	r3, r7, #1
 8000f6c:	2f01      	cmp	r7, #1
 8000f6e:	d100      	bne.n	8000f72 <__aeabi_fsub+0x10a>
 8000f70:	e10d      	b.n	800118e <__aeabi_fsub+0x326>
 8000f72:	2fff      	cmp	r7, #255	; 0xff
 8000f74:	d071      	beq.n	800105a <__aeabi_fsub+0x1f2>
 8000f76:	001f      	movs	r7, r3
 8000f78:	e098      	b.n	80010ac <__aeabi_fsub+0x244>
 8000f7a:	2e00      	cmp	r6, #0
 8000f7c:	d100      	bne.n	8000f80 <__aeabi_fsub+0x118>
 8000f7e:	e0a7      	b.n	80010d0 <__aeabi_fsub+0x268>
 8000f80:	1e42      	subs	r2, r0, #1
 8000f82:	2801      	cmp	r0, #1
 8000f84:	d100      	bne.n	8000f88 <__aeabi_fsub+0x120>
 8000f86:	e0e6      	b.n	8001156 <__aeabi_fsub+0x2ee>
 8000f88:	28ff      	cmp	r0, #255	; 0xff
 8000f8a:	d068      	beq.n	800105e <__aeabi_fsub+0x1f6>
 8000f8c:	0010      	movs	r0, r2
 8000f8e:	e78f      	b.n	8000eb0 <__aeabi_fsub+0x48>
 8000f90:	2001      	movs	r0, #1
 8000f92:	4041      	eors	r1, r0
 8000f94:	42a1      	cmp	r1, r4
 8000f96:	d000      	beq.n	8000f9a <__aeabi_fsub+0x132>
 8000f98:	e77f      	b.n	8000e9a <__aeabi_fsub+0x32>
 8000f9a:	20ff      	movs	r0, #255	; 0xff
 8000f9c:	4240      	negs	r0, r0
 8000f9e:	4680      	mov	r8, r0
 8000fa0:	44a8      	add	r8, r5
 8000fa2:	4640      	mov	r0, r8
 8000fa4:	2800      	cmp	r0, #0
 8000fa6:	d038      	beq.n	800101a <__aeabi_fsub+0x1b2>
 8000fa8:	1b51      	subs	r1, r2, r5
 8000faa:	2d00      	cmp	r5, #0
 8000fac:	d100      	bne.n	8000fb0 <__aeabi_fsub+0x148>
 8000fae:	e0ae      	b.n	800110e <__aeabi_fsub+0x2a6>
 8000fb0:	2aff      	cmp	r2, #255	; 0xff
 8000fb2:	d100      	bne.n	8000fb6 <__aeabi_fsub+0x14e>
 8000fb4:	e0df      	b.n	8001176 <__aeabi_fsub+0x30e>
 8000fb6:	2380      	movs	r3, #128	; 0x80
 8000fb8:	4660      	mov	r0, ip
 8000fba:	04db      	lsls	r3, r3, #19
 8000fbc:	4318      	orrs	r0, r3
 8000fbe:	4684      	mov	ip, r0
 8000fc0:	291b      	cmp	r1, #27
 8000fc2:	dc00      	bgt.n	8000fc6 <__aeabi_fsub+0x15e>
 8000fc4:	e0d9      	b.n	800117a <__aeabi_fsub+0x312>
 8000fc6:	2001      	movs	r0, #1
 8000fc8:	0015      	movs	r5, r2
 8000fca:	1980      	adds	r0, r0, r6
 8000fcc:	e7b1      	b.n	8000f32 <__aeabi_fsub+0xca>
 8000fce:	20fe      	movs	r0, #254	; 0xfe
 8000fd0:	1c6a      	adds	r2, r5, #1
 8000fd2:	4210      	tst	r0, r2
 8000fd4:	d171      	bne.n	80010ba <__aeabi_fsub+0x252>
 8000fd6:	2d00      	cmp	r5, #0
 8000fd8:	d000      	beq.n	8000fdc <__aeabi_fsub+0x174>
 8000fda:	e0a6      	b.n	800112a <__aeabi_fsub+0x2c2>
 8000fdc:	4663      	mov	r3, ip
 8000fde:	2b00      	cmp	r3, #0
 8000fe0:	d100      	bne.n	8000fe4 <__aeabi_fsub+0x17c>
 8000fe2:	e0d9      	b.n	8001198 <__aeabi_fsub+0x330>
 8000fe4:	2200      	movs	r2, #0
 8000fe6:	2e00      	cmp	r6, #0
 8000fe8:	d100      	bne.n	8000fec <__aeabi_fsub+0x184>
 8000fea:	e788      	b.n	8000efe <__aeabi_fsub+0x96>
 8000fec:	1b98      	subs	r0, r3, r6
 8000fee:	0143      	lsls	r3, r0, #5
 8000ff0:	d400      	bmi.n	8000ff4 <__aeabi_fsub+0x18c>
 8000ff2:	e0e1      	b.n	80011b8 <__aeabi_fsub+0x350>
 8000ff4:	4663      	mov	r3, ip
 8000ff6:	000c      	movs	r4, r1
 8000ff8:	1af0      	subs	r0, r6, r3
 8000ffa:	e76f      	b.n	8000edc <__aeabi_fsub+0x74>
 8000ffc:	2e00      	cmp	r6, #0
 8000ffe:	d100      	bne.n	8001002 <__aeabi_fsub+0x19a>
 8001000:	e0b7      	b.n	8001172 <__aeabi_fsub+0x30a>
 8001002:	0002      	movs	r2, r0
 8001004:	3a01      	subs	r2, #1
 8001006:	2801      	cmp	r0, #1
 8001008:	d100      	bne.n	800100c <__aeabi_fsub+0x1a4>
 800100a:	e09c      	b.n	8001146 <__aeabi_fsub+0x2de>
 800100c:	28ff      	cmp	r0, #255	; 0xff
 800100e:	d026      	beq.n	800105e <__aeabi_fsub+0x1f6>
 8001010:	4690      	mov	r8, r2
 8001012:	e788      	b.n	8000f26 <__aeabi_fsub+0xbe>
 8001014:	22ff      	movs	r2, #255	; 0xff
 8001016:	2700      	movs	r7, #0
 8001018:	e771      	b.n	8000efe <__aeabi_fsub+0x96>
 800101a:	20fe      	movs	r0, #254	; 0xfe
 800101c:	1c6a      	adds	r2, r5, #1
 800101e:	4210      	tst	r0, r2
 8001020:	d064      	beq.n	80010ec <__aeabi_fsub+0x284>
 8001022:	2aff      	cmp	r2, #255	; 0xff
 8001024:	d0f6      	beq.n	8001014 <__aeabi_fsub+0x1ac>
 8001026:	0015      	movs	r5, r2
 8001028:	4466      	add	r6, ip
 800102a:	0870      	lsrs	r0, r6, #1
 800102c:	0743      	lsls	r3, r0, #29
 800102e:	d000      	beq.n	8001032 <__aeabi_fsub+0x1ca>
 8001030:	e756      	b.n	8000ee0 <__aeabi_fsub+0x78>
 8001032:	08c3      	lsrs	r3, r0, #3
 8001034:	2dff      	cmp	r5, #255	; 0xff
 8001036:	d012      	beq.n	800105e <__aeabi_fsub+0x1f6>
 8001038:	025b      	lsls	r3, r3, #9
 800103a:	0a5f      	lsrs	r7, r3, #9
 800103c:	b2ea      	uxtb	r2, r5
 800103e:	e75e      	b.n	8000efe <__aeabi_fsub+0x96>
 8001040:	4662      	mov	r2, ip
 8001042:	2a00      	cmp	r2, #0
 8001044:	d100      	bne.n	8001048 <__aeabi_fsub+0x1e0>
 8001046:	e096      	b.n	8001176 <__aeabi_fsub+0x30e>
 8001048:	2e00      	cmp	r6, #0
 800104a:	d008      	beq.n	800105e <__aeabi_fsub+0x1f6>
 800104c:	2280      	movs	r2, #128	; 0x80
 800104e:	03d2      	lsls	r2, r2, #15
 8001050:	4213      	tst	r3, r2
 8001052:	d004      	beq.n	800105e <__aeabi_fsub+0x1f6>
 8001054:	4648      	mov	r0, r9
 8001056:	4210      	tst	r0, r2
 8001058:	d101      	bne.n	800105e <__aeabi_fsub+0x1f6>
 800105a:	000c      	movs	r4, r1
 800105c:	464b      	mov	r3, r9
 800105e:	2b00      	cmp	r3, #0
 8001060:	d0d8      	beq.n	8001014 <__aeabi_fsub+0x1ac>
 8001062:	2780      	movs	r7, #128	; 0x80
 8001064:	03ff      	lsls	r7, r7, #15
 8001066:	431f      	orrs	r7, r3
 8001068:	027f      	lsls	r7, r7, #9
 800106a:	22ff      	movs	r2, #255	; 0xff
 800106c:	0a7f      	lsrs	r7, r7, #9
 800106e:	e746      	b.n	8000efe <__aeabi_fsub+0x96>
 8001070:	2320      	movs	r3, #32
 8001072:	003a      	movs	r2, r7
 8001074:	1b45      	subs	r5, r0, r5
 8001076:	0038      	movs	r0, r7
 8001078:	3501      	adds	r5, #1
 800107a:	40ea      	lsrs	r2, r5
 800107c:	1b5d      	subs	r5, r3, r5
 800107e:	40a8      	lsls	r0, r5
 8001080:	1e43      	subs	r3, r0, #1
 8001082:	4198      	sbcs	r0, r3
 8001084:	2500      	movs	r5, #0
 8001086:	4310      	orrs	r0, r2
 8001088:	e728      	b.n	8000edc <__aeabi_fsub+0x74>
 800108a:	2320      	movs	r3, #32
 800108c:	1a1b      	subs	r3, r3, r0
 800108e:	0032      	movs	r2, r6
 8001090:	409e      	lsls	r6, r3
 8001092:	40c2      	lsrs	r2, r0
 8001094:	0030      	movs	r0, r6
 8001096:	1e43      	subs	r3, r0, #1
 8001098:	4198      	sbcs	r0, r3
 800109a:	4310      	orrs	r0, r2
 800109c:	e70c      	b.n	8000eb8 <__aeabi_fsub+0x50>
 800109e:	2aff      	cmp	r2, #255	; 0xff
 80010a0:	d0db      	beq.n	800105a <__aeabi_fsub+0x1f2>
 80010a2:	2380      	movs	r3, #128	; 0x80
 80010a4:	4660      	mov	r0, ip
 80010a6:	04db      	lsls	r3, r3, #19
 80010a8:	4318      	orrs	r0, r3
 80010aa:	4684      	mov	ip, r0
 80010ac:	2f1b      	cmp	r7, #27
 80010ae:	dd56      	ble.n	800115e <__aeabi_fsub+0x2f6>
 80010b0:	2001      	movs	r0, #1
 80010b2:	000c      	movs	r4, r1
 80010b4:	0015      	movs	r5, r2
 80010b6:	1a30      	subs	r0, r6, r0
 80010b8:	e700      	b.n	8000ebc <__aeabi_fsub+0x54>
 80010ba:	4663      	mov	r3, ip
 80010bc:	1b9f      	subs	r7, r3, r6
 80010be:	017b      	lsls	r3, r7, #5
 80010c0:	d43d      	bmi.n	800113e <__aeabi_fsub+0x2d6>
 80010c2:	2f00      	cmp	r7, #0
 80010c4:	d000      	beq.n	80010c8 <__aeabi_fsub+0x260>
 80010c6:	e6fe      	b.n	8000ec6 <__aeabi_fsub+0x5e>
 80010c8:	2400      	movs	r4, #0
 80010ca:	2200      	movs	r2, #0
 80010cc:	2700      	movs	r7, #0
 80010ce:	e716      	b.n	8000efe <__aeabi_fsub+0x96>
 80010d0:	0005      	movs	r5, r0
 80010d2:	e7af      	b.n	8001034 <__aeabi_fsub+0x1cc>
 80010d4:	0032      	movs	r2, r6
 80010d6:	4643      	mov	r3, r8
 80010d8:	4641      	mov	r1, r8
 80010da:	40da      	lsrs	r2, r3
 80010dc:	2320      	movs	r3, #32
 80010de:	1a5b      	subs	r3, r3, r1
 80010e0:	409e      	lsls	r6, r3
 80010e2:	0030      	movs	r0, r6
 80010e4:	1e43      	subs	r3, r0, #1
 80010e6:	4198      	sbcs	r0, r3
 80010e8:	4310      	orrs	r0, r2
 80010ea:	e721      	b.n	8000f30 <__aeabi_fsub+0xc8>
 80010ec:	2d00      	cmp	r5, #0
 80010ee:	d1a7      	bne.n	8001040 <__aeabi_fsub+0x1d8>
 80010f0:	4663      	mov	r3, ip
 80010f2:	2b00      	cmp	r3, #0
 80010f4:	d059      	beq.n	80011aa <__aeabi_fsub+0x342>
 80010f6:	2200      	movs	r2, #0
 80010f8:	2e00      	cmp	r6, #0
 80010fa:	d100      	bne.n	80010fe <__aeabi_fsub+0x296>
 80010fc:	e6ff      	b.n	8000efe <__aeabi_fsub+0x96>
 80010fe:	0030      	movs	r0, r6
 8001100:	4460      	add	r0, ip
 8001102:	0143      	lsls	r3, r0, #5
 8001104:	d592      	bpl.n	800102c <__aeabi_fsub+0x1c4>
 8001106:	4b2a      	ldr	r3, [pc, #168]	; (80011b0 <__aeabi_fsub+0x348>)
 8001108:	3501      	adds	r5, #1
 800110a:	4018      	ands	r0, r3
 800110c:	e78e      	b.n	800102c <__aeabi_fsub+0x1c4>
 800110e:	4663      	mov	r3, ip
 8001110:	2b00      	cmp	r3, #0
 8001112:	d047      	beq.n	80011a4 <__aeabi_fsub+0x33c>
 8001114:	1e4b      	subs	r3, r1, #1
 8001116:	2901      	cmp	r1, #1
 8001118:	d015      	beq.n	8001146 <__aeabi_fsub+0x2de>
 800111a:	29ff      	cmp	r1, #255	; 0xff
 800111c:	d02b      	beq.n	8001176 <__aeabi_fsub+0x30e>
 800111e:	0019      	movs	r1, r3
 8001120:	e74e      	b.n	8000fc0 <__aeabi_fsub+0x158>
 8001122:	000c      	movs	r4, r1
 8001124:	464b      	mov	r3, r9
 8001126:	003d      	movs	r5, r7
 8001128:	e784      	b.n	8001034 <__aeabi_fsub+0x1cc>
 800112a:	4662      	mov	r2, ip
 800112c:	2a00      	cmp	r2, #0
 800112e:	d18b      	bne.n	8001048 <__aeabi_fsub+0x1e0>
 8001130:	2e00      	cmp	r6, #0
 8001132:	d192      	bne.n	800105a <__aeabi_fsub+0x1f2>
 8001134:	2780      	movs	r7, #128	; 0x80
 8001136:	2400      	movs	r4, #0
 8001138:	22ff      	movs	r2, #255	; 0xff
 800113a:	03ff      	lsls	r7, r7, #15
 800113c:	e6df      	b.n	8000efe <__aeabi_fsub+0x96>
 800113e:	4663      	mov	r3, ip
 8001140:	000c      	movs	r4, r1
 8001142:	1af7      	subs	r7, r6, r3
 8001144:	e6bf      	b.n	8000ec6 <__aeabi_fsub+0x5e>
 8001146:	0030      	movs	r0, r6
 8001148:	4460      	add	r0, ip
 800114a:	2501      	movs	r5, #1
 800114c:	0143      	lsls	r3, r0, #5
 800114e:	d400      	bmi.n	8001152 <__aeabi_fsub+0x2ea>
 8001150:	e76c      	b.n	800102c <__aeabi_fsub+0x1c4>
 8001152:	2502      	movs	r5, #2
 8001154:	e6f2      	b.n	8000f3c <__aeabi_fsub+0xd4>
 8001156:	4663      	mov	r3, ip
 8001158:	2501      	movs	r5, #1
 800115a:	1b98      	subs	r0, r3, r6
 800115c:	e6ae      	b.n	8000ebc <__aeabi_fsub+0x54>
 800115e:	2320      	movs	r3, #32
 8001160:	4664      	mov	r4, ip
 8001162:	4660      	mov	r0, ip
 8001164:	40fc      	lsrs	r4, r7
 8001166:	1bdf      	subs	r7, r3, r7
 8001168:	40b8      	lsls	r0, r7
 800116a:	1e43      	subs	r3, r0, #1
 800116c:	4198      	sbcs	r0, r3
 800116e:	4320      	orrs	r0, r4
 8001170:	e79f      	b.n	80010b2 <__aeabi_fsub+0x24a>
 8001172:	0005      	movs	r5, r0
 8001174:	e75e      	b.n	8001034 <__aeabi_fsub+0x1cc>
 8001176:	464b      	mov	r3, r9
 8001178:	e771      	b.n	800105e <__aeabi_fsub+0x1f6>
 800117a:	2320      	movs	r3, #32
 800117c:	4665      	mov	r5, ip
 800117e:	4660      	mov	r0, ip
 8001180:	40cd      	lsrs	r5, r1
 8001182:	1a59      	subs	r1, r3, r1
 8001184:	4088      	lsls	r0, r1
 8001186:	1e43      	subs	r3, r0, #1
 8001188:	4198      	sbcs	r0, r3
 800118a:	4328      	orrs	r0, r5
 800118c:	e71c      	b.n	8000fc8 <__aeabi_fsub+0x160>
 800118e:	4663      	mov	r3, ip
 8001190:	000c      	movs	r4, r1
 8001192:	2501      	movs	r5, #1
 8001194:	1af0      	subs	r0, r6, r3
 8001196:	e691      	b.n	8000ebc <__aeabi_fsub+0x54>
 8001198:	2e00      	cmp	r6, #0
 800119a:	d095      	beq.n	80010c8 <__aeabi_fsub+0x260>
 800119c:	000c      	movs	r4, r1
 800119e:	464f      	mov	r7, r9
 80011a0:	2200      	movs	r2, #0
 80011a2:	e6ac      	b.n	8000efe <__aeabi_fsub+0x96>
 80011a4:	464b      	mov	r3, r9
 80011a6:	000d      	movs	r5, r1
 80011a8:	e744      	b.n	8001034 <__aeabi_fsub+0x1cc>
 80011aa:	464f      	mov	r7, r9
 80011ac:	2200      	movs	r2, #0
 80011ae:	e6a6      	b.n	8000efe <__aeabi_fsub+0x96>
 80011b0:	fbffffff 	.word	0xfbffffff
 80011b4:	7dffffff 	.word	0x7dffffff
 80011b8:	2800      	cmp	r0, #0
 80011ba:	d000      	beq.n	80011be <__aeabi_fsub+0x356>
 80011bc:	e736      	b.n	800102c <__aeabi_fsub+0x1c4>
 80011be:	2400      	movs	r4, #0
 80011c0:	2700      	movs	r7, #0
 80011c2:	e69c      	b.n	8000efe <__aeabi_fsub+0x96>

080011c4 <__aeabi_fcmpun>:
 80011c4:	0243      	lsls	r3, r0, #9
 80011c6:	024a      	lsls	r2, r1, #9
 80011c8:	0040      	lsls	r0, r0, #1
 80011ca:	0049      	lsls	r1, r1, #1
 80011cc:	0a5b      	lsrs	r3, r3, #9
 80011ce:	0a52      	lsrs	r2, r2, #9
 80011d0:	0e09      	lsrs	r1, r1, #24
 80011d2:	0e00      	lsrs	r0, r0, #24
 80011d4:	28ff      	cmp	r0, #255	; 0xff
 80011d6:	d006      	beq.n	80011e6 <__aeabi_fcmpun+0x22>
 80011d8:	2000      	movs	r0, #0
 80011da:	29ff      	cmp	r1, #255	; 0xff
 80011dc:	d102      	bne.n	80011e4 <__aeabi_fcmpun+0x20>
 80011de:	1e53      	subs	r3, r2, #1
 80011e0:	419a      	sbcs	r2, r3
 80011e2:	0010      	movs	r0, r2
 80011e4:	4770      	bx	lr
 80011e6:	38fe      	subs	r0, #254	; 0xfe
 80011e8:	2b00      	cmp	r3, #0
 80011ea:	d1fb      	bne.n	80011e4 <__aeabi_fcmpun+0x20>
 80011ec:	e7f4      	b.n	80011d8 <__aeabi_fcmpun+0x14>
 80011ee:	46c0      	nop			; (mov r8, r8)

080011f0 <__aeabi_f2iz>:
 80011f0:	0241      	lsls	r1, r0, #9
 80011f2:	0042      	lsls	r2, r0, #1
 80011f4:	0fc3      	lsrs	r3, r0, #31
 80011f6:	0a49      	lsrs	r1, r1, #9
 80011f8:	2000      	movs	r0, #0
 80011fa:	0e12      	lsrs	r2, r2, #24
 80011fc:	2a7e      	cmp	r2, #126	; 0x7e
 80011fe:	dd03      	ble.n	8001208 <__aeabi_f2iz+0x18>
 8001200:	2a9d      	cmp	r2, #157	; 0x9d
 8001202:	dd02      	ble.n	800120a <__aeabi_f2iz+0x1a>
 8001204:	4a09      	ldr	r2, [pc, #36]	; (800122c <__aeabi_f2iz+0x3c>)
 8001206:	1898      	adds	r0, r3, r2
 8001208:	4770      	bx	lr
 800120a:	2080      	movs	r0, #128	; 0x80
 800120c:	0400      	lsls	r0, r0, #16
 800120e:	4301      	orrs	r1, r0
 8001210:	2a95      	cmp	r2, #149	; 0x95
 8001212:	dc07      	bgt.n	8001224 <__aeabi_f2iz+0x34>
 8001214:	2096      	movs	r0, #150	; 0x96
 8001216:	1a82      	subs	r2, r0, r2
 8001218:	40d1      	lsrs	r1, r2
 800121a:	4248      	negs	r0, r1
 800121c:	2b00      	cmp	r3, #0
 800121e:	d1f3      	bne.n	8001208 <__aeabi_f2iz+0x18>
 8001220:	0008      	movs	r0, r1
 8001222:	e7f1      	b.n	8001208 <__aeabi_f2iz+0x18>
 8001224:	3a96      	subs	r2, #150	; 0x96
 8001226:	4091      	lsls	r1, r2
 8001228:	e7f7      	b.n	800121a <__aeabi_f2iz+0x2a>
 800122a:	46c0      	nop			; (mov r8, r8)
 800122c:	7fffffff 	.word	0x7fffffff

08001230 <__aeabi_i2f>:
 8001230:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8001232:	2800      	cmp	r0, #0
 8001234:	d013      	beq.n	800125e <__aeabi_i2f+0x2e>
 8001236:	17c3      	asrs	r3, r0, #31
 8001238:	18c6      	adds	r6, r0, r3
 800123a:	405e      	eors	r6, r3
 800123c:	0fc4      	lsrs	r4, r0, #31
 800123e:	0030      	movs	r0, r6
 8001240:	f001 ff3c 	bl	80030bc <__clzsi2>
 8001244:	239e      	movs	r3, #158	; 0x9e
 8001246:	0005      	movs	r5, r0
 8001248:	1a1b      	subs	r3, r3, r0
 800124a:	2b96      	cmp	r3, #150	; 0x96
 800124c:	dc0f      	bgt.n	800126e <__aeabi_i2f+0x3e>
 800124e:	2808      	cmp	r0, #8
 8001250:	dd01      	ble.n	8001256 <__aeabi_i2f+0x26>
 8001252:	3d08      	subs	r5, #8
 8001254:	40ae      	lsls	r6, r5
 8001256:	0276      	lsls	r6, r6, #9
 8001258:	0a76      	lsrs	r6, r6, #9
 800125a:	b2d8      	uxtb	r0, r3
 800125c:	e002      	b.n	8001264 <__aeabi_i2f+0x34>
 800125e:	2400      	movs	r4, #0
 8001260:	2000      	movs	r0, #0
 8001262:	2600      	movs	r6, #0
 8001264:	05c0      	lsls	r0, r0, #23
 8001266:	4330      	orrs	r0, r6
 8001268:	07e4      	lsls	r4, r4, #31
 800126a:	4320      	orrs	r0, r4
 800126c:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800126e:	2b99      	cmp	r3, #153	; 0x99
 8001270:	dd0c      	ble.n	800128c <__aeabi_i2f+0x5c>
 8001272:	2205      	movs	r2, #5
 8001274:	0031      	movs	r1, r6
 8001276:	1a12      	subs	r2, r2, r0
 8001278:	40d1      	lsrs	r1, r2
 800127a:	000a      	movs	r2, r1
 800127c:	0001      	movs	r1, r0
 800127e:	0030      	movs	r0, r6
 8001280:	311b      	adds	r1, #27
 8001282:	4088      	lsls	r0, r1
 8001284:	1e41      	subs	r1, r0, #1
 8001286:	4188      	sbcs	r0, r1
 8001288:	4302      	orrs	r2, r0
 800128a:	0016      	movs	r6, r2
 800128c:	2d05      	cmp	r5, #5
 800128e:	dc12      	bgt.n	80012b6 <__aeabi_i2f+0x86>
 8001290:	0031      	movs	r1, r6
 8001292:	4f0d      	ldr	r7, [pc, #52]	; (80012c8 <__aeabi_i2f+0x98>)
 8001294:	4039      	ands	r1, r7
 8001296:	0772      	lsls	r2, r6, #29
 8001298:	d009      	beq.n	80012ae <__aeabi_i2f+0x7e>
 800129a:	200f      	movs	r0, #15
 800129c:	4030      	ands	r0, r6
 800129e:	2804      	cmp	r0, #4
 80012a0:	d005      	beq.n	80012ae <__aeabi_i2f+0x7e>
 80012a2:	3104      	adds	r1, #4
 80012a4:	014a      	lsls	r2, r1, #5
 80012a6:	d502      	bpl.n	80012ae <__aeabi_i2f+0x7e>
 80012a8:	239f      	movs	r3, #159	; 0x9f
 80012aa:	4039      	ands	r1, r7
 80012ac:	1b5b      	subs	r3, r3, r5
 80012ae:	0189      	lsls	r1, r1, #6
 80012b0:	0a4e      	lsrs	r6, r1, #9
 80012b2:	b2d8      	uxtb	r0, r3
 80012b4:	e7d6      	b.n	8001264 <__aeabi_i2f+0x34>
 80012b6:	1f6a      	subs	r2, r5, #5
 80012b8:	4096      	lsls	r6, r2
 80012ba:	0031      	movs	r1, r6
 80012bc:	4f02      	ldr	r7, [pc, #8]	; (80012c8 <__aeabi_i2f+0x98>)
 80012be:	4039      	ands	r1, r7
 80012c0:	0772      	lsls	r2, r6, #29
 80012c2:	d0f4      	beq.n	80012ae <__aeabi_i2f+0x7e>
 80012c4:	e7e9      	b.n	800129a <__aeabi_i2f+0x6a>
 80012c6:	46c0      	nop			; (mov r8, r8)
 80012c8:	fbffffff 	.word	0xfbffffff

080012cc <__aeabi_ui2f>:
 80012cc:	b570      	push	{r4, r5, r6, lr}
 80012ce:	1e05      	subs	r5, r0, #0
 80012d0:	d00e      	beq.n	80012f0 <__aeabi_ui2f+0x24>
 80012d2:	f001 fef3 	bl	80030bc <__clzsi2>
 80012d6:	239e      	movs	r3, #158	; 0x9e
 80012d8:	0004      	movs	r4, r0
 80012da:	1a1b      	subs	r3, r3, r0
 80012dc:	2b96      	cmp	r3, #150	; 0x96
 80012de:	dc0c      	bgt.n	80012fa <__aeabi_ui2f+0x2e>
 80012e0:	2808      	cmp	r0, #8
 80012e2:	dd01      	ble.n	80012e8 <__aeabi_ui2f+0x1c>
 80012e4:	3c08      	subs	r4, #8
 80012e6:	40a5      	lsls	r5, r4
 80012e8:	026d      	lsls	r5, r5, #9
 80012ea:	0a6d      	lsrs	r5, r5, #9
 80012ec:	b2d8      	uxtb	r0, r3
 80012ee:	e001      	b.n	80012f4 <__aeabi_ui2f+0x28>
 80012f0:	2000      	movs	r0, #0
 80012f2:	2500      	movs	r5, #0
 80012f4:	05c0      	lsls	r0, r0, #23
 80012f6:	4328      	orrs	r0, r5
 80012f8:	bd70      	pop	{r4, r5, r6, pc}
 80012fa:	2b99      	cmp	r3, #153	; 0x99
 80012fc:	dd09      	ble.n	8001312 <__aeabi_ui2f+0x46>
 80012fe:	0002      	movs	r2, r0
 8001300:	0029      	movs	r1, r5
 8001302:	321b      	adds	r2, #27
 8001304:	4091      	lsls	r1, r2
 8001306:	1e4a      	subs	r2, r1, #1
 8001308:	4191      	sbcs	r1, r2
 800130a:	2205      	movs	r2, #5
 800130c:	1a12      	subs	r2, r2, r0
 800130e:	40d5      	lsrs	r5, r2
 8001310:	430d      	orrs	r5, r1
 8001312:	2c05      	cmp	r4, #5
 8001314:	dc12      	bgt.n	800133c <__aeabi_ui2f+0x70>
 8001316:	0029      	movs	r1, r5
 8001318:	4e0c      	ldr	r6, [pc, #48]	; (800134c <__aeabi_ui2f+0x80>)
 800131a:	4031      	ands	r1, r6
 800131c:	076a      	lsls	r2, r5, #29
 800131e:	d009      	beq.n	8001334 <__aeabi_ui2f+0x68>
 8001320:	200f      	movs	r0, #15
 8001322:	4028      	ands	r0, r5
 8001324:	2804      	cmp	r0, #4
 8001326:	d005      	beq.n	8001334 <__aeabi_ui2f+0x68>
 8001328:	3104      	adds	r1, #4
 800132a:	014a      	lsls	r2, r1, #5
 800132c:	d502      	bpl.n	8001334 <__aeabi_ui2f+0x68>
 800132e:	239f      	movs	r3, #159	; 0x9f
 8001330:	4031      	ands	r1, r6
 8001332:	1b1b      	subs	r3, r3, r4
 8001334:	0189      	lsls	r1, r1, #6
 8001336:	0a4d      	lsrs	r5, r1, #9
 8001338:	b2d8      	uxtb	r0, r3
 800133a:	e7db      	b.n	80012f4 <__aeabi_ui2f+0x28>
 800133c:	1f62      	subs	r2, r4, #5
 800133e:	4095      	lsls	r5, r2
 8001340:	0029      	movs	r1, r5
 8001342:	4e02      	ldr	r6, [pc, #8]	; (800134c <__aeabi_ui2f+0x80>)
 8001344:	4031      	ands	r1, r6
 8001346:	076a      	lsls	r2, r5, #29
 8001348:	d0f4      	beq.n	8001334 <__aeabi_ui2f+0x68>
 800134a:	e7e9      	b.n	8001320 <__aeabi_ui2f+0x54>
 800134c:	fbffffff 	.word	0xfbffffff

08001350 <__aeabi_dadd>:
 8001350:	b5f0      	push	{r4, r5, r6, r7, lr}
 8001352:	464f      	mov	r7, r9
 8001354:	4646      	mov	r6, r8
 8001356:	46d6      	mov	lr, sl
 8001358:	000d      	movs	r5, r1
 800135a:	0004      	movs	r4, r0
 800135c:	b5c0      	push	{r6, r7, lr}
 800135e:	001f      	movs	r7, r3
 8001360:	0011      	movs	r1, r2
 8001362:	0328      	lsls	r0, r5, #12
 8001364:	0f62      	lsrs	r2, r4, #29
 8001366:	0a40      	lsrs	r0, r0, #9
 8001368:	4310      	orrs	r0, r2
 800136a:	007a      	lsls	r2, r7, #1
 800136c:	0d52      	lsrs	r2, r2, #21
 800136e:	00e3      	lsls	r3, r4, #3
 8001370:	033c      	lsls	r4, r7, #12
 8001372:	4691      	mov	r9, r2
 8001374:	0a64      	lsrs	r4, r4, #9
 8001376:	0ffa      	lsrs	r2, r7, #31
 8001378:	0f4f      	lsrs	r7, r1, #29
 800137a:	006e      	lsls	r6, r5, #1
 800137c:	4327      	orrs	r7, r4
 800137e:	4692      	mov	sl, r2
 8001380:	46b8      	mov	r8, r7
 8001382:	0d76      	lsrs	r6, r6, #21
 8001384:	0fed      	lsrs	r5, r5, #31
 8001386:	00c9      	lsls	r1, r1, #3
 8001388:	4295      	cmp	r5, r2
 800138a:	d100      	bne.n	800138e <__aeabi_dadd+0x3e>
 800138c:	e099      	b.n	80014c2 <__aeabi_dadd+0x172>
 800138e:	464c      	mov	r4, r9
 8001390:	1b34      	subs	r4, r6, r4
 8001392:	46a4      	mov	ip, r4
 8001394:	2c00      	cmp	r4, #0
 8001396:	dc00      	bgt.n	800139a <__aeabi_dadd+0x4a>
 8001398:	e07c      	b.n	8001494 <__aeabi_dadd+0x144>
 800139a:	464a      	mov	r2, r9
 800139c:	2a00      	cmp	r2, #0
 800139e:	d100      	bne.n	80013a2 <__aeabi_dadd+0x52>
 80013a0:	e0b8      	b.n	8001514 <__aeabi_dadd+0x1c4>
 80013a2:	4ac5      	ldr	r2, [pc, #788]	; (80016b8 <__aeabi_dadd+0x368>)
 80013a4:	4296      	cmp	r6, r2
 80013a6:	d100      	bne.n	80013aa <__aeabi_dadd+0x5a>
 80013a8:	e11c      	b.n	80015e4 <__aeabi_dadd+0x294>
 80013aa:	2280      	movs	r2, #128	; 0x80
 80013ac:	003c      	movs	r4, r7
 80013ae:	0412      	lsls	r2, r2, #16
 80013b0:	4314      	orrs	r4, r2
 80013b2:	46a0      	mov	r8, r4
 80013b4:	4662      	mov	r2, ip
 80013b6:	2a38      	cmp	r2, #56	; 0x38
 80013b8:	dd00      	ble.n	80013bc <__aeabi_dadd+0x6c>
 80013ba:	e161      	b.n	8001680 <__aeabi_dadd+0x330>
 80013bc:	2a1f      	cmp	r2, #31
 80013be:	dd00      	ble.n	80013c2 <__aeabi_dadd+0x72>
 80013c0:	e1cc      	b.n	800175c <__aeabi_dadd+0x40c>
 80013c2:	4664      	mov	r4, ip
 80013c4:	2220      	movs	r2, #32
 80013c6:	1b12      	subs	r2, r2, r4
 80013c8:	4644      	mov	r4, r8
 80013ca:	4094      	lsls	r4, r2
 80013cc:	000f      	movs	r7, r1
 80013ce:	46a1      	mov	r9, r4
 80013d0:	4664      	mov	r4, ip
 80013d2:	4091      	lsls	r1, r2
 80013d4:	40e7      	lsrs	r7, r4
 80013d6:	464c      	mov	r4, r9
 80013d8:	1e4a      	subs	r2, r1, #1
 80013da:	4191      	sbcs	r1, r2
 80013dc:	433c      	orrs	r4, r7
 80013de:	4642      	mov	r2, r8
 80013e0:	4321      	orrs	r1, r4
 80013e2:	4664      	mov	r4, ip
 80013e4:	40e2      	lsrs	r2, r4
 80013e6:	1a80      	subs	r0, r0, r2
 80013e8:	1a5c      	subs	r4, r3, r1
 80013ea:	42a3      	cmp	r3, r4
 80013ec:	419b      	sbcs	r3, r3
 80013ee:	425f      	negs	r7, r3
 80013f0:	1bc7      	subs	r7, r0, r7
 80013f2:	023b      	lsls	r3, r7, #8
 80013f4:	d400      	bmi.n	80013f8 <__aeabi_dadd+0xa8>
 80013f6:	e0d0      	b.n	800159a <__aeabi_dadd+0x24a>
 80013f8:	027f      	lsls	r7, r7, #9
 80013fa:	0a7f      	lsrs	r7, r7, #9
 80013fc:	2f00      	cmp	r7, #0
 80013fe:	d100      	bne.n	8001402 <__aeabi_dadd+0xb2>
 8001400:	e0ff      	b.n	8001602 <__aeabi_dadd+0x2b2>
 8001402:	0038      	movs	r0, r7
 8001404:	f001 fe5a 	bl	80030bc <__clzsi2>
 8001408:	0001      	movs	r1, r0
 800140a:	3908      	subs	r1, #8
 800140c:	2320      	movs	r3, #32
 800140e:	0022      	movs	r2, r4
 8001410:	1a5b      	subs	r3, r3, r1
 8001412:	408f      	lsls	r7, r1
 8001414:	40da      	lsrs	r2, r3
 8001416:	408c      	lsls	r4, r1
 8001418:	4317      	orrs	r7, r2
 800141a:	42b1      	cmp	r1, r6
 800141c:	da00      	bge.n	8001420 <__aeabi_dadd+0xd0>
 800141e:	e0ff      	b.n	8001620 <__aeabi_dadd+0x2d0>
 8001420:	1b89      	subs	r1, r1, r6
 8001422:	1c4b      	adds	r3, r1, #1
 8001424:	2b1f      	cmp	r3, #31
 8001426:	dd00      	ble.n	800142a <__aeabi_dadd+0xda>
 8001428:	e0a8      	b.n	800157c <__aeabi_dadd+0x22c>
 800142a:	2220      	movs	r2, #32
 800142c:	0039      	movs	r1, r7
 800142e:	1ad2      	subs	r2, r2, r3
 8001430:	0020      	movs	r0, r4
 8001432:	4094      	lsls	r4, r2
 8001434:	4091      	lsls	r1, r2
 8001436:	40d8      	lsrs	r0, r3
 8001438:	1e62      	subs	r2, r4, #1
 800143a:	4194      	sbcs	r4, r2
 800143c:	40df      	lsrs	r7, r3
 800143e:	2600      	movs	r6, #0
 8001440:	4301      	orrs	r1, r0
 8001442:	430c      	orrs	r4, r1
 8001444:	0763      	lsls	r3, r4, #29
 8001446:	d009      	beq.n	800145c <__aeabi_dadd+0x10c>
 8001448:	230f      	movs	r3, #15
 800144a:	4023      	ands	r3, r4
 800144c:	2b04      	cmp	r3, #4
 800144e:	d005      	beq.n	800145c <__aeabi_dadd+0x10c>
 8001450:	1d23      	adds	r3, r4, #4
 8001452:	42a3      	cmp	r3, r4
 8001454:	41a4      	sbcs	r4, r4
 8001456:	4264      	negs	r4, r4
 8001458:	193f      	adds	r7, r7, r4
 800145a:	001c      	movs	r4, r3
 800145c:	023b      	lsls	r3, r7, #8
 800145e:	d400      	bmi.n	8001462 <__aeabi_dadd+0x112>
 8001460:	e09e      	b.n	80015a0 <__aeabi_dadd+0x250>
 8001462:	4b95      	ldr	r3, [pc, #596]	; (80016b8 <__aeabi_dadd+0x368>)
 8001464:	3601      	adds	r6, #1
 8001466:	429e      	cmp	r6, r3
 8001468:	d100      	bne.n	800146c <__aeabi_dadd+0x11c>
 800146a:	e0b7      	b.n	80015dc <__aeabi_dadd+0x28c>
 800146c:	4a93      	ldr	r2, [pc, #588]	; (80016bc <__aeabi_dadd+0x36c>)
 800146e:	08e4      	lsrs	r4, r4, #3
 8001470:	4017      	ands	r7, r2
 8001472:	077b      	lsls	r3, r7, #29
 8001474:	0571      	lsls	r1, r6, #21
 8001476:	027f      	lsls	r7, r7, #9
 8001478:	4323      	orrs	r3, r4
 800147a:	0b3f      	lsrs	r7, r7, #12
 800147c:	0d4a      	lsrs	r2, r1, #21
 800147e:	0512      	lsls	r2, r2, #20
 8001480:	433a      	orrs	r2, r7
 8001482:	07ed      	lsls	r5, r5, #31
 8001484:	432a      	orrs	r2, r5
 8001486:	0018      	movs	r0, r3
 8001488:	0011      	movs	r1, r2
 800148a:	bce0      	pop	{r5, r6, r7}
 800148c:	46ba      	mov	sl, r7
 800148e:	46b1      	mov	r9, r6
 8001490:	46a8      	mov	r8, r5
 8001492:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8001494:	2c00      	cmp	r4, #0
 8001496:	d04b      	beq.n	8001530 <__aeabi_dadd+0x1e0>
 8001498:	464c      	mov	r4, r9
 800149a:	1ba4      	subs	r4, r4, r6
 800149c:	46a4      	mov	ip, r4
 800149e:	2e00      	cmp	r6, #0
 80014a0:	d000      	beq.n	80014a4 <__aeabi_dadd+0x154>
 80014a2:	e123      	b.n	80016ec <__aeabi_dadd+0x39c>
 80014a4:	0004      	movs	r4, r0
 80014a6:	431c      	orrs	r4, r3
 80014a8:	d100      	bne.n	80014ac <__aeabi_dadd+0x15c>
 80014aa:	e1af      	b.n	800180c <__aeabi_dadd+0x4bc>
 80014ac:	4662      	mov	r2, ip
 80014ae:	1e54      	subs	r4, r2, #1
 80014b0:	2a01      	cmp	r2, #1
 80014b2:	d100      	bne.n	80014b6 <__aeabi_dadd+0x166>
 80014b4:	e215      	b.n	80018e2 <__aeabi_dadd+0x592>
 80014b6:	4d80      	ldr	r5, [pc, #512]	; (80016b8 <__aeabi_dadd+0x368>)
 80014b8:	45ac      	cmp	ip, r5
 80014ba:	d100      	bne.n	80014be <__aeabi_dadd+0x16e>
 80014bc:	e1c8      	b.n	8001850 <__aeabi_dadd+0x500>
 80014be:	46a4      	mov	ip, r4
 80014c0:	e11b      	b.n	80016fa <__aeabi_dadd+0x3aa>
 80014c2:	464a      	mov	r2, r9
 80014c4:	1ab2      	subs	r2, r6, r2
 80014c6:	4694      	mov	ip, r2
 80014c8:	2a00      	cmp	r2, #0
 80014ca:	dc00      	bgt.n	80014ce <__aeabi_dadd+0x17e>
 80014cc:	e0ac      	b.n	8001628 <__aeabi_dadd+0x2d8>
 80014ce:	464a      	mov	r2, r9
 80014d0:	2a00      	cmp	r2, #0
 80014d2:	d043      	beq.n	800155c <__aeabi_dadd+0x20c>
 80014d4:	4a78      	ldr	r2, [pc, #480]	; (80016b8 <__aeabi_dadd+0x368>)
 80014d6:	4296      	cmp	r6, r2
 80014d8:	d100      	bne.n	80014dc <__aeabi_dadd+0x18c>
 80014da:	e1af      	b.n	800183c <__aeabi_dadd+0x4ec>
 80014dc:	2280      	movs	r2, #128	; 0x80
 80014de:	003c      	movs	r4, r7
 80014e0:	0412      	lsls	r2, r2, #16
 80014e2:	4314      	orrs	r4, r2
 80014e4:	46a0      	mov	r8, r4
 80014e6:	4662      	mov	r2, ip
 80014e8:	2a38      	cmp	r2, #56	; 0x38
 80014ea:	dc67      	bgt.n	80015bc <__aeabi_dadd+0x26c>
 80014ec:	2a1f      	cmp	r2, #31
 80014ee:	dc00      	bgt.n	80014f2 <__aeabi_dadd+0x1a2>
 80014f0:	e15f      	b.n	80017b2 <__aeabi_dadd+0x462>
 80014f2:	4647      	mov	r7, r8
 80014f4:	3a20      	subs	r2, #32
 80014f6:	40d7      	lsrs	r7, r2
 80014f8:	4662      	mov	r2, ip
 80014fa:	2a20      	cmp	r2, #32
 80014fc:	d005      	beq.n	800150a <__aeabi_dadd+0x1ba>
 80014fe:	4664      	mov	r4, ip
 8001500:	2240      	movs	r2, #64	; 0x40
 8001502:	1b12      	subs	r2, r2, r4
 8001504:	4644      	mov	r4, r8
 8001506:	4094      	lsls	r4, r2
 8001508:	4321      	orrs	r1, r4
 800150a:	1e4a      	subs	r2, r1, #1
 800150c:	4191      	sbcs	r1, r2
 800150e:	000c      	movs	r4, r1
 8001510:	433c      	orrs	r4, r7
 8001512:	e057      	b.n	80015c4 <__aeabi_dadd+0x274>
 8001514:	003a      	movs	r2, r7
 8001516:	430a      	orrs	r2, r1
 8001518:	d100      	bne.n	800151c <__aeabi_dadd+0x1cc>
 800151a:	e105      	b.n	8001728 <__aeabi_dadd+0x3d8>
 800151c:	0022      	movs	r2, r4
 800151e:	3a01      	subs	r2, #1
 8001520:	2c01      	cmp	r4, #1
 8001522:	d100      	bne.n	8001526 <__aeabi_dadd+0x1d6>
 8001524:	e182      	b.n	800182c <__aeabi_dadd+0x4dc>
 8001526:	4c64      	ldr	r4, [pc, #400]	; (80016b8 <__aeabi_dadd+0x368>)
 8001528:	45a4      	cmp	ip, r4
 800152a:	d05b      	beq.n	80015e4 <__aeabi_dadd+0x294>
 800152c:	4694      	mov	ip, r2
 800152e:	e741      	b.n	80013b4 <__aeabi_dadd+0x64>
 8001530:	4c63      	ldr	r4, [pc, #396]	; (80016c0 <__aeabi_dadd+0x370>)
 8001532:	1c77      	adds	r7, r6, #1
 8001534:	4227      	tst	r7, r4
 8001536:	d000      	beq.n	800153a <__aeabi_dadd+0x1ea>
 8001538:	e0c4      	b.n	80016c4 <__aeabi_dadd+0x374>
 800153a:	0004      	movs	r4, r0
 800153c:	431c      	orrs	r4, r3
 800153e:	2e00      	cmp	r6, #0
 8001540:	d000      	beq.n	8001544 <__aeabi_dadd+0x1f4>
 8001542:	e169      	b.n	8001818 <__aeabi_dadd+0x4c8>
 8001544:	2c00      	cmp	r4, #0
 8001546:	d100      	bne.n	800154a <__aeabi_dadd+0x1fa>
 8001548:	e1bf      	b.n	80018ca <__aeabi_dadd+0x57a>
 800154a:	4644      	mov	r4, r8
 800154c:	430c      	orrs	r4, r1
 800154e:	d000      	beq.n	8001552 <__aeabi_dadd+0x202>
 8001550:	e1d0      	b.n	80018f4 <__aeabi_dadd+0x5a4>
 8001552:	0742      	lsls	r2, r0, #29
 8001554:	08db      	lsrs	r3, r3, #3
 8001556:	4313      	orrs	r3, r2
 8001558:	08c0      	lsrs	r0, r0, #3
 800155a:	e029      	b.n	80015b0 <__aeabi_dadd+0x260>
 800155c:	003a      	movs	r2, r7
 800155e:	430a      	orrs	r2, r1
 8001560:	d100      	bne.n	8001564 <__aeabi_dadd+0x214>
 8001562:	e170      	b.n	8001846 <__aeabi_dadd+0x4f6>
 8001564:	4662      	mov	r2, ip
 8001566:	4664      	mov	r4, ip
 8001568:	3a01      	subs	r2, #1
 800156a:	2c01      	cmp	r4, #1
 800156c:	d100      	bne.n	8001570 <__aeabi_dadd+0x220>
 800156e:	e0e0      	b.n	8001732 <__aeabi_dadd+0x3e2>
 8001570:	4c51      	ldr	r4, [pc, #324]	; (80016b8 <__aeabi_dadd+0x368>)
 8001572:	45a4      	cmp	ip, r4
 8001574:	d100      	bne.n	8001578 <__aeabi_dadd+0x228>
 8001576:	e161      	b.n	800183c <__aeabi_dadd+0x4ec>
 8001578:	4694      	mov	ip, r2
 800157a:	e7b4      	b.n	80014e6 <__aeabi_dadd+0x196>
 800157c:	003a      	movs	r2, r7
 800157e:	391f      	subs	r1, #31
 8001580:	40ca      	lsrs	r2, r1
 8001582:	0011      	movs	r1, r2
 8001584:	2b20      	cmp	r3, #32
 8001586:	d003      	beq.n	8001590 <__aeabi_dadd+0x240>
 8001588:	2240      	movs	r2, #64	; 0x40
 800158a:	1ad3      	subs	r3, r2, r3
 800158c:	409f      	lsls	r7, r3
 800158e:	433c      	orrs	r4, r7
 8001590:	1e63      	subs	r3, r4, #1
 8001592:	419c      	sbcs	r4, r3
 8001594:	2700      	movs	r7, #0
 8001596:	2600      	movs	r6, #0
 8001598:	430c      	orrs	r4, r1
 800159a:	0763      	lsls	r3, r4, #29
 800159c:	d000      	beq.n	80015a0 <__aeabi_dadd+0x250>
 800159e:	e753      	b.n	8001448 <__aeabi_dadd+0xf8>
 80015a0:	46b4      	mov	ip, r6
 80015a2:	08e4      	lsrs	r4, r4, #3
 80015a4:	077b      	lsls	r3, r7, #29
 80015a6:	4323      	orrs	r3, r4
 80015a8:	08f8      	lsrs	r0, r7, #3
 80015aa:	4a43      	ldr	r2, [pc, #268]	; (80016b8 <__aeabi_dadd+0x368>)
 80015ac:	4594      	cmp	ip, r2
 80015ae:	d01d      	beq.n	80015ec <__aeabi_dadd+0x29c>
 80015b0:	4662      	mov	r2, ip
 80015b2:	0307      	lsls	r7, r0, #12
 80015b4:	0552      	lsls	r2, r2, #21
 80015b6:	0b3f      	lsrs	r7, r7, #12
 80015b8:	0d52      	lsrs	r2, r2, #21
 80015ba:	e760      	b.n	800147e <__aeabi_dadd+0x12e>
 80015bc:	4644      	mov	r4, r8
 80015be:	430c      	orrs	r4, r1
 80015c0:	1e62      	subs	r2, r4, #1
 80015c2:	4194      	sbcs	r4, r2
 80015c4:	18e4      	adds	r4, r4, r3
 80015c6:	429c      	cmp	r4, r3
 80015c8:	419b      	sbcs	r3, r3
 80015ca:	425f      	negs	r7, r3
 80015cc:	183f      	adds	r7, r7, r0
 80015ce:	023b      	lsls	r3, r7, #8
 80015d0:	d5e3      	bpl.n	800159a <__aeabi_dadd+0x24a>
 80015d2:	4b39      	ldr	r3, [pc, #228]	; (80016b8 <__aeabi_dadd+0x368>)
 80015d4:	3601      	adds	r6, #1
 80015d6:	429e      	cmp	r6, r3
 80015d8:	d000      	beq.n	80015dc <__aeabi_dadd+0x28c>
 80015da:	e0b5      	b.n	8001748 <__aeabi_dadd+0x3f8>
 80015dc:	0032      	movs	r2, r6
 80015de:	2700      	movs	r7, #0
 80015e0:	2300      	movs	r3, #0
 80015e2:	e74c      	b.n	800147e <__aeabi_dadd+0x12e>
 80015e4:	0742      	lsls	r2, r0, #29
 80015e6:	08db      	lsrs	r3, r3, #3
 80015e8:	4313      	orrs	r3, r2
 80015ea:	08c0      	lsrs	r0, r0, #3
 80015ec:	001a      	movs	r2, r3
 80015ee:	4302      	orrs	r2, r0
 80015f0:	d100      	bne.n	80015f4 <__aeabi_dadd+0x2a4>
 80015f2:	e1e1      	b.n	80019b8 <__aeabi_dadd+0x668>
 80015f4:	2780      	movs	r7, #128	; 0x80
 80015f6:	033f      	lsls	r7, r7, #12
 80015f8:	4307      	orrs	r7, r0
 80015fa:	033f      	lsls	r7, r7, #12
 80015fc:	4a2e      	ldr	r2, [pc, #184]	; (80016b8 <__aeabi_dadd+0x368>)
 80015fe:	0b3f      	lsrs	r7, r7, #12
 8001600:	e73d      	b.n	800147e <__aeabi_dadd+0x12e>
 8001602:	0020      	movs	r0, r4
 8001604:	f001 fd5a 	bl	80030bc <__clzsi2>
 8001608:	0001      	movs	r1, r0
 800160a:	3118      	adds	r1, #24
 800160c:	291f      	cmp	r1, #31
 800160e:	dc00      	bgt.n	8001612 <__aeabi_dadd+0x2c2>
 8001610:	e6fc      	b.n	800140c <__aeabi_dadd+0xbc>
 8001612:	3808      	subs	r0, #8
 8001614:	4084      	lsls	r4, r0
 8001616:	0027      	movs	r7, r4
 8001618:	2400      	movs	r4, #0
 800161a:	42b1      	cmp	r1, r6
 800161c:	db00      	blt.n	8001620 <__aeabi_dadd+0x2d0>
 800161e:	e6ff      	b.n	8001420 <__aeabi_dadd+0xd0>
 8001620:	4a26      	ldr	r2, [pc, #152]	; (80016bc <__aeabi_dadd+0x36c>)
 8001622:	1a76      	subs	r6, r6, r1
 8001624:	4017      	ands	r7, r2
 8001626:	e70d      	b.n	8001444 <__aeabi_dadd+0xf4>
 8001628:	2a00      	cmp	r2, #0
 800162a:	d02f      	beq.n	800168c <__aeabi_dadd+0x33c>
 800162c:	464a      	mov	r2, r9
 800162e:	1b92      	subs	r2, r2, r6
 8001630:	4694      	mov	ip, r2
 8001632:	2e00      	cmp	r6, #0
 8001634:	d100      	bne.n	8001638 <__aeabi_dadd+0x2e8>
 8001636:	e0ad      	b.n	8001794 <__aeabi_dadd+0x444>
 8001638:	4a1f      	ldr	r2, [pc, #124]	; (80016b8 <__aeabi_dadd+0x368>)
 800163a:	4591      	cmp	r9, r2
 800163c:	d100      	bne.n	8001640 <__aeabi_dadd+0x2f0>
 800163e:	e10f      	b.n	8001860 <__aeabi_dadd+0x510>
 8001640:	2280      	movs	r2, #128	; 0x80
 8001642:	0412      	lsls	r2, r2, #16
 8001644:	4310      	orrs	r0, r2
 8001646:	4662      	mov	r2, ip
 8001648:	2a38      	cmp	r2, #56	; 0x38
 800164a:	dd00      	ble.n	800164e <__aeabi_dadd+0x2fe>
 800164c:	e10f      	b.n	800186e <__aeabi_dadd+0x51e>
 800164e:	2a1f      	cmp	r2, #31
 8001650:	dd00      	ble.n	8001654 <__aeabi_dadd+0x304>
 8001652:	e180      	b.n	8001956 <__aeabi_dadd+0x606>
 8001654:	4664      	mov	r4, ip
 8001656:	2220      	movs	r2, #32
 8001658:	001e      	movs	r6, r3
 800165a:	1b12      	subs	r2, r2, r4
 800165c:	4667      	mov	r7, ip
 800165e:	0004      	movs	r4, r0
 8001660:	4093      	lsls	r3, r2
 8001662:	4094      	lsls	r4, r2
 8001664:	40fe      	lsrs	r6, r7
 8001666:	1e5a      	subs	r2, r3, #1
 8001668:	4193      	sbcs	r3, r2
 800166a:	40f8      	lsrs	r0, r7
 800166c:	4334      	orrs	r4, r6
 800166e:	431c      	orrs	r4, r3
 8001670:	4480      	add	r8, r0
 8001672:	1864      	adds	r4, r4, r1
 8001674:	428c      	cmp	r4, r1
 8001676:	41bf      	sbcs	r7, r7
 8001678:	427f      	negs	r7, r7
 800167a:	464e      	mov	r6, r9
 800167c:	4447      	add	r7, r8
 800167e:	e7a6      	b.n	80015ce <__aeabi_dadd+0x27e>
 8001680:	4642      	mov	r2, r8
 8001682:	430a      	orrs	r2, r1
 8001684:	0011      	movs	r1, r2
 8001686:	1e4a      	subs	r2, r1, #1
 8001688:	4191      	sbcs	r1, r2
 800168a:	e6ad      	b.n	80013e8 <__aeabi_dadd+0x98>
 800168c:	4c0c      	ldr	r4, [pc, #48]	; (80016c0 <__aeabi_dadd+0x370>)
 800168e:	1c72      	adds	r2, r6, #1
 8001690:	4222      	tst	r2, r4
 8001692:	d000      	beq.n	8001696 <__aeabi_dadd+0x346>
 8001694:	e0a1      	b.n	80017da <__aeabi_dadd+0x48a>
 8001696:	0002      	movs	r2, r0
 8001698:	431a      	orrs	r2, r3
 800169a:	2e00      	cmp	r6, #0
 800169c:	d000      	beq.n	80016a0 <__aeabi_dadd+0x350>
 800169e:	e0fa      	b.n	8001896 <__aeabi_dadd+0x546>
 80016a0:	2a00      	cmp	r2, #0
 80016a2:	d100      	bne.n	80016a6 <__aeabi_dadd+0x356>
 80016a4:	e145      	b.n	8001932 <__aeabi_dadd+0x5e2>
 80016a6:	003a      	movs	r2, r7
 80016a8:	430a      	orrs	r2, r1
 80016aa:	d000      	beq.n	80016ae <__aeabi_dadd+0x35e>
 80016ac:	e146      	b.n	800193c <__aeabi_dadd+0x5ec>
 80016ae:	0742      	lsls	r2, r0, #29
 80016b0:	08db      	lsrs	r3, r3, #3
 80016b2:	4313      	orrs	r3, r2
 80016b4:	08c0      	lsrs	r0, r0, #3
 80016b6:	e77b      	b.n	80015b0 <__aeabi_dadd+0x260>
 80016b8:	000007ff 	.word	0x000007ff
 80016bc:	ff7fffff 	.word	0xff7fffff
 80016c0:	000007fe 	.word	0x000007fe
 80016c4:	4647      	mov	r7, r8
 80016c6:	1a5c      	subs	r4, r3, r1
 80016c8:	1bc2      	subs	r2, r0, r7
 80016ca:	42a3      	cmp	r3, r4
 80016cc:	41bf      	sbcs	r7, r7
 80016ce:	427f      	negs	r7, r7
 80016d0:	46b9      	mov	r9, r7
 80016d2:	0017      	movs	r7, r2
 80016d4:	464a      	mov	r2, r9
 80016d6:	1abf      	subs	r7, r7, r2
 80016d8:	023a      	lsls	r2, r7, #8
 80016da:	d500      	bpl.n	80016de <__aeabi_dadd+0x38e>
 80016dc:	e08d      	b.n	80017fa <__aeabi_dadd+0x4aa>
 80016de:	0023      	movs	r3, r4
 80016e0:	433b      	orrs	r3, r7
 80016e2:	d000      	beq.n	80016e6 <__aeabi_dadd+0x396>
 80016e4:	e68a      	b.n	80013fc <__aeabi_dadd+0xac>
 80016e6:	2000      	movs	r0, #0
 80016e8:	2500      	movs	r5, #0
 80016ea:	e761      	b.n	80015b0 <__aeabi_dadd+0x260>
 80016ec:	4cb4      	ldr	r4, [pc, #720]	; (80019c0 <__aeabi_dadd+0x670>)
 80016ee:	45a1      	cmp	r9, r4
 80016f0:	d100      	bne.n	80016f4 <__aeabi_dadd+0x3a4>
 80016f2:	e0ad      	b.n	8001850 <__aeabi_dadd+0x500>
 80016f4:	2480      	movs	r4, #128	; 0x80
 80016f6:	0424      	lsls	r4, r4, #16
 80016f8:	4320      	orrs	r0, r4
 80016fa:	4664      	mov	r4, ip
 80016fc:	2c38      	cmp	r4, #56	; 0x38
 80016fe:	dc3d      	bgt.n	800177c <__aeabi_dadd+0x42c>
 8001700:	4662      	mov	r2, ip
 8001702:	2c1f      	cmp	r4, #31
 8001704:	dd00      	ble.n	8001708 <__aeabi_dadd+0x3b8>
 8001706:	e0b7      	b.n	8001878 <__aeabi_dadd+0x528>
 8001708:	2520      	movs	r5, #32
 800170a:	001e      	movs	r6, r3
 800170c:	1b2d      	subs	r5, r5, r4
 800170e:	0004      	movs	r4, r0
 8001710:	40ab      	lsls	r3, r5
 8001712:	40ac      	lsls	r4, r5
 8001714:	40d6      	lsrs	r6, r2
 8001716:	40d0      	lsrs	r0, r2
 8001718:	4642      	mov	r2, r8
 800171a:	1e5d      	subs	r5, r3, #1
 800171c:	41ab      	sbcs	r3, r5
 800171e:	4334      	orrs	r4, r6
 8001720:	1a12      	subs	r2, r2, r0
 8001722:	4690      	mov	r8, r2
 8001724:	4323      	orrs	r3, r4
 8001726:	e02c      	b.n	8001782 <__aeabi_dadd+0x432>
 8001728:	0742      	lsls	r2, r0, #29
 800172a:	08db      	lsrs	r3, r3, #3
 800172c:	4313      	orrs	r3, r2
 800172e:	08c0      	lsrs	r0, r0, #3
 8001730:	e73b      	b.n	80015aa <__aeabi_dadd+0x25a>
 8001732:	185c      	adds	r4, r3, r1
 8001734:	429c      	cmp	r4, r3
 8001736:	419b      	sbcs	r3, r3
 8001738:	4440      	add	r0, r8
 800173a:	425b      	negs	r3, r3
 800173c:	18c7      	adds	r7, r0, r3
 800173e:	2601      	movs	r6, #1
 8001740:	023b      	lsls	r3, r7, #8
 8001742:	d400      	bmi.n	8001746 <__aeabi_dadd+0x3f6>
 8001744:	e729      	b.n	800159a <__aeabi_dadd+0x24a>
 8001746:	2602      	movs	r6, #2
 8001748:	4a9e      	ldr	r2, [pc, #632]	; (80019c4 <__aeabi_dadd+0x674>)
 800174a:	0863      	lsrs	r3, r4, #1
 800174c:	4017      	ands	r7, r2
 800174e:	2201      	movs	r2, #1
 8001750:	4014      	ands	r4, r2
 8001752:	431c      	orrs	r4, r3
 8001754:	07fb      	lsls	r3, r7, #31
 8001756:	431c      	orrs	r4, r3
 8001758:	087f      	lsrs	r7, r7, #1
 800175a:	e673      	b.n	8001444 <__aeabi_dadd+0xf4>
 800175c:	4644      	mov	r4, r8
 800175e:	3a20      	subs	r2, #32
 8001760:	40d4      	lsrs	r4, r2
 8001762:	4662      	mov	r2, ip
 8001764:	2a20      	cmp	r2, #32
 8001766:	d005      	beq.n	8001774 <__aeabi_dadd+0x424>
 8001768:	4667      	mov	r7, ip
 800176a:	2240      	movs	r2, #64	; 0x40
 800176c:	1bd2      	subs	r2, r2, r7
 800176e:	4647      	mov	r7, r8
 8001770:	4097      	lsls	r7, r2
 8001772:	4339      	orrs	r1, r7
 8001774:	1e4a      	subs	r2, r1, #1
 8001776:	4191      	sbcs	r1, r2
 8001778:	4321      	orrs	r1, r4
 800177a:	e635      	b.n	80013e8 <__aeabi_dadd+0x98>
 800177c:	4303      	orrs	r3, r0
 800177e:	1e58      	subs	r0, r3, #1
 8001780:	4183      	sbcs	r3, r0
 8001782:	1acc      	subs	r4, r1, r3
 8001784:	42a1      	cmp	r1, r4
 8001786:	41bf      	sbcs	r7, r7
 8001788:	4643      	mov	r3, r8
 800178a:	427f      	negs	r7, r7
 800178c:	4655      	mov	r5, sl
 800178e:	464e      	mov	r6, r9
 8001790:	1bdf      	subs	r7, r3, r7
 8001792:	e62e      	b.n	80013f2 <__aeabi_dadd+0xa2>
 8001794:	0002      	movs	r2, r0
 8001796:	431a      	orrs	r2, r3
 8001798:	d100      	bne.n	800179c <__aeabi_dadd+0x44c>
 800179a:	e0bd      	b.n	8001918 <__aeabi_dadd+0x5c8>
 800179c:	4662      	mov	r2, ip
 800179e:	4664      	mov	r4, ip
 80017a0:	3a01      	subs	r2, #1
 80017a2:	2c01      	cmp	r4, #1
 80017a4:	d100      	bne.n	80017a8 <__aeabi_dadd+0x458>
 80017a6:	e0e5      	b.n	8001974 <__aeabi_dadd+0x624>
 80017a8:	4c85      	ldr	r4, [pc, #532]	; (80019c0 <__aeabi_dadd+0x670>)
 80017aa:	45a4      	cmp	ip, r4
 80017ac:	d058      	beq.n	8001860 <__aeabi_dadd+0x510>
 80017ae:	4694      	mov	ip, r2
 80017b0:	e749      	b.n	8001646 <__aeabi_dadd+0x2f6>
 80017b2:	4664      	mov	r4, ip
 80017b4:	2220      	movs	r2, #32
 80017b6:	1b12      	subs	r2, r2, r4
 80017b8:	4644      	mov	r4, r8
 80017ba:	4094      	lsls	r4, r2
 80017bc:	000f      	movs	r7, r1
 80017be:	46a1      	mov	r9, r4
 80017c0:	4664      	mov	r4, ip
 80017c2:	4091      	lsls	r1, r2
 80017c4:	40e7      	lsrs	r7, r4
 80017c6:	464c      	mov	r4, r9
 80017c8:	1e4a      	subs	r2, r1, #1
 80017ca:	4191      	sbcs	r1, r2
 80017cc:	433c      	orrs	r4, r7
 80017ce:	4642      	mov	r2, r8
 80017d0:	430c      	orrs	r4, r1
 80017d2:	4661      	mov	r1, ip
 80017d4:	40ca      	lsrs	r2, r1
 80017d6:	1880      	adds	r0, r0, r2
 80017d8:	e6f4      	b.n	80015c4 <__aeabi_dadd+0x274>
 80017da:	4c79      	ldr	r4, [pc, #484]	; (80019c0 <__aeabi_dadd+0x670>)
 80017dc:	42a2      	cmp	r2, r4
 80017de:	d100      	bne.n	80017e2 <__aeabi_dadd+0x492>
 80017e0:	e6fd      	b.n	80015de <__aeabi_dadd+0x28e>
 80017e2:	1859      	adds	r1, r3, r1
 80017e4:	4299      	cmp	r1, r3
 80017e6:	419b      	sbcs	r3, r3
 80017e8:	4440      	add	r0, r8
 80017ea:	425f      	negs	r7, r3
 80017ec:	19c7      	adds	r7, r0, r7
 80017ee:	07fc      	lsls	r4, r7, #31
 80017f0:	0849      	lsrs	r1, r1, #1
 80017f2:	0016      	movs	r6, r2
 80017f4:	430c      	orrs	r4, r1
 80017f6:	087f      	lsrs	r7, r7, #1
 80017f8:	e6cf      	b.n	800159a <__aeabi_dadd+0x24a>
 80017fa:	1acc      	subs	r4, r1, r3
 80017fc:	42a1      	cmp	r1, r4
 80017fe:	41bf      	sbcs	r7, r7
 8001800:	4643      	mov	r3, r8
 8001802:	427f      	negs	r7, r7
 8001804:	1a18      	subs	r0, r3, r0
 8001806:	4655      	mov	r5, sl
 8001808:	1bc7      	subs	r7, r0, r7
 800180a:	e5f7      	b.n	80013fc <__aeabi_dadd+0xac>
 800180c:	08c9      	lsrs	r1, r1, #3
 800180e:	077b      	lsls	r3, r7, #29
 8001810:	4655      	mov	r5, sl
 8001812:	430b      	orrs	r3, r1
 8001814:	08f8      	lsrs	r0, r7, #3
 8001816:	e6c8      	b.n	80015aa <__aeabi_dadd+0x25a>
 8001818:	2c00      	cmp	r4, #0
 800181a:	d000      	beq.n	800181e <__aeabi_dadd+0x4ce>
 800181c:	e081      	b.n	8001922 <__aeabi_dadd+0x5d2>
 800181e:	4643      	mov	r3, r8
 8001820:	430b      	orrs	r3, r1
 8001822:	d115      	bne.n	8001850 <__aeabi_dadd+0x500>
 8001824:	2080      	movs	r0, #128	; 0x80
 8001826:	2500      	movs	r5, #0
 8001828:	0300      	lsls	r0, r0, #12
 800182a:	e6e3      	b.n	80015f4 <__aeabi_dadd+0x2a4>
 800182c:	1a5c      	subs	r4, r3, r1
 800182e:	42a3      	cmp	r3, r4
 8001830:	419b      	sbcs	r3, r3
 8001832:	1bc7      	subs	r7, r0, r7
 8001834:	425b      	negs	r3, r3
 8001836:	2601      	movs	r6, #1
 8001838:	1aff      	subs	r7, r7, r3
 800183a:	e5da      	b.n	80013f2 <__aeabi_dadd+0xa2>
 800183c:	0742      	lsls	r2, r0, #29
 800183e:	08db      	lsrs	r3, r3, #3
 8001840:	4313      	orrs	r3, r2
 8001842:	08c0      	lsrs	r0, r0, #3
 8001844:	e6d2      	b.n	80015ec <__aeabi_dadd+0x29c>
 8001846:	0742      	lsls	r2, r0, #29
 8001848:	08db      	lsrs	r3, r3, #3
 800184a:	4313      	orrs	r3, r2
 800184c:	08c0      	lsrs	r0, r0, #3
 800184e:	e6ac      	b.n	80015aa <__aeabi_dadd+0x25a>
 8001850:	4643      	mov	r3, r8
 8001852:	4642      	mov	r2, r8
 8001854:	08c9      	lsrs	r1, r1, #3
 8001856:	075b      	lsls	r3, r3, #29
 8001858:	4655      	mov	r5, sl
 800185a:	430b      	orrs	r3, r1
 800185c:	08d0      	lsrs	r0, r2, #3
 800185e:	e6c5      	b.n	80015ec <__aeabi_dadd+0x29c>
 8001860:	4643      	mov	r3, r8
 8001862:	4642      	mov	r2, r8
 8001864:	075b      	lsls	r3, r3, #29
 8001866:	08c9      	lsrs	r1, r1, #3
 8001868:	430b      	orrs	r3, r1
 800186a:	08d0      	lsrs	r0, r2, #3
 800186c:	e6be      	b.n	80015ec <__aeabi_dadd+0x29c>
 800186e:	4303      	orrs	r3, r0
 8001870:	001c      	movs	r4, r3
 8001872:	1e63      	subs	r3, r4, #1
 8001874:	419c      	sbcs	r4, r3
 8001876:	e6fc      	b.n	8001672 <__aeabi_dadd+0x322>
 8001878:	0002      	movs	r2, r0
 800187a:	3c20      	subs	r4, #32
 800187c:	40e2      	lsrs	r2, r4
 800187e:	0014      	movs	r4, r2
 8001880:	4662      	mov	r2, ip
 8001882:	2a20      	cmp	r2, #32
 8001884:	d003      	beq.n	800188e <__aeabi_dadd+0x53e>
 8001886:	2540      	movs	r5, #64	; 0x40
 8001888:	1aad      	subs	r5, r5, r2
 800188a:	40a8      	lsls	r0, r5
 800188c:	4303      	orrs	r3, r0
 800188e:	1e58      	subs	r0, r3, #1
 8001890:	4183      	sbcs	r3, r0
 8001892:	4323      	orrs	r3, r4
 8001894:	e775      	b.n	8001782 <__aeabi_dadd+0x432>
 8001896:	2a00      	cmp	r2, #0
 8001898:	d0e2      	beq.n	8001860 <__aeabi_dadd+0x510>
 800189a:	003a      	movs	r2, r7
 800189c:	430a      	orrs	r2, r1
 800189e:	d0cd      	beq.n	800183c <__aeabi_dadd+0x4ec>
 80018a0:	0742      	lsls	r2, r0, #29
 80018a2:	08db      	lsrs	r3, r3, #3
 80018a4:	4313      	orrs	r3, r2
 80018a6:	2280      	movs	r2, #128	; 0x80
 80018a8:	08c0      	lsrs	r0, r0, #3
 80018aa:	0312      	lsls	r2, r2, #12
 80018ac:	4210      	tst	r0, r2
 80018ae:	d006      	beq.n	80018be <__aeabi_dadd+0x56e>
 80018b0:	08fc      	lsrs	r4, r7, #3
 80018b2:	4214      	tst	r4, r2
 80018b4:	d103      	bne.n	80018be <__aeabi_dadd+0x56e>
 80018b6:	0020      	movs	r0, r4
 80018b8:	08cb      	lsrs	r3, r1, #3
 80018ba:	077a      	lsls	r2, r7, #29
 80018bc:	4313      	orrs	r3, r2
 80018be:	0f5a      	lsrs	r2, r3, #29
 80018c0:	00db      	lsls	r3, r3, #3
 80018c2:	0752      	lsls	r2, r2, #29
 80018c4:	08db      	lsrs	r3, r3, #3
 80018c6:	4313      	orrs	r3, r2
 80018c8:	e690      	b.n	80015ec <__aeabi_dadd+0x29c>
 80018ca:	4643      	mov	r3, r8
 80018cc:	430b      	orrs	r3, r1
 80018ce:	d100      	bne.n	80018d2 <__aeabi_dadd+0x582>
 80018d0:	e709      	b.n	80016e6 <__aeabi_dadd+0x396>
 80018d2:	4643      	mov	r3, r8
 80018d4:	4642      	mov	r2, r8
 80018d6:	08c9      	lsrs	r1, r1, #3
 80018d8:	075b      	lsls	r3, r3, #29
 80018da:	4655      	mov	r5, sl
 80018dc:	430b      	orrs	r3, r1
 80018de:	08d0      	lsrs	r0, r2, #3
 80018e0:	e666      	b.n	80015b0 <__aeabi_dadd+0x260>
 80018e2:	1acc      	subs	r4, r1, r3
 80018e4:	42a1      	cmp	r1, r4
 80018e6:	4189      	sbcs	r1, r1
 80018e8:	1a3f      	subs	r7, r7, r0
 80018ea:	4249      	negs	r1, r1
 80018ec:	4655      	mov	r5, sl
 80018ee:	2601      	movs	r6, #1
 80018f0:	1a7f      	subs	r7, r7, r1
 80018f2:	e57e      	b.n	80013f2 <__aeabi_dadd+0xa2>
 80018f4:	4642      	mov	r2, r8
 80018f6:	1a5c      	subs	r4, r3, r1
 80018f8:	1a87      	subs	r7, r0, r2
 80018fa:	42a3      	cmp	r3, r4
 80018fc:	4192      	sbcs	r2, r2
 80018fe:	4252      	negs	r2, r2
 8001900:	1abf      	subs	r7, r7, r2
 8001902:	023a      	lsls	r2, r7, #8
 8001904:	d53d      	bpl.n	8001982 <__aeabi_dadd+0x632>
 8001906:	1acc      	subs	r4, r1, r3
 8001908:	42a1      	cmp	r1, r4
 800190a:	4189      	sbcs	r1, r1
 800190c:	4643      	mov	r3, r8
 800190e:	4249      	negs	r1, r1
 8001910:	1a1f      	subs	r7, r3, r0
 8001912:	4655      	mov	r5, sl
 8001914:	1a7f      	subs	r7, r7, r1
 8001916:	e595      	b.n	8001444 <__aeabi_dadd+0xf4>
 8001918:	077b      	lsls	r3, r7, #29
 800191a:	08c9      	lsrs	r1, r1, #3
 800191c:	430b      	orrs	r3, r1
 800191e:	08f8      	lsrs	r0, r7, #3
 8001920:	e643      	b.n	80015aa <__aeabi_dadd+0x25a>
 8001922:	4644      	mov	r4, r8
 8001924:	08db      	lsrs	r3, r3, #3
 8001926:	430c      	orrs	r4, r1
 8001928:	d130      	bne.n	800198c <__aeabi_dadd+0x63c>
 800192a:	0742      	lsls	r2, r0, #29
 800192c:	4313      	orrs	r3, r2
 800192e:	08c0      	lsrs	r0, r0, #3
 8001930:	e65c      	b.n	80015ec <__aeabi_dadd+0x29c>
 8001932:	077b      	lsls	r3, r7, #29
 8001934:	08c9      	lsrs	r1, r1, #3
 8001936:	430b      	orrs	r3, r1
 8001938:	08f8      	lsrs	r0, r7, #3
 800193a:	e639      	b.n	80015b0 <__aeabi_dadd+0x260>
 800193c:	185c      	adds	r4, r3, r1
 800193e:	429c      	cmp	r4, r3
 8001940:	419b      	sbcs	r3, r3
 8001942:	4440      	add	r0, r8
 8001944:	425b      	negs	r3, r3
 8001946:	18c7      	adds	r7, r0, r3
 8001948:	023b      	lsls	r3, r7, #8
 800194a:	d400      	bmi.n	800194e <__aeabi_dadd+0x5fe>
 800194c:	e625      	b.n	800159a <__aeabi_dadd+0x24a>
 800194e:	4b1d      	ldr	r3, [pc, #116]	; (80019c4 <__aeabi_dadd+0x674>)
 8001950:	2601      	movs	r6, #1
 8001952:	401f      	ands	r7, r3
 8001954:	e621      	b.n	800159a <__aeabi_dadd+0x24a>
 8001956:	0004      	movs	r4, r0
 8001958:	3a20      	subs	r2, #32
 800195a:	40d4      	lsrs	r4, r2
 800195c:	4662      	mov	r2, ip
 800195e:	2a20      	cmp	r2, #32
 8001960:	d004      	beq.n	800196c <__aeabi_dadd+0x61c>
 8001962:	2240      	movs	r2, #64	; 0x40
 8001964:	4666      	mov	r6, ip
 8001966:	1b92      	subs	r2, r2, r6
 8001968:	4090      	lsls	r0, r2
 800196a:	4303      	orrs	r3, r0
 800196c:	1e5a      	subs	r2, r3, #1
 800196e:	4193      	sbcs	r3, r2
 8001970:	431c      	orrs	r4, r3
 8001972:	e67e      	b.n	8001672 <__aeabi_dadd+0x322>
 8001974:	185c      	adds	r4, r3, r1
 8001976:	428c      	cmp	r4, r1
 8001978:	4189      	sbcs	r1, r1
 800197a:	4440      	add	r0, r8
 800197c:	4249      	negs	r1, r1
 800197e:	1847      	adds	r7, r0, r1
 8001980:	e6dd      	b.n	800173e <__aeabi_dadd+0x3ee>
 8001982:	0023      	movs	r3, r4
 8001984:	433b      	orrs	r3, r7
 8001986:	d100      	bne.n	800198a <__aeabi_dadd+0x63a>
 8001988:	e6ad      	b.n	80016e6 <__aeabi_dadd+0x396>
 800198a:	e606      	b.n	800159a <__aeabi_dadd+0x24a>
 800198c:	0744      	lsls	r4, r0, #29
 800198e:	4323      	orrs	r3, r4
 8001990:	2480      	movs	r4, #128	; 0x80
 8001992:	08c0      	lsrs	r0, r0, #3
 8001994:	0324      	lsls	r4, r4, #12
 8001996:	4220      	tst	r0, r4
 8001998:	d008      	beq.n	80019ac <__aeabi_dadd+0x65c>
 800199a:	4642      	mov	r2, r8
 800199c:	08d6      	lsrs	r6, r2, #3
 800199e:	4226      	tst	r6, r4
 80019a0:	d104      	bne.n	80019ac <__aeabi_dadd+0x65c>
 80019a2:	4655      	mov	r5, sl
 80019a4:	0030      	movs	r0, r6
 80019a6:	08cb      	lsrs	r3, r1, #3
 80019a8:	0751      	lsls	r1, r2, #29
 80019aa:	430b      	orrs	r3, r1
 80019ac:	0f5a      	lsrs	r2, r3, #29
 80019ae:	00db      	lsls	r3, r3, #3
 80019b0:	08db      	lsrs	r3, r3, #3
 80019b2:	0752      	lsls	r2, r2, #29
 80019b4:	4313      	orrs	r3, r2
 80019b6:	e619      	b.n	80015ec <__aeabi_dadd+0x29c>
 80019b8:	2300      	movs	r3, #0
 80019ba:	4a01      	ldr	r2, [pc, #4]	; (80019c0 <__aeabi_dadd+0x670>)
 80019bc:	001f      	movs	r7, r3
 80019be:	e55e      	b.n	800147e <__aeabi_dadd+0x12e>
 80019c0:	000007ff 	.word	0x000007ff
 80019c4:	ff7fffff 	.word	0xff7fffff

080019c8 <__aeabi_ddiv>:
 80019c8:	b5f0      	push	{r4, r5, r6, r7, lr}
 80019ca:	4657      	mov	r7, sl
 80019cc:	464e      	mov	r6, r9
 80019ce:	4645      	mov	r5, r8
 80019d0:	46de      	mov	lr, fp
 80019d2:	b5e0      	push	{r5, r6, r7, lr}
 80019d4:	4681      	mov	r9, r0
 80019d6:	0005      	movs	r5, r0
 80019d8:	030c      	lsls	r4, r1, #12
 80019da:	0048      	lsls	r0, r1, #1
 80019dc:	4692      	mov	sl, r2
 80019de:	001f      	movs	r7, r3
 80019e0:	b085      	sub	sp, #20
 80019e2:	0b24      	lsrs	r4, r4, #12
 80019e4:	0d40      	lsrs	r0, r0, #21
 80019e6:	0fce      	lsrs	r6, r1, #31
 80019e8:	2800      	cmp	r0, #0
 80019ea:	d100      	bne.n	80019ee <__aeabi_ddiv+0x26>
 80019ec:	e156      	b.n	8001c9c <__aeabi_ddiv+0x2d4>
 80019ee:	4bd4      	ldr	r3, [pc, #848]	; (8001d40 <__aeabi_ddiv+0x378>)
 80019f0:	4298      	cmp	r0, r3
 80019f2:	d100      	bne.n	80019f6 <__aeabi_ddiv+0x2e>
 80019f4:	e172      	b.n	8001cdc <__aeabi_ddiv+0x314>
 80019f6:	0f6b      	lsrs	r3, r5, #29
 80019f8:	00e4      	lsls	r4, r4, #3
 80019fa:	431c      	orrs	r4, r3
 80019fc:	2380      	movs	r3, #128	; 0x80
 80019fe:	041b      	lsls	r3, r3, #16
 8001a00:	4323      	orrs	r3, r4
 8001a02:	4698      	mov	r8, r3
 8001a04:	4bcf      	ldr	r3, [pc, #828]	; (8001d44 <__aeabi_ddiv+0x37c>)
 8001a06:	00ed      	lsls	r5, r5, #3
 8001a08:	469b      	mov	fp, r3
 8001a0a:	2300      	movs	r3, #0
 8001a0c:	4699      	mov	r9, r3
 8001a0e:	4483      	add	fp, r0
 8001a10:	9300      	str	r3, [sp, #0]
 8001a12:	033c      	lsls	r4, r7, #12
 8001a14:	007b      	lsls	r3, r7, #1
 8001a16:	4650      	mov	r0, sl
 8001a18:	0b24      	lsrs	r4, r4, #12
 8001a1a:	0d5b      	lsrs	r3, r3, #21
 8001a1c:	0fff      	lsrs	r7, r7, #31
 8001a1e:	2b00      	cmp	r3, #0
 8001a20:	d100      	bne.n	8001a24 <__aeabi_ddiv+0x5c>
 8001a22:	e11f      	b.n	8001c64 <__aeabi_ddiv+0x29c>
 8001a24:	4ac6      	ldr	r2, [pc, #792]	; (8001d40 <__aeabi_ddiv+0x378>)
 8001a26:	4293      	cmp	r3, r2
 8001a28:	d100      	bne.n	8001a2c <__aeabi_ddiv+0x64>
 8001a2a:	e162      	b.n	8001cf2 <__aeabi_ddiv+0x32a>
 8001a2c:	49c5      	ldr	r1, [pc, #788]	; (8001d44 <__aeabi_ddiv+0x37c>)
 8001a2e:	0f42      	lsrs	r2, r0, #29
 8001a30:	468c      	mov	ip, r1
 8001a32:	00e4      	lsls	r4, r4, #3
 8001a34:	4659      	mov	r1, fp
 8001a36:	4314      	orrs	r4, r2
 8001a38:	2280      	movs	r2, #128	; 0x80
 8001a3a:	4463      	add	r3, ip
 8001a3c:	0412      	lsls	r2, r2, #16
 8001a3e:	1acb      	subs	r3, r1, r3
 8001a40:	4314      	orrs	r4, r2
 8001a42:	469b      	mov	fp, r3
 8001a44:	00c2      	lsls	r2, r0, #3
 8001a46:	2000      	movs	r0, #0
 8001a48:	0033      	movs	r3, r6
 8001a4a:	407b      	eors	r3, r7
 8001a4c:	469a      	mov	sl, r3
 8001a4e:	464b      	mov	r3, r9
 8001a50:	2b0f      	cmp	r3, #15
 8001a52:	d827      	bhi.n	8001aa4 <__aeabi_ddiv+0xdc>
 8001a54:	49bc      	ldr	r1, [pc, #752]	; (8001d48 <__aeabi_ddiv+0x380>)
 8001a56:	009b      	lsls	r3, r3, #2
 8001a58:	58cb      	ldr	r3, [r1, r3]
 8001a5a:	469f      	mov	pc, r3
 8001a5c:	46b2      	mov	sl, r6
 8001a5e:	9b00      	ldr	r3, [sp, #0]
 8001a60:	2b02      	cmp	r3, #2
 8001a62:	d016      	beq.n	8001a92 <__aeabi_ddiv+0xca>
 8001a64:	2b03      	cmp	r3, #3
 8001a66:	d100      	bne.n	8001a6a <__aeabi_ddiv+0xa2>
 8001a68:	e28e      	b.n	8001f88 <__aeabi_ddiv+0x5c0>
 8001a6a:	2b01      	cmp	r3, #1
 8001a6c:	d000      	beq.n	8001a70 <__aeabi_ddiv+0xa8>
 8001a6e:	e0d9      	b.n	8001c24 <__aeabi_ddiv+0x25c>
 8001a70:	2300      	movs	r3, #0
 8001a72:	2400      	movs	r4, #0
 8001a74:	2500      	movs	r5, #0
 8001a76:	4652      	mov	r2, sl
 8001a78:	051b      	lsls	r3, r3, #20
 8001a7a:	4323      	orrs	r3, r4
 8001a7c:	07d2      	lsls	r2, r2, #31
 8001a7e:	4313      	orrs	r3, r2
 8001a80:	0028      	movs	r0, r5
 8001a82:	0019      	movs	r1, r3
 8001a84:	b005      	add	sp, #20
 8001a86:	bcf0      	pop	{r4, r5, r6, r7}
 8001a88:	46bb      	mov	fp, r7
 8001a8a:	46b2      	mov	sl, r6
 8001a8c:	46a9      	mov	r9, r5
 8001a8e:	46a0      	mov	r8, r4
 8001a90:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8001a92:	2400      	movs	r4, #0
 8001a94:	2500      	movs	r5, #0
 8001a96:	4baa      	ldr	r3, [pc, #680]	; (8001d40 <__aeabi_ddiv+0x378>)
 8001a98:	e7ed      	b.n	8001a76 <__aeabi_ddiv+0xae>
 8001a9a:	46ba      	mov	sl, r7
 8001a9c:	46a0      	mov	r8, r4
 8001a9e:	0015      	movs	r5, r2
 8001aa0:	9000      	str	r0, [sp, #0]
 8001aa2:	e7dc      	b.n	8001a5e <__aeabi_ddiv+0x96>
 8001aa4:	4544      	cmp	r4, r8
 8001aa6:	d200      	bcs.n	8001aaa <__aeabi_ddiv+0xe2>
 8001aa8:	e1c7      	b.n	8001e3a <__aeabi_ddiv+0x472>
 8001aaa:	d100      	bne.n	8001aae <__aeabi_ddiv+0xe6>
 8001aac:	e1c2      	b.n	8001e34 <__aeabi_ddiv+0x46c>
 8001aae:	2301      	movs	r3, #1
 8001ab0:	425b      	negs	r3, r3
 8001ab2:	469c      	mov	ip, r3
 8001ab4:	002e      	movs	r6, r5
 8001ab6:	4640      	mov	r0, r8
 8001ab8:	2500      	movs	r5, #0
 8001aba:	44e3      	add	fp, ip
 8001abc:	0223      	lsls	r3, r4, #8
 8001abe:	0e14      	lsrs	r4, r2, #24
 8001ac0:	431c      	orrs	r4, r3
 8001ac2:	0c1b      	lsrs	r3, r3, #16
 8001ac4:	4699      	mov	r9, r3
 8001ac6:	0423      	lsls	r3, r4, #16
 8001ac8:	0c1f      	lsrs	r7, r3, #16
 8001aca:	0212      	lsls	r2, r2, #8
 8001acc:	4649      	mov	r1, r9
 8001ace:	9200      	str	r2, [sp, #0]
 8001ad0:	9701      	str	r7, [sp, #4]
 8001ad2:	f7fe fb9f 	bl	8000214 <__aeabi_uidivmod>
 8001ad6:	0002      	movs	r2, r0
 8001ad8:	437a      	muls	r2, r7
 8001ada:	040b      	lsls	r3, r1, #16
 8001adc:	0c31      	lsrs	r1, r6, #16
 8001ade:	4680      	mov	r8, r0
 8001ae0:	4319      	orrs	r1, r3
 8001ae2:	428a      	cmp	r2, r1
 8001ae4:	d907      	bls.n	8001af6 <__aeabi_ddiv+0x12e>
 8001ae6:	2301      	movs	r3, #1
 8001ae8:	425b      	negs	r3, r3
 8001aea:	469c      	mov	ip, r3
 8001aec:	1909      	adds	r1, r1, r4
 8001aee:	44e0      	add	r8, ip
 8001af0:	428c      	cmp	r4, r1
 8001af2:	d800      	bhi.n	8001af6 <__aeabi_ddiv+0x12e>
 8001af4:	e207      	b.n	8001f06 <__aeabi_ddiv+0x53e>
 8001af6:	1a88      	subs	r0, r1, r2
 8001af8:	4649      	mov	r1, r9
 8001afa:	f7fe fb8b 	bl	8000214 <__aeabi_uidivmod>
 8001afe:	0409      	lsls	r1, r1, #16
 8001b00:	468c      	mov	ip, r1
 8001b02:	0431      	lsls	r1, r6, #16
 8001b04:	4666      	mov	r6, ip
 8001b06:	9a01      	ldr	r2, [sp, #4]
 8001b08:	0c09      	lsrs	r1, r1, #16
 8001b0a:	4342      	muls	r2, r0
 8001b0c:	0003      	movs	r3, r0
 8001b0e:	4331      	orrs	r1, r6
 8001b10:	428a      	cmp	r2, r1
 8001b12:	d904      	bls.n	8001b1e <__aeabi_ddiv+0x156>
 8001b14:	1909      	adds	r1, r1, r4
 8001b16:	3b01      	subs	r3, #1
 8001b18:	428c      	cmp	r4, r1
 8001b1a:	d800      	bhi.n	8001b1e <__aeabi_ddiv+0x156>
 8001b1c:	e1ed      	b.n	8001efa <__aeabi_ddiv+0x532>
 8001b1e:	1a88      	subs	r0, r1, r2
 8001b20:	4642      	mov	r2, r8
 8001b22:	0412      	lsls	r2, r2, #16
 8001b24:	431a      	orrs	r2, r3
 8001b26:	4690      	mov	r8, r2
 8001b28:	4641      	mov	r1, r8
 8001b2a:	9b00      	ldr	r3, [sp, #0]
 8001b2c:	040e      	lsls	r6, r1, #16
 8001b2e:	0c1b      	lsrs	r3, r3, #16
 8001b30:	001f      	movs	r7, r3
 8001b32:	9302      	str	r3, [sp, #8]
 8001b34:	9b00      	ldr	r3, [sp, #0]
 8001b36:	0c36      	lsrs	r6, r6, #16
 8001b38:	041b      	lsls	r3, r3, #16
 8001b3a:	0c19      	lsrs	r1, r3, #16
 8001b3c:	000b      	movs	r3, r1
 8001b3e:	4373      	muls	r3, r6
 8001b40:	0c12      	lsrs	r2, r2, #16
 8001b42:	437e      	muls	r6, r7
 8001b44:	9103      	str	r1, [sp, #12]
 8001b46:	4351      	muls	r1, r2
 8001b48:	437a      	muls	r2, r7
 8001b4a:	0c1f      	lsrs	r7, r3, #16
 8001b4c:	46bc      	mov	ip, r7
 8001b4e:	1876      	adds	r6, r6, r1
 8001b50:	4466      	add	r6, ip
 8001b52:	42b1      	cmp	r1, r6
 8001b54:	d903      	bls.n	8001b5e <__aeabi_ddiv+0x196>
 8001b56:	2180      	movs	r1, #128	; 0x80
 8001b58:	0249      	lsls	r1, r1, #9
 8001b5a:	468c      	mov	ip, r1
 8001b5c:	4462      	add	r2, ip
 8001b5e:	0c31      	lsrs	r1, r6, #16
 8001b60:	188a      	adds	r2, r1, r2
 8001b62:	0431      	lsls	r1, r6, #16
 8001b64:	041e      	lsls	r6, r3, #16
 8001b66:	0c36      	lsrs	r6, r6, #16
 8001b68:	198e      	adds	r6, r1, r6
 8001b6a:	4290      	cmp	r0, r2
 8001b6c:	d302      	bcc.n	8001b74 <__aeabi_ddiv+0x1ac>
 8001b6e:	d112      	bne.n	8001b96 <__aeabi_ddiv+0x1ce>
 8001b70:	42b5      	cmp	r5, r6
 8001b72:	d210      	bcs.n	8001b96 <__aeabi_ddiv+0x1ce>
 8001b74:	4643      	mov	r3, r8
 8001b76:	1e59      	subs	r1, r3, #1
 8001b78:	9b00      	ldr	r3, [sp, #0]
 8001b7a:	469c      	mov	ip, r3
 8001b7c:	4465      	add	r5, ip
 8001b7e:	001f      	movs	r7, r3
 8001b80:	429d      	cmp	r5, r3
 8001b82:	419b      	sbcs	r3, r3
 8001b84:	425b      	negs	r3, r3
 8001b86:	191b      	adds	r3, r3, r4
 8001b88:	18c0      	adds	r0, r0, r3
 8001b8a:	4284      	cmp	r4, r0
 8001b8c:	d200      	bcs.n	8001b90 <__aeabi_ddiv+0x1c8>
 8001b8e:	e1a0      	b.n	8001ed2 <__aeabi_ddiv+0x50a>
 8001b90:	d100      	bne.n	8001b94 <__aeabi_ddiv+0x1cc>
 8001b92:	e19b      	b.n	8001ecc <__aeabi_ddiv+0x504>
 8001b94:	4688      	mov	r8, r1
 8001b96:	1bae      	subs	r6, r5, r6
 8001b98:	42b5      	cmp	r5, r6
 8001b9a:	41ad      	sbcs	r5, r5
 8001b9c:	1a80      	subs	r0, r0, r2
 8001b9e:	426d      	negs	r5, r5
 8001ba0:	1b40      	subs	r0, r0, r5
 8001ba2:	4284      	cmp	r4, r0
 8001ba4:	d100      	bne.n	8001ba8 <__aeabi_ddiv+0x1e0>
 8001ba6:	e1d5      	b.n	8001f54 <__aeabi_ddiv+0x58c>
 8001ba8:	4649      	mov	r1, r9
 8001baa:	f7fe fb33 	bl	8000214 <__aeabi_uidivmod>
 8001bae:	9a01      	ldr	r2, [sp, #4]
 8001bb0:	040b      	lsls	r3, r1, #16
 8001bb2:	4342      	muls	r2, r0
 8001bb4:	0c31      	lsrs	r1, r6, #16
 8001bb6:	0005      	movs	r5, r0
 8001bb8:	4319      	orrs	r1, r3
 8001bba:	428a      	cmp	r2, r1
 8001bbc:	d900      	bls.n	8001bc0 <__aeabi_ddiv+0x1f8>
 8001bbe:	e16c      	b.n	8001e9a <__aeabi_ddiv+0x4d2>
 8001bc0:	1a88      	subs	r0, r1, r2
 8001bc2:	4649      	mov	r1, r9
 8001bc4:	f7fe fb26 	bl	8000214 <__aeabi_uidivmod>
 8001bc8:	9a01      	ldr	r2, [sp, #4]
 8001bca:	0436      	lsls	r6, r6, #16
 8001bcc:	4342      	muls	r2, r0
 8001bce:	0409      	lsls	r1, r1, #16
 8001bd0:	0c36      	lsrs	r6, r6, #16
 8001bd2:	0003      	movs	r3, r0
 8001bd4:	430e      	orrs	r6, r1
 8001bd6:	42b2      	cmp	r2, r6
 8001bd8:	d900      	bls.n	8001bdc <__aeabi_ddiv+0x214>
 8001bda:	e153      	b.n	8001e84 <__aeabi_ddiv+0x4bc>
 8001bdc:	9803      	ldr	r0, [sp, #12]
 8001bde:	1ab6      	subs	r6, r6, r2
 8001be0:	0002      	movs	r2, r0
 8001be2:	042d      	lsls	r5, r5, #16
 8001be4:	431d      	orrs	r5, r3
 8001be6:	9f02      	ldr	r7, [sp, #8]
 8001be8:	042b      	lsls	r3, r5, #16
 8001bea:	0c1b      	lsrs	r3, r3, #16
 8001bec:	435a      	muls	r2, r3
 8001bee:	437b      	muls	r3, r7
 8001bf0:	469c      	mov	ip, r3
 8001bf2:	0c29      	lsrs	r1, r5, #16
 8001bf4:	4348      	muls	r0, r1
 8001bf6:	0c13      	lsrs	r3, r2, #16
 8001bf8:	4484      	add	ip, r0
 8001bfa:	4463      	add	r3, ip
 8001bfc:	4379      	muls	r1, r7
 8001bfe:	4298      	cmp	r0, r3
 8001c00:	d903      	bls.n	8001c0a <__aeabi_ddiv+0x242>
 8001c02:	2080      	movs	r0, #128	; 0x80
 8001c04:	0240      	lsls	r0, r0, #9
 8001c06:	4684      	mov	ip, r0
 8001c08:	4461      	add	r1, ip
 8001c0a:	0c18      	lsrs	r0, r3, #16
 8001c0c:	0412      	lsls	r2, r2, #16
 8001c0e:	041b      	lsls	r3, r3, #16
 8001c10:	0c12      	lsrs	r2, r2, #16
 8001c12:	1841      	adds	r1, r0, r1
 8001c14:	189b      	adds	r3, r3, r2
 8001c16:	428e      	cmp	r6, r1
 8001c18:	d200      	bcs.n	8001c1c <__aeabi_ddiv+0x254>
 8001c1a:	e0ff      	b.n	8001e1c <__aeabi_ddiv+0x454>
 8001c1c:	d100      	bne.n	8001c20 <__aeabi_ddiv+0x258>
 8001c1e:	e0fa      	b.n	8001e16 <__aeabi_ddiv+0x44e>
 8001c20:	2301      	movs	r3, #1
 8001c22:	431d      	orrs	r5, r3
 8001c24:	4a49      	ldr	r2, [pc, #292]	; (8001d4c <__aeabi_ddiv+0x384>)
 8001c26:	445a      	add	r2, fp
 8001c28:	2a00      	cmp	r2, #0
 8001c2a:	dc00      	bgt.n	8001c2e <__aeabi_ddiv+0x266>
 8001c2c:	e0aa      	b.n	8001d84 <__aeabi_ddiv+0x3bc>
 8001c2e:	076b      	lsls	r3, r5, #29
 8001c30:	d000      	beq.n	8001c34 <__aeabi_ddiv+0x26c>
 8001c32:	e13d      	b.n	8001eb0 <__aeabi_ddiv+0x4e8>
 8001c34:	08ed      	lsrs	r5, r5, #3
 8001c36:	4643      	mov	r3, r8
 8001c38:	01db      	lsls	r3, r3, #7
 8001c3a:	d506      	bpl.n	8001c4a <__aeabi_ddiv+0x282>
 8001c3c:	4642      	mov	r2, r8
 8001c3e:	4b44      	ldr	r3, [pc, #272]	; (8001d50 <__aeabi_ddiv+0x388>)
 8001c40:	401a      	ands	r2, r3
 8001c42:	4690      	mov	r8, r2
 8001c44:	2280      	movs	r2, #128	; 0x80
 8001c46:	00d2      	lsls	r2, r2, #3
 8001c48:	445a      	add	r2, fp
 8001c4a:	4b42      	ldr	r3, [pc, #264]	; (8001d54 <__aeabi_ddiv+0x38c>)
 8001c4c:	429a      	cmp	r2, r3
 8001c4e:	dd00      	ble.n	8001c52 <__aeabi_ddiv+0x28a>
 8001c50:	e71f      	b.n	8001a92 <__aeabi_ddiv+0xca>
 8001c52:	4643      	mov	r3, r8
 8001c54:	075b      	lsls	r3, r3, #29
 8001c56:	431d      	orrs	r5, r3
 8001c58:	4643      	mov	r3, r8
 8001c5a:	0552      	lsls	r2, r2, #21
 8001c5c:	025c      	lsls	r4, r3, #9
 8001c5e:	0b24      	lsrs	r4, r4, #12
 8001c60:	0d53      	lsrs	r3, r2, #21
 8001c62:	e708      	b.n	8001a76 <__aeabi_ddiv+0xae>
 8001c64:	4652      	mov	r2, sl
 8001c66:	4322      	orrs	r2, r4
 8001c68:	d100      	bne.n	8001c6c <__aeabi_ddiv+0x2a4>
 8001c6a:	e07b      	b.n	8001d64 <__aeabi_ddiv+0x39c>
 8001c6c:	2c00      	cmp	r4, #0
 8001c6e:	d100      	bne.n	8001c72 <__aeabi_ddiv+0x2aa>
 8001c70:	e0fa      	b.n	8001e68 <__aeabi_ddiv+0x4a0>
 8001c72:	0020      	movs	r0, r4
 8001c74:	f001 fa22 	bl	80030bc <__clzsi2>
 8001c78:	0002      	movs	r2, r0
 8001c7a:	3a0b      	subs	r2, #11
 8001c7c:	231d      	movs	r3, #29
 8001c7e:	0001      	movs	r1, r0
 8001c80:	1a9b      	subs	r3, r3, r2
 8001c82:	4652      	mov	r2, sl
 8001c84:	3908      	subs	r1, #8
 8001c86:	40da      	lsrs	r2, r3
 8001c88:	408c      	lsls	r4, r1
 8001c8a:	4314      	orrs	r4, r2
 8001c8c:	4652      	mov	r2, sl
 8001c8e:	408a      	lsls	r2, r1
 8001c90:	4b31      	ldr	r3, [pc, #196]	; (8001d58 <__aeabi_ddiv+0x390>)
 8001c92:	4458      	add	r0, fp
 8001c94:	469b      	mov	fp, r3
 8001c96:	4483      	add	fp, r0
 8001c98:	2000      	movs	r0, #0
 8001c9a:	e6d5      	b.n	8001a48 <__aeabi_ddiv+0x80>
 8001c9c:	464b      	mov	r3, r9
 8001c9e:	4323      	orrs	r3, r4
 8001ca0:	4698      	mov	r8, r3
 8001ca2:	d044      	beq.n	8001d2e <__aeabi_ddiv+0x366>
 8001ca4:	2c00      	cmp	r4, #0
 8001ca6:	d100      	bne.n	8001caa <__aeabi_ddiv+0x2e2>
 8001ca8:	e0ce      	b.n	8001e48 <__aeabi_ddiv+0x480>
 8001caa:	0020      	movs	r0, r4
 8001cac:	f001 fa06 	bl	80030bc <__clzsi2>
 8001cb0:	0001      	movs	r1, r0
 8001cb2:	0002      	movs	r2, r0
 8001cb4:	390b      	subs	r1, #11
 8001cb6:	231d      	movs	r3, #29
 8001cb8:	1a5b      	subs	r3, r3, r1
 8001cba:	4649      	mov	r1, r9
 8001cbc:	0010      	movs	r0, r2
 8001cbe:	40d9      	lsrs	r1, r3
 8001cc0:	3808      	subs	r0, #8
 8001cc2:	4084      	lsls	r4, r0
 8001cc4:	000b      	movs	r3, r1
 8001cc6:	464d      	mov	r5, r9
 8001cc8:	4323      	orrs	r3, r4
 8001cca:	4698      	mov	r8, r3
 8001ccc:	4085      	lsls	r5, r0
 8001cce:	4823      	ldr	r0, [pc, #140]	; (8001d5c <__aeabi_ddiv+0x394>)
 8001cd0:	1a83      	subs	r3, r0, r2
 8001cd2:	469b      	mov	fp, r3
 8001cd4:	2300      	movs	r3, #0
 8001cd6:	4699      	mov	r9, r3
 8001cd8:	9300      	str	r3, [sp, #0]
 8001cda:	e69a      	b.n	8001a12 <__aeabi_ddiv+0x4a>
 8001cdc:	464b      	mov	r3, r9
 8001cde:	4323      	orrs	r3, r4
 8001ce0:	4698      	mov	r8, r3
 8001ce2:	d11d      	bne.n	8001d20 <__aeabi_ddiv+0x358>
 8001ce4:	2308      	movs	r3, #8
 8001ce6:	4699      	mov	r9, r3
 8001ce8:	3b06      	subs	r3, #6
 8001cea:	2500      	movs	r5, #0
 8001cec:	4683      	mov	fp, r0
 8001cee:	9300      	str	r3, [sp, #0]
 8001cf0:	e68f      	b.n	8001a12 <__aeabi_ddiv+0x4a>
 8001cf2:	4652      	mov	r2, sl
 8001cf4:	4322      	orrs	r2, r4
 8001cf6:	d109      	bne.n	8001d0c <__aeabi_ddiv+0x344>
 8001cf8:	2302      	movs	r3, #2
 8001cfa:	4649      	mov	r1, r9
 8001cfc:	4319      	orrs	r1, r3
 8001cfe:	4b18      	ldr	r3, [pc, #96]	; (8001d60 <__aeabi_ddiv+0x398>)
 8001d00:	4689      	mov	r9, r1
 8001d02:	469c      	mov	ip, r3
 8001d04:	2400      	movs	r4, #0
 8001d06:	2002      	movs	r0, #2
 8001d08:	44e3      	add	fp, ip
 8001d0a:	e69d      	b.n	8001a48 <__aeabi_ddiv+0x80>
 8001d0c:	2303      	movs	r3, #3
 8001d0e:	464a      	mov	r2, r9
 8001d10:	431a      	orrs	r2, r3
 8001d12:	4b13      	ldr	r3, [pc, #76]	; (8001d60 <__aeabi_ddiv+0x398>)
 8001d14:	4691      	mov	r9, r2
 8001d16:	469c      	mov	ip, r3
 8001d18:	4652      	mov	r2, sl
 8001d1a:	2003      	movs	r0, #3
 8001d1c:	44e3      	add	fp, ip
 8001d1e:	e693      	b.n	8001a48 <__aeabi_ddiv+0x80>
 8001d20:	230c      	movs	r3, #12
 8001d22:	4699      	mov	r9, r3
 8001d24:	3b09      	subs	r3, #9
 8001d26:	46a0      	mov	r8, r4
 8001d28:	4683      	mov	fp, r0
 8001d2a:	9300      	str	r3, [sp, #0]
 8001d2c:	e671      	b.n	8001a12 <__aeabi_ddiv+0x4a>
 8001d2e:	2304      	movs	r3, #4
 8001d30:	4699      	mov	r9, r3
 8001d32:	2300      	movs	r3, #0
 8001d34:	469b      	mov	fp, r3
 8001d36:	3301      	adds	r3, #1
 8001d38:	2500      	movs	r5, #0
 8001d3a:	9300      	str	r3, [sp, #0]
 8001d3c:	e669      	b.n	8001a12 <__aeabi_ddiv+0x4a>
 8001d3e:	46c0      	nop			; (mov r8, r8)
 8001d40:	000007ff 	.word	0x000007ff
 8001d44:	fffffc01 	.word	0xfffffc01
 8001d48:	0800a840 	.word	0x0800a840
 8001d4c:	000003ff 	.word	0x000003ff
 8001d50:	feffffff 	.word	0xfeffffff
 8001d54:	000007fe 	.word	0x000007fe
 8001d58:	000003f3 	.word	0x000003f3
 8001d5c:	fffffc0d 	.word	0xfffffc0d
 8001d60:	fffff801 	.word	0xfffff801
 8001d64:	4649      	mov	r1, r9
 8001d66:	2301      	movs	r3, #1
 8001d68:	4319      	orrs	r1, r3
 8001d6a:	4689      	mov	r9, r1
 8001d6c:	2400      	movs	r4, #0
 8001d6e:	2001      	movs	r0, #1
 8001d70:	e66a      	b.n	8001a48 <__aeabi_ddiv+0x80>
 8001d72:	2300      	movs	r3, #0
 8001d74:	2480      	movs	r4, #128	; 0x80
 8001d76:	469a      	mov	sl, r3
 8001d78:	2500      	movs	r5, #0
 8001d7a:	4b8a      	ldr	r3, [pc, #552]	; (8001fa4 <__aeabi_ddiv+0x5dc>)
 8001d7c:	0324      	lsls	r4, r4, #12
 8001d7e:	e67a      	b.n	8001a76 <__aeabi_ddiv+0xae>
 8001d80:	2501      	movs	r5, #1
 8001d82:	426d      	negs	r5, r5
 8001d84:	2301      	movs	r3, #1
 8001d86:	1a9b      	subs	r3, r3, r2
 8001d88:	2b38      	cmp	r3, #56	; 0x38
 8001d8a:	dd00      	ble.n	8001d8e <__aeabi_ddiv+0x3c6>
 8001d8c:	e670      	b.n	8001a70 <__aeabi_ddiv+0xa8>
 8001d8e:	2b1f      	cmp	r3, #31
 8001d90:	dc00      	bgt.n	8001d94 <__aeabi_ddiv+0x3cc>
 8001d92:	e0bf      	b.n	8001f14 <__aeabi_ddiv+0x54c>
 8001d94:	211f      	movs	r1, #31
 8001d96:	4249      	negs	r1, r1
 8001d98:	1a8a      	subs	r2, r1, r2
 8001d9a:	4641      	mov	r1, r8
 8001d9c:	40d1      	lsrs	r1, r2
 8001d9e:	000a      	movs	r2, r1
 8001da0:	2b20      	cmp	r3, #32
 8001da2:	d004      	beq.n	8001dae <__aeabi_ddiv+0x3e6>
 8001da4:	4641      	mov	r1, r8
 8001da6:	4b80      	ldr	r3, [pc, #512]	; (8001fa8 <__aeabi_ddiv+0x5e0>)
 8001da8:	445b      	add	r3, fp
 8001daa:	4099      	lsls	r1, r3
 8001dac:	430d      	orrs	r5, r1
 8001dae:	1e6b      	subs	r3, r5, #1
 8001db0:	419d      	sbcs	r5, r3
 8001db2:	2307      	movs	r3, #7
 8001db4:	432a      	orrs	r2, r5
 8001db6:	001d      	movs	r5, r3
 8001db8:	2400      	movs	r4, #0
 8001dba:	4015      	ands	r5, r2
 8001dbc:	4213      	tst	r3, r2
 8001dbe:	d100      	bne.n	8001dc2 <__aeabi_ddiv+0x3fa>
 8001dc0:	e0d4      	b.n	8001f6c <__aeabi_ddiv+0x5a4>
 8001dc2:	210f      	movs	r1, #15
 8001dc4:	2300      	movs	r3, #0
 8001dc6:	4011      	ands	r1, r2
 8001dc8:	2904      	cmp	r1, #4
 8001dca:	d100      	bne.n	8001dce <__aeabi_ddiv+0x406>
 8001dcc:	e0cb      	b.n	8001f66 <__aeabi_ddiv+0x59e>
 8001dce:	1d11      	adds	r1, r2, #4
 8001dd0:	4291      	cmp	r1, r2
 8001dd2:	4192      	sbcs	r2, r2
 8001dd4:	4252      	negs	r2, r2
 8001dd6:	189b      	adds	r3, r3, r2
 8001dd8:	000a      	movs	r2, r1
 8001dda:	0219      	lsls	r1, r3, #8
 8001ddc:	d400      	bmi.n	8001de0 <__aeabi_ddiv+0x418>
 8001dde:	e0c2      	b.n	8001f66 <__aeabi_ddiv+0x59e>
 8001de0:	2301      	movs	r3, #1
 8001de2:	2400      	movs	r4, #0
 8001de4:	2500      	movs	r5, #0
 8001de6:	e646      	b.n	8001a76 <__aeabi_ddiv+0xae>
 8001de8:	2380      	movs	r3, #128	; 0x80
 8001dea:	4641      	mov	r1, r8
 8001dec:	031b      	lsls	r3, r3, #12
 8001dee:	4219      	tst	r1, r3
 8001df0:	d008      	beq.n	8001e04 <__aeabi_ddiv+0x43c>
 8001df2:	421c      	tst	r4, r3
 8001df4:	d106      	bne.n	8001e04 <__aeabi_ddiv+0x43c>
 8001df6:	431c      	orrs	r4, r3
 8001df8:	0324      	lsls	r4, r4, #12
 8001dfa:	46ba      	mov	sl, r7
 8001dfc:	0015      	movs	r5, r2
 8001dfe:	4b69      	ldr	r3, [pc, #420]	; (8001fa4 <__aeabi_ddiv+0x5dc>)
 8001e00:	0b24      	lsrs	r4, r4, #12
 8001e02:	e638      	b.n	8001a76 <__aeabi_ddiv+0xae>
 8001e04:	2480      	movs	r4, #128	; 0x80
 8001e06:	4643      	mov	r3, r8
 8001e08:	0324      	lsls	r4, r4, #12
 8001e0a:	431c      	orrs	r4, r3
 8001e0c:	0324      	lsls	r4, r4, #12
 8001e0e:	46b2      	mov	sl, r6
 8001e10:	4b64      	ldr	r3, [pc, #400]	; (8001fa4 <__aeabi_ddiv+0x5dc>)
 8001e12:	0b24      	lsrs	r4, r4, #12
 8001e14:	e62f      	b.n	8001a76 <__aeabi_ddiv+0xae>
 8001e16:	2b00      	cmp	r3, #0
 8001e18:	d100      	bne.n	8001e1c <__aeabi_ddiv+0x454>
 8001e1a:	e703      	b.n	8001c24 <__aeabi_ddiv+0x25c>
 8001e1c:	19a6      	adds	r6, r4, r6
 8001e1e:	1e68      	subs	r0, r5, #1
 8001e20:	42a6      	cmp	r6, r4
 8001e22:	d200      	bcs.n	8001e26 <__aeabi_ddiv+0x45e>
 8001e24:	e08d      	b.n	8001f42 <__aeabi_ddiv+0x57a>
 8001e26:	428e      	cmp	r6, r1
 8001e28:	d200      	bcs.n	8001e2c <__aeabi_ddiv+0x464>
 8001e2a:	e0a3      	b.n	8001f74 <__aeabi_ddiv+0x5ac>
 8001e2c:	d100      	bne.n	8001e30 <__aeabi_ddiv+0x468>
 8001e2e:	e0b3      	b.n	8001f98 <__aeabi_ddiv+0x5d0>
 8001e30:	0005      	movs	r5, r0
 8001e32:	e6f5      	b.n	8001c20 <__aeabi_ddiv+0x258>
 8001e34:	42aa      	cmp	r2, r5
 8001e36:	d900      	bls.n	8001e3a <__aeabi_ddiv+0x472>
 8001e38:	e639      	b.n	8001aae <__aeabi_ddiv+0xe6>
 8001e3a:	4643      	mov	r3, r8
 8001e3c:	07de      	lsls	r6, r3, #31
 8001e3e:	0858      	lsrs	r0, r3, #1
 8001e40:	086b      	lsrs	r3, r5, #1
 8001e42:	431e      	orrs	r6, r3
 8001e44:	07ed      	lsls	r5, r5, #31
 8001e46:	e639      	b.n	8001abc <__aeabi_ddiv+0xf4>
 8001e48:	4648      	mov	r0, r9
 8001e4a:	f001 f937 	bl	80030bc <__clzsi2>
 8001e4e:	0001      	movs	r1, r0
 8001e50:	0002      	movs	r2, r0
 8001e52:	3115      	adds	r1, #21
 8001e54:	3220      	adds	r2, #32
 8001e56:	291c      	cmp	r1, #28
 8001e58:	dc00      	bgt.n	8001e5c <__aeabi_ddiv+0x494>
 8001e5a:	e72c      	b.n	8001cb6 <__aeabi_ddiv+0x2ee>
 8001e5c:	464b      	mov	r3, r9
 8001e5e:	3808      	subs	r0, #8
 8001e60:	4083      	lsls	r3, r0
 8001e62:	2500      	movs	r5, #0
 8001e64:	4698      	mov	r8, r3
 8001e66:	e732      	b.n	8001cce <__aeabi_ddiv+0x306>
 8001e68:	f001 f928 	bl	80030bc <__clzsi2>
 8001e6c:	0003      	movs	r3, r0
 8001e6e:	001a      	movs	r2, r3
 8001e70:	3215      	adds	r2, #21
 8001e72:	3020      	adds	r0, #32
 8001e74:	2a1c      	cmp	r2, #28
 8001e76:	dc00      	bgt.n	8001e7a <__aeabi_ddiv+0x4b2>
 8001e78:	e700      	b.n	8001c7c <__aeabi_ddiv+0x2b4>
 8001e7a:	4654      	mov	r4, sl
 8001e7c:	3b08      	subs	r3, #8
 8001e7e:	2200      	movs	r2, #0
 8001e80:	409c      	lsls	r4, r3
 8001e82:	e705      	b.n	8001c90 <__aeabi_ddiv+0x2c8>
 8001e84:	1936      	adds	r6, r6, r4
 8001e86:	3b01      	subs	r3, #1
 8001e88:	42b4      	cmp	r4, r6
 8001e8a:	d900      	bls.n	8001e8e <__aeabi_ddiv+0x4c6>
 8001e8c:	e6a6      	b.n	8001bdc <__aeabi_ddiv+0x214>
 8001e8e:	42b2      	cmp	r2, r6
 8001e90:	d800      	bhi.n	8001e94 <__aeabi_ddiv+0x4cc>
 8001e92:	e6a3      	b.n	8001bdc <__aeabi_ddiv+0x214>
 8001e94:	1e83      	subs	r3, r0, #2
 8001e96:	1936      	adds	r6, r6, r4
 8001e98:	e6a0      	b.n	8001bdc <__aeabi_ddiv+0x214>
 8001e9a:	1909      	adds	r1, r1, r4
 8001e9c:	3d01      	subs	r5, #1
 8001e9e:	428c      	cmp	r4, r1
 8001ea0:	d900      	bls.n	8001ea4 <__aeabi_ddiv+0x4dc>
 8001ea2:	e68d      	b.n	8001bc0 <__aeabi_ddiv+0x1f8>
 8001ea4:	428a      	cmp	r2, r1
 8001ea6:	d800      	bhi.n	8001eaa <__aeabi_ddiv+0x4e2>
 8001ea8:	e68a      	b.n	8001bc0 <__aeabi_ddiv+0x1f8>
 8001eaa:	1e85      	subs	r5, r0, #2
 8001eac:	1909      	adds	r1, r1, r4
 8001eae:	e687      	b.n	8001bc0 <__aeabi_ddiv+0x1f8>
 8001eb0:	230f      	movs	r3, #15
 8001eb2:	402b      	ands	r3, r5
 8001eb4:	2b04      	cmp	r3, #4
 8001eb6:	d100      	bne.n	8001eba <__aeabi_ddiv+0x4f2>
 8001eb8:	e6bc      	b.n	8001c34 <__aeabi_ddiv+0x26c>
 8001eba:	2305      	movs	r3, #5
 8001ebc:	425b      	negs	r3, r3
 8001ebe:	42ab      	cmp	r3, r5
 8001ec0:	419b      	sbcs	r3, r3
 8001ec2:	3504      	adds	r5, #4
 8001ec4:	425b      	negs	r3, r3
 8001ec6:	08ed      	lsrs	r5, r5, #3
 8001ec8:	4498      	add	r8, r3
 8001eca:	e6b4      	b.n	8001c36 <__aeabi_ddiv+0x26e>
 8001ecc:	42af      	cmp	r7, r5
 8001ece:	d900      	bls.n	8001ed2 <__aeabi_ddiv+0x50a>
 8001ed0:	e660      	b.n	8001b94 <__aeabi_ddiv+0x1cc>
 8001ed2:	4282      	cmp	r2, r0
 8001ed4:	d804      	bhi.n	8001ee0 <__aeabi_ddiv+0x518>
 8001ed6:	d000      	beq.n	8001eda <__aeabi_ddiv+0x512>
 8001ed8:	e65c      	b.n	8001b94 <__aeabi_ddiv+0x1cc>
 8001eda:	42ae      	cmp	r6, r5
 8001edc:	d800      	bhi.n	8001ee0 <__aeabi_ddiv+0x518>
 8001ede:	e659      	b.n	8001b94 <__aeabi_ddiv+0x1cc>
 8001ee0:	2302      	movs	r3, #2
 8001ee2:	425b      	negs	r3, r3
 8001ee4:	469c      	mov	ip, r3
 8001ee6:	9b00      	ldr	r3, [sp, #0]
 8001ee8:	44e0      	add	r8, ip
 8001eea:	469c      	mov	ip, r3
 8001eec:	4465      	add	r5, ip
 8001eee:	429d      	cmp	r5, r3
 8001ef0:	419b      	sbcs	r3, r3
 8001ef2:	425b      	negs	r3, r3
 8001ef4:	191b      	adds	r3, r3, r4
 8001ef6:	18c0      	adds	r0, r0, r3
 8001ef8:	e64d      	b.n	8001b96 <__aeabi_ddiv+0x1ce>
 8001efa:	428a      	cmp	r2, r1
 8001efc:	d800      	bhi.n	8001f00 <__aeabi_ddiv+0x538>
 8001efe:	e60e      	b.n	8001b1e <__aeabi_ddiv+0x156>
 8001f00:	1e83      	subs	r3, r0, #2
 8001f02:	1909      	adds	r1, r1, r4
 8001f04:	e60b      	b.n	8001b1e <__aeabi_ddiv+0x156>
 8001f06:	428a      	cmp	r2, r1
 8001f08:	d800      	bhi.n	8001f0c <__aeabi_ddiv+0x544>
 8001f0a:	e5f4      	b.n	8001af6 <__aeabi_ddiv+0x12e>
 8001f0c:	1e83      	subs	r3, r0, #2
 8001f0e:	4698      	mov	r8, r3
 8001f10:	1909      	adds	r1, r1, r4
 8001f12:	e5f0      	b.n	8001af6 <__aeabi_ddiv+0x12e>
 8001f14:	4925      	ldr	r1, [pc, #148]	; (8001fac <__aeabi_ddiv+0x5e4>)
 8001f16:	0028      	movs	r0, r5
 8001f18:	4459      	add	r1, fp
 8001f1a:	408d      	lsls	r5, r1
 8001f1c:	4642      	mov	r2, r8
 8001f1e:	408a      	lsls	r2, r1
 8001f20:	1e69      	subs	r1, r5, #1
 8001f22:	418d      	sbcs	r5, r1
 8001f24:	4641      	mov	r1, r8
 8001f26:	40d8      	lsrs	r0, r3
 8001f28:	40d9      	lsrs	r1, r3
 8001f2a:	4302      	orrs	r2, r0
 8001f2c:	432a      	orrs	r2, r5
 8001f2e:	000b      	movs	r3, r1
 8001f30:	0751      	lsls	r1, r2, #29
 8001f32:	d100      	bne.n	8001f36 <__aeabi_ddiv+0x56e>
 8001f34:	e751      	b.n	8001dda <__aeabi_ddiv+0x412>
 8001f36:	210f      	movs	r1, #15
 8001f38:	4011      	ands	r1, r2
 8001f3a:	2904      	cmp	r1, #4
 8001f3c:	d000      	beq.n	8001f40 <__aeabi_ddiv+0x578>
 8001f3e:	e746      	b.n	8001dce <__aeabi_ddiv+0x406>
 8001f40:	e74b      	b.n	8001dda <__aeabi_ddiv+0x412>
 8001f42:	0005      	movs	r5, r0
 8001f44:	428e      	cmp	r6, r1
 8001f46:	d000      	beq.n	8001f4a <__aeabi_ddiv+0x582>
 8001f48:	e66a      	b.n	8001c20 <__aeabi_ddiv+0x258>
 8001f4a:	9a00      	ldr	r2, [sp, #0]
 8001f4c:	4293      	cmp	r3, r2
 8001f4e:	d000      	beq.n	8001f52 <__aeabi_ddiv+0x58a>
 8001f50:	e666      	b.n	8001c20 <__aeabi_ddiv+0x258>
 8001f52:	e667      	b.n	8001c24 <__aeabi_ddiv+0x25c>
 8001f54:	4a16      	ldr	r2, [pc, #88]	; (8001fb0 <__aeabi_ddiv+0x5e8>)
 8001f56:	445a      	add	r2, fp
 8001f58:	2a00      	cmp	r2, #0
 8001f5a:	dc00      	bgt.n	8001f5e <__aeabi_ddiv+0x596>
 8001f5c:	e710      	b.n	8001d80 <__aeabi_ddiv+0x3b8>
 8001f5e:	2301      	movs	r3, #1
 8001f60:	2500      	movs	r5, #0
 8001f62:	4498      	add	r8, r3
 8001f64:	e667      	b.n	8001c36 <__aeabi_ddiv+0x26e>
 8001f66:	075d      	lsls	r5, r3, #29
 8001f68:	025b      	lsls	r3, r3, #9
 8001f6a:	0b1c      	lsrs	r4, r3, #12
 8001f6c:	08d2      	lsrs	r2, r2, #3
 8001f6e:	2300      	movs	r3, #0
 8001f70:	4315      	orrs	r5, r2
 8001f72:	e580      	b.n	8001a76 <__aeabi_ddiv+0xae>
 8001f74:	9800      	ldr	r0, [sp, #0]
 8001f76:	3d02      	subs	r5, #2
 8001f78:	0042      	lsls	r2, r0, #1
 8001f7a:	4282      	cmp	r2, r0
 8001f7c:	41bf      	sbcs	r7, r7
 8001f7e:	427f      	negs	r7, r7
 8001f80:	193c      	adds	r4, r7, r4
 8001f82:	1936      	adds	r6, r6, r4
 8001f84:	9200      	str	r2, [sp, #0]
 8001f86:	e7dd      	b.n	8001f44 <__aeabi_ddiv+0x57c>
 8001f88:	2480      	movs	r4, #128	; 0x80
 8001f8a:	4643      	mov	r3, r8
 8001f8c:	0324      	lsls	r4, r4, #12
 8001f8e:	431c      	orrs	r4, r3
 8001f90:	0324      	lsls	r4, r4, #12
 8001f92:	4b04      	ldr	r3, [pc, #16]	; (8001fa4 <__aeabi_ddiv+0x5dc>)
 8001f94:	0b24      	lsrs	r4, r4, #12
 8001f96:	e56e      	b.n	8001a76 <__aeabi_ddiv+0xae>
 8001f98:	9a00      	ldr	r2, [sp, #0]
 8001f9a:	429a      	cmp	r2, r3
 8001f9c:	d3ea      	bcc.n	8001f74 <__aeabi_ddiv+0x5ac>
 8001f9e:	0005      	movs	r5, r0
 8001fa0:	e7d3      	b.n	8001f4a <__aeabi_ddiv+0x582>
 8001fa2:	46c0      	nop			; (mov r8, r8)
 8001fa4:	000007ff 	.word	0x000007ff
 8001fa8:	0000043e 	.word	0x0000043e
 8001fac:	0000041e 	.word	0x0000041e
 8001fb0:	000003ff 	.word	0x000003ff

08001fb4 <__eqdf2>:
 8001fb4:	b5f0      	push	{r4, r5, r6, r7, lr}
 8001fb6:	464e      	mov	r6, r9
 8001fb8:	4645      	mov	r5, r8
 8001fba:	46de      	mov	lr, fp
 8001fbc:	4657      	mov	r7, sl
 8001fbe:	4690      	mov	r8, r2
 8001fc0:	b5e0      	push	{r5, r6, r7, lr}
 8001fc2:	0017      	movs	r7, r2
 8001fc4:	031a      	lsls	r2, r3, #12
 8001fc6:	0b12      	lsrs	r2, r2, #12
 8001fc8:	0005      	movs	r5, r0
 8001fca:	4684      	mov	ip, r0
 8001fcc:	4819      	ldr	r0, [pc, #100]	; (8002034 <__eqdf2+0x80>)
 8001fce:	030e      	lsls	r6, r1, #12
 8001fd0:	004c      	lsls	r4, r1, #1
 8001fd2:	4691      	mov	r9, r2
 8001fd4:	005a      	lsls	r2, r3, #1
 8001fd6:	0fdb      	lsrs	r3, r3, #31
 8001fd8:	469b      	mov	fp, r3
 8001fda:	0b36      	lsrs	r6, r6, #12
 8001fdc:	0d64      	lsrs	r4, r4, #21
 8001fde:	0fc9      	lsrs	r1, r1, #31
 8001fe0:	0d52      	lsrs	r2, r2, #21
 8001fe2:	4284      	cmp	r4, r0
 8001fe4:	d019      	beq.n	800201a <__eqdf2+0x66>
 8001fe6:	4282      	cmp	r2, r0
 8001fe8:	d010      	beq.n	800200c <__eqdf2+0x58>
 8001fea:	2001      	movs	r0, #1
 8001fec:	4294      	cmp	r4, r2
 8001fee:	d10e      	bne.n	800200e <__eqdf2+0x5a>
 8001ff0:	454e      	cmp	r6, r9
 8001ff2:	d10c      	bne.n	800200e <__eqdf2+0x5a>
 8001ff4:	2001      	movs	r0, #1
 8001ff6:	45c4      	cmp	ip, r8
 8001ff8:	d109      	bne.n	800200e <__eqdf2+0x5a>
 8001ffa:	4559      	cmp	r1, fp
 8001ffc:	d017      	beq.n	800202e <__eqdf2+0x7a>
 8001ffe:	2c00      	cmp	r4, #0
 8002000:	d105      	bne.n	800200e <__eqdf2+0x5a>
 8002002:	0030      	movs	r0, r6
 8002004:	4328      	orrs	r0, r5
 8002006:	1e43      	subs	r3, r0, #1
 8002008:	4198      	sbcs	r0, r3
 800200a:	e000      	b.n	800200e <__eqdf2+0x5a>
 800200c:	2001      	movs	r0, #1
 800200e:	bcf0      	pop	{r4, r5, r6, r7}
 8002010:	46bb      	mov	fp, r7
 8002012:	46b2      	mov	sl, r6
 8002014:	46a9      	mov	r9, r5
 8002016:	46a0      	mov	r8, r4
 8002018:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800201a:	0033      	movs	r3, r6
 800201c:	2001      	movs	r0, #1
 800201e:	432b      	orrs	r3, r5
 8002020:	d1f5      	bne.n	800200e <__eqdf2+0x5a>
 8002022:	42a2      	cmp	r2, r4
 8002024:	d1f3      	bne.n	800200e <__eqdf2+0x5a>
 8002026:	464b      	mov	r3, r9
 8002028:	433b      	orrs	r3, r7
 800202a:	d1f0      	bne.n	800200e <__eqdf2+0x5a>
 800202c:	e7e2      	b.n	8001ff4 <__eqdf2+0x40>
 800202e:	2000      	movs	r0, #0
 8002030:	e7ed      	b.n	800200e <__eqdf2+0x5a>
 8002032:	46c0      	nop			; (mov r8, r8)
 8002034:	000007ff 	.word	0x000007ff

08002038 <__gedf2>:
 8002038:	b5f0      	push	{r4, r5, r6, r7, lr}
 800203a:	4647      	mov	r7, r8
 800203c:	46ce      	mov	lr, r9
 800203e:	0004      	movs	r4, r0
 8002040:	0018      	movs	r0, r3
 8002042:	0016      	movs	r6, r2
 8002044:	031b      	lsls	r3, r3, #12
 8002046:	0b1b      	lsrs	r3, r3, #12
 8002048:	4d2d      	ldr	r5, [pc, #180]	; (8002100 <__gedf2+0xc8>)
 800204a:	004a      	lsls	r2, r1, #1
 800204c:	4699      	mov	r9, r3
 800204e:	b580      	push	{r7, lr}
 8002050:	0043      	lsls	r3, r0, #1
 8002052:	030f      	lsls	r7, r1, #12
 8002054:	46a4      	mov	ip, r4
 8002056:	46b0      	mov	r8, r6
 8002058:	0b3f      	lsrs	r7, r7, #12
 800205a:	0d52      	lsrs	r2, r2, #21
 800205c:	0fc9      	lsrs	r1, r1, #31
 800205e:	0d5b      	lsrs	r3, r3, #21
 8002060:	0fc0      	lsrs	r0, r0, #31
 8002062:	42aa      	cmp	r2, r5
 8002064:	d021      	beq.n	80020aa <__gedf2+0x72>
 8002066:	42ab      	cmp	r3, r5
 8002068:	d013      	beq.n	8002092 <__gedf2+0x5a>
 800206a:	2a00      	cmp	r2, #0
 800206c:	d122      	bne.n	80020b4 <__gedf2+0x7c>
 800206e:	433c      	orrs	r4, r7
 8002070:	2b00      	cmp	r3, #0
 8002072:	d102      	bne.n	800207a <__gedf2+0x42>
 8002074:	464d      	mov	r5, r9
 8002076:	432e      	orrs	r6, r5
 8002078:	d022      	beq.n	80020c0 <__gedf2+0x88>
 800207a:	2c00      	cmp	r4, #0
 800207c:	d010      	beq.n	80020a0 <__gedf2+0x68>
 800207e:	4281      	cmp	r1, r0
 8002080:	d022      	beq.n	80020c8 <__gedf2+0x90>
 8002082:	2002      	movs	r0, #2
 8002084:	3901      	subs	r1, #1
 8002086:	4008      	ands	r0, r1
 8002088:	3801      	subs	r0, #1
 800208a:	bcc0      	pop	{r6, r7}
 800208c:	46b9      	mov	r9, r7
 800208e:	46b0      	mov	r8, r6
 8002090:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8002092:	464d      	mov	r5, r9
 8002094:	432e      	orrs	r6, r5
 8002096:	d129      	bne.n	80020ec <__gedf2+0xb4>
 8002098:	2a00      	cmp	r2, #0
 800209a:	d1f0      	bne.n	800207e <__gedf2+0x46>
 800209c:	433c      	orrs	r4, r7
 800209e:	d1ee      	bne.n	800207e <__gedf2+0x46>
 80020a0:	2800      	cmp	r0, #0
 80020a2:	d1f2      	bne.n	800208a <__gedf2+0x52>
 80020a4:	2001      	movs	r0, #1
 80020a6:	4240      	negs	r0, r0
 80020a8:	e7ef      	b.n	800208a <__gedf2+0x52>
 80020aa:	003d      	movs	r5, r7
 80020ac:	4325      	orrs	r5, r4
 80020ae:	d11d      	bne.n	80020ec <__gedf2+0xb4>
 80020b0:	4293      	cmp	r3, r2
 80020b2:	d0ee      	beq.n	8002092 <__gedf2+0x5a>
 80020b4:	2b00      	cmp	r3, #0
 80020b6:	d1e2      	bne.n	800207e <__gedf2+0x46>
 80020b8:	464c      	mov	r4, r9
 80020ba:	4326      	orrs	r6, r4
 80020bc:	d1df      	bne.n	800207e <__gedf2+0x46>
 80020be:	e7e0      	b.n	8002082 <__gedf2+0x4a>
 80020c0:	2000      	movs	r0, #0
 80020c2:	2c00      	cmp	r4, #0
 80020c4:	d0e1      	beq.n	800208a <__gedf2+0x52>
 80020c6:	e7dc      	b.n	8002082 <__gedf2+0x4a>
 80020c8:	429a      	cmp	r2, r3
 80020ca:	dc0a      	bgt.n	80020e2 <__gedf2+0xaa>
 80020cc:	dbe8      	blt.n	80020a0 <__gedf2+0x68>
 80020ce:	454f      	cmp	r7, r9
 80020d0:	d8d7      	bhi.n	8002082 <__gedf2+0x4a>
 80020d2:	d00e      	beq.n	80020f2 <__gedf2+0xba>
 80020d4:	2000      	movs	r0, #0
 80020d6:	454f      	cmp	r7, r9
 80020d8:	d2d7      	bcs.n	800208a <__gedf2+0x52>
 80020da:	2900      	cmp	r1, #0
 80020dc:	d0e2      	beq.n	80020a4 <__gedf2+0x6c>
 80020de:	0008      	movs	r0, r1
 80020e0:	e7d3      	b.n	800208a <__gedf2+0x52>
 80020e2:	4243      	negs	r3, r0
 80020e4:	4158      	adcs	r0, r3
 80020e6:	0040      	lsls	r0, r0, #1
 80020e8:	3801      	subs	r0, #1
 80020ea:	e7ce      	b.n	800208a <__gedf2+0x52>
 80020ec:	2002      	movs	r0, #2
 80020ee:	4240      	negs	r0, r0
 80020f0:	e7cb      	b.n	800208a <__gedf2+0x52>
 80020f2:	45c4      	cmp	ip, r8
 80020f4:	d8c5      	bhi.n	8002082 <__gedf2+0x4a>
 80020f6:	2000      	movs	r0, #0
 80020f8:	45c4      	cmp	ip, r8
 80020fa:	d2c6      	bcs.n	800208a <__gedf2+0x52>
 80020fc:	e7ed      	b.n	80020da <__gedf2+0xa2>
 80020fe:	46c0      	nop			; (mov r8, r8)
 8002100:	000007ff 	.word	0x000007ff

08002104 <__ledf2>:
 8002104:	b5f0      	push	{r4, r5, r6, r7, lr}
 8002106:	4647      	mov	r7, r8
 8002108:	46ce      	mov	lr, r9
 800210a:	0004      	movs	r4, r0
 800210c:	0018      	movs	r0, r3
 800210e:	0016      	movs	r6, r2
 8002110:	031b      	lsls	r3, r3, #12
 8002112:	0b1b      	lsrs	r3, r3, #12
 8002114:	4d2c      	ldr	r5, [pc, #176]	; (80021c8 <__ledf2+0xc4>)
 8002116:	004a      	lsls	r2, r1, #1
 8002118:	4699      	mov	r9, r3
 800211a:	b580      	push	{r7, lr}
 800211c:	0043      	lsls	r3, r0, #1
 800211e:	030f      	lsls	r7, r1, #12
 8002120:	46a4      	mov	ip, r4
 8002122:	46b0      	mov	r8, r6
 8002124:	0b3f      	lsrs	r7, r7, #12
 8002126:	0d52      	lsrs	r2, r2, #21
 8002128:	0fc9      	lsrs	r1, r1, #31
 800212a:	0d5b      	lsrs	r3, r3, #21
 800212c:	0fc0      	lsrs	r0, r0, #31
 800212e:	42aa      	cmp	r2, r5
 8002130:	d00d      	beq.n	800214e <__ledf2+0x4a>
 8002132:	42ab      	cmp	r3, r5
 8002134:	d010      	beq.n	8002158 <__ledf2+0x54>
 8002136:	2a00      	cmp	r2, #0
 8002138:	d127      	bne.n	800218a <__ledf2+0x86>
 800213a:	433c      	orrs	r4, r7
 800213c:	2b00      	cmp	r3, #0
 800213e:	d111      	bne.n	8002164 <__ledf2+0x60>
 8002140:	464d      	mov	r5, r9
 8002142:	432e      	orrs	r6, r5
 8002144:	d10e      	bne.n	8002164 <__ledf2+0x60>
 8002146:	2000      	movs	r0, #0
 8002148:	2c00      	cmp	r4, #0
 800214a:	d015      	beq.n	8002178 <__ledf2+0x74>
 800214c:	e00e      	b.n	800216c <__ledf2+0x68>
 800214e:	003d      	movs	r5, r7
 8002150:	4325      	orrs	r5, r4
 8002152:	d110      	bne.n	8002176 <__ledf2+0x72>
 8002154:	4293      	cmp	r3, r2
 8002156:	d118      	bne.n	800218a <__ledf2+0x86>
 8002158:	464d      	mov	r5, r9
 800215a:	432e      	orrs	r6, r5
 800215c:	d10b      	bne.n	8002176 <__ledf2+0x72>
 800215e:	2a00      	cmp	r2, #0
 8002160:	d102      	bne.n	8002168 <__ledf2+0x64>
 8002162:	433c      	orrs	r4, r7
 8002164:	2c00      	cmp	r4, #0
 8002166:	d00b      	beq.n	8002180 <__ledf2+0x7c>
 8002168:	4281      	cmp	r1, r0
 800216a:	d014      	beq.n	8002196 <__ledf2+0x92>
 800216c:	2002      	movs	r0, #2
 800216e:	3901      	subs	r1, #1
 8002170:	4008      	ands	r0, r1
 8002172:	3801      	subs	r0, #1
 8002174:	e000      	b.n	8002178 <__ledf2+0x74>
 8002176:	2002      	movs	r0, #2
 8002178:	bcc0      	pop	{r6, r7}
 800217a:	46b9      	mov	r9, r7
 800217c:	46b0      	mov	r8, r6
 800217e:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8002180:	2800      	cmp	r0, #0
 8002182:	d1f9      	bne.n	8002178 <__ledf2+0x74>
 8002184:	2001      	movs	r0, #1
 8002186:	4240      	negs	r0, r0
 8002188:	e7f6      	b.n	8002178 <__ledf2+0x74>
 800218a:	2b00      	cmp	r3, #0
 800218c:	d1ec      	bne.n	8002168 <__ledf2+0x64>
 800218e:	464c      	mov	r4, r9
 8002190:	4326      	orrs	r6, r4
 8002192:	d1e9      	bne.n	8002168 <__ledf2+0x64>
 8002194:	e7ea      	b.n	800216c <__ledf2+0x68>
 8002196:	429a      	cmp	r2, r3
 8002198:	dd04      	ble.n	80021a4 <__ledf2+0xa0>
 800219a:	4243      	negs	r3, r0
 800219c:	4158      	adcs	r0, r3
 800219e:	0040      	lsls	r0, r0, #1
 80021a0:	3801      	subs	r0, #1
 80021a2:	e7e9      	b.n	8002178 <__ledf2+0x74>
 80021a4:	429a      	cmp	r2, r3
 80021a6:	dbeb      	blt.n	8002180 <__ledf2+0x7c>
 80021a8:	454f      	cmp	r7, r9
 80021aa:	d8df      	bhi.n	800216c <__ledf2+0x68>
 80021ac:	d006      	beq.n	80021bc <__ledf2+0xb8>
 80021ae:	2000      	movs	r0, #0
 80021b0:	454f      	cmp	r7, r9
 80021b2:	d2e1      	bcs.n	8002178 <__ledf2+0x74>
 80021b4:	2900      	cmp	r1, #0
 80021b6:	d0e5      	beq.n	8002184 <__ledf2+0x80>
 80021b8:	0008      	movs	r0, r1
 80021ba:	e7dd      	b.n	8002178 <__ledf2+0x74>
 80021bc:	45c4      	cmp	ip, r8
 80021be:	d8d5      	bhi.n	800216c <__ledf2+0x68>
 80021c0:	2000      	movs	r0, #0
 80021c2:	45c4      	cmp	ip, r8
 80021c4:	d2d8      	bcs.n	8002178 <__ledf2+0x74>
 80021c6:	e7f5      	b.n	80021b4 <__ledf2+0xb0>
 80021c8:	000007ff 	.word	0x000007ff

080021cc <__aeabi_dmul>:
 80021cc:	b5f0      	push	{r4, r5, r6, r7, lr}
 80021ce:	4657      	mov	r7, sl
 80021d0:	464e      	mov	r6, r9
 80021d2:	4645      	mov	r5, r8
 80021d4:	46de      	mov	lr, fp
 80021d6:	b5e0      	push	{r5, r6, r7, lr}
 80021d8:	4698      	mov	r8, r3
 80021da:	030c      	lsls	r4, r1, #12
 80021dc:	004b      	lsls	r3, r1, #1
 80021de:	0006      	movs	r6, r0
 80021e0:	4692      	mov	sl, r2
 80021e2:	b087      	sub	sp, #28
 80021e4:	0b24      	lsrs	r4, r4, #12
 80021e6:	0d5b      	lsrs	r3, r3, #21
 80021e8:	0fcf      	lsrs	r7, r1, #31
 80021ea:	2b00      	cmp	r3, #0
 80021ec:	d100      	bne.n	80021f0 <__aeabi_dmul+0x24>
 80021ee:	e15c      	b.n	80024aa <__aeabi_dmul+0x2de>
 80021f0:	4ad9      	ldr	r2, [pc, #868]	; (8002558 <__aeabi_dmul+0x38c>)
 80021f2:	4293      	cmp	r3, r2
 80021f4:	d100      	bne.n	80021f8 <__aeabi_dmul+0x2c>
 80021f6:	e175      	b.n	80024e4 <__aeabi_dmul+0x318>
 80021f8:	0f42      	lsrs	r2, r0, #29
 80021fa:	00e4      	lsls	r4, r4, #3
 80021fc:	4314      	orrs	r4, r2
 80021fe:	2280      	movs	r2, #128	; 0x80
 8002200:	0412      	lsls	r2, r2, #16
 8002202:	4314      	orrs	r4, r2
 8002204:	4ad5      	ldr	r2, [pc, #852]	; (800255c <__aeabi_dmul+0x390>)
 8002206:	00c5      	lsls	r5, r0, #3
 8002208:	4694      	mov	ip, r2
 800220a:	4463      	add	r3, ip
 800220c:	9300      	str	r3, [sp, #0]
 800220e:	2300      	movs	r3, #0
 8002210:	4699      	mov	r9, r3
 8002212:	469b      	mov	fp, r3
 8002214:	4643      	mov	r3, r8
 8002216:	4642      	mov	r2, r8
 8002218:	031e      	lsls	r6, r3, #12
 800221a:	0fd2      	lsrs	r2, r2, #31
 800221c:	005b      	lsls	r3, r3, #1
 800221e:	4650      	mov	r0, sl
 8002220:	4690      	mov	r8, r2
 8002222:	0b36      	lsrs	r6, r6, #12
 8002224:	0d5b      	lsrs	r3, r3, #21
 8002226:	d100      	bne.n	800222a <__aeabi_dmul+0x5e>
 8002228:	e120      	b.n	800246c <__aeabi_dmul+0x2a0>
 800222a:	4acb      	ldr	r2, [pc, #812]	; (8002558 <__aeabi_dmul+0x38c>)
 800222c:	4293      	cmp	r3, r2
 800222e:	d100      	bne.n	8002232 <__aeabi_dmul+0x66>
 8002230:	e162      	b.n	80024f8 <__aeabi_dmul+0x32c>
 8002232:	49ca      	ldr	r1, [pc, #808]	; (800255c <__aeabi_dmul+0x390>)
 8002234:	0f42      	lsrs	r2, r0, #29
 8002236:	468c      	mov	ip, r1
 8002238:	9900      	ldr	r1, [sp, #0]
 800223a:	4463      	add	r3, ip
 800223c:	00f6      	lsls	r6, r6, #3
 800223e:	468c      	mov	ip, r1
 8002240:	4316      	orrs	r6, r2
 8002242:	2280      	movs	r2, #128	; 0x80
 8002244:	449c      	add	ip, r3
 8002246:	0412      	lsls	r2, r2, #16
 8002248:	4663      	mov	r3, ip
 800224a:	4316      	orrs	r6, r2
 800224c:	00c2      	lsls	r2, r0, #3
 800224e:	2000      	movs	r0, #0
 8002250:	9300      	str	r3, [sp, #0]
 8002252:	9900      	ldr	r1, [sp, #0]
 8002254:	4643      	mov	r3, r8
 8002256:	3101      	adds	r1, #1
 8002258:	468c      	mov	ip, r1
 800225a:	4649      	mov	r1, r9
 800225c:	407b      	eors	r3, r7
 800225e:	9301      	str	r3, [sp, #4]
 8002260:	290f      	cmp	r1, #15
 8002262:	d826      	bhi.n	80022b2 <__aeabi_dmul+0xe6>
 8002264:	4bbe      	ldr	r3, [pc, #760]	; (8002560 <__aeabi_dmul+0x394>)
 8002266:	0089      	lsls	r1, r1, #2
 8002268:	5859      	ldr	r1, [r3, r1]
 800226a:	468f      	mov	pc, r1
 800226c:	4643      	mov	r3, r8
 800226e:	9301      	str	r3, [sp, #4]
 8002270:	0034      	movs	r4, r6
 8002272:	0015      	movs	r5, r2
 8002274:	4683      	mov	fp, r0
 8002276:	465b      	mov	r3, fp
 8002278:	2b02      	cmp	r3, #2
 800227a:	d016      	beq.n	80022aa <__aeabi_dmul+0xde>
 800227c:	2b03      	cmp	r3, #3
 800227e:	d100      	bne.n	8002282 <__aeabi_dmul+0xb6>
 8002280:	e203      	b.n	800268a <__aeabi_dmul+0x4be>
 8002282:	2b01      	cmp	r3, #1
 8002284:	d000      	beq.n	8002288 <__aeabi_dmul+0xbc>
 8002286:	e0cd      	b.n	8002424 <__aeabi_dmul+0x258>
 8002288:	2200      	movs	r2, #0
 800228a:	2400      	movs	r4, #0
 800228c:	2500      	movs	r5, #0
 800228e:	9b01      	ldr	r3, [sp, #4]
 8002290:	0512      	lsls	r2, r2, #20
 8002292:	4322      	orrs	r2, r4
 8002294:	07db      	lsls	r3, r3, #31
 8002296:	431a      	orrs	r2, r3
 8002298:	0028      	movs	r0, r5
 800229a:	0011      	movs	r1, r2
 800229c:	b007      	add	sp, #28
 800229e:	bcf0      	pop	{r4, r5, r6, r7}
 80022a0:	46bb      	mov	fp, r7
 80022a2:	46b2      	mov	sl, r6
 80022a4:	46a9      	mov	r9, r5
 80022a6:	46a0      	mov	r8, r4
 80022a8:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80022aa:	2400      	movs	r4, #0
 80022ac:	2500      	movs	r5, #0
 80022ae:	4aaa      	ldr	r2, [pc, #680]	; (8002558 <__aeabi_dmul+0x38c>)
 80022b0:	e7ed      	b.n	800228e <__aeabi_dmul+0xc2>
 80022b2:	0c28      	lsrs	r0, r5, #16
 80022b4:	042d      	lsls	r5, r5, #16
 80022b6:	0c2d      	lsrs	r5, r5, #16
 80022b8:	002b      	movs	r3, r5
 80022ba:	0c11      	lsrs	r1, r2, #16
 80022bc:	0412      	lsls	r2, r2, #16
 80022be:	0c12      	lsrs	r2, r2, #16
 80022c0:	4353      	muls	r3, r2
 80022c2:	4698      	mov	r8, r3
 80022c4:	0013      	movs	r3, r2
 80022c6:	002f      	movs	r7, r5
 80022c8:	4343      	muls	r3, r0
 80022ca:	4699      	mov	r9, r3
 80022cc:	434f      	muls	r7, r1
 80022ce:	444f      	add	r7, r9
 80022d0:	46bb      	mov	fp, r7
 80022d2:	4647      	mov	r7, r8
 80022d4:	000b      	movs	r3, r1
 80022d6:	0c3f      	lsrs	r7, r7, #16
 80022d8:	46ba      	mov	sl, r7
 80022da:	4343      	muls	r3, r0
 80022dc:	44da      	add	sl, fp
 80022de:	9302      	str	r3, [sp, #8]
 80022e0:	45d1      	cmp	r9, sl
 80022e2:	d904      	bls.n	80022ee <__aeabi_dmul+0x122>
 80022e4:	2780      	movs	r7, #128	; 0x80
 80022e6:	027f      	lsls	r7, r7, #9
 80022e8:	46b9      	mov	r9, r7
 80022ea:	444b      	add	r3, r9
 80022ec:	9302      	str	r3, [sp, #8]
 80022ee:	4653      	mov	r3, sl
 80022f0:	0c1b      	lsrs	r3, r3, #16
 80022f2:	469b      	mov	fp, r3
 80022f4:	4653      	mov	r3, sl
 80022f6:	041f      	lsls	r7, r3, #16
 80022f8:	4643      	mov	r3, r8
 80022fa:	041b      	lsls	r3, r3, #16
 80022fc:	0c1b      	lsrs	r3, r3, #16
 80022fe:	4698      	mov	r8, r3
 8002300:	003b      	movs	r3, r7
 8002302:	4443      	add	r3, r8
 8002304:	9304      	str	r3, [sp, #16]
 8002306:	0c33      	lsrs	r3, r6, #16
 8002308:	0436      	lsls	r6, r6, #16
 800230a:	0c36      	lsrs	r6, r6, #16
 800230c:	4698      	mov	r8, r3
 800230e:	0033      	movs	r3, r6
 8002310:	4343      	muls	r3, r0
 8002312:	4699      	mov	r9, r3
 8002314:	4643      	mov	r3, r8
 8002316:	4343      	muls	r3, r0
 8002318:	002f      	movs	r7, r5
 800231a:	469a      	mov	sl, r3
 800231c:	4643      	mov	r3, r8
 800231e:	4377      	muls	r7, r6
 8002320:	435d      	muls	r5, r3
 8002322:	0c38      	lsrs	r0, r7, #16
 8002324:	444d      	add	r5, r9
 8002326:	1945      	adds	r5, r0, r5
 8002328:	45a9      	cmp	r9, r5
 800232a:	d903      	bls.n	8002334 <__aeabi_dmul+0x168>
 800232c:	2380      	movs	r3, #128	; 0x80
 800232e:	025b      	lsls	r3, r3, #9
 8002330:	4699      	mov	r9, r3
 8002332:	44ca      	add	sl, r9
 8002334:	043f      	lsls	r7, r7, #16
 8002336:	0c28      	lsrs	r0, r5, #16
 8002338:	0c3f      	lsrs	r7, r7, #16
 800233a:	042d      	lsls	r5, r5, #16
 800233c:	19ed      	adds	r5, r5, r7
 800233e:	0c27      	lsrs	r7, r4, #16
 8002340:	0424      	lsls	r4, r4, #16
 8002342:	0c24      	lsrs	r4, r4, #16
 8002344:	0003      	movs	r3, r0
 8002346:	0020      	movs	r0, r4
 8002348:	4350      	muls	r0, r2
 800234a:	437a      	muls	r2, r7
 800234c:	4691      	mov	r9, r2
 800234e:	003a      	movs	r2, r7
 8002350:	4453      	add	r3, sl
 8002352:	9305      	str	r3, [sp, #20]
 8002354:	0c03      	lsrs	r3, r0, #16
 8002356:	469a      	mov	sl, r3
 8002358:	434a      	muls	r2, r1
 800235a:	4361      	muls	r1, r4
 800235c:	4449      	add	r1, r9
 800235e:	4451      	add	r1, sl
 8002360:	44ab      	add	fp, r5
 8002362:	4589      	cmp	r9, r1
 8002364:	d903      	bls.n	800236e <__aeabi_dmul+0x1a2>
 8002366:	2380      	movs	r3, #128	; 0x80
 8002368:	025b      	lsls	r3, r3, #9
 800236a:	4699      	mov	r9, r3
 800236c:	444a      	add	r2, r9
 800236e:	0400      	lsls	r0, r0, #16
 8002370:	0c0b      	lsrs	r3, r1, #16
 8002372:	0c00      	lsrs	r0, r0, #16
 8002374:	0409      	lsls	r1, r1, #16
 8002376:	1809      	adds	r1, r1, r0
 8002378:	0020      	movs	r0, r4
 800237a:	4699      	mov	r9, r3
 800237c:	4643      	mov	r3, r8
 800237e:	4370      	muls	r0, r6
 8002380:	435c      	muls	r4, r3
 8002382:	437e      	muls	r6, r7
 8002384:	435f      	muls	r7, r3
 8002386:	0c03      	lsrs	r3, r0, #16
 8002388:	4698      	mov	r8, r3
 800238a:	19a4      	adds	r4, r4, r6
 800238c:	4444      	add	r4, r8
 800238e:	444a      	add	r2, r9
 8002390:	9703      	str	r7, [sp, #12]
 8002392:	42a6      	cmp	r6, r4
 8002394:	d904      	bls.n	80023a0 <__aeabi_dmul+0x1d4>
 8002396:	2380      	movs	r3, #128	; 0x80
 8002398:	025b      	lsls	r3, r3, #9
 800239a:	4698      	mov	r8, r3
 800239c:	4447      	add	r7, r8
 800239e:	9703      	str	r7, [sp, #12]
 80023a0:	0423      	lsls	r3, r4, #16
 80023a2:	9e02      	ldr	r6, [sp, #8]
 80023a4:	469a      	mov	sl, r3
 80023a6:	9b05      	ldr	r3, [sp, #20]
 80023a8:	445e      	add	r6, fp
 80023aa:	4698      	mov	r8, r3
 80023ac:	42ae      	cmp	r6, r5
 80023ae:	41ad      	sbcs	r5, r5
 80023b0:	1876      	adds	r6, r6, r1
 80023b2:	428e      	cmp	r6, r1
 80023b4:	4189      	sbcs	r1, r1
 80023b6:	0400      	lsls	r0, r0, #16
 80023b8:	0c00      	lsrs	r0, r0, #16
 80023ba:	4450      	add	r0, sl
 80023bc:	4440      	add	r0, r8
 80023be:	426d      	negs	r5, r5
 80023c0:	1947      	adds	r7, r0, r5
 80023c2:	46b8      	mov	r8, r7
 80023c4:	4693      	mov	fp, r2
 80023c6:	4249      	negs	r1, r1
 80023c8:	4689      	mov	r9, r1
 80023ca:	44c3      	add	fp, r8
 80023cc:	44d9      	add	r9, fp
 80023ce:	4298      	cmp	r0, r3
 80023d0:	4180      	sbcs	r0, r0
 80023d2:	45a8      	cmp	r8, r5
 80023d4:	41ad      	sbcs	r5, r5
 80023d6:	4593      	cmp	fp, r2
 80023d8:	4192      	sbcs	r2, r2
 80023da:	4589      	cmp	r9, r1
 80023dc:	4189      	sbcs	r1, r1
 80023de:	426d      	negs	r5, r5
 80023e0:	4240      	negs	r0, r0
 80023e2:	4328      	orrs	r0, r5
 80023e4:	0c24      	lsrs	r4, r4, #16
 80023e6:	4252      	negs	r2, r2
 80023e8:	4249      	negs	r1, r1
 80023ea:	430a      	orrs	r2, r1
 80023ec:	9b03      	ldr	r3, [sp, #12]
 80023ee:	1900      	adds	r0, r0, r4
 80023f0:	1880      	adds	r0, r0, r2
 80023f2:	18c7      	adds	r7, r0, r3
 80023f4:	464b      	mov	r3, r9
 80023f6:	0ddc      	lsrs	r4, r3, #23
 80023f8:	9b04      	ldr	r3, [sp, #16]
 80023fa:	0275      	lsls	r5, r6, #9
 80023fc:	431d      	orrs	r5, r3
 80023fe:	1e6a      	subs	r2, r5, #1
 8002400:	4195      	sbcs	r5, r2
 8002402:	464b      	mov	r3, r9
 8002404:	0df6      	lsrs	r6, r6, #23
 8002406:	027f      	lsls	r7, r7, #9
 8002408:	4335      	orrs	r5, r6
 800240a:	025a      	lsls	r2, r3, #9
 800240c:	433c      	orrs	r4, r7
 800240e:	4315      	orrs	r5, r2
 8002410:	01fb      	lsls	r3, r7, #7
 8002412:	d400      	bmi.n	8002416 <__aeabi_dmul+0x24a>
 8002414:	e11c      	b.n	8002650 <__aeabi_dmul+0x484>
 8002416:	2101      	movs	r1, #1
 8002418:	086a      	lsrs	r2, r5, #1
 800241a:	400d      	ands	r5, r1
 800241c:	4315      	orrs	r5, r2
 800241e:	07e2      	lsls	r2, r4, #31
 8002420:	4315      	orrs	r5, r2
 8002422:	0864      	lsrs	r4, r4, #1
 8002424:	494f      	ldr	r1, [pc, #316]	; (8002564 <__aeabi_dmul+0x398>)
 8002426:	4461      	add	r1, ip
 8002428:	2900      	cmp	r1, #0
 800242a:	dc00      	bgt.n	800242e <__aeabi_dmul+0x262>
 800242c:	e0b0      	b.n	8002590 <__aeabi_dmul+0x3c4>
 800242e:	076b      	lsls	r3, r5, #29
 8002430:	d009      	beq.n	8002446 <__aeabi_dmul+0x27a>
 8002432:	220f      	movs	r2, #15
 8002434:	402a      	ands	r2, r5
 8002436:	2a04      	cmp	r2, #4
 8002438:	d005      	beq.n	8002446 <__aeabi_dmul+0x27a>
 800243a:	1d2a      	adds	r2, r5, #4
 800243c:	42aa      	cmp	r2, r5
 800243e:	41ad      	sbcs	r5, r5
 8002440:	426d      	negs	r5, r5
 8002442:	1964      	adds	r4, r4, r5
 8002444:	0015      	movs	r5, r2
 8002446:	01e3      	lsls	r3, r4, #7
 8002448:	d504      	bpl.n	8002454 <__aeabi_dmul+0x288>
 800244a:	2180      	movs	r1, #128	; 0x80
 800244c:	4a46      	ldr	r2, [pc, #280]	; (8002568 <__aeabi_dmul+0x39c>)
 800244e:	00c9      	lsls	r1, r1, #3
 8002450:	4014      	ands	r4, r2
 8002452:	4461      	add	r1, ip
 8002454:	4a45      	ldr	r2, [pc, #276]	; (800256c <__aeabi_dmul+0x3a0>)
 8002456:	4291      	cmp	r1, r2
 8002458:	dd00      	ble.n	800245c <__aeabi_dmul+0x290>
 800245a:	e726      	b.n	80022aa <__aeabi_dmul+0xde>
 800245c:	0762      	lsls	r2, r4, #29
 800245e:	08ed      	lsrs	r5, r5, #3
 8002460:	0264      	lsls	r4, r4, #9
 8002462:	0549      	lsls	r1, r1, #21
 8002464:	4315      	orrs	r5, r2
 8002466:	0b24      	lsrs	r4, r4, #12
 8002468:	0d4a      	lsrs	r2, r1, #21
 800246a:	e710      	b.n	800228e <__aeabi_dmul+0xc2>
 800246c:	4652      	mov	r2, sl
 800246e:	4332      	orrs	r2, r6
 8002470:	d100      	bne.n	8002474 <__aeabi_dmul+0x2a8>
 8002472:	e07f      	b.n	8002574 <__aeabi_dmul+0x3a8>
 8002474:	2e00      	cmp	r6, #0
 8002476:	d100      	bne.n	800247a <__aeabi_dmul+0x2ae>
 8002478:	e0dc      	b.n	8002634 <__aeabi_dmul+0x468>
 800247a:	0030      	movs	r0, r6
 800247c:	f000 fe1e 	bl	80030bc <__clzsi2>
 8002480:	0002      	movs	r2, r0
 8002482:	3a0b      	subs	r2, #11
 8002484:	231d      	movs	r3, #29
 8002486:	0001      	movs	r1, r0
 8002488:	1a9b      	subs	r3, r3, r2
 800248a:	4652      	mov	r2, sl
 800248c:	3908      	subs	r1, #8
 800248e:	40da      	lsrs	r2, r3
 8002490:	408e      	lsls	r6, r1
 8002492:	4316      	orrs	r6, r2
 8002494:	4652      	mov	r2, sl
 8002496:	408a      	lsls	r2, r1
 8002498:	9b00      	ldr	r3, [sp, #0]
 800249a:	4935      	ldr	r1, [pc, #212]	; (8002570 <__aeabi_dmul+0x3a4>)
 800249c:	1a18      	subs	r0, r3, r0
 800249e:	0003      	movs	r3, r0
 80024a0:	468c      	mov	ip, r1
 80024a2:	4463      	add	r3, ip
 80024a4:	2000      	movs	r0, #0
 80024a6:	9300      	str	r3, [sp, #0]
 80024a8:	e6d3      	b.n	8002252 <__aeabi_dmul+0x86>
 80024aa:	0025      	movs	r5, r4
 80024ac:	4305      	orrs	r5, r0
 80024ae:	d04a      	beq.n	8002546 <__aeabi_dmul+0x37a>
 80024b0:	2c00      	cmp	r4, #0
 80024b2:	d100      	bne.n	80024b6 <__aeabi_dmul+0x2ea>
 80024b4:	e0b0      	b.n	8002618 <__aeabi_dmul+0x44c>
 80024b6:	0020      	movs	r0, r4
 80024b8:	f000 fe00 	bl	80030bc <__clzsi2>
 80024bc:	0001      	movs	r1, r0
 80024be:	0002      	movs	r2, r0
 80024c0:	390b      	subs	r1, #11
 80024c2:	231d      	movs	r3, #29
 80024c4:	0010      	movs	r0, r2
 80024c6:	1a5b      	subs	r3, r3, r1
 80024c8:	0031      	movs	r1, r6
 80024ca:	0035      	movs	r5, r6
 80024cc:	3808      	subs	r0, #8
 80024ce:	4084      	lsls	r4, r0
 80024d0:	40d9      	lsrs	r1, r3
 80024d2:	4085      	lsls	r5, r0
 80024d4:	430c      	orrs	r4, r1
 80024d6:	4826      	ldr	r0, [pc, #152]	; (8002570 <__aeabi_dmul+0x3a4>)
 80024d8:	1a83      	subs	r3, r0, r2
 80024da:	9300      	str	r3, [sp, #0]
 80024dc:	2300      	movs	r3, #0
 80024de:	4699      	mov	r9, r3
 80024e0:	469b      	mov	fp, r3
 80024e2:	e697      	b.n	8002214 <__aeabi_dmul+0x48>
 80024e4:	0005      	movs	r5, r0
 80024e6:	4325      	orrs	r5, r4
 80024e8:	d126      	bne.n	8002538 <__aeabi_dmul+0x36c>
 80024ea:	2208      	movs	r2, #8
 80024ec:	9300      	str	r3, [sp, #0]
 80024ee:	2302      	movs	r3, #2
 80024f0:	2400      	movs	r4, #0
 80024f2:	4691      	mov	r9, r2
 80024f4:	469b      	mov	fp, r3
 80024f6:	e68d      	b.n	8002214 <__aeabi_dmul+0x48>
 80024f8:	4652      	mov	r2, sl
 80024fa:	9b00      	ldr	r3, [sp, #0]
 80024fc:	4332      	orrs	r2, r6
 80024fe:	d110      	bne.n	8002522 <__aeabi_dmul+0x356>
 8002500:	4915      	ldr	r1, [pc, #84]	; (8002558 <__aeabi_dmul+0x38c>)
 8002502:	2600      	movs	r6, #0
 8002504:	468c      	mov	ip, r1
 8002506:	4463      	add	r3, ip
 8002508:	4649      	mov	r1, r9
 800250a:	9300      	str	r3, [sp, #0]
 800250c:	2302      	movs	r3, #2
 800250e:	4319      	orrs	r1, r3
 8002510:	4689      	mov	r9, r1
 8002512:	2002      	movs	r0, #2
 8002514:	e69d      	b.n	8002252 <__aeabi_dmul+0x86>
 8002516:	465b      	mov	r3, fp
 8002518:	9701      	str	r7, [sp, #4]
 800251a:	2b02      	cmp	r3, #2
 800251c:	d000      	beq.n	8002520 <__aeabi_dmul+0x354>
 800251e:	e6ad      	b.n	800227c <__aeabi_dmul+0xb0>
 8002520:	e6c3      	b.n	80022aa <__aeabi_dmul+0xde>
 8002522:	4a0d      	ldr	r2, [pc, #52]	; (8002558 <__aeabi_dmul+0x38c>)
 8002524:	2003      	movs	r0, #3
 8002526:	4694      	mov	ip, r2
 8002528:	4463      	add	r3, ip
 800252a:	464a      	mov	r2, r9
 800252c:	9300      	str	r3, [sp, #0]
 800252e:	2303      	movs	r3, #3
 8002530:	431a      	orrs	r2, r3
 8002532:	4691      	mov	r9, r2
 8002534:	4652      	mov	r2, sl
 8002536:	e68c      	b.n	8002252 <__aeabi_dmul+0x86>
 8002538:	220c      	movs	r2, #12
 800253a:	9300      	str	r3, [sp, #0]
 800253c:	2303      	movs	r3, #3
 800253e:	0005      	movs	r5, r0
 8002540:	4691      	mov	r9, r2
 8002542:	469b      	mov	fp, r3
 8002544:	e666      	b.n	8002214 <__aeabi_dmul+0x48>
 8002546:	2304      	movs	r3, #4
 8002548:	4699      	mov	r9, r3
 800254a:	2300      	movs	r3, #0
 800254c:	9300      	str	r3, [sp, #0]
 800254e:	3301      	adds	r3, #1
 8002550:	2400      	movs	r4, #0
 8002552:	469b      	mov	fp, r3
 8002554:	e65e      	b.n	8002214 <__aeabi_dmul+0x48>
 8002556:	46c0      	nop			; (mov r8, r8)
 8002558:	000007ff 	.word	0x000007ff
 800255c:	fffffc01 	.word	0xfffffc01
 8002560:	0800a880 	.word	0x0800a880
 8002564:	000003ff 	.word	0x000003ff
 8002568:	feffffff 	.word	0xfeffffff
 800256c:	000007fe 	.word	0x000007fe
 8002570:	fffffc0d 	.word	0xfffffc0d
 8002574:	4649      	mov	r1, r9
 8002576:	2301      	movs	r3, #1
 8002578:	4319      	orrs	r1, r3
 800257a:	4689      	mov	r9, r1
 800257c:	2600      	movs	r6, #0
 800257e:	2001      	movs	r0, #1
 8002580:	e667      	b.n	8002252 <__aeabi_dmul+0x86>
 8002582:	2300      	movs	r3, #0
 8002584:	2480      	movs	r4, #128	; 0x80
 8002586:	2500      	movs	r5, #0
 8002588:	4a43      	ldr	r2, [pc, #268]	; (8002698 <__aeabi_dmul+0x4cc>)
 800258a:	9301      	str	r3, [sp, #4]
 800258c:	0324      	lsls	r4, r4, #12
 800258e:	e67e      	b.n	800228e <__aeabi_dmul+0xc2>
 8002590:	2001      	movs	r0, #1
 8002592:	1a40      	subs	r0, r0, r1
 8002594:	2838      	cmp	r0, #56	; 0x38
 8002596:	dd00      	ble.n	800259a <__aeabi_dmul+0x3ce>
 8002598:	e676      	b.n	8002288 <__aeabi_dmul+0xbc>
 800259a:	281f      	cmp	r0, #31
 800259c:	dd5b      	ble.n	8002656 <__aeabi_dmul+0x48a>
 800259e:	221f      	movs	r2, #31
 80025a0:	0023      	movs	r3, r4
 80025a2:	4252      	negs	r2, r2
 80025a4:	1a51      	subs	r1, r2, r1
 80025a6:	40cb      	lsrs	r3, r1
 80025a8:	0019      	movs	r1, r3
 80025aa:	2820      	cmp	r0, #32
 80025ac:	d003      	beq.n	80025b6 <__aeabi_dmul+0x3ea>
 80025ae:	4a3b      	ldr	r2, [pc, #236]	; (800269c <__aeabi_dmul+0x4d0>)
 80025b0:	4462      	add	r2, ip
 80025b2:	4094      	lsls	r4, r2
 80025b4:	4325      	orrs	r5, r4
 80025b6:	1e6a      	subs	r2, r5, #1
 80025b8:	4195      	sbcs	r5, r2
 80025ba:	002a      	movs	r2, r5
 80025bc:	430a      	orrs	r2, r1
 80025be:	2107      	movs	r1, #7
 80025c0:	000d      	movs	r5, r1
 80025c2:	2400      	movs	r4, #0
 80025c4:	4015      	ands	r5, r2
 80025c6:	4211      	tst	r1, r2
 80025c8:	d05b      	beq.n	8002682 <__aeabi_dmul+0x4b6>
 80025ca:	210f      	movs	r1, #15
 80025cc:	2400      	movs	r4, #0
 80025ce:	4011      	ands	r1, r2
 80025d0:	2904      	cmp	r1, #4
 80025d2:	d053      	beq.n	800267c <__aeabi_dmul+0x4b0>
 80025d4:	1d11      	adds	r1, r2, #4
 80025d6:	4291      	cmp	r1, r2
 80025d8:	4192      	sbcs	r2, r2
 80025da:	4252      	negs	r2, r2
 80025dc:	18a4      	adds	r4, r4, r2
 80025de:	000a      	movs	r2, r1
 80025e0:	0223      	lsls	r3, r4, #8
 80025e2:	d54b      	bpl.n	800267c <__aeabi_dmul+0x4b0>
 80025e4:	2201      	movs	r2, #1
 80025e6:	2400      	movs	r4, #0
 80025e8:	2500      	movs	r5, #0
 80025ea:	e650      	b.n	800228e <__aeabi_dmul+0xc2>
 80025ec:	2380      	movs	r3, #128	; 0x80
 80025ee:	031b      	lsls	r3, r3, #12
 80025f0:	421c      	tst	r4, r3
 80025f2:	d009      	beq.n	8002608 <__aeabi_dmul+0x43c>
 80025f4:	421e      	tst	r6, r3
 80025f6:	d107      	bne.n	8002608 <__aeabi_dmul+0x43c>
 80025f8:	4333      	orrs	r3, r6
 80025fa:	031c      	lsls	r4, r3, #12
 80025fc:	4643      	mov	r3, r8
 80025fe:	0015      	movs	r5, r2
 8002600:	0b24      	lsrs	r4, r4, #12
 8002602:	4a25      	ldr	r2, [pc, #148]	; (8002698 <__aeabi_dmul+0x4cc>)
 8002604:	9301      	str	r3, [sp, #4]
 8002606:	e642      	b.n	800228e <__aeabi_dmul+0xc2>
 8002608:	2280      	movs	r2, #128	; 0x80
 800260a:	0312      	lsls	r2, r2, #12
 800260c:	4314      	orrs	r4, r2
 800260e:	0324      	lsls	r4, r4, #12
 8002610:	4a21      	ldr	r2, [pc, #132]	; (8002698 <__aeabi_dmul+0x4cc>)
 8002612:	0b24      	lsrs	r4, r4, #12
 8002614:	9701      	str	r7, [sp, #4]
 8002616:	e63a      	b.n	800228e <__aeabi_dmul+0xc2>
 8002618:	f000 fd50 	bl	80030bc <__clzsi2>
 800261c:	0001      	movs	r1, r0
 800261e:	0002      	movs	r2, r0
 8002620:	3115      	adds	r1, #21
 8002622:	3220      	adds	r2, #32
 8002624:	291c      	cmp	r1, #28
 8002626:	dc00      	bgt.n	800262a <__aeabi_dmul+0x45e>
 8002628:	e74b      	b.n	80024c2 <__aeabi_dmul+0x2f6>
 800262a:	0034      	movs	r4, r6
 800262c:	3808      	subs	r0, #8
 800262e:	2500      	movs	r5, #0
 8002630:	4084      	lsls	r4, r0
 8002632:	e750      	b.n	80024d6 <__aeabi_dmul+0x30a>
 8002634:	f000 fd42 	bl	80030bc <__clzsi2>
 8002638:	0003      	movs	r3, r0
 800263a:	001a      	movs	r2, r3
 800263c:	3215      	adds	r2, #21
 800263e:	3020      	adds	r0, #32
 8002640:	2a1c      	cmp	r2, #28
 8002642:	dc00      	bgt.n	8002646 <__aeabi_dmul+0x47a>
 8002644:	e71e      	b.n	8002484 <__aeabi_dmul+0x2b8>
 8002646:	4656      	mov	r6, sl
 8002648:	3b08      	subs	r3, #8
 800264a:	2200      	movs	r2, #0
 800264c:	409e      	lsls	r6, r3
 800264e:	e723      	b.n	8002498 <__aeabi_dmul+0x2cc>
 8002650:	9b00      	ldr	r3, [sp, #0]
 8002652:	469c      	mov	ip, r3
 8002654:	e6e6      	b.n	8002424 <__aeabi_dmul+0x258>
 8002656:	4912      	ldr	r1, [pc, #72]	; (80026a0 <__aeabi_dmul+0x4d4>)
 8002658:	0022      	movs	r2, r4
 800265a:	4461      	add	r1, ip
 800265c:	002e      	movs	r6, r5
 800265e:	408d      	lsls	r5, r1
 8002660:	408a      	lsls	r2, r1
 8002662:	40c6      	lsrs	r6, r0
 8002664:	1e69      	subs	r1, r5, #1
 8002666:	418d      	sbcs	r5, r1
 8002668:	4332      	orrs	r2, r6
 800266a:	432a      	orrs	r2, r5
 800266c:	40c4      	lsrs	r4, r0
 800266e:	0753      	lsls	r3, r2, #29
 8002670:	d0b6      	beq.n	80025e0 <__aeabi_dmul+0x414>
 8002672:	210f      	movs	r1, #15
 8002674:	4011      	ands	r1, r2
 8002676:	2904      	cmp	r1, #4
 8002678:	d1ac      	bne.n	80025d4 <__aeabi_dmul+0x408>
 800267a:	e7b1      	b.n	80025e0 <__aeabi_dmul+0x414>
 800267c:	0765      	lsls	r5, r4, #29
 800267e:	0264      	lsls	r4, r4, #9
 8002680:	0b24      	lsrs	r4, r4, #12
 8002682:	08d2      	lsrs	r2, r2, #3
 8002684:	4315      	orrs	r5, r2
 8002686:	2200      	movs	r2, #0
 8002688:	e601      	b.n	800228e <__aeabi_dmul+0xc2>
 800268a:	2280      	movs	r2, #128	; 0x80
 800268c:	0312      	lsls	r2, r2, #12
 800268e:	4314      	orrs	r4, r2
 8002690:	0324      	lsls	r4, r4, #12
 8002692:	4a01      	ldr	r2, [pc, #4]	; (8002698 <__aeabi_dmul+0x4cc>)
 8002694:	0b24      	lsrs	r4, r4, #12
 8002696:	e5fa      	b.n	800228e <__aeabi_dmul+0xc2>
 8002698:	000007ff 	.word	0x000007ff
 800269c:	0000043e 	.word	0x0000043e
 80026a0:	0000041e 	.word	0x0000041e

080026a4 <__aeabi_dsub>:
 80026a4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80026a6:	4657      	mov	r7, sl
 80026a8:	464e      	mov	r6, r9
 80026aa:	4645      	mov	r5, r8
 80026ac:	46de      	mov	lr, fp
 80026ae:	b5e0      	push	{r5, r6, r7, lr}
 80026b0:	001e      	movs	r6, r3
 80026b2:	0017      	movs	r7, r2
 80026b4:	004a      	lsls	r2, r1, #1
 80026b6:	030b      	lsls	r3, r1, #12
 80026b8:	0d52      	lsrs	r2, r2, #21
 80026ba:	0a5b      	lsrs	r3, r3, #9
 80026bc:	4690      	mov	r8, r2
 80026be:	0f42      	lsrs	r2, r0, #29
 80026c0:	431a      	orrs	r2, r3
 80026c2:	0fcd      	lsrs	r5, r1, #31
 80026c4:	4ccd      	ldr	r4, [pc, #820]	; (80029fc <__aeabi_dsub+0x358>)
 80026c6:	0331      	lsls	r1, r6, #12
 80026c8:	00c3      	lsls	r3, r0, #3
 80026ca:	4694      	mov	ip, r2
 80026cc:	0070      	lsls	r0, r6, #1
 80026ce:	0f7a      	lsrs	r2, r7, #29
 80026d0:	0a49      	lsrs	r1, r1, #9
 80026d2:	00ff      	lsls	r7, r7, #3
 80026d4:	469a      	mov	sl, r3
 80026d6:	46b9      	mov	r9, r7
 80026d8:	0d40      	lsrs	r0, r0, #21
 80026da:	0ff6      	lsrs	r6, r6, #31
 80026dc:	4311      	orrs	r1, r2
 80026de:	42a0      	cmp	r0, r4
 80026e0:	d100      	bne.n	80026e4 <__aeabi_dsub+0x40>
 80026e2:	e0b1      	b.n	8002848 <__aeabi_dsub+0x1a4>
 80026e4:	2201      	movs	r2, #1
 80026e6:	4056      	eors	r6, r2
 80026e8:	46b3      	mov	fp, r6
 80026ea:	42b5      	cmp	r5, r6
 80026ec:	d100      	bne.n	80026f0 <__aeabi_dsub+0x4c>
 80026ee:	e088      	b.n	8002802 <__aeabi_dsub+0x15e>
 80026f0:	4642      	mov	r2, r8
 80026f2:	1a12      	subs	r2, r2, r0
 80026f4:	2a00      	cmp	r2, #0
 80026f6:	dc00      	bgt.n	80026fa <__aeabi_dsub+0x56>
 80026f8:	e0ae      	b.n	8002858 <__aeabi_dsub+0x1b4>
 80026fa:	2800      	cmp	r0, #0
 80026fc:	d100      	bne.n	8002700 <__aeabi_dsub+0x5c>
 80026fe:	e0c1      	b.n	8002884 <__aeabi_dsub+0x1e0>
 8002700:	48be      	ldr	r0, [pc, #760]	; (80029fc <__aeabi_dsub+0x358>)
 8002702:	4580      	cmp	r8, r0
 8002704:	d100      	bne.n	8002708 <__aeabi_dsub+0x64>
 8002706:	e151      	b.n	80029ac <__aeabi_dsub+0x308>
 8002708:	2080      	movs	r0, #128	; 0x80
 800270a:	0400      	lsls	r0, r0, #16
 800270c:	4301      	orrs	r1, r0
 800270e:	2a38      	cmp	r2, #56	; 0x38
 8002710:	dd00      	ble.n	8002714 <__aeabi_dsub+0x70>
 8002712:	e17b      	b.n	8002a0c <__aeabi_dsub+0x368>
 8002714:	2a1f      	cmp	r2, #31
 8002716:	dd00      	ble.n	800271a <__aeabi_dsub+0x76>
 8002718:	e1ee      	b.n	8002af8 <__aeabi_dsub+0x454>
 800271a:	2020      	movs	r0, #32
 800271c:	003e      	movs	r6, r7
 800271e:	1a80      	subs	r0, r0, r2
 8002720:	000c      	movs	r4, r1
 8002722:	40d6      	lsrs	r6, r2
 8002724:	40d1      	lsrs	r1, r2
 8002726:	4087      	lsls	r7, r0
 8002728:	4662      	mov	r2, ip
 800272a:	4084      	lsls	r4, r0
 800272c:	1a52      	subs	r2, r2, r1
 800272e:	1e78      	subs	r0, r7, #1
 8002730:	4187      	sbcs	r7, r0
 8002732:	4694      	mov	ip, r2
 8002734:	4334      	orrs	r4, r6
 8002736:	4327      	orrs	r7, r4
 8002738:	1bdc      	subs	r4, r3, r7
 800273a:	42a3      	cmp	r3, r4
 800273c:	419b      	sbcs	r3, r3
 800273e:	4662      	mov	r2, ip
 8002740:	425b      	negs	r3, r3
 8002742:	1ad3      	subs	r3, r2, r3
 8002744:	4699      	mov	r9, r3
 8002746:	464b      	mov	r3, r9
 8002748:	021b      	lsls	r3, r3, #8
 800274a:	d400      	bmi.n	800274e <__aeabi_dsub+0xaa>
 800274c:	e118      	b.n	8002980 <__aeabi_dsub+0x2dc>
 800274e:	464b      	mov	r3, r9
 8002750:	0258      	lsls	r0, r3, #9
 8002752:	0a43      	lsrs	r3, r0, #9
 8002754:	4699      	mov	r9, r3
 8002756:	464b      	mov	r3, r9
 8002758:	2b00      	cmp	r3, #0
 800275a:	d100      	bne.n	800275e <__aeabi_dsub+0xba>
 800275c:	e137      	b.n	80029ce <__aeabi_dsub+0x32a>
 800275e:	4648      	mov	r0, r9
 8002760:	f000 fcac 	bl	80030bc <__clzsi2>
 8002764:	0001      	movs	r1, r0
 8002766:	3908      	subs	r1, #8
 8002768:	2320      	movs	r3, #32
 800276a:	0022      	movs	r2, r4
 800276c:	4648      	mov	r0, r9
 800276e:	1a5b      	subs	r3, r3, r1
 8002770:	40da      	lsrs	r2, r3
 8002772:	4088      	lsls	r0, r1
 8002774:	408c      	lsls	r4, r1
 8002776:	4643      	mov	r3, r8
 8002778:	4310      	orrs	r0, r2
 800277a:	4588      	cmp	r8, r1
 800277c:	dd00      	ble.n	8002780 <__aeabi_dsub+0xdc>
 800277e:	e136      	b.n	80029ee <__aeabi_dsub+0x34a>
 8002780:	1ac9      	subs	r1, r1, r3
 8002782:	1c4b      	adds	r3, r1, #1
 8002784:	2b1f      	cmp	r3, #31
 8002786:	dd00      	ble.n	800278a <__aeabi_dsub+0xe6>
 8002788:	e0ea      	b.n	8002960 <__aeabi_dsub+0x2bc>
 800278a:	2220      	movs	r2, #32
 800278c:	0026      	movs	r6, r4
 800278e:	1ad2      	subs	r2, r2, r3
 8002790:	0001      	movs	r1, r0
 8002792:	4094      	lsls	r4, r2
 8002794:	40de      	lsrs	r6, r3
 8002796:	40d8      	lsrs	r0, r3
 8002798:	2300      	movs	r3, #0
 800279a:	4091      	lsls	r1, r2
 800279c:	1e62      	subs	r2, r4, #1
 800279e:	4194      	sbcs	r4, r2
 80027a0:	4681      	mov	r9, r0
 80027a2:	4698      	mov	r8, r3
 80027a4:	4331      	orrs	r1, r6
 80027a6:	430c      	orrs	r4, r1
 80027a8:	0763      	lsls	r3, r4, #29
 80027aa:	d009      	beq.n	80027c0 <__aeabi_dsub+0x11c>
 80027ac:	230f      	movs	r3, #15
 80027ae:	4023      	ands	r3, r4
 80027b0:	2b04      	cmp	r3, #4
 80027b2:	d005      	beq.n	80027c0 <__aeabi_dsub+0x11c>
 80027b4:	1d23      	adds	r3, r4, #4
 80027b6:	42a3      	cmp	r3, r4
 80027b8:	41a4      	sbcs	r4, r4
 80027ba:	4264      	negs	r4, r4
 80027bc:	44a1      	add	r9, r4
 80027be:	001c      	movs	r4, r3
 80027c0:	464b      	mov	r3, r9
 80027c2:	021b      	lsls	r3, r3, #8
 80027c4:	d400      	bmi.n	80027c8 <__aeabi_dsub+0x124>
 80027c6:	e0de      	b.n	8002986 <__aeabi_dsub+0x2e2>
 80027c8:	4641      	mov	r1, r8
 80027ca:	4b8c      	ldr	r3, [pc, #560]	; (80029fc <__aeabi_dsub+0x358>)
 80027cc:	3101      	adds	r1, #1
 80027ce:	4299      	cmp	r1, r3
 80027d0:	d100      	bne.n	80027d4 <__aeabi_dsub+0x130>
 80027d2:	e0e7      	b.n	80029a4 <__aeabi_dsub+0x300>
 80027d4:	464b      	mov	r3, r9
 80027d6:	488a      	ldr	r0, [pc, #552]	; (8002a00 <__aeabi_dsub+0x35c>)
 80027d8:	08e4      	lsrs	r4, r4, #3
 80027da:	4003      	ands	r3, r0
 80027dc:	0018      	movs	r0, r3
 80027de:	0549      	lsls	r1, r1, #21
 80027e0:	075b      	lsls	r3, r3, #29
 80027e2:	0240      	lsls	r0, r0, #9
 80027e4:	4323      	orrs	r3, r4
 80027e6:	0d4a      	lsrs	r2, r1, #21
 80027e8:	0b04      	lsrs	r4, r0, #12
 80027ea:	0512      	lsls	r2, r2, #20
 80027ec:	07ed      	lsls	r5, r5, #31
 80027ee:	4322      	orrs	r2, r4
 80027f0:	432a      	orrs	r2, r5
 80027f2:	0018      	movs	r0, r3
 80027f4:	0011      	movs	r1, r2
 80027f6:	bcf0      	pop	{r4, r5, r6, r7}
 80027f8:	46bb      	mov	fp, r7
 80027fa:	46b2      	mov	sl, r6
 80027fc:	46a9      	mov	r9, r5
 80027fe:	46a0      	mov	r8, r4
 8002800:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8002802:	4642      	mov	r2, r8
 8002804:	1a12      	subs	r2, r2, r0
 8002806:	2a00      	cmp	r2, #0
 8002808:	dd52      	ble.n	80028b0 <__aeabi_dsub+0x20c>
 800280a:	2800      	cmp	r0, #0
 800280c:	d100      	bne.n	8002810 <__aeabi_dsub+0x16c>
 800280e:	e09c      	b.n	800294a <__aeabi_dsub+0x2a6>
 8002810:	45a0      	cmp	r8, r4
 8002812:	d100      	bne.n	8002816 <__aeabi_dsub+0x172>
 8002814:	e0ca      	b.n	80029ac <__aeabi_dsub+0x308>
 8002816:	2080      	movs	r0, #128	; 0x80
 8002818:	0400      	lsls	r0, r0, #16
 800281a:	4301      	orrs	r1, r0
 800281c:	2a38      	cmp	r2, #56	; 0x38
 800281e:	dd00      	ble.n	8002822 <__aeabi_dsub+0x17e>
 8002820:	e149      	b.n	8002ab6 <__aeabi_dsub+0x412>
 8002822:	2a1f      	cmp	r2, #31
 8002824:	dc00      	bgt.n	8002828 <__aeabi_dsub+0x184>
 8002826:	e197      	b.n	8002b58 <__aeabi_dsub+0x4b4>
 8002828:	0010      	movs	r0, r2
 800282a:	000e      	movs	r6, r1
 800282c:	3820      	subs	r0, #32
 800282e:	40c6      	lsrs	r6, r0
 8002830:	2a20      	cmp	r2, #32
 8002832:	d004      	beq.n	800283e <__aeabi_dsub+0x19a>
 8002834:	2040      	movs	r0, #64	; 0x40
 8002836:	1a82      	subs	r2, r0, r2
 8002838:	4091      	lsls	r1, r2
 800283a:	430f      	orrs	r7, r1
 800283c:	46b9      	mov	r9, r7
 800283e:	464c      	mov	r4, r9
 8002840:	1e62      	subs	r2, r4, #1
 8002842:	4194      	sbcs	r4, r2
 8002844:	4334      	orrs	r4, r6
 8002846:	e13a      	b.n	8002abe <__aeabi_dsub+0x41a>
 8002848:	000a      	movs	r2, r1
 800284a:	433a      	orrs	r2, r7
 800284c:	d028      	beq.n	80028a0 <__aeabi_dsub+0x1fc>
 800284e:	46b3      	mov	fp, r6
 8002850:	42b5      	cmp	r5, r6
 8002852:	d02b      	beq.n	80028ac <__aeabi_dsub+0x208>
 8002854:	4a6b      	ldr	r2, [pc, #428]	; (8002a04 <__aeabi_dsub+0x360>)
 8002856:	4442      	add	r2, r8
 8002858:	2a00      	cmp	r2, #0
 800285a:	d05d      	beq.n	8002918 <__aeabi_dsub+0x274>
 800285c:	4642      	mov	r2, r8
 800285e:	4644      	mov	r4, r8
 8002860:	1a82      	subs	r2, r0, r2
 8002862:	2c00      	cmp	r4, #0
 8002864:	d000      	beq.n	8002868 <__aeabi_dsub+0x1c4>
 8002866:	e0f5      	b.n	8002a54 <__aeabi_dsub+0x3b0>
 8002868:	4665      	mov	r5, ip
 800286a:	431d      	orrs	r5, r3
 800286c:	d100      	bne.n	8002870 <__aeabi_dsub+0x1cc>
 800286e:	e19c      	b.n	8002baa <__aeabi_dsub+0x506>
 8002870:	1e55      	subs	r5, r2, #1
 8002872:	2a01      	cmp	r2, #1
 8002874:	d100      	bne.n	8002878 <__aeabi_dsub+0x1d4>
 8002876:	e1fb      	b.n	8002c70 <__aeabi_dsub+0x5cc>
 8002878:	4c60      	ldr	r4, [pc, #384]	; (80029fc <__aeabi_dsub+0x358>)
 800287a:	42a2      	cmp	r2, r4
 800287c:	d100      	bne.n	8002880 <__aeabi_dsub+0x1dc>
 800287e:	e1bd      	b.n	8002bfc <__aeabi_dsub+0x558>
 8002880:	002a      	movs	r2, r5
 8002882:	e0f0      	b.n	8002a66 <__aeabi_dsub+0x3c2>
 8002884:	0008      	movs	r0, r1
 8002886:	4338      	orrs	r0, r7
 8002888:	d100      	bne.n	800288c <__aeabi_dsub+0x1e8>
 800288a:	e0c3      	b.n	8002a14 <__aeabi_dsub+0x370>
 800288c:	1e50      	subs	r0, r2, #1
 800288e:	2a01      	cmp	r2, #1
 8002890:	d100      	bne.n	8002894 <__aeabi_dsub+0x1f0>
 8002892:	e1a8      	b.n	8002be6 <__aeabi_dsub+0x542>
 8002894:	4c59      	ldr	r4, [pc, #356]	; (80029fc <__aeabi_dsub+0x358>)
 8002896:	42a2      	cmp	r2, r4
 8002898:	d100      	bne.n	800289c <__aeabi_dsub+0x1f8>
 800289a:	e087      	b.n	80029ac <__aeabi_dsub+0x308>
 800289c:	0002      	movs	r2, r0
 800289e:	e736      	b.n	800270e <__aeabi_dsub+0x6a>
 80028a0:	2201      	movs	r2, #1
 80028a2:	4056      	eors	r6, r2
 80028a4:	46b3      	mov	fp, r6
 80028a6:	42b5      	cmp	r5, r6
 80028a8:	d000      	beq.n	80028ac <__aeabi_dsub+0x208>
 80028aa:	e721      	b.n	80026f0 <__aeabi_dsub+0x4c>
 80028ac:	4a55      	ldr	r2, [pc, #340]	; (8002a04 <__aeabi_dsub+0x360>)
 80028ae:	4442      	add	r2, r8
 80028b0:	2a00      	cmp	r2, #0
 80028b2:	d100      	bne.n	80028b6 <__aeabi_dsub+0x212>
 80028b4:	e0b5      	b.n	8002a22 <__aeabi_dsub+0x37e>
 80028b6:	4642      	mov	r2, r8
 80028b8:	4644      	mov	r4, r8
 80028ba:	1a82      	subs	r2, r0, r2
 80028bc:	2c00      	cmp	r4, #0
 80028be:	d100      	bne.n	80028c2 <__aeabi_dsub+0x21e>
 80028c0:	e138      	b.n	8002b34 <__aeabi_dsub+0x490>
 80028c2:	4e4e      	ldr	r6, [pc, #312]	; (80029fc <__aeabi_dsub+0x358>)
 80028c4:	42b0      	cmp	r0, r6
 80028c6:	d100      	bne.n	80028ca <__aeabi_dsub+0x226>
 80028c8:	e1de      	b.n	8002c88 <__aeabi_dsub+0x5e4>
 80028ca:	2680      	movs	r6, #128	; 0x80
 80028cc:	4664      	mov	r4, ip
 80028ce:	0436      	lsls	r6, r6, #16
 80028d0:	4334      	orrs	r4, r6
 80028d2:	46a4      	mov	ip, r4
 80028d4:	2a38      	cmp	r2, #56	; 0x38
 80028d6:	dd00      	ble.n	80028da <__aeabi_dsub+0x236>
 80028d8:	e196      	b.n	8002c08 <__aeabi_dsub+0x564>
 80028da:	2a1f      	cmp	r2, #31
 80028dc:	dd00      	ble.n	80028e0 <__aeabi_dsub+0x23c>
 80028de:	e224      	b.n	8002d2a <__aeabi_dsub+0x686>
 80028e0:	2620      	movs	r6, #32
 80028e2:	1ab4      	subs	r4, r6, r2
 80028e4:	46a2      	mov	sl, r4
 80028e6:	4664      	mov	r4, ip
 80028e8:	4656      	mov	r6, sl
 80028ea:	40b4      	lsls	r4, r6
 80028ec:	46a1      	mov	r9, r4
 80028ee:	001c      	movs	r4, r3
 80028f0:	464e      	mov	r6, r9
 80028f2:	40d4      	lsrs	r4, r2
 80028f4:	4326      	orrs	r6, r4
 80028f6:	0034      	movs	r4, r6
 80028f8:	4656      	mov	r6, sl
 80028fa:	40b3      	lsls	r3, r6
 80028fc:	1e5e      	subs	r6, r3, #1
 80028fe:	41b3      	sbcs	r3, r6
 8002900:	431c      	orrs	r4, r3
 8002902:	4663      	mov	r3, ip
 8002904:	40d3      	lsrs	r3, r2
 8002906:	18c9      	adds	r1, r1, r3
 8002908:	19e4      	adds	r4, r4, r7
 800290a:	42bc      	cmp	r4, r7
 800290c:	41bf      	sbcs	r7, r7
 800290e:	427f      	negs	r7, r7
 8002910:	46b9      	mov	r9, r7
 8002912:	4680      	mov	r8, r0
 8002914:	4489      	add	r9, r1
 8002916:	e0d8      	b.n	8002aca <__aeabi_dsub+0x426>
 8002918:	4640      	mov	r0, r8
 800291a:	4c3b      	ldr	r4, [pc, #236]	; (8002a08 <__aeabi_dsub+0x364>)
 800291c:	3001      	adds	r0, #1
 800291e:	4220      	tst	r0, r4
 8002920:	d000      	beq.n	8002924 <__aeabi_dsub+0x280>
 8002922:	e0b4      	b.n	8002a8e <__aeabi_dsub+0x3ea>
 8002924:	4640      	mov	r0, r8
 8002926:	2800      	cmp	r0, #0
 8002928:	d000      	beq.n	800292c <__aeabi_dsub+0x288>
 800292a:	e144      	b.n	8002bb6 <__aeabi_dsub+0x512>
 800292c:	4660      	mov	r0, ip
 800292e:	4318      	orrs	r0, r3
 8002930:	d100      	bne.n	8002934 <__aeabi_dsub+0x290>
 8002932:	e190      	b.n	8002c56 <__aeabi_dsub+0x5b2>
 8002934:	0008      	movs	r0, r1
 8002936:	4338      	orrs	r0, r7
 8002938:	d000      	beq.n	800293c <__aeabi_dsub+0x298>
 800293a:	e1aa      	b.n	8002c92 <__aeabi_dsub+0x5ee>
 800293c:	4661      	mov	r1, ip
 800293e:	08db      	lsrs	r3, r3, #3
 8002940:	0749      	lsls	r1, r1, #29
 8002942:	430b      	orrs	r3, r1
 8002944:	4661      	mov	r1, ip
 8002946:	08cc      	lsrs	r4, r1, #3
 8002948:	e027      	b.n	800299a <__aeabi_dsub+0x2f6>
 800294a:	0008      	movs	r0, r1
 800294c:	4338      	orrs	r0, r7
 800294e:	d061      	beq.n	8002a14 <__aeabi_dsub+0x370>
 8002950:	1e50      	subs	r0, r2, #1
 8002952:	2a01      	cmp	r2, #1
 8002954:	d100      	bne.n	8002958 <__aeabi_dsub+0x2b4>
 8002956:	e139      	b.n	8002bcc <__aeabi_dsub+0x528>
 8002958:	42a2      	cmp	r2, r4
 800295a:	d027      	beq.n	80029ac <__aeabi_dsub+0x308>
 800295c:	0002      	movs	r2, r0
 800295e:	e75d      	b.n	800281c <__aeabi_dsub+0x178>
 8002960:	0002      	movs	r2, r0
 8002962:	391f      	subs	r1, #31
 8002964:	40ca      	lsrs	r2, r1
 8002966:	0011      	movs	r1, r2
 8002968:	2b20      	cmp	r3, #32
 800296a:	d003      	beq.n	8002974 <__aeabi_dsub+0x2d0>
 800296c:	2240      	movs	r2, #64	; 0x40
 800296e:	1ad3      	subs	r3, r2, r3
 8002970:	4098      	lsls	r0, r3
 8002972:	4304      	orrs	r4, r0
 8002974:	1e63      	subs	r3, r4, #1
 8002976:	419c      	sbcs	r4, r3
 8002978:	2300      	movs	r3, #0
 800297a:	4699      	mov	r9, r3
 800297c:	4698      	mov	r8, r3
 800297e:	430c      	orrs	r4, r1
 8002980:	0763      	lsls	r3, r4, #29
 8002982:	d000      	beq.n	8002986 <__aeabi_dsub+0x2e2>
 8002984:	e712      	b.n	80027ac <__aeabi_dsub+0x108>
 8002986:	464b      	mov	r3, r9
 8002988:	464a      	mov	r2, r9
 800298a:	08e4      	lsrs	r4, r4, #3
 800298c:	075b      	lsls	r3, r3, #29
 800298e:	4323      	orrs	r3, r4
 8002990:	08d4      	lsrs	r4, r2, #3
 8002992:	4642      	mov	r2, r8
 8002994:	4919      	ldr	r1, [pc, #100]	; (80029fc <__aeabi_dsub+0x358>)
 8002996:	428a      	cmp	r2, r1
 8002998:	d00e      	beq.n	80029b8 <__aeabi_dsub+0x314>
 800299a:	0324      	lsls	r4, r4, #12
 800299c:	0552      	lsls	r2, r2, #21
 800299e:	0b24      	lsrs	r4, r4, #12
 80029a0:	0d52      	lsrs	r2, r2, #21
 80029a2:	e722      	b.n	80027ea <__aeabi_dsub+0x146>
 80029a4:	000a      	movs	r2, r1
 80029a6:	2400      	movs	r4, #0
 80029a8:	2300      	movs	r3, #0
 80029aa:	e71e      	b.n	80027ea <__aeabi_dsub+0x146>
 80029ac:	08db      	lsrs	r3, r3, #3
 80029ae:	4662      	mov	r2, ip
 80029b0:	0752      	lsls	r2, r2, #29
 80029b2:	4313      	orrs	r3, r2
 80029b4:	4662      	mov	r2, ip
 80029b6:	08d4      	lsrs	r4, r2, #3
 80029b8:	001a      	movs	r2, r3
 80029ba:	4322      	orrs	r2, r4
 80029bc:	d100      	bne.n	80029c0 <__aeabi_dsub+0x31c>
 80029be:	e1fc      	b.n	8002dba <__aeabi_dsub+0x716>
 80029c0:	2280      	movs	r2, #128	; 0x80
 80029c2:	0312      	lsls	r2, r2, #12
 80029c4:	4314      	orrs	r4, r2
 80029c6:	0324      	lsls	r4, r4, #12
 80029c8:	4a0c      	ldr	r2, [pc, #48]	; (80029fc <__aeabi_dsub+0x358>)
 80029ca:	0b24      	lsrs	r4, r4, #12
 80029cc:	e70d      	b.n	80027ea <__aeabi_dsub+0x146>
 80029ce:	0020      	movs	r0, r4
 80029d0:	f000 fb74 	bl	80030bc <__clzsi2>
 80029d4:	0001      	movs	r1, r0
 80029d6:	3118      	adds	r1, #24
 80029d8:	291f      	cmp	r1, #31
 80029da:	dc00      	bgt.n	80029de <__aeabi_dsub+0x33a>
 80029dc:	e6c4      	b.n	8002768 <__aeabi_dsub+0xc4>
 80029de:	3808      	subs	r0, #8
 80029e0:	4084      	lsls	r4, r0
 80029e2:	4643      	mov	r3, r8
 80029e4:	0020      	movs	r0, r4
 80029e6:	2400      	movs	r4, #0
 80029e8:	4588      	cmp	r8, r1
 80029ea:	dc00      	bgt.n	80029ee <__aeabi_dsub+0x34a>
 80029ec:	e6c8      	b.n	8002780 <__aeabi_dsub+0xdc>
 80029ee:	4a04      	ldr	r2, [pc, #16]	; (8002a00 <__aeabi_dsub+0x35c>)
 80029f0:	1a5b      	subs	r3, r3, r1
 80029f2:	4010      	ands	r0, r2
 80029f4:	4698      	mov	r8, r3
 80029f6:	4681      	mov	r9, r0
 80029f8:	e6d6      	b.n	80027a8 <__aeabi_dsub+0x104>
 80029fa:	46c0      	nop			; (mov r8, r8)
 80029fc:	000007ff 	.word	0x000007ff
 8002a00:	ff7fffff 	.word	0xff7fffff
 8002a04:	fffff801 	.word	0xfffff801
 8002a08:	000007fe 	.word	0x000007fe
 8002a0c:	430f      	orrs	r7, r1
 8002a0e:	1e7a      	subs	r2, r7, #1
 8002a10:	4197      	sbcs	r7, r2
 8002a12:	e691      	b.n	8002738 <__aeabi_dsub+0x94>
 8002a14:	4661      	mov	r1, ip
 8002a16:	08db      	lsrs	r3, r3, #3
 8002a18:	0749      	lsls	r1, r1, #29
 8002a1a:	430b      	orrs	r3, r1
 8002a1c:	4661      	mov	r1, ip
 8002a1e:	08cc      	lsrs	r4, r1, #3
 8002a20:	e7b8      	b.n	8002994 <__aeabi_dsub+0x2f0>
 8002a22:	4640      	mov	r0, r8
 8002a24:	4cd3      	ldr	r4, [pc, #844]	; (8002d74 <__aeabi_dsub+0x6d0>)
 8002a26:	3001      	adds	r0, #1
 8002a28:	4220      	tst	r0, r4
 8002a2a:	d000      	beq.n	8002a2e <__aeabi_dsub+0x38a>
 8002a2c:	e0a2      	b.n	8002b74 <__aeabi_dsub+0x4d0>
 8002a2e:	4640      	mov	r0, r8
 8002a30:	2800      	cmp	r0, #0
 8002a32:	d000      	beq.n	8002a36 <__aeabi_dsub+0x392>
 8002a34:	e101      	b.n	8002c3a <__aeabi_dsub+0x596>
 8002a36:	4660      	mov	r0, ip
 8002a38:	4318      	orrs	r0, r3
 8002a3a:	d100      	bne.n	8002a3e <__aeabi_dsub+0x39a>
 8002a3c:	e15e      	b.n	8002cfc <__aeabi_dsub+0x658>
 8002a3e:	0008      	movs	r0, r1
 8002a40:	4338      	orrs	r0, r7
 8002a42:	d000      	beq.n	8002a46 <__aeabi_dsub+0x3a2>
 8002a44:	e15f      	b.n	8002d06 <__aeabi_dsub+0x662>
 8002a46:	4661      	mov	r1, ip
 8002a48:	08db      	lsrs	r3, r3, #3
 8002a4a:	0749      	lsls	r1, r1, #29
 8002a4c:	430b      	orrs	r3, r1
 8002a4e:	4661      	mov	r1, ip
 8002a50:	08cc      	lsrs	r4, r1, #3
 8002a52:	e7a2      	b.n	800299a <__aeabi_dsub+0x2f6>
 8002a54:	4dc8      	ldr	r5, [pc, #800]	; (8002d78 <__aeabi_dsub+0x6d4>)
 8002a56:	42a8      	cmp	r0, r5
 8002a58:	d100      	bne.n	8002a5c <__aeabi_dsub+0x3b8>
 8002a5a:	e0cf      	b.n	8002bfc <__aeabi_dsub+0x558>
 8002a5c:	2580      	movs	r5, #128	; 0x80
 8002a5e:	4664      	mov	r4, ip
 8002a60:	042d      	lsls	r5, r5, #16
 8002a62:	432c      	orrs	r4, r5
 8002a64:	46a4      	mov	ip, r4
 8002a66:	2a38      	cmp	r2, #56	; 0x38
 8002a68:	dc56      	bgt.n	8002b18 <__aeabi_dsub+0x474>
 8002a6a:	2a1f      	cmp	r2, #31
 8002a6c:	dd00      	ble.n	8002a70 <__aeabi_dsub+0x3cc>
 8002a6e:	e0d1      	b.n	8002c14 <__aeabi_dsub+0x570>
 8002a70:	2520      	movs	r5, #32
 8002a72:	001e      	movs	r6, r3
 8002a74:	1aad      	subs	r5, r5, r2
 8002a76:	4664      	mov	r4, ip
 8002a78:	40ab      	lsls	r3, r5
 8002a7a:	40ac      	lsls	r4, r5
 8002a7c:	40d6      	lsrs	r6, r2
 8002a7e:	1e5d      	subs	r5, r3, #1
 8002a80:	41ab      	sbcs	r3, r5
 8002a82:	4334      	orrs	r4, r6
 8002a84:	4323      	orrs	r3, r4
 8002a86:	4664      	mov	r4, ip
 8002a88:	40d4      	lsrs	r4, r2
 8002a8a:	1b09      	subs	r1, r1, r4
 8002a8c:	e049      	b.n	8002b22 <__aeabi_dsub+0x47e>
 8002a8e:	4660      	mov	r0, ip
 8002a90:	1bdc      	subs	r4, r3, r7
 8002a92:	1a46      	subs	r6, r0, r1
 8002a94:	42a3      	cmp	r3, r4
 8002a96:	4180      	sbcs	r0, r0
 8002a98:	4240      	negs	r0, r0
 8002a9a:	4681      	mov	r9, r0
 8002a9c:	0030      	movs	r0, r6
 8002a9e:	464e      	mov	r6, r9
 8002aa0:	1b80      	subs	r0, r0, r6
 8002aa2:	4681      	mov	r9, r0
 8002aa4:	0200      	lsls	r0, r0, #8
 8002aa6:	d476      	bmi.n	8002b96 <__aeabi_dsub+0x4f2>
 8002aa8:	464b      	mov	r3, r9
 8002aaa:	4323      	orrs	r3, r4
 8002aac:	d000      	beq.n	8002ab0 <__aeabi_dsub+0x40c>
 8002aae:	e652      	b.n	8002756 <__aeabi_dsub+0xb2>
 8002ab0:	2400      	movs	r4, #0
 8002ab2:	2500      	movs	r5, #0
 8002ab4:	e771      	b.n	800299a <__aeabi_dsub+0x2f6>
 8002ab6:	4339      	orrs	r1, r7
 8002ab8:	000c      	movs	r4, r1
 8002aba:	1e62      	subs	r2, r4, #1
 8002abc:	4194      	sbcs	r4, r2
 8002abe:	18e4      	adds	r4, r4, r3
 8002ac0:	429c      	cmp	r4, r3
 8002ac2:	419b      	sbcs	r3, r3
 8002ac4:	425b      	negs	r3, r3
 8002ac6:	4463      	add	r3, ip
 8002ac8:	4699      	mov	r9, r3
 8002aca:	464b      	mov	r3, r9
 8002acc:	021b      	lsls	r3, r3, #8
 8002ace:	d400      	bmi.n	8002ad2 <__aeabi_dsub+0x42e>
 8002ad0:	e756      	b.n	8002980 <__aeabi_dsub+0x2dc>
 8002ad2:	2301      	movs	r3, #1
 8002ad4:	469c      	mov	ip, r3
 8002ad6:	4ba8      	ldr	r3, [pc, #672]	; (8002d78 <__aeabi_dsub+0x6d4>)
 8002ad8:	44e0      	add	r8, ip
 8002ada:	4598      	cmp	r8, r3
 8002adc:	d038      	beq.n	8002b50 <__aeabi_dsub+0x4ac>
 8002ade:	464b      	mov	r3, r9
 8002ae0:	48a6      	ldr	r0, [pc, #664]	; (8002d7c <__aeabi_dsub+0x6d8>)
 8002ae2:	2201      	movs	r2, #1
 8002ae4:	4003      	ands	r3, r0
 8002ae6:	0018      	movs	r0, r3
 8002ae8:	0863      	lsrs	r3, r4, #1
 8002aea:	4014      	ands	r4, r2
 8002aec:	431c      	orrs	r4, r3
 8002aee:	07c3      	lsls	r3, r0, #31
 8002af0:	431c      	orrs	r4, r3
 8002af2:	0843      	lsrs	r3, r0, #1
 8002af4:	4699      	mov	r9, r3
 8002af6:	e657      	b.n	80027a8 <__aeabi_dsub+0x104>
 8002af8:	0010      	movs	r0, r2
 8002afa:	000e      	movs	r6, r1
 8002afc:	3820      	subs	r0, #32
 8002afe:	40c6      	lsrs	r6, r0
 8002b00:	2a20      	cmp	r2, #32
 8002b02:	d004      	beq.n	8002b0e <__aeabi_dsub+0x46a>
 8002b04:	2040      	movs	r0, #64	; 0x40
 8002b06:	1a82      	subs	r2, r0, r2
 8002b08:	4091      	lsls	r1, r2
 8002b0a:	430f      	orrs	r7, r1
 8002b0c:	46b9      	mov	r9, r7
 8002b0e:	464f      	mov	r7, r9
 8002b10:	1e7a      	subs	r2, r7, #1
 8002b12:	4197      	sbcs	r7, r2
 8002b14:	4337      	orrs	r7, r6
 8002b16:	e60f      	b.n	8002738 <__aeabi_dsub+0x94>
 8002b18:	4662      	mov	r2, ip
 8002b1a:	431a      	orrs	r2, r3
 8002b1c:	0013      	movs	r3, r2
 8002b1e:	1e5a      	subs	r2, r3, #1
 8002b20:	4193      	sbcs	r3, r2
 8002b22:	1afc      	subs	r4, r7, r3
 8002b24:	42a7      	cmp	r7, r4
 8002b26:	41bf      	sbcs	r7, r7
 8002b28:	427f      	negs	r7, r7
 8002b2a:	1bcb      	subs	r3, r1, r7
 8002b2c:	4699      	mov	r9, r3
 8002b2e:	465d      	mov	r5, fp
 8002b30:	4680      	mov	r8, r0
 8002b32:	e608      	b.n	8002746 <__aeabi_dsub+0xa2>
 8002b34:	4666      	mov	r6, ip
 8002b36:	431e      	orrs	r6, r3
 8002b38:	d100      	bne.n	8002b3c <__aeabi_dsub+0x498>
 8002b3a:	e0be      	b.n	8002cba <__aeabi_dsub+0x616>
 8002b3c:	1e56      	subs	r6, r2, #1
 8002b3e:	2a01      	cmp	r2, #1
 8002b40:	d100      	bne.n	8002b44 <__aeabi_dsub+0x4a0>
 8002b42:	e109      	b.n	8002d58 <__aeabi_dsub+0x6b4>
 8002b44:	4c8c      	ldr	r4, [pc, #560]	; (8002d78 <__aeabi_dsub+0x6d4>)
 8002b46:	42a2      	cmp	r2, r4
 8002b48:	d100      	bne.n	8002b4c <__aeabi_dsub+0x4a8>
 8002b4a:	e119      	b.n	8002d80 <__aeabi_dsub+0x6dc>
 8002b4c:	0032      	movs	r2, r6
 8002b4e:	e6c1      	b.n	80028d4 <__aeabi_dsub+0x230>
 8002b50:	4642      	mov	r2, r8
 8002b52:	2400      	movs	r4, #0
 8002b54:	2300      	movs	r3, #0
 8002b56:	e648      	b.n	80027ea <__aeabi_dsub+0x146>
 8002b58:	2020      	movs	r0, #32
 8002b5a:	000c      	movs	r4, r1
 8002b5c:	1a80      	subs	r0, r0, r2
 8002b5e:	003e      	movs	r6, r7
 8002b60:	4087      	lsls	r7, r0
 8002b62:	4084      	lsls	r4, r0
 8002b64:	40d6      	lsrs	r6, r2
 8002b66:	1e78      	subs	r0, r7, #1
 8002b68:	4187      	sbcs	r7, r0
 8002b6a:	40d1      	lsrs	r1, r2
 8002b6c:	4334      	orrs	r4, r6
 8002b6e:	433c      	orrs	r4, r7
 8002b70:	448c      	add	ip, r1
 8002b72:	e7a4      	b.n	8002abe <__aeabi_dsub+0x41a>
 8002b74:	4a80      	ldr	r2, [pc, #512]	; (8002d78 <__aeabi_dsub+0x6d4>)
 8002b76:	4290      	cmp	r0, r2
 8002b78:	d100      	bne.n	8002b7c <__aeabi_dsub+0x4d8>
 8002b7a:	e0e9      	b.n	8002d50 <__aeabi_dsub+0x6ac>
 8002b7c:	19df      	adds	r7, r3, r7
 8002b7e:	429f      	cmp	r7, r3
 8002b80:	419b      	sbcs	r3, r3
 8002b82:	4461      	add	r1, ip
 8002b84:	425b      	negs	r3, r3
 8002b86:	18c9      	adds	r1, r1, r3
 8002b88:	07cc      	lsls	r4, r1, #31
 8002b8a:	087f      	lsrs	r7, r7, #1
 8002b8c:	084b      	lsrs	r3, r1, #1
 8002b8e:	4699      	mov	r9, r3
 8002b90:	4680      	mov	r8, r0
 8002b92:	433c      	orrs	r4, r7
 8002b94:	e6f4      	b.n	8002980 <__aeabi_dsub+0x2dc>
 8002b96:	1afc      	subs	r4, r7, r3
 8002b98:	42a7      	cmp	r7, r4
 8002b9a:	41bf      	sbcs	r7, r7
 8002b9c:	4663      	mov	r3, ip
 8002b9e:	427f      	negs	r7, r7
 8002ba0:	1ac9      	subs	r1, r1, r3
 8002ba2:	1bcb      	subs	r3, r1, r7
 8002ba4:	4699      	mov	r9, r3
 8002ba6:	465d      	mov	r5, fp
 8002ba8:	e5d5      	b.n	8002756 <__aeabi_dsub+0xb2>
 8002baa:	08ff      	lsrs	r7, r7, #3
 8002bac:	074b      	lsls	r3, r1, #29
 8002bae:	465d      	mov	r5, fp
 8002bb0:	433b      	orrs	r3, r7
 8002bb2:	08cc      	lsrs	r4, r1, #3
 8002bb4:	e6ee      	b.n	8002994 <__aeabi_dsub+0x2f0>
 8002bb6:	4662      	mov	r2, ip
 8002bb8:	431a      	orrs	r2, r3
 8002bba:	d000      	beq.n	8002bbe <__aeabi_dsub+0x51a>
 8002bbc:	e082      	b.n	8002cc4 <__aeabi_dsub+0x620>
 8002bbe:	000b      	movs	r3, r1
 8002bc0:	433b      	orrs	r3, r7
 8002bc2:	d11b      	bne.n	8002bfc <__aeabi_dsub+0x558>
 8002bc4:	2480      	movs	r4, #128	; 0x80
 8002bc6:	2500      	movs	r5, #0
 8002bc8:	0324      	lsls	r4, r4, #12
 8002bca:	e6f9      	b.n	80029c0 <__aeabi_dsub+0x31c>
 8002bcc:	19dc      	adds	r4, r3, r7
 8002bce:	429c      	cmp	r4, r3
 8002bd0:	419b      	sbcs	r3, r3
 8002bd2:	4461      	add	r1, ip
 8002bd4:	4689      	mov	r9, r1
 8002bd6:	425b      	negs	r3, r3
 8002bd8:	4499      	add	r9, r3
 8002bda:	464b      	mov	r3, r9
 8002bdc:	021b      	lsls	r3, r3, #8
 8002bde:	d444      	bmi.n	8002c6a <__aeabi_dsub+0x5c6>
 8002be0:	2301      	movs	r3, #1
 8002be2:	4698      	mov	r8, r3
 8002be4:	e6cc      	b.n	8002980 <__aeabi_dsub+0x2dc>
 8002be6:	1bdc      	subs	r4, r3, r7
 8002be8:	4662      	mov	r2, ip
 8002bea:	42a3      	cmp	r3, r4
 8002bec:	419b      	sbcs	r3, r3
 8002bee:	1a51      	subs	r1, r2, r1
 8002bf0:	425b      	negs	r3, r3
 8002bf2:	1acb      	subs	r3, r1, r3
 8002bf4:	4699      	mov	r9, r3
 8002bf6:	2301      	movs	r3, #1
 8002bf8:	4698      	mov	r8, r3
 8002bfa:	e5a4      	b.n	8002746 <__aeabi_dsub+0xa2>
 8002bfc:	08ff      	lsrs	r7, r7, #3
 8002bfe:	074b      	lsls	r3, r1, #29
 8002c00:	465d      	mov	r5, fp
 8002c02:	433b      	orrs	r3, r7
 8002c04:	08cc      	lsrs	r4, r1, #3
 8002c06:	e6d7      	b.n	80029b8 <__aeabi_dsub+0x314>
 8002c08:	4662      	mov	r2, ip
 8002c0a:	431a      	orrs	r2, r3
 8002c0c:	0014      	movs	r4, r2
 8002c0e:	1e63      	subs	r3, r4, #1
 8002c10:	419c      	sbcs	r4, r3
 8002c12:	e679      	b.n	8002908 <__aeabi_dsub+0x264>
 8002c14:	0015      	movs	r5, r2
 8002c16:	4664      	mov	r4, ip
 8002c18:	3d20      	subs	r5, #32
 8002c1a:	40ec      	lsrs	r4, r5
 8002c1c:	46a0      	mov	r8, r4
 8002c1e:	2a20      	cmp	r2, #32
 8002c20:	d005      	beq.n	8002c2e <__aeabi_dsub+0x58a>
 8002c22:	2540      	movs	r5, #64	; 0x40
 8002c24:	4664      	mov	r4, ip
 8002c26:	1aaa      	subs	r2, r5, r2
 8002c28:	4094      	lsls	r4, r2
 8002c2a:	4323      	orrs	r3, r4
 8002c2c:	469a      	mov	sl, r3
 8002c2e:	4654      	mov	r4, sl
 8002c30:	1e63      	subs	r3, r4, #1
 8002c32:	419c      	sbcs	r4, r3
 8002c34:	4643      	mov	r3, r8
 8002c36:	4323      	orrs	r3, r4
 8002c38:	e773      	b.n	8002b22 <__aeabi_dsub+0x47e>
 8002c3a:	4662      	mov	r2, ip
 8002c3c:	431a      	orrs	r2, r3
 8002c3e:	d023      	beq.n	8002c88 <__aeabi_dsub+0x5e4>
 8002c40:	000a      	movs	r2, r1
 8002c42:	433a      	orrs	r2, r7
 8002c44:	d000      	beq.n	8002c48 <__aeabi_dsub+0x5a4>
 8002c46:	e0a0      	b.n	8002d8a <__aeabi_dsub+0x6e6>
 8002c48:	4662      	mov	r2, ip
 8002c4a:	08db      	lsrs	r3, r3, #3
 8002c4c:	0752      	lsls	r2, r2, #29
 8002c4e:	4313      	orrs	r3, r2
 8002c50:	4662      	mov	r2, ip
 8002c52:	08d4      	lsrs	r4, r2, #3
 8002c54:	e6b0      	b.n	80029b8 <__aeabi_dsub+0x314>
 8002c56:	000b      	movs	r3, r1
 8002c58:	433b      	orrs	r3, r7
 8002c5a:	d100      	bne.n	8002c5e <__aeabi_dsub+0x5ba>
 8002c5c:	e728      	b.n	8002ab0 <__aeabi_dsub+0x40c>
 8002c5e:	08ff      	lsrs	r7, r7, #3
 8002c60:	074b      	lsls	r3, r1, #29
 8002c62:	465d      	mov	r5, fp
 8002c64:	433b      	orrs	r3, r7
 8002c66:	08cc      	lsrs	r4, r1, #3
 8002c68:	e697      	b.n	800299a <__aeabi_dsub+0x2f6>
 8002c6a:	2302      	movs	r3, #2
 8002c6c:	4698      	mov	r8, r3
 8002c6e:	e736      	b.n	8002ade <__aeabi_dsub+0x43a>
 8002c70:	1afc      	subs	r4, r7, r3
 8002c72:	42a7      	cmp	r7, r4
 8002c74:	41bf      	sbcs	r7, r7
 8002c76:	4663      	mov	r3, ip
 8002c78:	427f      	negs	r7, r7
 8002c7a:	1ac9      	subs	r1, r1, r3
 8002c7c:	1bcb      	subs	r3, r1, r7
 8002c7e:	4699      	mov	r9, r3
 8002c80:	2301      	movs	r3, #1
 8002c82:	465d      	mov	r5, fp
 8002c84:	4698      	mov	r8, r3
 8002c86:	e55e      	b.n	8002746 <__aeabi_dsub+0xa2>
 8002c88:	074b      	lsls	r3, r1, #29
 8002c8a:	08ff      	lsrs	r7, r7, #3
 8002c8c:	433b      	orrs	r3, r7
 8002c8e:	08cc      	lsrs	r4, r1, #3
 8002c90:	e692      	b.n	80029b8 <__aeabi_dsub+0x314>
 8002c92:	1bdc      	subs	r4, r3, r7
 8002c94:	4660      	mov	r0, ip
 8002c96:	42a3      	cmp	r3, r4
 8002c98:	41b6      	sbcs	r6, r6
 8002c9a:	1a40      	subs	r0, r0, r1
 8002c9c:	4276      	negs	r6, r6
 8002c9e:	1b80      	subs	r0, r0, r6
 8002ca0:	4681      	mov	r9, r0
 8002ca2:	0200      	lsls	r0, r0, #8
 8002ca4:	d560      	bpl.n	8002d68 <__aeabi_dsub+0x6c4>
 8002ca6:	1afc      	subs	r4, r7, r3
 8002ca8:	42a7      	cmp	r7, r4
 8002caa:	41bf      	sbcs	r7, r7
 8002cac:	4663      	mov	r3, ip
 8002cae:	427f      	negs	r7, r7
 8002cb0:	1ac9      	subs	r1, r1, r3
 8002cb2:	1bcb      	subs	r3, r1, r7
 8002cb4:	4699      	mov	r9, r3
 8002cb6:	465d      	mov	r5, fp
 8002cb8:	e576      	b.n	80027a8 <__aeabi_dsub+0x104>
 8002cba:	08ff      	lsrs	r7, r7, #3
 8002cbc:	074b      	lsls	r3, r1, #29
 8002cbe:	433b      	orrs	r3, r7
 8002cc0:	08cc      	lsrs	r4, r1, #3
 8002cc2:	e667      	b.n	8002994 <__aeabi_dsub+0x2f0>
 8002cc4:	000a      	movs	r2, r1
 8002cc6:	08db      	lsrs	r3, r3, #3
 8002cc8:	433a      	orrs	r2, r7
 8002cca:	d100      	bne.n	8002cce <__aeabi_dsub+0x62a>
 8002ccc:	e66f      	b.n	80029ae <__aeabi_dsub+0x30a>
 8002cce:	4662      	mov	r2, ip
 8002cd0:	0752      	lsls	r2, r2, #29
 8002cd2:	4313      	orrs	r3, r2
 8002cd4:	4662      	mov	r2, ip
 8002cd6:	08d4      	lsrs	r4, r2, #3
 8002cd8:	2280      	movs	r2, #128	; 0x80
 8002cda:	0312      	lsls	r2, r2, #12
 8002cdc:	4214      	tst	r4, r2
 8002cde:	d007      	beq.n	8002cf0 <__aeabi_dsub+0x64c>
 8002ce0:	08c8      	lsrs	r0, r1, #3
 8002ce2:	4210      	tst	r0, r2
 8002ce4:	d104      	bne.n	8002cf0 <__aeabi_dsub+0x64c>
 8002ce6:	465d      	mov	r5, fp
 8002ce8:	0004      	movs	r4, r0
 8002cea:	08fb      	lsrs	r3, r7, #3
 8002cec:	0749      	lsls	r1, r1, #29
 8002cee:	430b      	orrs	r3, r1
 8002cf0:	0f5a      	lsrs	r2, r3, #29
 8002cf2:	00db      	lsls	r3, r3, #3
 8002cf4:	08db      	lsrs	r3, r3, #3
 8002cf6:	0752      	lsls	r2, r2, #29
 8002cf8:	4313      	orrs	r3, r2
 8002cfa:	e65d      	b.n	80029b8 <__aeabi_dsub+0x314>
 8002cfc:	074b      	lsls	r3, r1, #29
 8002cfe:	08ff      	lsrs	r7, r7, #3
 8002d00:	433b      	orrs	r3, r7
 8002d02:	08cc      	lsrs	r4, r1, #3
 8002d04:	e649      	b.n	800299a <__aeabi_dsub+0x2f6>
 8002d06:	19dc      	adds	r4, r3, r7
 8002d08:	429c      	cmp	r4, r3
 8002d0a:	419b      	sbcs	r3, r3
 8002d0c:	4461      	add	r1, ip
 8002d0e:	4689      	mov	r9, r1
 8002d10:	425b      	negs	r3, r3
 8002d12:	4499      	add	r9, r3
 8002d14:	464b      	mov	r3, r9
 8002d16:	021b      	lsls	r3, r3, #8
 8002d18:	d400      	bmi.n	8002d1c <__aeabi_dsub+0x678>
 8002d1a:	e631      	b.n	8002980 <__aeabi_dsub+0x2dc>
 8002d1c:	464a      	mov	r2, r9
 8002d1e:	4b17      	ldr	r3, [pc, #92]	; (8002d7c <__aeabi_dsub+0x6d8>)
 8002d20:	401a      	ands	r2, r3
 8002d22:	2301      	movs	r3, #1
 8002d24:	4691      	mov	r9, r2
 8002d26:	4698      	mov	r8, r3
 8002d28:	e62a      	b.n	8002980 <__aeabi_dsub+0x2dc>
 8002d2a:	0016      	movs	r6, r2
 8002d2c:	4664      	mov	r4, ip
 8002d2e:	3e20      	subs	r6, #32
 8002d30:	40f4      	lsrs	r4, r6
 8002d32:	46a0      	mov	r8, r4
 8002d34:	2a20      	cmp	r2, #32
 8002d36:	d005      	beq.n	8002d44 <__aeabi_dsub+0x6a0>
 8002d38:	2640      	movs	r6, #64	; 0x40
 8002d3a:	4664      	mov	r4, ip
 8002d3c:	1ab2      	subs	r2, r6, r2
 8002d3e:	4094      	lsls	r4, r2
 8002d40:	4323      	orrs	r3, r4
 8002d42:	469a      	mov	sl, r3
 8002d44:	4654      	mov	r4, sl
 8002d46:	1e63      	subs	r3, r4, #1
 8002d48:	419c      	sbcs	r4, r3
 8002d4a:	4643      	mov	r3, r8
 8002d4c:	431c      	orrs	r4, r3
 8002d4e:	e5db      	b.n	8002908 <__aeabi_dsub+0x264>
 8002d50:	0002      	movs	r2, r0
 8002d52:	2400      	movs	r4, #0
 8002d54:	2300      	movs	r3, #0
 8002d56:	e548      	b.n	80027ea <__aeabi_dsub+0x146>
 8002d58:	19dc      	adds	r4, r3, r7
 8002d5a:	42bc      	cmp	r4, r7
 8002d5c:	41bf      	sbcs	r7, r7
 8002d5e:	4461      	add	r1, ip
 8002d60:	4689      	mov	r9, r1
 8002d62:	427f      	negs	r7, r7
 8002d64:	44b9      	add	r9, r7
 8002d66:	e738      	b.n	8002bda <__aeabi_dsub+0x536>
 8002d68:	464b      	mov	r3, r9
 8002d6a:	4323      	orrs	r3, r4
 8002d6c:	d100      	bne.n	8002d70 <__aeabi_dsub+0x6cc>
 8002d6e:	e69f      	b.n	8002ab0 <__aeabi_dsub+0x40c>
 8002d70:	e606      	b.n	8002980 <__aeabi_dsub+0x2dc>
 8002d72:	46c0      	nop			; (mov r8, r8)
 8002d74:	000007fe 	.word	0x000007fe
 8002d78:	000007ff 	.word	0x000007ff
 8002d7c:	ff7fffff 	.word	0xff7fffff
 8002d80:	08ff      	lsrs	r7, r7, #3
 8002d82:	074b      	lsls	r3, r1, #29
 8002d84:	433b      	orrs	r3, r7
 8002d86:	08cc      	lsrs	r4, r1, #3
 8002d88:	e616      	b.n	80029b8 <__aeabi_dsub+0x314>
 8002d8a:	4662      	mov	r2, ip
 8002d8c:	08db      	lsrs	r3, r3, #3
 8002d8e:	0752      	lsls	r2, r2, #29
 8002d90:	4313      	orrs	r3, r2
 8002d92:	4662      	mov	r2, ip
 8002d94:	08d4      	lsrs	r4, r2, #3
 8002d96:	2280      	movs	r2, #128	; 0x80
 8002d98:	0312      	lsls	r2, r2, #12
 8002d9a:	4214      	tst	r4, r2
 8002d9c:	d007      	beq.n	8002dae <__aeabi_dsub+0x70a>
 8002d9e:	08c8      	lsrs	r0, r1, #3
 8002da0:	4210      	tst	r0, r2
 8002da2:	d104      	bne.n	8002dae <__aeabi_dsub+0x70a>
 8002da4:	465d      	mov	r5, fp
 8002da6:	0004      	movs	r4, r0
 8002da8:	08fb      	lsrs	r3, r7, #3
 8002daa:	0749      	lsls	r1, r1, #29
 8002dac:	430b      	orrs	r3, r1
 8002dae:	0f5a      	lsrs	r2, r3, #29
 8002db0:	00db      	lsls	r3, r3, #3
 8002db2:	0752      	lsls	r2, r2, #29
 8002db4:	08db      	lsrs	r3, r3, #3
 8002db6:	4313      	orrs	r3, r2
 8002db8:	e5fe      	b.n	80029b8 <__aeabi_dsub+0x314>
 8002dba:	2300      	movs	r3, #0
 8002dbc:	4a01      	ldr	r2, [pc, #4]	; (8002dc4 <__aeabi_dsub+0x720>)
 8002dbe:	001c      	movs	r4, r3
 8002dc0:	e513      	b.n	80027ea <__aeabi_dsub+0x146>
 8002dc2:	46c0      	nop			; (mov r8, r8)
 8002dc4:	000007ff 	.word	0x000007ff

08002dc8 <__aeabi_dcmpun>:
 8002dc8:	b570      	push	{r4, r5, r6, lr}
 8002dca:	0005      	movs	r5, r0
 8002dcc:	480c      	ldr	r0, [pc, #48]	; (8002e00 <__aeabi_dcmpun+0x38>)
 8002dce:	031c      	lsls	r4, r3, #12
 8002dd0:	0016      	movs	r6, r2
 8002dd2:	005b      	lsls	r3, r3, #1
 8002dd4:	030a      	lsls	r2, r1, #12
 8002dd6:	0049      	lsls	r1, r1, #1
 8002dd8:	0b12      	lsrs	r2, r2, #12
 8002dda:	0d49      	lsrs	r1, r1, #21
 8002ddc:	0b24      	lsrs	r4, r4, #12
 8002dde:	0d5b      	lsrs	r3, r3, #21
 8002de0:	4281      	cmp	r1, r0
 8002de2:	d008      	beq.n	8002df6 <__aeabi_dcmpun+0x2e>
 8002de4:	4a06      	ldr	r2, [pc, #24]	; (8002e00 <__aeabi_dcmpun+0x38>)
 8002de6:	2000      	movs	r0, #0
 8002de8:	4293      	cmp	r3, r2
 8002dea:	d103      	bne.n	8002df4 <__aeabi_dcmpun+0x2c>
 8002dec:	0020      	movs	r0, r4
 8002dee:	4330      	orrs	r0, r6
 8002df0:	1e43      	subs	r3, r0, #1
 8002df2:	4198      	sbcs	r0, r3
 8002df4:	bd70      	pop	{r4, r5, r6, pc}
 8002df6:	2001      	movs	r0, #1
 8002df8:	432a      	orrs	r2, r5
 8002dfa:	d1fb      	bne.n	8002df4 <__aeabi_dcmpun+0x2c>
 8002dfc:	e7f2      	b.n	8002de4 <__aeabi_dcmpun+0x1c>
 8002dfe:	46c0      	nop			; (mov r8, r8)
 8002e00:	000007ff 	.word	0x000007ff

08002e04 <__aeabi_d2iz>:
 8002e04:	000a      	movs	r2, r1
 8002e06:	b530      	push	{r4, r5, lr}
 8002e08:	4c13      	ldr	r4, [pc, #76]	; (8002e58 <__aeabi_d2iz+0x54>)
 8002e0a:	0053      	lsls	r3, r2, #1
 8002e0c:	0309      	lsls	r1, r1, #12
 8002e0e:	0005      	movs	r5, r0
 8002e10:	0b09      	lsrs	r1, r1, #12
 8002e12:	2000      	movs	r0, #0
 8002e14:	0d5b      	lsrs	r3, r3, #21
 8002e16:	0fd2      	lsrs	r2, r2, #31
 8002e18:	42a3      	cmp	r3, r4
 8002e1a:	dd04      	ble.n	8002e26 <__aeabi_d2iz+0x22>
 8002e1c:	480f      	ldr	r0, [pc, #60]	; (8002e5c <__aeabi_d2iz+0x58>)
 8002e1e:	4283      	cmp	r3, r0
 8002e20:	dd02      	ble.n	8002e28 <__aeabi_d2iz+0x24>
 8002e22:	4b0f      	ldr	r3, [pc, #60]	; (8002e60 <__aeabi_d2iz+0x5c>)
 8002e24:	18d0      	adds	r0, r2, r3
 8002e26:	bd30      	pop	{r4, r5, pc}
 8002e28:	2080      	movs	r0, #128	; 0x80
 8002e2a:	0340      	lsls	r0, r0, #13
 8002e2c:	4301      	orrs	r1, r0
 8002e2e:	480d      	ldr	r0, [pc, #52]	; (8002e64 <__aeabi_d2iz+0x60>)
 8002e30:	1ac0      	subs	r0, r0, r3
 8002e32:	281f      	cmp	r0, #31
 8002e34:	dd08      	ble.n	8002e48 <__aeabi_d2iz+0x44>
 8002e36:	480c      	ldr	r0, [pc, #48]	; (8002e68 <__aeabi_d2iz+0x64>)
 8002e38:	1ac3      	subs	r3, r0, r3
 8002e3a:	40d9      	lsrs	r1, r3
 8002e3c:	000b      	movs	r3, r1
 8002e3e:	4258      	negs	r0, r3
 8002e40:	2a00      	cmp	r2, #0
 8002e42:	d1f0      	bne.n	8002e26 <__aeabi_d2iz+0x22>
 8002e44:	0018      	movs	r0, r3
 8002e46:	e7ee      	b.n	8002e26 <__aeabi_d2iz+0x22>
 8002e48:	4c08      	ldr	r4, [pc, #32]	; (8002e6c <__aeabi_d2iz+0x68>)
 8002e4a:	40c5      	lsrs	r5, r0
 8002e4c:	46a4      	mov	ip, r4
 8002e4e:	4463      	add	r3, ip
 8002e50:	4099      	lsls	r1, r3
 8002e52:	000b      	movs	r3, r1
 8002e54:	432b      	orrs	r3, r5
 8002e56:	e7f2      	b.n	8002e3e <__aeabi_d2iz+0x3a>
 8002e58:	000003fe 	.word	0x000003fe
 8002e5c:	0000041d 	.word	0x0000041d
 8002e60:	7fffffff 	.word	0x7fffffff
 8002e64:	00000433 	.word	0x00000433
 8002e68:	00000413 	.word	0x00000413
 8002e6c:	fffffbed 	.word	0xfffffbed

08002e70 <__aeabi_i2d>:
 8002e70:	b570      	push	{r4, r5, r6, lr}
 8002e72:	2800      	cmp	r0, #0
 8002e74:	d016      	beq.n	8002ea4 <__aeabi_i2d+0x34>
 8002e76:	17c3      	asrs	r3, r0, #31
 8002e78:	18c5      	adds	r5, r0, r3
 8002e7a:	405d      	eors	r5, r3
 8002e7c:	0fc4      	lsrs	r4, r0, #31
 8002e7e:	0028      	movs	r0, r5
 8002e80:	f000 f91c 	bl	80030bc <__clzsi2>
 8002e84:	4a11      	ldr	r2, [pc, #68]	; (8002ecc <__aeabi_i2d+0x5c>)
 8002e86:	1a12      	subs	r2, r2, r0
 8002e88:	280a      	cmp	r0, #10
 8002e8a:	dc16      	bgt.n	8002eba <__aeabi_i2d+0x4a>
 8002e8c:	0003      	movs	r3, r0
 8002e8e:	002e      	movs	r6, r5
 8002e90:	3315      	adds	r3, #21
 8002e92:	409e      	lsls	r6, r3
 8002e94:	230b      	movs	r3, #11
 8002e96:	1a18      	subs	r0, r3, r0
 8002e98:	40c5      	lsrs	r5, r0
 8002e9a:	0552      	lsls	r2, r2, #21
 8002e9c:	032d      	lsls	r5, r5, #12
 8002e9e:	0b2d      	lsrs	r5, r5, #12
 8002ea0:	0d53      	lsrs	r3, r2, #21
 8002ea2:	e003      	b.n	8002eac <__aeabi_i2d+0x3c>
 8002ea4:	2400      	movs	r4, #0
 8002ea6:	2300      	movs	r3, #0
 8002ea8:	2500      	movs	r5, #0
 8002eaa:	2600      	movs	r6, #0
 8002eac:	051b      	lsls	r3, r3, #20
 8002eae:	432b      	orrs	r3, r5
 8002eb0:	07e4      	lsls	r4, r4, #31
 8002eb2:	4323      	orrs	r3, r4
 8002eb4:	0030      	movs	r0, r6
 8002eb6:	0019      	movs	r1, r3
 8002eb8:	bd70      	pop	{r4, r5, r6, pc}
 8002eba:	380b      	subs	r0, #11
 8002ebc:	4085      	lsls	r5, r0
 8002ebe:	0552      	lsls	r2, r2, #21
 8002ec0:	032d      	lsls	r5, r5, #12
 8002ec2:	2600      	movs	r6, #0
 8002ec4:	0b2d      	lsrs	r5, r5, #12
 8002ec6:	0d53      	lsrs	r3, r2, #21
 8002ec8:	e7f0      	b.n	8002eac <__aeabi_i2d+0x3c>
 8002eca:	46c0      	nop			; (mov r8, r8)
 8002ecc:	0000041e 	.word	0x0000041e

08002ed0 <__aeabi_ui2d>:
 8002ed0:	b510      	push	{r4, lr}
 8002ed2:	1e04      	subs	r4, r0, #0
 8002ed4:	d010      	beq.n	8002ef8 <__aeabi_ui2d+0x28>
 8002ed6:	f000 f8f1 	bl	80030bc <__clzsi2>
 8002eda:	4b0f      	ldr	r3, [pc, #60]	; (8002f18 <__aeabi_ui2d+0x48>)
 8002edc:	1a1b      	subs	r3, r3, r0
 8002ede:	280a      	cmp	r0, #10
 8002ee0:	dc11      	bgt.n	8002f06 <__aeabi_ui2d+0x36>
 8002ee2:	220b      	movs	r2, #11
 8002ee4:	0021      	movs	r1, r4
 8002ee6:	1a12      	subs	r2, r2, r0
 8002ee8:	40d1      	lsrs	r1, r2
 8002eea:	3015      	adds	r0, #21
 8002eec:	030a      	lsls	r2, r1, #12
 8002eee:	055b      	lsls	r3, r3, #21
 8002ef0:	4084      	lsls	r4, r0
 8002ef2:	0b12      	lsrs	r2, r2, #12
 8002ef4:	0d5b      	lsrs	r3, r3, #21
 8002ef6:	e001      	b.n	8002efc <__aeabi_ui2d+0x2c>
 8002ef8:	2300      	movs	r3, #0
 8002efa:	2200      	movs	r2, #0
 8002efc:	051b      	lsls	r3, r3, #20
 8002efe:	4313      	orrs	r3, r2
 8002f00:	0020      	movs	r0, r4
 8002f02:	0019      	movs	r1, r3
 8002f04:	bd10      	pop	{r4, pc}
 8002f06:	0022      	movs	r2, r4
 8002f08:	380b      	subs	r0, #11
 8002f0a:	4082      	lsls	r2, r0
 8002f0c:	055b      	lsls	r3, r3, #21
 8002f0e:	0312      	lsls	r2, r2, #12
 8002f10:	2400      	movs	r4, #0
 8002f12:	0b12      	lsrs	r2, r2, #12
 8002f14:	0d5b      	lsrs	r3, r3, #21
 8002f16:	e7f1      	b.n	8002efc <__aeabi_ui2d+0x2c>
 8002f18:	0000041e 	.word	0x0000041e

08002f1c <__aeabi_f2d>:
 8002f1c:	b570      	push	{r4, r5, r6, lr}
 8002f1e:	0043      	lsls	r3, r0, #1
 8002f20:	0246      	lsls	r6, r0, #9
 8002f22:	0fc4      	lsrs	r4, r0, #31
 8002f24:	20fe      	movs	r0, #254	; 0xfe
 8002f26:	0e1b      	lsrs	r3, r3, #24
 8002f28:	1c59      	adds	r1, r3, #1
 8002f2a:	0a75      	lsrs	r5, r6, #9
 8002f2c:	4208      	tst	r0, r1
 8002f2e:	d00c      	beq.n	8002f4a <__aeabi_f2d+0x2e>
 8002f30:	22e0      	movs	r2, #224	; 0xe0
 8002f32:	0092      	lsls	r2, r2, #2
 8002f34:	4694      	mov	ip, r2
 8002f36:	076d      	lsls	r5, r5, #29
 8002f38:	0b36      	lsrs	r6, r6, #12
 8002f3a:	4463      	add	r3, ip
 8002f3c:	051b      	lsls	r3, r3, #20
 8002f3e:	4333      	orrs	r3, r6
 8002f40:	07e4      	lsls	r4, r4, #31
 8002f42:	4323      	orrs	r3, r4
 8002f44:	0028      	movs	r0, r5
 8002f46:	0019      	movs	r1, r3
 8002f48:	bd70      	pop	{r4, r5, r6, pc}
 8002f4a:	2b00      	cmp	r3, #0
 8002f4c:	d114      	bne.n	8002f78 <__aeabi_f2d+0x5c>
 8002f4e:	2d00      	cmp	r5, #0
 8002f50:	d01b      	beq.n	8002f8a <__aeabi_f2d+0x6e>
 8002f52:	0028      	movs	r0, r5
 8002f54:	f000 f8b2 	bl	80030bc <__clzsi2>
 8002f58:	280a      	cmp	r0, #10
 8002f5a:	dc1c      	bgt.n	8002f96 <__aeabi_f2d+0x7a>
 8002f5c:	230b      	movs	r3, #11
 8002f5e:	002e      	movs	r6, r5
 8002f60:	1a1b      	subs	r3, r3, r0
 8002f62:	40de      	lsrs	r6, r3
 8002f64:	0003      	movs	r3, r0
 8002f66:	3315      	adds	r3, #21
 8002f68:	409d      	lsls	r5, r3
 8002f6a:	4a0e      	ldr	r2, [pc, #56]	; (8002fa4 <__aeabi_f2d+0x88>)
 8002f6c:	0336      	lsls	r6, r6, #12
 8002f6e:	1a12      	subs	r2, r2, r0
 8002f70:	0552      	lsls	r2, r2, #21
 8002f72:	0b36      	lsrs	r6, r6, #12
 8002f74:	0d53      	lsrs	r3, r2, #21
 8002f76:	e7e1      	b.n	8002f3c <__aeabi_f2d+0x20>
 8002f78:	2d00      	cmp	r5, #0
 8002f7a:	d009      	beq.n	8002f90 <__aeabi_f2d+0x74>
 8002f7c:	2280      	movs	r2, #128	; 0x80
 8002f7e:	0b36      	lsrs	r6, r6, #12
 8002f80:	0312      	lsls	r2, r2, #12
 8002f82:	4b09      	ldr	r3, [pc, #36]	; (8002fa8 <__aeabi_f2d+0x8c>)
 8002f84:	076d      	lsls	r5, r5, #29
 8002f86:	4316      	orrs	r6, r2
 8002f88:	e7d8      	b.n	8002f3c <__aeabi_f2d+0x20>
 8002f8a:	2300      	movs	r3, #0
 8002f8c:	2600      	movs	r6, #0
 8002f8e:	e7d5      	b.n	8002f3c <__aeabi_f2d+0x20>
 8002f90:	2600      	movs	r6, #0
 8002f92:	4b05      	ldr	r3, [pc, #20]	; (8002fa8 <__aeabi_f2d+0x8c>)
 8002f94:	e7d2      	b.n	8002f3c <__aeabi_f2d+0x20>
 8002f96:	0003      	movs	r3, r0
 8002f98:	3b0b      	subs	r3, #11
 8002f9a:	409d      	lsls	r5, r3
 8002f9c:	002e      	movs	r6, r5
 8002f9e:	2500      	movs	r5, #0
 8002fa0:	e7e3      	b.n	8002f6a <__aeabi_f2d+0x4e>
 8002fa2:	46c0      	nop			; (mov r8, r8)
 8002fa4:	00000389 	.word	0x00000389
 8002fa8:	000007ff 	.word	0x000007ff

08002fac <__aeabi_d2f>:
 8002fac:	0002      	movs	r2, r0
 8002fae:	004b      	lsls	r3, r1, #1
 8002fb0:	b5f0      	push	{r4, r5, r6, r7, lr}
 8002fb2:	0d5b      	lsrs	r3, r3, #21
 8002fb4:	030c      	lsls	r4, r1, #12
 8002fb6:	4e3d      	ldr	r6, [pc, #244]	; (80030ac <__aeabi_d2f+0x100>)
 8002fb8:	0a64      	lsrs	r4, r4, #9
 8002fba:	0f40      	lsrs	r0, r0, #29
 8002fbc:	1c5f      	adds	r7, r3, #1
 8002fbe:	0fc9      	lsrs	r1, r1, #31
 8002fc0:	4304      	orrs	r4, r0
 8002fc2:	00d5      	lsls	r5, r2, #3
 8002fc4:	4237      	tst	r7, r6
 8002fc6:	d00a      	beq.n	8002fde <__aeabi_d2f+0x32>
 8002fc8:	4839      	ldr	r0, [pc, #228]	; (80030b0 <__aeabi_d2f+0x104>)
 8002fca:	181e      	adds	r6, r3, r0
 8002fcc:	2efe      	cmp	r6, #254	; 0xfe
 8002fce:	dd16      	ble.n	8002ffe <__aeabi_d2f+0x52>
 8002fd0:	20ff      	movs	r0, #255	; 0xff
 8002fd2:	2400      	movs	r4, #0
 8002fd4:	05c0      	lsls	r0, r0, #23
 8002fd6:	4320      	orrs	r0, r4
 8002fd8:	07c9      	lsls	r1, r1, #31
 8002fda:	4308      	orrs	r0, r1
 8002fdc:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8002fde:	2b00      	cmp	r3, #0
 8002fe0:	d106      	bne.n	8002ff0 <__aeabi_d2f+0x44>
 8002fe2:	432c      	orrs	r4, r5
 8002fe4:	d026      	beq.n	8003034 <__aeabi_d2f+0x88>
 8002fe6:	2205      	movs	r2, #5
 8002fe8:	0192      	lsls	r2, r2, #6
 8002fea:	0a54      	lsrs	r4, r2, #9
 8002fec:	b2d8      	uxtb	r0, r3
 8002fee:	e7f1      	b.n	8002fd4 <__aeabi_d2f+0x28>
 8002ff0:	4325      	orrs	r5, r4
 8002ff2:	d0ed      	beq.n	8002fd0 <__aeabi_d2f+0x24>
 8002ff4:	2080      	movs	r0, #128	; 0x80
 8002ff6:	03c0      	lsls	r0, r0, #15
 8002ff8:	4304      	orrs	r4, r0
 8002ffa:	20ff      	movs	r0, #255	; 0xff
 8002ffc:	e7ea      	b.n	8002fd4 <__aeabi_d2f+0x28>
 8002ffe:	2e00      	cmp	r6, #0
 8003000:	dd1b      	ble.n	800303a <__aeabi_d2f+0x8e>
 8003002:	0192      	lsls	r2, r2, #6
 8003004:	1e53      	subs	r3, r2, #1
 8003006:	419a      	sbcs	r2, r3
 8003008:	00e4      	lsls	r4, r4, #3
 800300a:	0f6d      	lsrs	r5, r5, #29
 800300c:	4322      	orrs	r2, r4
 800300e:	432a      	orrs	r2, r5
 8003010:	0753      	lsls	r3, r2, #29
 8003012:	d048      	beq.n	80030a6 <__aeabi_d2f+0xfa>
 8003014:	230f      	movs	r3, #15
 8003016:	4013      	ands	r3, r2
 8003018:	2b04      	cmp	r3, #4
 800301a:	d000      	beq.n	800301e <__aeabi_d2f+0x72>
 800301c:	3204      	adds	r2, #4
 800301e:	2380      	movs	r3, #128	; 0x80
 8003020:	04db      	lsls	r3, r3, #19
 8003022:	4013      	ands	r3, r2
 8003024:	d03f      	beq.n	80030a6 <__aeabi_d2f+0xfa>
 8003026:	1c70      	adds	r0, r6, #1
 8003028:	2efe      	cmp	r6, #254	; 0xfe
 800302a:	d0d1      	beq.n	8002fd0 <__aeabi_d2f+0x24>
 800302c:	0192      	lsls	r2, r2, #6
 800302e:	0a54      	lsrs	r4, r2, #9
 8003030:	b2c0      	uxtb	r0, r0
 8003032:	e7cf      	b.n	8002fd4 <__aeabi_d2f+0x28>
 8003034:	2000      	movs	r0, #0
 8003036:	2400      	movs	r4, #0
 8003038:	e7cc      	b.n	8002fd4 <__aeabi_d2f+0x28>
 800303a:	0032      	movs	r2, r6
 800303c:	3217      	adds	r2, #23
 800303e:	db22      	blt.n	8003086 <__aeabi_d2f+0xda>
 8003040:	2080      	movs	r0, #128	; 0x80
 8003042:	0400      	lsls	r0, r0, #16
 8003044:	4320      	orrs	r0, r4
 8003046:	241e      	movs	r4, #30
 8003048:	1ba4      	subs	r4, r4, r6
 800304a:	2c1f      	cmp	r4, #31
 800304c:	dd1d      	ble.n	800308a <__aeabi_d2f+0xde>
 800304e:	2202      	movs	r2, #2
 8003050:	4252      	negs	r2, r2
 8003052:	1b96      	subs	r6, r2, r6
 8003054:	0002      	movs	r2, r0
 8003056:	40f2      	lsrs	r2, r6
 8003058:	0016      	movs	r6, r2
 800305a:	2c20      	cmp	r4, #32
 800305c:	d004      	beq.n	8003068 <__aeabi_d2f+0xbc>
 800305e:	4a15      	ldr	r2, [pc, #84]	; (80030b4 <__aeabi_d2f+0x108>)
 8003060:	4694      	mov	ip, r2
 8003062:	4463      	add	r3, ip
 8003064:	4098      	lsls	r0, r3
 8003066:	4305      	orrs	r5, r0
 8003068:	002a      	movs	r2, r5
 800306a:	1e53      	subs	r3, r2, #1
 800306c:	419a      	sbcs	r2, r3
 800306e:	4332      	orrs	r2, r6
 8003070:	2600      	movs	r6, #0
 8003072:	0753      	lsls	r3, r2, #29
 8003074:	d1ce      	bne.n	8003014 <__aeabi_d2f+0x68>
 8003076:	2480      	movs	r4, #128	; 0x80
 8003078:	0013      	movs	r3, r2
 800307a:	04e4      	lsls	r4, r4, #19
 800307c:	2001      	movs	r0, #1
 800307e:	4023      	ands	r3, r4
 8003080:	4222      	tst	r2, r4
 8003082:	d1d3      	bne.n	800302c <__aeabi_d2f+0x80>
 8003084:	e7b0      	b.n	8002fe8 <__aeabi_d2f+0x3c>
 8003086:	2300      	movs	r3, #0
 8003088:	e7ad      	b.n	8002fe6 <__aeabi_d2f+0x3a>
 800308a:	4a0b      	ldr	r2, [pc, #44]	; (80030b8 <__aeabi_d2f+0x10c>)
 800308c:	4694      	mov	ip, r2
 800308e:	002a      	movs	r2, r5
 8003090:	40e2      	lsrs	r2, r4
 8003092:	0014      	movs	r4, r2
 8003094:	002a      	movs	r2, r5
 8003096:	4463      	add	r3, ip
 8003098:	409a      	lsls	r2, r3
 800309a:	4098      	lsls	r0, r3
 800309c:	1e55      	subs	r5, r2, #1
 800309e:	41aa      	sbcs	r2, r5
 80030a0:	4302      	orrs	r2, r0
 80030a2:	4322      	orrs	r2, r4
 80030a4:	e7e4      	b.n	8003070 <__aeabi_d2f+0xc4>
 80030a6:	0033      	movs	r3, r6
 80030a8:	e79e      	b.n	8002fe8 <__aeabi_d2f+0x3c>
 80030aa:	46c0      	nop			; (mov r8, r8)
 80030ac:	000007fe 	.word	0x000007fe
 80030b0:	fffffc80 	.word	0xfffffc80
 80030b4:	fffffca2 	.word	0xfffffca2
 80030b8:	fffffc82 	.word	0xfffffc82

080030bc <__clzsi2>:
 80030bc:	211c      	movs	r1, #28
 80030be:	2301      	movs	r3, #1
 80030c0:	041b      	lsls	r3, r3, #16
 80030c2:	4298      	cmp	r0, r3
 80030c4:	d301      	bcc.n	80030ca <__clzsi2+0xe>
 80030c6:	0c00      	lsrs	r0, r0, #16
 80030c8:	3910      	subs	r1, #16
 80030ca:	0a1b      	lsrs	r3, r3, #8
 80030cc:	4298      	cmp	r0, r3
 80030ce:	d301      	bcc.n	80030d4 <__clzsi2+0x18>
 80030d0:	0a00      	lsrs	r0, r0, #8
 80030d2:	3908      	subs	r1, #8
 80030d4:	091b      	lsrs	r3, r3, #4
 80030d6:	4298      	cmp	r0, r3
 80030d8:	d301      	bcc.n	80030de <__clzsi2+0x22>
 80030da:	0900      	lsrs	r0, r0, #4
 80030dc:	3904      	subs	r1, #4
 80030de:	a202      	add	r2, pc, #8	; (adr r2, 80030e8 <__clzsi2+0x2c>)
 80030e0:	5c10      	ldrb	r0, [r2, r0]
 80030e2:	1840      	adds	r0, r0, r1
 80030e4:	4770      	bx	lr
 80030e6:	46c0      	nop			; (mov r8, r8)
 80030e8:	02020304 	.word	0x02020304
 80030ec:	01010101 	.word	0x01010101
	...

080030f8 <_ZN6I2Cdev7readBitEhhhPhtPv>:
 * @param bitNum Bit position to read (0-7)
 * @param data Container for single bit value
 * @param timeout Optional read timeout in milliseconds (0 to disable, leave off to use default class value in I2Cdev::readTimeout)
 * @return Status of read operation (true = success)
 */
int8_t I2Cdev::readBit(uint8_t devAddr, uint8_t regAddr, uint8_t bitNum, uint8_t *data, uint16_t timeout, void *wireObj) {
 80030f8:	b5b0      	push	{r4, r5, r7, lr}
 80030fa:	b086      	sub	sp, #24
 80030fc:	af02      	add	r7, sp, #8
 80030fe:	0004      	movs	r4, r0
 8003100:	0008      	movs	r0, r1
 8003102:	0011      	movs	r1, r2
 8003104:	603b      	str	r3, [r7, #0]
 8003106:	1dfb      	adds	r3, r7, #7
 8003108:	1c22      	adds	r2, r4, #0
 800310a:	701a      	strb	r2, [r3, #0]
 800310c:	1dbb      	adds	r3, r7, #6
 800310e:	1c02      	adds	r2, r0, #0
 8003110:	701a      	strb	r2, [r3, #0]
 8003112:	1d7b      	adds	r3, r7, #5
 8003114:	1c0a      	adds	r2, r1, #0
 8003116:	701a      	strb	r2, [r3, #0]
    uint8_t b;
    uint8_t count = readByte(devAddr, regAddr, &b, timeout, wireObj);
 8003118:	2320      	movs	r3, #32
 800311a:	18fb      	adds	r3, r7, r3
 800311c:	881c      	ldrh	r4, [r3, #0]
 800311e:	250e      	movs	r5, #14
 8003120:	197a      	adds	r2, r7, r5
 8003122:	1dbb      	adds	r3, r7, #6
 8003124:	7819      	ldrb	r1, [r3, #0]
 8003126:	1dfb      	adds	r3, r7, #7
 8003128:	7818      	ldrb	r0, [r3, #0]
 800312a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800312c:	9300      	str	r3, [sp, #0]
 800312e:	0023      	movs	r3, r4
 8003130:	f000 f81a 	bl	8003168 <_ZN6I2Cdev8readByteEhhPhtPv>
 8003134:	0003      	movs	r3, r0
 8003136:	001a      	movs	r2, r3
 8003138:	210f      	movs	r1, #15
 800313a:	187b      	adds	r3, r7, r1
 800313c:	701a      	strb	r2, [r3, #0]
    *data = b & (1 << bitNum);
 800313e:	1d7b      	adds	r3, r7, #5
 8003140:	781b      	ldrb	r3, [r3, #0]
 8003142:	2201      	movs	r2, #1
 8003144:	409a      	lsls	r2, r3
 8003146:	0013      	movs	r3, r2
 8003148:	b25b      	sxtb	r3, r3
 800314a:	197a      	adds	r2, r7, r5
 800314c:	7812      	ldrb	r2, [r2, #0]
 800314e:	b252      	sxtb	r2, r2
 8003150:	4013      	ands	r3, r2
 8003152:	b25b      	sxtb	r3, r3
 8003154:	b2da      	uxtb	r2, r3
 8003156:	683b      	ldr	r3, [r7, #0]
 8003158:	701a      	strb	r2, [r3, #0]
    return count;
 800315a:	187b      	adds	r3, r7, r1
 800315c:	781b      	ldrb	r3, [r3, #0]
 800315e:	b25b      	sxtb	r3, r3
}
 8003160:	0018      	movs	r0, r3
 8003162:	46bd      	mov	sp, r7
 8003164:	b004      	add	sp, #16
 8003166:	bdb0      	pop	{r4, r5, r7, pc}

08003168 <_ZN6I2Cdev8readByteEhhPhtPv>:
 * @param regAddr Register regAddr to read from
 * @param data Container for byte value read from device
 * @param timeout Optional read timeout in milliseconds (0 to disable, leave off to use default class value in I2Cdev::readTimeout)
 * @return Status of read operation (true = success)
 */
int8_t I2Cdev::readByte(uint8_t devAddr, uint8_t regAddr, uint8_t *data, uint16_t timeout, void *wireObj) {
 8003168:	b590      	push	{r4, r7, lr}
 800316a:	b085      	sub	sp, #20
 800316c:	af02      	add	r7, sp, #8
 800316e:	0004      	movs	r4, r0
 8003170:	0008      	movs	r0, r1
 8003172:	603a      	str	r2, [r7, #0]
 8003174:	0019      	movs	r1, r3
 8003176:	1dfb      	adds	r3, r7, #7
 8003178:	1c22      	adds	r2, r4, #0
 800317a:	701a      	strb	r2, [r3, #0]
 800317c:	1dbb      	adds	r3, r7, #6
 800317e:	1c02      	adds	r2, r0, #0
 8003180:	701a      	strb	r2, [r3, #0]
 8003182:	1d3b      	adds	r3, r7, #4
 8003184:	1c0a      	adds	r2, r1, #0
 8003186:	801a      	strh	r2, [r3, #0]
    return readBytes(devAddr, regAddr, 1, data, timeout, wireObj);
 8003188:	683a      	ldr	r2, [r7, #0]
 800318a:	1dbb      	adds	r3, r7, #6
 800318c:	7819      	ldrb	r1, [r3, #0]
 800318e:	1dfb      	adds	r3, r7, #7
 8003190:	7818      	ldrb	r0, [r3, #0]
 8003192:	69bb      	ldr	r3, [r7, #24]
 8003194:	9301      	str	r3, [sp, #4]
 8003196:	1d3b      	adds	r3, r7, #4
 8003198:	881b      	ldrh	r3, [r3, #0]
 800319a:	9300      	str	r3, [sp, #0]
 800319c:	0013      	movs	r3, r2
 800319e:	2201      	movs	r2, #1
 80031a0:	f000 f806 	bl	80031b0 <_ZN6I2Cdev9readBytesEhhhPhtPv>
 80031a4:	0003      	movs	r3, r0
}
 80031a6:	0018      	movs	r0, r3
 80031a8:	46bd      	mov	sp, r7
 80031aa:	b003      	add	sp, #12
 80031ac:	bd90      	pop	{r4, r7, pc}
	...

080031b0 <_ZN6I2Cdev9readBytesEhhhPhtPv>:
 * @param length Number of bytes to read
 * @param data Buffer to store read data in
 * @param timeout Optional read timeout in milliseconds (0 to disable, leave off to use default class value in I2Cdev::readTimeout)
 * @return Number of bytes read (-1 indicates failure)
 */
int8_t I2Cdev::readBytes(uint8_t devAddr, uint8_t regAddr, uint8_t length, uint8_t *data, uint16_t timeout, void *wireObj) {
 80031b0:	b5b0      	push	{r4, r5, r7, lr}
 80031b2:	b086      	sub	sp, #24
 80031b4:	af02      	add	r7, sp, #8
 80031b6:	0004      	movs	r4, r0
 80031b8:	0008      	movs	r0, r1
 80031ba:	0011      	movs	r1, r2
 80031bc:	603b      	str	r3, [r7, #0]
 80031be:	1dfb      	adds	r3, r7, #7
 80031c0:	1c22      	adds	r2, r4, #0
 80031c2:	701a      	strb	r2, [r3, #0]
 80031c4:	1dbb      	adds	r3, r7, #6
 80031c6:	1c02      	adds	r2, r0, #0
 80031c8:	701a      	strb	r2, [r3, #0]
 80031ca:	1d7b      	adds	r3, r7, #5
 80031cc:	1c0a      	adds	r2, r1, #0
 80031ce:	701a      	strb	r2, [r3, #0]
	uint8_t ptr[1];
	ptr[0] = regAddr;
 80031d0:	200c      	movs	r0, #12
 80031d2:	183b      	adds	r3, r7, r0
 80031d4:	1dba      	adds	r2, r7, #6
 80031d6:	7812      	ldrb	r2, [r2, #0]
 80031d8:	701a      	strb	r2, [r3, #0]
	HAL_I2C_Master_Transmit (&hi2c1, devAddr , ptr, 1, timeout);
 80031da:	1dfb      	adds	r3, r7, #7
 80031dc:	781b      	ldrb	r3, [r3, #0]
 80031de:	b299      	uxth	r1, r3
 80031e0:	2520      	movs	r5, #32
 80031e2:	197b      	adds	r3, r7, r5
 80031e4:	881b      	ldrh	r3, [r3, #0]
 80031e6:	183a      	adds	r2, r7, r0
 80031e8:	480c      	ldr	r0, [pc, #48]	; (800321c <_ZN6I2Cdev9readBytesEhhhPhtPv+0x6c>)
 80031ea:	9300      	str	r3, [sp, #0]
 80031ec:	2301      	movs	r3, #1
 80031ee:	f004 f9f7 	bl	80075e0 <HAL_I2C_Master_Transmit>
	HAL_I2C_Master_Receive (&hi2c1, devAddr, data, length , timeout);
 80031f2:	1dfb      	adds	r3, r7, #7
 80031f4:	781b      	ldrb	r3, [r3, #0]
 80031f6:	b299      	uxth	r1, r3
 80031f8:	1d7b      	adds	r3, r7, #5
 80031fa:	781b      	ldrb	r3, [r3, #0]
 80031fc:	b29c      	uxth	r4, r3
 80031fe:	197b      	adds	r3, r7, r5
 8003200:	881b      	ldrh	r3, [r3, #0]
 8003202:	683a      	ldr	r2, [r7, #0]
 8003204:	4805      	ldr	r0, [pc, #20]	; (800321c <_ZN6I2Cdev9readBytesEhhhPhtPv+0x6c>)
 8003206:	9300      	str	r3, [sp, #0]
 8003208:	0023      	movs	r3, r4
 800320a:	f004 faf1 	bl	80077f0 <HAL_I2C_Master_Receive>
    return length;
 800320e:	1d7b      	adds	r3, r7, #5
 8003210:	781b      	ldrb	r3, [r3, #0]
 8003212:	b25b      	sxtb	r3, r3
}
 8003214:	0018      	movs	r0, r3
 8003216:	46bd      	mov	sp, r7
 8003218:	b004      	add	sp, #16
 800321a:	bdb0      	pop	{r4, r5, r7, pc}
 800321c:	200001e8 	.word	0x200001e8

08003220 <_ZN6I2Cdev8writeBitEhhhhPv>:
 * @param regAddr Register regAddr to write to
 * @param bitNum Bit position to write (0-7)
 * @param value New bit value to write
 * @return Status of operation (true = success)
 */
bool I2Cdev::writeBit(uint8_t devAddr, uint8_t regAddr, uint8_t bitNum, uint8_t data, void *wireObj) {
 8003220:	b5b0      	push	{r4, r5, r7, lr}
 8003222:	b086      	sub	sp, #24
 8003224:	af02      	add	r7, sp, #8
 8003226:	0005      	movs	r5, r0
 8003228:	000c      	movs	r4, r1
 800322a:	0010      	movs	r0, r2
 800322c:	0019      	movs	r1, r3
 800322e:	1dfb      	adds	r3, r7, #7
 8003230:	1c2a      	adds	r2, r5, #0
 8003232:	701a      	strb	r2, [r3, #0]
 8003234:	1dbb      	adds	r3, r7, #6
 8003236:	1c22      	adds	r2, r4, #0
 8003238:	701a      	strb	r2, [r3, #0]
 800323a:	1d7b      	adds	r3, r7, #5
 800323c:	1c02      	adds	r2, r0, #0
 800323e:	701a      	strb	r2, [r3, #0]
 8003240:	1d3b      	adds	r3, r7, #4
 8003242:	1c0a      	adds	r2, r1, #0
 8003244:	701a      	strb	r2, [r3, #0]
    uint8_t b;
    readByte(devAddr, regAddr, &b, I2Cdev::readTimeout, wireObj);
 8003246:	4b1f      	ldr	r3, [pc, #124]	; (80032c4 <_ZN6I2Cdev8writeBitEhhhhPv+0xa4>)
 8003248:	881c      	ldrh	r4, [r3, #0]
 800324a:	250f      	movs	r5, #15
 800324c:	197a      	adds	r2, r7, r5
 800324e:	1dbb      	adds	r3, r7, #6
 8003250:	7819      	ldrb	r1, [r3, #0]
 8003252:	1dfb      	adds	r3, r7, #7
 8003254:	7818      	ldrb	r0, [r3, #0]
 8003256:	6a3b      	ldr	r3, [r7, #32]
 8003258:	9300      	str	r3, [sp, #0]
 800325a:	0023      	movs	r3, r4
 800325c:	f7ff ff84 	bl	8003168 <_ZN6I2Cdev8readByteEhhPhtPv>
    b = (data != 0) ? (b | (1 << bitNum)) : (b & ~(1 << bitNum));
 8003260:	1d3b      	adds	r3, r7, #4
 8003262:	781b      	ldrb	r3, [r3, #0]
 8003264:	2b00      	cmp	r3, #0
 8003266:	d00c      	beq.n	8003282 <_ZN6I2Cdev8writeBitEhhhhPv+0x62>
 8003268:	1d7b      	adds	r3, r7, #5
 800326a:	781b      	ldrb	r3, [r3, #0]
 800326c:	2201      	movs	r2, #1
 800326e:	409a      	lsls	r2, r3
 8003270:	0013      	movs	r3, r2
 8003272:	b25a      	sxtb	r2, r3
 8003274:	197b      	adds	r3, r7, r5
 8003276:	781b      	ldrb	r3, [r3, #0]
 8003278:	b25b      	sxtb	r3, r3
 800327a:	4313      	orrs	r3, r2
 800327c:	b25b      	sxtb	r3, r3
 800327e:	b2db      	uxtb	r3, r3
 8003280:	e00e      	b.n	80032a0 <_ZN6I2Cdev8writeBitEhhhhPv+0x80>
 8003282:	1d7b      	adds	r3, r7, #5
 8003284:	781b      	ldrb	r3, [r3, #0]
 8003286:	2201      	movs	r2, #1
 8003288:	409a      	lsls	r2, r3
 800328a:	0013      	movs	r3, r2
 800328c:	b25b      	sxtb	r3, r3
 800328e:	43db      	mvns	r3, r3
 8003290:	b25b      	sxtb	r3, r3
 8003292:	220f      	movs	r2, #15
 8003294:	18ba      	adds	r2, r7, r2
 8003296:	7812      	ldrb	r2, [r2, #0]
 8003298:	b252      	sxtb	r2, r2
 800329a:	4013      	ands	r3, r2
 800329c:	b25b      	sxtb	r3, r3
 800329e:	b2db      	uxtb	r3, r3
 80032a0:	210f      	movs	r1, #15
 80032a2:	187a      	adds	r2, r7, r1
 80032a4:	7013      	strb	r3, [r2, #0]
    return writeByte(devAddr, regAddr, b, wireObj);
 80032a6:	187b      	adds	r3, r7, r1
 80032a8:	781a      	ldrb	r2, [r3, #0]
 80032aa:	6a3c      	ldr	r4, [r7, #32]
 80032ac:	1dbb      	adds	r3, r7, #6
 80032ae:	7819      	ldrb	r1, [r3, #0]
 80032b0:	1dfb      	adds	r3, r7, #7
 80032b2:	7818      	ldrb	r0, [r3, #0]
 80032b4:	0023      	movs	r3, r4
 80032b6:	f000 f879 	bl	80033ac <_ZN6I2Cdev9writeByteEhhhPv>
 80032ba:	0003      	movs	r3, r0
}
 80032bc:	0018      	movs	r0, r3
 80032be:	46bd      	mov	sp, r7
 80032c0:	b004      	add	sp, #16
 80032c2:	bdb0      	pop	{r4, r5, r7, pc}
 80032c4:	20000000 	.word	0x20000000

080032c8 <_ZN6I2Cdev9writeBitsEhhhhhPv>:
 * @param bitStart First bit position to write (0-7)
 * @param length Number of bits to write (not more than 8)
 * @param data Right-aligned value to write
 * @return Status of operation (true = success)
 */
bool I2Cdev::writeBits(uint8_t devAddr, uint8_t regAddr, uint8_t bitStart, uint8_t length, uint8_t data, void *wireObj) {
 80032c8:	b5b0      	push	{r4, r5, r7, lr}
 80032ca:	b086      	sub	sp, #24
 80032cc:	af02      	add	r7, sp, #8
 80032ce:	0005      	movs	r5, r0
 80032d0:	000c      	movs	r4, r1
 80032d2:	0010      	movs	r0, r2
 80032d4:	0019      	movs	r1, r3
 80032d6:	1dfb      	adds	r3, r7, #7
 80032d8:	1c2a      	adds	r2, r5, #0
 80032da:	701a      	strb	r2, [r3, #0]
 80032dc:	1dbb      	adds	r3, r7, #6
 80032de:	1c22      	adds	r2, r4, #0
 80032e0:	701a      	strb	r2, [r3, #0]
 80032e2:	1d7b      	adds	r3, r7, #5
 80032e4:	1c02      	adds	r2, r0, #0
 80032e6:	701a      	strb	r2, [r3, #0]
 80032e8:	1d3b      	adds	r3, r7, #4
 80032ea:	1c0a      	adds	r2, r1, #0
 80032ec:	701a      	strb	r2, [r3, #0]
    // 00011100 mask byte
    // 10101111 original value (sample)
    // 10100011 original & ~mask
    // 10101011 masked | value
    uint8_t b;
    if (readByte(devAddr, regAddr, &b, I2Cdev::readTimeout, wireObj) != 0) {
 80032ee:	4b2e      	ldr	r3, [pc, #184]	; (80033a8 <_ZN6I2Cdev9writeBitsEhhhhhPv+0xe0>)
 80032f0:	881c      	ldrh	r4, [r3, #0]
 80032f2:	250e      	movs	r5, #14
 80032f4:	197a      	adds	r2, r7, r5
 80032f6:	1dbb      	adds	r3, r7, #6
 80032f8:	7819      	ldrb	r1, [r3, #0]
 80032fa:	1dfb      	adds	r3, r7, #7
 80032fc:	7818      	ldrb	r0, [r3, #0]
 80032fe:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003300:	9300      	str	r3, [sp, #0]
 8003302:	0023      	movs	r3, r4
 8003304:	f7ff ff30 	bl	8003168 <_ZN6I2Cdev8readByteEhhPhtPv>
 8003308:	0003      	movs	r3, r0
 800330a:	1e5a      	subs	r2, r3, #1
 800330c:	4193      	sbcs	r3, r2
 800330e:	b2db      	uxtb	r3, r3
 8003310:	2b00      	cmp	r3, #0
 8003312:	d043      	beq.n	800339c <_ZN6I2Cdev9writeBitsEhhhhhPv+0xd4>
        uint8_t mask = ((1 << length) - 1) << (bitStart - length + 1);
 8003314:	1d3b      	adds	r3, r7, #4
 8003316:	781b      	ldrb	r3, [r3, #0]
 8003318:	2201      	movs	r2, #1
 800331a:	409a      	lsls	r2, r3
 800331c:	0013      	movs	r3, r2
 800331e:	1e5a      	subs	r2, r3, #1
 8003320:	1d7b      	adds	r3, r7, #5
 8003322:	7819      	ldrb	r1, [r3, #0]
 8003324:	1d3b      	adds	r3, r7, #4
 8003326:	781b      	ldrb	r3, [r3, #0]
 8003328:	1acb      	subs	r3, r1, r3
 800332a:	3301      	adds	r3, #1
 800332c:	409a      	lsls	r2, r3
 800332e:	240f      	movs	r4, #15
 8003330:	193b      	adds	r3, r7, r4
 8003332:	701a      	strb	r2, [r3, #0]
        data <<= (bitStart - length + 1); // shift data into correct position
 8003334:	2020      	movs	r0, #32
 8003336:	183b      	adds	r3, r7, r0
 8003338:	781a      	ldrb	r2, [r3, #0]
 800333a:	1d7b      	adds	r3, r7, #5
 800333c:	7819      	ldrb	r1, [r3, #0]
 800333e:	1d3b      	adds	r3, r7, #4
 8003340:	781b      	ldrb	r3, [r3, #0]
 8003342:	1acb      	subs	r3, r1, r3
 8003344:	3301      	adds	r3, #1
 8003346:	409a      	lsls	r2, r3
 8003348:	183b      	adds	r3, r7, r0
 800334a:	701a      	strb	r2, [r3, #0]
        data &= mask; // zero all non-important bits in data
 800334c:	183b      	adds	r3, r7, r0
 800334e:	183a      	adds	r2, r7, r0
 8003350:	1939      	adds	r1, r7, r4
 8003352:	7812      	ldrb	r2, [r2, #0]
 8003354:	7809      	ldrb	r1, [r1, #0]
 8003356:	400a      	ands	r2, r1
 8003358:	701a      	strb	r2, [r3, #0]
        b &= ~(mask); // zero all important bits in existing byte
 800335a:	193b      	adds	r3, r7, r4
 800335c:	781b      	ldrb	r3, [r3, #0]
 800335e:	b25b      	sxtb	r3, r3
 8003360:	43db      	mvns	r3, r3
 8003362:	b25b      	sxtb	r3, r3
 8003364:	197a      	adds	r2, r7, r5
 8003366:	7812      	ldrb	r2, [r2, #0]
 8003368:	b252      	sxtb	r2, r2
 800336a:	4013      	ands	r3, r2
 800336c:	b25b      	sxtb	r3, r3
 800336e:	b2da      	uxtb	r2, r3
 8003370:	197b      	adds	r3, r7, r5
 8003372:	701a      	strb	r2, [r3, #0]
        b |= data; // combine data with existing byte
 8003374:	197b      	adds	r3, r7, r5
 8003376:	781a      	ldrb	r2, [r3, #0]
 8003378:	183b      	adds	r3, r7, r0
 800337a:	781b      	ldrb	r3, [r3, #0]
 800337c:	4313      	orrs	r3, r2
 800337e:	b2da      	uxtb	r2, r3
 8003380:	197b      	adds	r3, r7, r5
 8003382:	701a      	strb	r2, [r3, #0]
        return writeByte(devAddr, regAddr, b, wireObj);
 8003384:	197b      	adds	r3, r7, r5
 8003386:	781a      	ldrb	r2, [r3, #0]
 8003388:	6a7c      	ldr	r4, [r7, #36]	; 0x24
 800338a:	1dbb      	adds	r3, r7, #6
 800338c:	7819      	ldrb	r1, [r3, #0]
 800338e:	1dfb      	adds	r3, r7, #7
 8003390:	7818      	ldrb	r0, [r3, #0]
 8003392:	0023      	movs	r3, r4
 8003394:	f000 f80a 	bl	80033ac <_ZN6I2Cdev9writeByteEhhhPv>
 8003398:	0003      	movs	r3, r0
 800339a:	e000      	b.n	800339e <_ZN6I2Cdev9writeBitsEhhhhhPv+0xd6>
    } else {
        return false;
 800339c:	2300      	movs	r3, #0
    }
}
 800339e:	0018      	movs	r0, r3
 80033a0:	46bd      	mov	sp, r7
 80033a2:	b004      	add	sp, #16
 80033a4:	bdb0      	pop	{r4, r5, r7, pc}
 80033a6:	46c0      	nop			; (mov r8, r8)
 80033a8:	20000000 	.word	0x20000000

080033ac <_ZN6I2Cdev9writeByteEhhhPv>:
 * @param devAddr I2C slave device address
 * @param regAddr Register address to write to
 * @param data New byte value to write
 * @return Status of operation (true = success)
 */
bool I2Cdev::writeByte(uint8_t devAddr, uint8_t regAddr, uint8_t data, void *wireObj) {
 80033ac:	b590      	push	{r4, r7, lr}
 80033ae:	b085      	sub	sp, #20
 80033b0:	af02      	add	r7, sp, #8
 80033b2:	0004      	movs	r4, r0
 80033b4:	0008      	movs	r0, r1
 80033b6:	0011      	movs	r1, r2
 80033b8:	603b      	str	r3, [r7, #0]
 80033ba:	1dfb      	adds	r3, r7, #7
 80033bc:	1c22      	adds	r2, r4, #0
 80033be:	701a      	strb	r2, [r3, #0]
 80033c0:	1dbb      	adds	r3, r7, #6
 80033c2:	1c02      	adds	r2, r0, #0
 80033c4:	701a      	strb	r2, [r3, #0]
 80033c6:	1d7b      	adds	r3, r7, #5
 80033c8:	1c0a      	adds	r2, r1, #0
 80033ca:	701a      	strb	r2, [r3, #0]
    return writeBytes(devAddr, regAddr, 1, &data, wireObj);
 80033cc:	1d7a      	adds	r2, r7, #5
 80033ce:	1dbb      	adds	r3, r7, #6
 80033d0:	7819      	ldrb	r1, [r3, #0]
 80033d2:	1dfb      	adds	r3, r7, #7
 80033d4:	7818      	ldrb	r0, [r3, #0]
 80033d6:	683b      	ldr	r3, [r7, #0]
 80033d8:	9300      	str	r3, [sp, #0]
 80033da:	0013      	movs	r3, r2
 80033dc:	2201      	movs	r2, #1
 80033de:	f000 f805 	bl	80033ec <_ZN6I2Cdev10writeBytesEhhhPhPv>
 80033e2:	0003      	movs	r3, r0
}
 80033e4:	0018      	movs	r0, r3
 80033e6:	46bd      	mov	sp, r7
 80033e8:	b003      	add	sp, #12
 80033ea:	bd90      	pop	{r4, r7, pc}

080033ec <_ZN6I2Cdev10writeBytesEhhhPhPv>:
 * @param regAddr First register address to write to
 * @param length Number of bytes to write
 * @param data Buffer to copy new data from
 * @return Status of operation (true = success)
 */
bool I2Cdev::writeBytes(uint8_t devAddr, uint8_t regAddr, uint8_t length, uint8_t* data, void *wireObj) {
 80033ec:	b590      	push	{r4, r7, lr}
 80033ee:	b089      	sub	sp, #36	; 0x24
 80033f0:	af04      	add	r7, sp, #16
 80033f2:	0004      	movs	r4, r0
 80033f4:	0008      	movs	r0, r1
 80033f6:	0011      	movs	r1, r2
 80033f8:	603b      	str	r3, [r7, #0]
 80033fa:	1dfb      	adds	r3, r7, #7
 80033fc:	1c22      	adds	r2, r4, #0
 80033fe:	701a      	strb	r2, [r3, #0]
 8003400:	1dbb      	adds	r3, r7, #6
 8003402:	1c02      	adds	r2, r0, #0
 8003404:	701a      	strb	r2, [r3, #0]
 8003406:	1d7b      	adds	r3, r7, #5
 8003408:	1c0a      	adds	r2, r1, #0
 800340a:	701a      	strb	r2, [r3, #0]
	HAL_I2C_Mem_Write (&hi2c1, devAddr , regAddr, I2C_MEMADD_SIZE_8BIT, data, length, HAL_MAX_DELAY);
 800340c:	1dfb      	adds	r3, r7, #7
 800340e:	781b      	ldrb	r3, [r3, #0]
 8003410:	b299      	uxth	r1, r3
 8003412:	1dbb      	adds	r3, r7, #6
 8003414:	781b      	ldrb	r3, [r3, #0]
 8003416:	b29c      	uxth	r4, r3
 8003418:	1d7b      	adds	r3, r7, #5
 800341a:	781b      	ldrb	r3, [r3, #0]
 800341c:	b29b      	uxth	r3, r3
 800341e:	480c      	ldr	r0, [pc, #48]	; (8003450 <_ZN6I2Cdev10writeBytesEhhhPhPv+0x64>)
 8003420:	2201      	movs	r2, #1
 8003422:	4252      	negs	r2, r2
 8003424:	9202      	str	r2, [sp, #8]
 8003426:	9301      	str	r3, [sp, #4]
 8003428:	683b      	ldr	r3, [r7, #0]
 800342a:	9300      	str	r3, [sp, #0]
 800342c:	2301      	movs	r3, #1
 800342e:	0022      	movs	r2, r4
 8003430:	f004 fae6 	bl	8007a00 <HAL_I2C_Mem_Write>
	//HAL_I2C_Master_Transmit (&hi2c1, devAddr , &regAddr, 1, HAL_MAX_DELAY);
	//HAL_I2C_Master_Transmit (&hi2c1, devAddr , data, length, HAL_MAX_DELAY);
    uint8_t status = 0;
 8003434:	210f      	movs	r1, #15
 8003436:	187b      	adds	r3, r7, r1
 8003438:	2200      	movs	r2, #0
 800343a:	701a      	strb	r2, [r3, #0]
    return status == 0;
 800343c:	187b      	adds	r3, r7, r1
 800343e:	781b      	ldrb	r3, [r3, #0]
 8003440:	425a      	negs	r2, r3
 8003442:	4153      	adcs	r3, r2
 8003444:	b2db      	uxtb	r3, r3
}
 8003446:	0018      	movs	r0, r3
 8003448:	46bd      	mov	sp, r7
 800344a:	b005      	add	sp, #20
 800344c:	bd90      	pop	{r4, r7, pc}
 800344e:	46c0      	nop			; (mov r8, r8)
 8003450:	200001e8 	.word	0x200001e8

08003454 <_ZN12MPU6050_BaseC1EhPv>:
 * @param address I2C address, uses default I2C address if none is specified
 * @see MPU6050_DEFAULT_ADDRESS
 * @see MPU6050_ADDRESS_AD0_LOW
 * @see MPU6050_ADDRESS_AD0_HIGH
 */
MPU6050_Base::MPU6050_Base(uint8_t address, void *wireObj):devAddr(address), wireObj(wireObj) {
 8003454:	b580      	push	{r7, lr}
 8003456:	b084      	sub	sp, #16
 8003458:	af00      	add	r7, sp, #0
 800345a:	60f8      	str	r0, [r7, #12]
 800345c:	607a      	str	r2, [r7, #4]
 800345e:	200b      	movs	r0, #11
 8003460:	183b      	adds	r3, r7, r0
 8003462:	1c0a      	adds	r2, r1, #0
 8003464:	701a      	strb	r2, [r3, #0]
 8003466:	68fb      	ldr	r3, [r7, #12]
 8003468:	183a      	adds	r2, r7, r0
 800346a:	7812      	ldrb	r2, [r2, #0]
 800346c:	701a      	strb	r2, [r3, #0]
 800346e:	68fb      	ldr	r3, [r7, #12]
 8003470:	687a      	ldr	r2, [r7, #4]
 8003472:	605a      	str	r2, [r3, #4]
 8003474:	68fb      	ldr	r3, [r7, #12]
 8003476:	4a03      	ldr	r2, [pc, #12]	; (8003484 <_ZN12MPU6050_BaseC1EhPv+0x30>)
 8003478:	619a      	str	r2, [r3, #24]
}
 800347a:	68fb      	ldr	r3, [r7, #12]
 800347c:	0018      	movs	r0, r3
 800347e:	46bd      	mov	sp, r7
 8003480:	b004      	add	sp, #16
 8003482:	bd80      	pop	{r7, pc}
 8003484:	00002af8 	.word	0x00002af8

08003488 <_ZN12MPU6050_Base10initializeEv>:
 * after start-up). This function also sets both the accelerometer and the gyroscope
 * to their most sensitive settings, namely +/- 2g and +/- 250 degrees/sec, and sets
 * the clock source to use the X Gyro for reference, which is slightly better than
 * the default internal clock source.
 */
void MPU6050_Base::initialize() {
 8003488:	b580      	push	{r7, lr}
 800348a:	b082      	sub	sp, #8
 800348c:	af00      	add	r7, sp, #0
 800348e:	6078      	str	r0, [r7, #4]
    setClockSource(MPU6050_CLOCK_PLL_XGYRO);
 8003490:	687b      	ldr	r3, [r7, #4]
 8003492:	2101      	movs	r1, #1
 8003494:	0018      	movs	r0, r3
 8003496:	f000 f8de 	bl	8003656 <_ZN12MPU6050_Base14setClockSourceEh>
    setFullScaleGyroRange(MPU6050_GYRO_FS_250);
 800349a:	687b      	ldr	r3, [r7, #4]
 800349c:	2100      	movs	r1, #0
 800349e:	0018      	movs	r0, r3
 80034a0:	f000 f94b 	bl	800373a <_ZN12MPU6050_Base21setFullScaleGyroRangeEh>
    setFullScaleAccelRange(MPU6050_ACCEL_FS_2);
 80034a4:	687b      	ldr	r3, [r7, #4]
 80034a6:	2100      	movs	r1, #0
 80034a8:	0018      	movs	r0, r3
 80034aa:	f000 f809 	bl	80034c0 <_ZN12MPU6050_Base22setFullScaleAccelRangeEh>
    setSleepEnabled(false); // thanks to Jack Elston for pointing this one out!
 80034ae:	687b      	ldr	r3, [r7, #4]
 80034b0:	2100      	movs	r1, #0
 80034b2:	0018      	movs	r0, r3
 80034b4:	f000 f81c 	bl	80034f0 <_ZN12MPU6050_Base15setSleepEnabledEb>
}
 80034b8:	46c0      	nop			; (mov r8, r8)
 80034ba:	46bd      	mov	sp, r7
 80034bc:	b002      	add	sp, #8
 80034be:	bd80      	pop	{r7, pc}

080034c0 <_ZN12MPU6050_Base22setFullScaleAccelRangeEh>:

/** Set full-scale accelerometer range.
 * @param range New full-scale accelerometer range setting
 * @see getFullScaleAccelRange()
 */
void MPU6050_Base::setFullScaleAccelRange(uint8_t range) {
 80034c0:	b580      	push	{r7, lr}
 80034c2:	b084      	sub	sp, #16
 80034c4:	af02      	add	r7, sp, #8
 80034c6:	6078      	str	r0, [r7, #4]
 80034c8:	000a      	movs	r2, r1
 80034ca:	1cfb      	adds	r3, r7, #3
 80034cc:	701a      	strb	r2, [r3, #0]
    I2Cdev::writeBits(devAddr, MPU6050_RA_ACCEL_CONFIG, MPU6050_ACONFIG_AFS_SEL_BIT, MPU6050_ACONFIG_AFS_SEL_LENGTH, range, wireObj);
 80034ce:	687b      	ldr	r3, [r7, #4]
 80034d0:	7818      	ldrb	r0, [r3, #0]
 80034d2:	687b      	ldr	r3, [r7, #4]
 80034d4:	685b      	ldr	r3, [r3, #4]
 80034d6:	9301      	str	r3, [sp, #4]
 80034d8:	1cfb      	adds	r3, r7, #3
 80034da:	781b      	ldrb	r3, [r3, #0]
 80034dc:	9300      	str	r3, [sp, #0]
 80034de:	2302      	movs	r3, #2
 80034e0:	2204      	movs	r2, #4
 80034e2:	211c      	movs	r1, #28
 80034e4:	f7ff fef0 	bl	80032c8 <_ZN6I2Cdev9writeBitsEhhhhhPv>
}
 80034e8:	46c0      	nop			; (mov r8, r8)
 80034ea:	46bd      	mov	sp, r7
 80034ec:	b002      	add	sp, #8
 80034ee:	bd80      	pop	{r7, pc}

080034f0 <_ZN12MPU6050_Base15setSleepEnabledEb>:
 * @param enabled New sleep mode enabled status
 * @see getSleepEnabled()
 * @see MPU6050_RA_PWR_MGMT_1
 * @see MPU6050_PWR1_SLEEP_BIT
 */
void MPU6050_Base::setSleepEnabled(bool enabled) {
 80034f0:	b580      	push	{r7, lr}
 80034f2:	b084      	sub	sp, #16
 80034f4:	af02      	add	r7, sp, #8
 80034f6:	6078      	str	r0, [r7, #4]
 80034f8:	000a      	movs	r2, r1
 80034fa:	1cfb      	adds	r3, r7, #3
 80034fc:	701a      	strb	r2, [r3, #0]
    I2Cdev::writeBit(devAddr, MPU6050_RA_PWR_MGMT_1, MPU6050_PWR1_SLEEP_BIT, enabled, wireObj);
 80034fe:	687b      	ldr	r3, [r7, #4]
 8003500:	7818      	ldrb	r0, [r3, #0]
 8003502:	1cfb      	adds	r3, r7, #3
 8003504:	781a      	ldrb	r2, [r3, #0]
 8003506:	687b      	ldr	r3, [r7, #4]
 8003508:	685b      	ldr	r3, [r3, #4]
 800350a:	9300      	str	r3, [sp, #0]
 800350c:	0013      	movs	r3, r2
 800350e:	2206      	movs	r2, #6
 8003510:	216b      	movs	r1, #107	; 0x6b
 8003512:	f7ff fe85 	bl	8003220 <_ZN6I2Cdev8writeBitEhhhhPv>
}
 8003516:	46c0      	nop			; (mov r8, r8)
 8003518:	46bd      	mov	sp, r7
 800351a:	b002      	add	sp, #8
 800351c:	bd80      	pop	{r7, pc}

0800351e <_ZN12MPU6050_Base13setMemoryBankEhbb>:

// BANK_SEL register
void MPU6050_Base::setMemoryBank(uint8_t bank, bool prefetchEnabled, bool userBank) {
 800351e:	b590      	push	{r4, r7, lr}
 8003520:	b083      	sub	sp, #12
 8003522:	af00      	add	r7, sp, #0
 8003524:	6078      	str	r0, [r7, #4]
 8003526:	000c      	movs	r4, r1
 8003528:	0010      	movs	r0, r2
 800352a:	0019      	movs	r1, r3
 800352c:	1cfb      	adds	r3, r7, #3
 800352e:	1c22      	adds	r2, r4, #0
 8003530:	701a      	strb	r2, [r3, #0]
 8003532:	1cbb      	adds	r3, r7, #2
 8003534:	1c02      	adds	r2, r0, #0
 8003536:	701a      	strb	r2, [r3, #0]
 8003538:	1c7b      	adds	r3, r7, #1
 800353a:	1c0a      	adds	r2, r1, #0
 800353c:	701a      	strb	r2, [r3, #0]
    bank &= 0x1F;
 800353e:	1cfb      	adds	r3, r7, #3
 8003540:	1cfa      	adds	r2, r7, #3
 8003542:	7812      	ldrb	r2, [r2, #0]
 8003544:	211f      	movs	r1, #31
 8003546:	400a      	ands	r2, r1
 8003548:	701a      	strb	r2, [r3, #0]
    if (userBank) bank |= 0x20;
 800354a:	1c7b      	adds	r3, r7, #1
 800354c:	781b      	ldrb	r3, [r3, #0]
 800354e:	2b00      	cmp	r3, #0
 8003550:	d005      	beq.n	800355e <_ZN12MPU6050_Base13setMemoryBankEhbb+0x40>
 8003552:	1cfb      	adds	r3, r7, #3
 8003554:	1cfa      	adds	r2, r7, #3
 8003556:	7812      	ldrb	r2, [r2, #0]
 8003558:	2120      	movs	r1, #32
 800355a:	430a      	orrs	r2, r1
 800355c:	701a      	strb	r2, [r3, #0]
    if (prefetchEnabled) bank |= 0x40;
 800355e:	1cbb      	adds	r3, r7, #2
 8003560:	781b      	ldrb	r3, [r3, #0]
 8003562:	2b00      	cmp	r3, #0
 8003564:	d005      	beq.n	8003572 <_ZN12MPU6050_Base13setMemoryBankEhbb+0x54>
 8003566:	1cfb      	adds	r3, r7, #3
 8003568:	1cfa      	adds	r2, r7, #3
 800356a:	7812      	ldrb	r2, [r2, #0]
 800356c:	2140      	movs	r1, #64	; 0x40
 800356e:	430a      	orrs	r2, r1
 8003570:	701a      	strb	r2, [r3, #0]
    I2Cdev::writeByte(devAddr, MPU6050_RA_BANK_SEL, bank, wireObj);
 8003572:	687b      	ldr	r3, [r7, #4]
 8003574:	7818      	ldrb	r0, [r3, #0]
 8003576:	687b      	ldr	r3, [r7, #4]
 8003578:	6859      	ldr	r1, [r3, #4]
 800357a:	1cfb      	adds	r3, r7, #3
 800357c:	781a      	ldrb	r2, [r3, #0]
 800357e:	000b      	movs	r3, r1
 8003580:	216d      	movs	r1, #109	; 0x6d
 8003582:	f7ff ff13 	bl	80033ac <_ZN6I2Cdev9writeByteEhhhPv>
}
 8003586:	46c0      	nop			; (mov r8, r8)
 8003588:	46bd      	mov	sp, r7
 800358a:	b003      	add	sp, #12
 800358c:	bd90      	pop	{r4, r7, pc}

0800358e <_ZN12MPU6050_Base21setMemoryStartAddressEh>:

// MEM_START_ADDR register
void MPU6050_Base::setMemoryStartAddress(uint8_t address) {
 800358e:	b580      	push	{r7, lr}
 8003590:	b082      	sub	sp, #8
 8003592:	af00      	add	r7, sp, #0
 8003594:	6078      	str	r0, [r7, #4]
 8003596:	000a      	movs	r2, r1
 8003598:	1cfb      	adds	r3, r7, #3
 800359a:	701a      	strb	r2, [r3, #0]
    I2Cdev::writeByte(devAddr, MPU6050_RA_MEM_START_ADDR, address, wireObj);
 800359c:	687b      	ldr	r3, [r7, #4]
 800359e:	7818      	ldrb	r0, [r3, #0]
 80035a0:	687b      	ldr	r3, [r7, #4]
 80035a2:	6859      	ldr	r1, [r3, #4]
 80035a4:	1cfb      	adds	r3, r7, #3
 80035a6:	781a      	ldrb	r2, [r3, #0]
 80035a8:	000b      	movs	r3, r1
 80035aa:	216e      	movs	r1, #110	; 0x6e
 80035ac:	f7ff fefe 	bl	80033ac <_ZN6I2Cdev9writeByteEhhhPv>
}
 80035b0:	46c0      	nop			; (mov r8, r8)
 80035b2:	46bd      	mov	sp, r7
 80035b4:	b002      	add	sp, #8
 80035b6:	bd80      	pop	{r7, pc}

080035b8 <_ZN12MPU6050_Base15setSlaveAddressEhh>:
 * @param num Slave number (0-3)
 * @param address New address for specified slave
 * @see getSlaveAddress()
 * @see MPU6050_RA_I2C_SLV0_ADDR
 */
void MPU6050_Base::setSlaveAddress(uint8_t num, uint8_t address) {
 80035b8:	b590      	push	{r4, r7, lr}
 80035ba:	b083      	sub	sp, #12
 80035bc:	af00      	add	r7, sp, #0
 80035be:	6078      	str	r0, [r7, #4]
 80035c0:	0008      	movs	r0, r1
 80035c2:	0011      	movs	r1, r2
 80035c4:	1cfb      	adds	r3, r7, #3
 80035c6:	1c02      	adds	r2, r0, #0
 80035c8:	701a      	strb	r2, [r3, #0]
 80035ca:	1cbb      	adds	r3, r7, #2
 80035cc:	1c0a      	adds	r2, r1, #0
 80035ce:	701a      	strb	r2, [r3, #0]
    if (num > 3) return;
 80035d0:	1cfb      	adds	r3, r7, #3
 80035d2:	781b      	ldrb	r3, [r3, #0]
 80035d4:	2b03      	cmp	r3, #3
 80035d6:	d811      	bhi.n	80035fc <_ZN12MPU6050_Base15setSlaveAddressEhh+0x44>
    I2Cdev::writeByte(devAddr, MPU6050_RA_I2C_SLV0_ADDR + num*3, address, wireObj);
 80035d8:	687b      	ldr	r3, [r7, #4]
 80035da:	7818      	ldrb	r0, [r3, #0]
 80035dc:	1cfb      	adds	r3, r7, #3
 80035de:	781b      	ldrb	r3, [r3, #0]
 80035e0:	1c1a      	adds	r2, r3, #0
 80035e2:	1892      	adds	r2, r2, r2
 80035e4:	18d3      	adds	r3, r2, r3
 80035e6:	b2db      	uxtb	r3, r3
 80035e8:	3325      	adds	r3, #37	; 0x25
 80035ea:	b2d9      	uxtb	r1, r3
 80035ec:	687b      	ldr	r3, [r7, #4]
 80035ee:	685c      	ldr	r4, [r3, #4]
 80035f0:	1cbb      	adds	r3, r7, #2
 80035f2:	781a      	ldrb	r2, [r3, #0]
 80035f4:	0023      	movs	r3, r4
 80035f6:	f7ff fed9 	bl	80033ac <_ZN6I2Cdev9writeByteEhhhPv>
 80035fa:	e000      	b.n	80035fe <_ZN12MPU6050_Base15setSlaveAddressEhh+0x46>
    if (num > 3) return;
 80035fc:	46c0      	nop			; (mov r8, r8)
}
 80035fe:	46bd      	mov	sp, r7
 8003600:	b003      	add	sp, #12
 8003602:	bd90      	pop	{r4, r7, pc}

08003604 <_ZN12MPU6050_Base23setI2CMasterModeEnabledEb>:
 * @param enabled New I2C Master Mode enabled status
 * @see getI2CMasterModeEnabled()
 * @see MPU6050_RA_USER_CTRL
 * @see MPU6050_USERCTRL_I2C_MST_EN_BIT
 */
void MPU6050_Base::setI2CMasterModeEnabled(bool enabled) {
 8003604:	b580      	push	{r7, lr}
 8003606:	b084      	sub	sp, #16
 8003608:	af02      	add	r7, sp, #8
 800360a:	6078      	str	r0, [r7, #4]
 800360c:	000a      	movs	r2, r1
 800360e:	1cfb      	adds	r3, r7, #3
 8003610:	701a      	strb	r2, [r3, #0]
    I2Cdev::writeBit(devAddr, MPU6050_RA_USER_CTRL, MPU6050_USERCTRL_I2C_MST_EN_BIT, enabled, wireObj);
 8003612:	687b      	ldr	r3, [r7, #4]
 8003614:	7818      	ldrb	r0, [r3, #0]
 8003616:	1cfb      	adds	r3, r7, #3
 8003618:	781a      	ldrb	r2, [r3, #0]
 800361a:	687b      	ldr	r3, [r7, #4]
 800361c:	685b      	ldr	r3, [r3, #4]
 800361e:	9300      	str	r3, [sp, #0]
 8003620:	0013      	movs	r3, r2
 8003622:	2205      	movs	r2, #5
 8003624:	216a      	movs	r1, #106	; 0x6a
 8003626:	f7ff fdfb 	bl	8003220 <_ZN6I2Cdev8writeBitEhhhhPv>
}
 800362a:	46c0      	nop			; (mov r8, r8)
 800362c:	46bd      	mov	sp, r7
 800362e:	b002      	add	sp, #8
 8003630:	bd80      	pop	{r7, pc}

08003632 <_ZN12MPU6050_Base14resetI2CMasterEv>:
 * This bit resets the I2C Master when set to 1 while I2C_MST_EN equals 0.
 * This bit automatically clears to 0 after the reset has been triggered.
 * @see MPU6050_RA_USER_CTRL
 * @see MPU6050_USERCTRL_I2C_MST_RESET_BIT
 */
void MPU6050_Base::resetI2CMaster() {
 8003632:	b580      	push	{r7, lr}
 8003634:	b084      	sub	sp, #16
 8003636:	af02      	add	r7, sp, #8
 8003638:	6078      	str	r0, [r7, #4]
    I2Cdev::writeBit(devAddr, MPU6050_RA_USER_CTRL, MPU6050_USERCTRL_I2C_MST_RESET_BIT, true, wireObj);
 800363a:	687b      	ldr	r3, [r7, #4]
 800363c:	7818      	ldrb	r0, [r3, #0]
 800363e:	687b      	ldr	r3, [r7, #4]
 8003640:	685b      	ldr	r3, [r3, #4]
 8003642:	9300      	str	r3, [sp, #0]
 8003644:	2301      	movs	r3, #1
 8003646:	2201      	movs	r2, #1
 8003648:	216a      	movs	r1, #106	; 0x6a
 800364a:	f7ff fde9 	bl	8003220 <_ZN6I2Cdev8writeBitEhhhhPv>
}
 800364e:	46c0      	nop			; (mov r8, r8)
 8003650:	46bd      	mov	sp, r7
 8003652:	b002      	add	sp, #8
 8003654:	bd80      	pop	{r7, pc}

08003656 <_ZN12MPU6050_Base14setClockSourceEh>:
 * @see getClockSource()
 * @see MPU6050_RA_PWR_MGMT_1
 * @see MPU6050_PWR1_CLKSEL_BIT
 * @see MPU6050_PWR1_CLKSEL_LENGTH
 */
void MPU6050_Base::setClockSource(uint8_t source) {
 8003656:	b580      	push	{r7, lr}
 8003658:	b084      	sub	sp, #16
 800365a:	af02      	add	r7, sp, #8
 800365c:	6078      	str	r0, [r7, #4]
 800365e:	000a      	movs	r2, r1
 8003660:	1cfb      	adds	r3, r7, #3
 8003662:	701a      	strb	r2, [r3, #0]
    I2Cdev::writeBits(devAddr, MPU6050_RA_PWR_MGMT_1, MPU6050_PWR1_CLKSEL_BIT, MPU6050_PWR1_CLKSEL_LENGTH, source, wireObj);
 8003664:	687b      	ldr	r3, [r7, #4]
 8003666:	7818      	ldrb	r0, [r3, #0]
 8003668:	687b      	ldr	r3, [r7, #4]
 800366a:	685b      	ldr	r3, [r3, #4]
 800366c:	9301      	str	r3, [sp, #4]
 800366e:	1cfb      	adds	r3, r7, #3
 8003670:	781b      	ldrb	r3, [r3, #0]
 8003672:	9300      	str	r3, [sp, #0]
 8003674:	2303      	movs	r3, #3
 8003676:	2202      	movs	r2, #2
 8003678:	216b      	movs	r1, #107	; 0x6b
 800367a:	f7ff fe25 	bl	80032c8 <_ZN6I2Cdev9writeBitsEhhhhhPv>
}
 800367e:	46c0      	nop			; (mov r8, r8)
 8003680:	46bd      	mov	sp, r7
 8003682:	b002      	add	sp, #8
 8003684:	bd80      	pop	{r7, pc}

08003686 <_ZN12MPU6050_Base13setIntEnabledEh>:
 * @param enabled New interrupt enabled status
 * @see getIntFreefallEnabled()
 * @see MPU6050_RA_INT_ENABLE
 * @see MPU6050_INTERRUPT_FF_BIT
 **/
void MPU6050_Base::setIntEnabled(uint8_t enabled) {
 8003686:	b580      	push	{r7, lr}
 8003688:	b082      	sub	sp, #8
 800368a:	af00      	add	r7, sp, #0
 800368c:	6078      	str	r0, [r7, #4]
 800368e:	000a      	movs	r2, r1
 8003690:	1cfb      	adds	r3, r7, #3
 8003692:	701a      	strb	r2, [r3, #0]
    I2Cdev::writeByte(devAddr, MPU6050_RA_INT_ENABLE, enabled, wireObj);
 8003694:	687b      	ldr	r3, [r7, #4]
 8003696:	7818      	ldrb	r0, [r3, #0]
 8003698:	687b      	ldr	r3, [r7, #4]
 800369a:	6859      	ldr	r1, [r3, #4]
 800369c:	1cfb      	adds	r3, r7, #3
 800369e:	781a      	ldrb	r2, [r3, #0]
 80036a0:	000b      	movs	r3, r1
 80036a2:	2138      	movs	r1, #56	; 0x38
 80036a4:	f7ff fe82 	bl	80033ac <_ZN6I2Cdev9writeByteEhhhPv>
}
 80036a8:	46c0      	nop			; (mov r8, r8)
 80036aa:	46bd      	mov	sp, r7
 80036ac:	b002      	add	sp, #8
 80036ae:	bd80      	pop	{r7, pc}

080036b0 <_ZN12MPU6050_Base7setRateEh>:
/** Set gyroscope sample rate divider.
 * @param rate New sample rate divider
 * @see getRate()
 * @see MPU6050_RA_SMPLRT_DIV
 */
void MPU6050_Base::setRate(uint8_t rate) {
 80036b0:	b580      	push	{r7, lr}
 80036b2:	b082      	sub	sp, #8
 80036b4:	af00      	add	r7, sp, #0
 80036b6:	6078      	str	r0, [r7, #4]
 80036b8:	000a      	movs	r2, r1
 80036ba:	1cfb      	adds	r3, r7, #3
 80036bc:	701a      	strb	r2, [r3, #0]
    I2Cdev::writeByte(devAddr, MPU6050_RA_SMPLRT_DIV, rate, wireObj);
 80036be:	687b      	ldr	r3, [r7, #4]
 80036c0:	7818      	ldrb	r0, [r3, #0]
 80036c2:	687b      	ldr	r3, [r7, #4]
 80036c4:	6859      	ldr	r1, [r3, #4]
 80036c6:	1cfb      	adds	r3, r7, #3
 80036c8:	781a      	ldrb	r2, [r3, #0]
 80036ca:	000b      	movs	r3, r1
 80036cc:	2119      	movs	r1, #25
 80036ce:	f7ff fe6d 	bl	80033ac <_ZN6I2Cdev9writeByteEhhhPv>
}
 80036d2:	46c0      	nop			; (mov r8, r8)
 80036d4:	46bd      	mov	sp, r7
 80036d6:	b002      	add	sp, #8
 80036d8:	bd80      	pop	{r7, pc}

080036da <_ZN12MPU6050_Base20setExternalFrameSyncEh>:
/** Set external FSYNC configuration.
 * @see getExternalFrameSync()
 * @see MPU6050_RA_CONFIG
 * @param sync New FSYNC configuration value
 */
void MPU6050_Base::setExternalFrameSync(uint8_t sync) {
 80036da:	b580      	push	{r7, lr}
 80036dc:	b084      	sub	sp, #16
 80036de:	af02      	add	r7, sp, #8
 80036e0:	6078      	str	r0, [r7, #4]
 80036e2:	000a      	movs	r2, r1
 80036e4:	1cfb      	adds	r3, r7, #3
 80036e6:	701a      	strb	r2, [r3, #0]
    I2Cdev::writeBits(devAddr, MPU6050_RA_CONFIG, MPU6050_CFG_EXT_SYNC_SET_BIT, MPU6050_CFG_EXT_SYNC_SET_LENGTH, sync, wireObj);
 80036e8:	687b      	ldr	r3, [r7, #4]
 80036ea:	7818      	ldrb	r0, [r3, #0]
 80036ec:	687b      	ldr	r3, [r7, #4]
 80036ee:	685b      	ldr	r3, [r3, #4]
 80036f0:	9301      	str	r3, [sp, #4]
 80036f2:	1cfb      	adds	r3, r7, #3
 80036f4:	781b      	ldrb	r3, [r3, #0]
 80036f6:	9300      	str	r3, [sp, #0]
 80036f8:	2303      	movs	r3, #3
 80036fa:	2205      	movs	r2, #5
 80036fc:	211a      	movs	r1, #26
 80036fe:	f7ff fde3 	bl	80032c8 <_ZN6I2Cdev9writeBitsEhhhhhPv>
}
 8003702:	46c0      	nop			; (mov r8, r8)
 8003704:	46bd      	mov	sp, r7
 8003706:	b002      	add	sp, #8
 8003708:	bd80      	pop	{r7, pc}

0800370a <_ZN12MPU6050_Base11setDLPFModeEh>:
 * @see MPU6050_DLPF_BW_256
 * @see MPU6050_RA_CONFIG
 * @see MPU6050_CFG_DLPF_CFG_BIT
 * @see MPU6050_CFG_DLPF_CFG_LENGTH
 */
void MPU6050_Base::setDLPFMode(uint8_t mode) {
 800370a:	b580      	push	{r7, lr}
 800370c:	b084      	sub	sp, #16
 800370e:	af02      	add	r7, sp, #8
 8003710:	6078      	str	r0, [r7, #4]
 8003712:	000a      	movs	r2, r1
 8003714:	1cfb      	adds	r3, r7, #3
 8003716:	701a      	strb	r2, [r3, #0]
    I2Cdev::writeBits(devAddr, MPU6050_RA_CONFIG, MPU6050_CFG_DLPF_CFG_BIT, MPU6050_CFG_DLPF_CFG_LENGTH, mode, wireObj);
 8003718:	687b      	ldr	r3, [r7, #4]
 800371a:	7818      	ldrb	r0, [r3, #0]
 800371c:	687b      	ldr	r3, [r7, #4]
 800371e:	685b      	ldr	r3, [r3, #4]
 8003720:	9301      	str	r3, [sp, #4]
 8003722:	1cfb      	adds	r3, r7, #3
 8003724:	781b      	ldrb	r3, [r3, #0]
 8003726:	9300      	str	r3, [sp, #0]
 8003728:	2303      	movs	r3, #3
 800372a:	2202      	movs	r2, #2
 800372c:	211a      	movs	r1, #26
 800372e:	f7ff fdcb 	bl	80032c8 <_ZN6I2Cdev9writeBitsEhhhhhPv>
}
 8003732:	46c0      	nop			; (mov r8, r8)
 8003734:	46bd      	mov	sp, r7
 8003736:	b002      	add	sp, #8
 8003738:	bd80      	pop	{r7, pc}

0800373a <_ZN12MPU6050_Base21setFullScaleGyroRangeEh>:
 * @see MPU6050_GYRO_FS_250
 * @see MPU6050_RA_GYRO_CONFIG
 * @see MPU6050_GCONFIG_FS_SEL_BIT
 * @see MPU6050_GCONFIG_FS_SEL_LENGTH
 */
void MPU6050_Base::setFullScaleGyroRange(uint8_t range) {
 800373a:	b580      	push	{r7, lr}
 800373c:	b084      	sub	sp, #16
 800373e:	af02      	add	r7, sp, #8
 8003740:	6078      	str	r0, [r7, #4]
 8003742:	000a      	movs	r2, r1
 8003744:	1cfb      	adds	r3, r7, #3
 8003746:	701a      	strb	r2, [r3, #0]
    I2Cdev::writeBits(devAddr, MPU6050_RA_GYRO_CONFIG, MPU6050_GCONFIG_FS_SEL_BIT, MPU6050_GCONFIG_FS_SEL_LENGTH, range, wireObj);
 8003748:	687b      	ldr	r3, [r7, #4]
 800374a:	7818      	ldrb	r0, [r3, #0]
 800374c:	687b      	ldr	r3, [r7, #4]
 800374e:	685b      	ldr	r3, [r3, #4]
 8003750:	9301      	str	r3, [sp, #4]
 8003752:	1cfb      	adds	r3, r7, #3
 8003754:	781b      	ldrb	r3, [r3, #0]
 8003756:	9300      	str	r3, [sp, #0]
 8003758:	2302      	movs	r3, #2
 800375a:	2204      	movs	r2, #4
 800375c:	211b      	movs	r1, #27
 800375e:	f7ff fdb3 	bl	80032c8 <_ZN6I2Cdev9writeBitsEhhhhhPv>
}
 8003762:	46c0      	nop			; (mov r8, r8)
 8003764:	46bd      	mov	sp, r7
 8003766:	b002      	add	sp, #8
 8003768:	bd80      	pop	{r7, pc}

0800376a <_ZN12MPU6050_Base20writeProgMemoryBlockEPKhthhb>:

bool MPU6050_Base::writeProgMemoryBlock(const uint8_t *data, uint16_t dataSize, uint8_t bank, uint8_t address, bool verify) {
 800376a:	b590      	push	{r4, r7, lr}
 800376c:	b089      	sub	sp, #36	; 0x24
 800376e:	af04      	add	r7, sp, #16
 8003770:	60f8      	str	r0, [r7, #12]
 8003772:	60b9      	str	r1, [r7, #8]
 8003774:	0019      	movs	r1, r3
 8003776:	1dbb      	adds	r3, r7, #6
 8003778:	801a      	strh	r2, [r3, #0]
 800377a:	1d7b      	adds	r3, r7, #5
 800377c:	1c0a      	adds	r2, r1, #0
 800377e:	701a      	strb	r2, [r3, #0]
    return writeMemoryBlock(data, dataSize, bank, address, verify, false);
 8003780:	1d7b      	adds	r3, r7, #5
 8003782:	781c      	ldrb	r4, [r3, #0]
 8003784:	1dbb      	adds	r3, r7, #6
 8003786:	881a      	ldrh	r2, [r3, #0]
 8003788:	68b9      	ldr	r1, [r7, #8]
 800378a:	68f8      	ldr	r0, [r7, #12]
 800378c:	2300      	movs	r3, #0
 800378e:	9302      	str	r3, [sp, #8]
 8003790:	2324      	movs	r3, #36	; 0x24
 8003792:	18fb      	adds	r3, r7, r3
 8003794:	781b      	ldrb	r3, [r3, #0]
 8003796:	9301      	str	r3, [sp, #4]
 8003798:	2320      	movs	r3, #32
 800379a:	18fb      	adds	r3, r7, r3
 800379c:	781b      	ldrb	r3, [r3, #0]
 800379e:	9300      	str	r3, [sp, #0]
 80037a0:	0023      	movs	r3, r4
 80037a2:	f000 f805 	bl	80037b0 <_ZN12MPU6050_Base16writeMemoryBlockEPKhthhbb>
 80037a6:	0003      	movs	r3, r0
}
 80037a8:	0018      	movs	r0, r3
 80037aa:	46bd      	mov	sp, r7
 80037ac:	b005      	add	sp, #20
 80037ae:	bd90      	pop	{r4, r7, pc}

080037b0 <_ZN12MPU6050_Base16writeMemoryBlockEPKhthhbb>:

bool MPU6050_Base::writeMemoryBlock(const uint8_t *data, uint16_t dataSize, uint8_t bank, uint8_t address, bool verify, bool useProgMem) {
 80037b0:	b5f0      	push	{r4, r5, r6, r7, lr}
 80037b2:	b08b      	sub	sp, #44	; 0x2c
 80037b4:	af02      	add	r7, sp, #8
 80037b6:	60f8      	str	r0, [r7, #12]
 80037b8:	60b9      	str	r1, [r7, #8]
 80037ba:	0019      	movs	r1, r3
 80037bc:	1dbb      	adds	r3, r7, #6
 80037be:	801a      	strh	r2, [r3, #0]
 80037c0:	1d7b      	adds	r3, r7, #5
 80037c2:	1c0a      	adds	r2, r1, #0
 80037c4:	701a      	strb	r2, [r3, #0]
    setMemoryBank(bank);
 80037c6:	1d7b      	adds	r3, r7, #5
 80037c8:	7819      	ldrb	r1, [r3, #0]
 80037ca:	68f8      	ldr	r0, [r7, #12]
 80037cc:	2300      	movs	r3, #0
 80037ce:	2200      	movs	r2, #0
 80037d0:	f7ff fea5 	bl	800351e <_ZN12MPU6050_Base13setMemoryBankEhbb>
    setMemoryStartAddress(address);
 80037d4:	2328      	movs	r3, #40	; 0x28
 80037d6:	2208      	movs	r2, #8
 80037d8:	189b      	adds	r3, r3, r2
 80037da:	2208      	movs	r2, #8
 80037dc:	4694      	mov	ip, r2
 80037de:	44bc      	add	ip, r7
 80037e0:	4463      	add	r3, ip
 80037e2:	781a      	ldrb	r2, [r3, #0]
 80037e4:	68fb      	ldr	r3, [r7, #12]
 80037e6:	0011      	movs	r1, r2
 80037e8:	0018      	movs	r0, r3
 80037ea:	f7ff fed0 	bl	800358e <_ZN12MPU6050_Base21setMemoryStartAddressEh>
    uint8_t chunkSize;
    uint8_t *verifyBuffer=0;
 80037ee:	2300      	movs	r3, #0
 80037f0:	613b      	str	r3, [r7, #16]
    uint8_t *progBuffer=0;
 80037f2:	2300      	movs	r3, #0
 80037f4:	61bb      	str	r3, [r7, #24]
    uint16_t i;
    //uint8_t j;
    //if (verify) verifyBuffer = (uint8_t *)malloc(MPU6050_DMP_MEMORY_CHUNK_SIZE);
    //if (useProgMem) progBuffer = (uint8_t *)malloc(MPU6050_DMP_MEMORY_CHUNK_SIZE);
    for (i = 0; i < dataSize;) {
 80037f6:	2316      	movs	r3, #22
 80037f8:	18fb      	adds	r3, r7, r3
 80037fa:	2200      	movs	r2, #0
 80037fc:	801a      	strh	r2, [r3, #0]
 80037fe:	2416      	movs	r4, #22
 8003800:	193a      	adds	r2, r7, r4
 8003802:	1dbb      	adds	r3, r7, #6
 8003804:	8812      	ldrh	r2, [r2, #0]
 8003806:	881b      	ldrh	r3, [r3, #0]
 8003808:	429a      	cmp	r2, r3
 800380a:	d300      	bcc.n	800380e <_ZN12MPU6050_Base16writeMemoryBlockEPKhthhbb+0x5e>
 800380c:	e08e      	b.n	800392c <_ZN12MPU6050_Base16writeMemoryBlockEPKhthhbb+0x17c>
        // determine correct chunk size according to bank position and data size
        chunkSize = MPU6050_DMP_MEMORY_CHUNK_SIZE;
 800380e:	201f      	movs	r0, #31
 8003810:	183b      	adds	r3, r7, r0
 8003812:	2210      	movs	r2, #16
 8003814:	701a      	strb	r2, [r3, #0]
        // make sure we don't go past the data size
        if (i + chunkSize > dataSize) chunkSize = dataSize - i;
 8003816:	193b      	adds	r3, r7, r4
 8003818:	881a      	ldrh	r2, [r3, #0]
 800381a:	183b      	adds	r3, r7, r0
 800381c:	781b      	ldrb	r3, [r3, #0]
 800381e:	18d2      	adds	r2, r2, r3
 8003820:	1dbb      	adds	r3, r7, #6
 8003822:	881b      	ldrh	r3, [r3, #0]
 8003824:	429a      	cmp	r2, r3
 8003826:	dd08      	ble.n	800383a <_ZN12MPU6050_Base16writeMemoryBlockEPKhthhbb+0x8a>
 8003828:	1dbb      	adds	r3, r7, #6
 800382a:	881b      	ldrh	r3, [r3, #0]
 800382c:	b2d9      	uxtb	r1, r3
 800382e:	193b      	adds	r3, r7, r4
 8003830:	881b      	ldrh	r3, [r3, #0]
 8003832:	b2da      	uxtb	r2, r3
 8003834:	183b      	adds	r3, r7, r0
 8003836:	1a8a      	subs	r2, r1, r2
 8003838:	701a      	strb	r2, [r3, #0]
        // make sure this chunk doesn't go past the bank boundary (256 bytes)
        if (chunkSize > 256 - address) chunkSize = 256 - address;
 800383a:	201f      	movs	r0, #31
 800383c:	183b      	adds	r3, r7, r0
 800383e:	781a      	ldrb	r2, [r3, #0]
 8003840:	2428      	movs	r4, #40	; 0x28
 8003842:	2508      	movs	r5, #8
 8003844:	1963      	adds	r3, r4, r5
 8003846:	2108      	movs	r1, #8
 8003848:	468c      	mov	ip, r1
 800384a:	44bc      	add	ip, r7
 800384c:	4463      	add	r3, ip
 800384e:	781b      	ldrb	r3, [r3, #0]
 8003850:	2180      	movs	r1, #128	; 0x80
 8003852:	0049      	lsls	r1, r1, #1
 8003854:	1acb      	subs	r3, r1, r3
 8003856:	429a      	cmp	r2, r3
 8003858:	dd08      	ble.n	800386c <_ZN12MPU6050_Base16writeMemoryBlockEPKhthhbb+0xbc>
 800385a:	183a      	adds	r2, r7, r0
 800385c:	1963      	adds	r3, r4, r5
 800385e:	2108      	movs	r1, #8
 8003860:	468c      	mov	ip, r1
 8003862:	44bc      	add	ip, r7
 8003864:	4463      	add	r3, ip
 8003866:	781b      	ldrb	r3, [r3, #0]
 8003868:	425b      	negs	r3, r3
 800386a:	7013      	strb	r3, [r2, #0]
        if (useProgMem) {
 800386c:	2330      	movs	r3, #48	; 0x30
 800386e:	2208      	movs	r2, #8
 8003870:	189b      	adds	r3, r3, r2
 8003872:	2208      	movs	r2, #8
 8003874:	4694      	mov	ip, r2
 8003876:	44bc      	add	ip, r7
 8003878:	4463      	add	r3, ip
 800387a:	781b      	ldrb	r3, [r3, #0]
 800387c:	2b00      	cmp	r3, #0
 800387e:	d105      	bne.n	800388c <_ZN12MPU6050_Base16writeMemoryBlockEPKhthhbb+0xdc>
            // write the chunk of data as specified
            //for (j = 0; j < chunkSize; j++) progBuffer[j] = pgm_read_byte(data + i + j);
        } else {
            // write the chunk of data as specified
            progBuffer = (uint8_t *)data + i;
 8003880:	2316      	movs	r3, #22
 8003882:	18fb      	adds	r3, r7, r3
 8003884:	881b      	ldrh	r3, [r3, #0]
 8003886:	68ba      	ldr	r2, [r7, #8]
 8003888:	18d3      	adds	r3, r2, r3
 800388a:	61bb      	str	r3, [r7, #24]
        }
        I2Cdev::writeBytes(devAddr, MPU6050_RA_MEM_R_W, chunkSize, progBuffer, wireObj);
 800388c:	68fb      	ldr	r3, [r7, #12]
 800388e:	7818      	ldrb	r0, [r3, #0]
 8003890:	68fb      	ldr	r3, [r7, #12]
 8003892:	685b      	ldr	r3, [r3, #4]
 8003894:	69b9      	ldr	r1, [r7, #24]
 8003896:	241f      	movs	r4, #31
 8003898:	193a      	adds	r2, r7, r4
 800389a:	7812      	ldrb	r2, [r2, #0]
 800389c:	9300      	str	r3, [sp, #0]
 800389e:	000b      	movs	r3, r1
 80038a0:	216f      	movs	r1, #111	; 0x6f
 80038a2:	f7ff fda3 	bl	80033ec <_ZN6I2Cdev10writeBytesEhhhPhPv>
                return false; // uh oh.
            }
        }*/

        // increase byte index by [chunkSize]
        i += chunkSize;
 80038a6:	0020      	movs	r0, r4
 80038a8:	183b      	adds	r3, r7, r0
 80038aa:	781b      	ldrb	r3, [r3, #0]
 80038ac:	b299      	uxth	r1, r3
 80038ae:	2416      	movs	r4, #22
 80038b0:	193b      	adds	r3, r7, r4
 80038b2:	193a      	adds	r2, r7, r4
 80038b4:	8812      	ldrh	r2, [r2, #0]
 80038b6:	188a      	adds	r2, r1, r2
 80038b8:	801a      	strh	r2, [r3, #0]

        // uint8_t automatically wraps to 0 at 256
        address += chunkSize;
 80038ba:	2528      	movs	r5, #40	; 0x28
 80038bc:	2608      	movs	r6, #8
 80038be:	19ab      	adds	r3, r5, r6
 80038c0:	2208      	movs	r2, #8
 80038c2:	4694      	mov	ip, r2
 80038c4:	44bc      	add	ip, r7
 80038c6:	4463      	add	r3, ip
 80038c8:	19aa      	adds	r2, r5, r6
 80038ca:	2108      	movs	r1, #8
 80038cc:	468c      	mov	ip, r1
 80038ce:	44bc      	add	ip, r7
 80038d0:	4462      	add	r2, ip
 80038d2:	1838      	adds	r0, r7, r0
 80038d4:	7811      	ldrb	r1, [r2, #0]
 80038d6:	7802      	ldrb	r2, [r0, #0]
 80038d8:	188a      	adds	r2, r1, r2
 80038da:	701a      	strb	r2, [r3, #0]

        // if we aren't done, update bank (if necessary) and address
        if (i < dataSize) {
 80038dc:	193a      	adds	r2, r7, r4
 80038de:	1dbb      	adds	r3, r7, #6
 80038e0:	8812      	ldrh	r2, [r2, #0]
 80038e2:	881b      	ldrh	r3, [r3, #0]
 80038e4:	429a      	cmp	r2, r3
 80038e6:	d28a      	bcs.n	80037fe <_ZN12MPU6050_Base16writeMemoryBlockEPKhthhbb+0x4e>
            if (address == 0) bank++;
 80038e8:	19ab      	adds	r3, r5, r6
 80038ea:	2208      	movs	r2, #8
 80038ec:	4694      	mov	ip, r2
 80038ee:	44bc      	add	ip, r7
 80038f0:	4463      	add	r3, ip
 80038f2:	781b      	ldrb	r3, [r3, #0]
 80038f4:	2b00      	cmp	r3, #0
 80038f6:	d104      	bne.n	8003902 <_ZN12MPU6050_Base16writeMemoryBlockEPKhthhbb+0x152>
 80038f8:	1d7b      	adds	r3, r7, #5
 80038fa:	781a      	ldrb	r2, [r3, #0]
 80038fc:	1d7b      	adds	r3, r7, #5
 80038fe:	3201      	adds	r2, #1
 8003900:	701a      	strb	r2, [r3, #0]
            setMemoryBank(bank);
 8003902:	1d7b      	adds	r3, r7, #5
 8003904:	7819      	ldrb	r1, [r3, #0]
 8003906:	68f8      	ldr	r0, [r7, #12]
 8003908:	2300      	movs	r3, #0
 800390a:	2200      	movs	r2, #0
 800390c:	f7ff fe07 	bl	800351e <_ZN12MPU6050_Base13setMemoryBankEhbb>
            setMemoryStartAddress(address);
 8003910:	2328      	movs	r3, #40	; 0x28
 8003912:	2208      	movs	r2, #8
 8003914:	189b      	adds	r3, r3, r2
 8003916:	2208      	movs	r2, #8
 8003918:	4694      	mov	ip, r2
 800391a:	44bc      	add	ip, r7
 800391c:	4463      	add	r3, ip
 800391e:	781a      	ldrb	r2, [r3, #0]
 8003920:	68fb      	ldr	r3, [r7, #12]
 8003922:	0011      	movs	r1, r2
 8003924:	0018      	movs	r0, r3
 8003926:	f7ff fe32 	bl	800358e <_ZN12MPU6050_Base21setMemoryStartAddressEh>
    for (i = 0; i < dataSize;) {
 800392a:	e768      	b.n	80037fe <_ZN12MPU6050_Base16writeMemoryBlockEPKhthhbb+0x4e>
        }
    }
    if (verify) free(verifyBuffer);
 800392c:	232c      	movs	r3, #44	; 0x2c
 800392e:	2208      	movs	r2, #8
 8003930:	189b      	adds	r3, r3, r2
 8003932:	2208      	movs	r2, #8
 8003934:	4694      	mov	ip, r2
 8003936:	44bc      	add	ip, r7
 8003938:	4463      	add	r3, ip
 800393a:	781b      	ldrb	r3, [r3, #0]
 800393c:	2b00      	cmp	r3, #0
 800393e:	d003      	beq.n	8003948 <_ZN12MPU6050_Base16writeMemoryBlockEPKhthhbb+0x198>
 8003940:	693b      	ldr	r3, [r7, #16]
 8003942:	0018      	movs	r0, r3
 8003944:	f006 fea0 	bl	800a688 <free>
    if (useProgMem) free(progBuffer);
 8003948:	2330      	movs	r3, #48	; 0x30
 800394a:	2208      	movs	r2, #8
 800394c:	189b      	adds	r3, r3, r2
 800394e:	2208      	movs	r2, #8
 8003950:	4694      	mov	ip, r2
 8003952:	44bc      	add	ip, r7
 8003954:	4463      	add	r3, ip
 8003956:	781b      	ldrb	r3, [r3, #0]
 8003958:	2b00      	cmp	r3, #0
 800395a:	d003      	beq.n	8003964 <_ZN12MPU6050_Base16writeMemoryBlockEPKhthhbb+0x1b4>
 800395c:	69bb      	ldr	r3, [r7, #24]
 800395e:	0018      	movs	r0, r3
 8003960:	f006 fe92 	bl	800a688 <free>
    return true;
 8003964:	2301      	movs	r3, #1
}
 8003966:	0018      	movs	r0, r3
 8003968:	46bd      	mov	sp, r7
 800396a:	b009      	add	sp, #36	; 0x24
 800396c:	bdf0      	pop	{r4, r5, r6, r7, pc}

0800396e <_ZN12MPU6050_Base13setDMPConfig1Eh>:

// DMP_CFG_1 register
void MPU6050_Base::setDMPConfig1(uint8_t config) {
 800396e:	b580      	push	{r7, lr}
 8003970:	b082      	sub	sp, #8
 8003972:	af00      	add	r7, sp, #0
 8003974:	6078      	str	r0, [r7, #4]
 8003976:	000a      	movs	r2, r1
 8003978:	1cfb      	adds	r3, r7, #3
 800397a:	701a      	strb	r2, [r3, #0]
    I2Cdev::writeByte(devAddr, MPU6050_RA_DMP_CFG_1, config, wireObj);
 800397c:	687b      	ldr	r3, [r7, #4]
 800397e:	7818      	ldrb	r0, [r3, #0]
 8003980:	687b      	ldr	r3, [r7, #4]
 8003982:	6859      	ldr	r1, [r3, #4]
 8003984:	1cfb      	adds	r3, r7, #3
 8003986:	781a      	ldrb	r2, [r3, #0]
 8003988:	000b      	movs	r3, r1
 800398a:	2170      	movs	r1, #112	; 0x70
 800398c:	f7ff fd0e 	bl	80033ac <_ZN6I2Cdev9writeByteEhhhPv>
}
 8003990:	46c0      	nop			; (mov r8, r8)
 8003992:	46bd      	mov	sp, r7
 8003994:	b002      	add	sp, #8
 8003996:	bd80      	pop	{r7, pc}

08003998 <_ZN12MPU6050_Base13setDMPConfig2Eh>:

void MPU6050_Base::setDMPConfig2(uint8_t config) {
 8003998:	b580      	push	{r7, lr}
 800399a:	b082      	sub	sp, #8
 800399c:	af00      	add	r7, sp, #0
 800399e:	6078      	str	r0, [r7, #4]
 80039a0:	000a      	movs	r2, r1
 80039a2:	1cfb      	adds	r3, r7, #3
 80039a4:	701a      	strb	r2, [r3, #0]
    I2Cdev::writeByte(devAddr, MPU6050_RA_DMP_CFG_2, config, wireObj);
 80039a6:	687b      	ldr	r3, [r7, #4]
 80039a8:	7818      	ldrb	r0, [r3, #0]
 80039aa:	687b      	ldr	r3, [r7, #4]
 80039ac:	6859      	ldr	r1, [r3, #4]
 80039ae:	1cfb      	adds	r3, r7, #3
 80039b0:	781a      	ldrb	r2, [r3, #0]
 80039b2:	000b      	movs	r3, r1
 80039b4:	2171      	movs	r1, #113	; 0x71
 80039b6:	f7ff fcf9 	bl	80033ac <_ZN6I2Cdev9writeByteEhhhPv>
}
 80039ba:	46c0      	nop			; (mov r8, r8)
 80039bc:	46bd      	mov	sp, r7
 80039be:	b002      	add	sp, #8
 80039c0:	bd80      	pop	{r7, pc}

080039c2 <_ZN12MPU6050_Base15setOTPBankValidEb>:
uint8_t MPU6050_Base::getDMPConfig2() {
    I2Cdev::readByte(devAddr, MPU6050_RA_DMP_CFG_2, buffer, I2Cdev::readTimeout, wireObj);
    return buffer[0];
}

void MPU6050_Base::setOTPBankValid(bool enabled) {
 80039c2:	b580      	push	{r7, lr}
 80039c4:	b084      	sub	sp, #16
 80039c6:	af02      	add	r7, sp, #8
 80039c8:	6078      	str	r0, [r7, #4]
 80039ca:	000a      	movs	r2, r1
 80039cc:	1cfb      	adds	r3, r7, #3
 80039ce:	701a      	strb	r2, [r3, #0]
    I2Cdev::writeBit(devAddr, MPU6050_RA_XG_OFFS_TC, MPU6050_TC_OTP_BNK_VLD_BIT, enabled, wireObj);
 80039d0:	687b      	ldr	r3, [r7, #4]
 80039d2:	7818      	ldrb	r0, [r3, #0]
 80039d4:	1cfb      	adds	r3, r7, #3
 80039d6:	781a      	ldrb	r2, [r3, #0]
 80039d8:	687b      	ldr	r3, [r7, #4]
 80039da:	685b      	ldr	r3, [r3, #4]
 80039dc:	9300      	str	r3, [sp, #0]
 80039de:	0013      	movs	r3, r2
 80039e0:	2200      	movs	r2, #0
 80039e2:	2100      	movs	r1, #0
 80039e4:	f7ff fc1c 	bl	8003220 <_ZN6I2Cdev8writeBitEhhhhPv>
}
 80039e8:	46c0      	nop			; (mov r8, r8)
 80039ea:	46bd      	mov	sp, r7
 80039ec:	b002      	add	sp, #8
 80039ee:	bd80      	pop	{r7, pc}

080039f0 <_ZN12MPU6050_Base27setMotionDetectionThresholdEh>:
/** Set motion detection event acceleration threshold.
 * @param threshold New motion detection acceleration threshold value (LSB = 2mg)
 * @see getMotionDetectionThreshold()
 * @see MPU6050_RA_MOT_THR
 */
void MPU6050_Base::setMotionDetectionThreshold(uint8_t threshold) {
 80039f0:	b580      	push	{r7, lr}
 80039f2:	b082      	sub	sp, #8
 80039f4:	af00      	add	r7, sp, #0
 80039f6:	6078      	str	r0, [r7, #4]
 80039f8:	000a      	movs	r2, r1
 80039fa:	1cfb      	adds	r3, r7, #3
 80039fc:	701a      	strb	r2, [r3, #0]
    I2Cdev::writeByte(devAddr, MPU6050_RA_MOT_THR, threshold, wireObj);
 80039fe:	687b      	ldr	r3, [r7, #4]
 8003a00:	7818      	ldrb	r0, [r3, #0]
 8003a02:	687b      	ldr	r3, [r7, #4]
 8003a04:	6859      	ldr	r1, [r3, #4]
 8003a06:	1cfb      	adds	r3, r7, #3
 8003a08:	781a      	ldrb	r2, [r3, #0]
 8003a0a:	000b      	movs	r3, r1
 8003a0c:	211f      	movs	r1, #31
 8003a0e:	f7ff fccd 	bl	80033ac <_ZN6I2Cdev9writeByteEhhhPv>
}
 8003a12:	46c0      	nop			; (mov r8, r8)
 8003a14:	46bd      	mov	sp, r7
 8003a16:	b002      	add	sp, #8
 8003a18:	bd80      	pop	{r7, pc}

08003a1a <_ZN12MPU6050_Base31setZeroMotionDetectionThresholdEh>:
/** Set zero motion detection event acceleration threshold.
 * @param threshold New zero motion detection acceleration threshold value (LSB = 2mg)
 * @see getZeroMotionDetectionThreshold()
 * @see MPU6050_RA_ZRMOT_THR
 */
void MPU6050_Base::setZeroMotionDetectionThreshold(uint8_t threshold) {
 8003a1a:	b580      	push	{r7, lr}
 8003a1c:	b082      	sub	sp, #8
 8003a1e:	af00      	add	r7, sp, #0
 8003a20:	6078      	str	r0, [r7, #4]
 8003a22:	000a      	movs	r2, r1
 8003a24:	1cfb      	adds	r3, r7, #3
 8003a26:	701a      	strb	r2, [r3, #0]
    I2Cdev::writeByte(devAddr, MPU6050_RA_ZRMOT_THR, threshold, wireObj);
 8003a28:	687b      	ldr	r3, [r7, #4]
 8003a2a:	7818      	ldrb	r0, [r3, #0]
 8003a2c:	687b      	ldr	r3, [r7, #4]
 8003a2e:	6859      	ldr	r1, [r3, #4]
 8003a30:	1cfb      	adds	r3, r7, #3
 8003a32:	781a      	ldrb	r2, [r3, #0]
 8003a34:	000b      	movs	r3, r1
 8003a36:	2121      	movs	r1, #33	; 0x21
 8003a38:	f7ff fcb8 	bl	80033ac <_ZN6I2Cdev9writeByteEhhhPv>
}
 8003a3c:	46c0      	nop			; (mov r8, r8)
 8003a3e:	46bd      	mov	sp, r7
 8003a40:	b002      	add	sp, #8
 8003a42:	bd80      	pop	{r7, pc}

08003a44 <_ZN12MPU6050_Base26setMotionDetectionDurationEh>:
/** Set motion detection event duration threshold.
 * @param duration New motion detection duration threshold value (LSB = 1ms)
 * @see getMotionDetectionDuration()
 * @see MPU6050_RA_MOT_DUR
 */
void MPU6050_Base::setMotionDetectionDuration(uint8_t duration) {
 8003a44:	b580      	push	{r7, lr}
 8003a46:	b082      	sub	sp, #8
 8003a48:	af00      	add	r7, sp, #0
 8003a4a:	6078      	str	r0, [r7, #4]
 8003a4c:	000a      	movs	r2, r1
 8003a4e:	1cfb      	adds	r3, r7, #3
 8003a50:	701a      	strb	r2, [r3, #0]
    I2Cdev::writeByte(devAddr, MPU6050_RA_MOT_DUR, duration, wireObj);
 8003a52:	687b      	ldr	r3, [r7, #4]
 8003a54:	7818      	ldrb	r0, [r3, #0]
 8003a56:	687b      	ldr	r3, [r7, #4]
 8003a58:	6859      	ldr	r1, [r3, #4]
 8003a5a:	1cfb      	adds	r3, r7, #3
 8003a5c:	781a      	ldrb	r2, [r3, #0]
 8003a5e:	000b      	movs	r3, r1
 8003a60:	2120      	movs	r1, #32
 8003a62:	f7ff fca3 	bl	80033ac <_ZN6I2Cdev9writeByteEhhhPv>
}
 8003a66:	46c0      	nop			; (mov r8, r8)
 8003a68:	46bd      	mov	sp, r7
 8003a6a:	b002      	add	sp, #8
 8003a6c:	bd80      	pop	{r7, pc}

08003a6e <_ZN12MPU6050_Base30setZeroMotionDetectionDurationEh>:
/** Set zero motion detection event duration threshold.
 * @param duration New zero motion detection duration threshold value (LSB = 1ms)
 * @see getZeroMotionDetectionDuration()
 * @see MPU6050_RA_ZRMOT_DUR
 */
void MPU6050_Base::setZeroMotionDetectionDuration(uint8_t duration) {
 8003a6e:	b580      	push	{r7, lr}
 8003a70:	b082      	sub	sp, #8
 8003a72:	af00      	add	r7, sp, #0
 8003a74:	6078      	str	r0, [r7, #4]
 8003a76:	000a      	movs	r2, r1
 8003a78:	1cfb      	adds	r3, r7, #3
 8003a7a:	701a      	strb	r2, [r3, #0]
    I2Cdev::writeByte(devAddr, MPU6050_RA_ZRMOT_DUR, duration, wireObj);
 8003a7c:	687b      	ldr	r3, [r7, #4]
 8003a7e:	7818      	ldrb	r0, [r3, #0]
 8003a80:	687b      	ldr	r3, [r7, #4]
 8003a82:	6859      	ldr	r1, [r3, #4]
 8003a84:	1cfb      	adds	r3, r7, #3
 8003a86:	781a      	ldrb	r2, [r3, #0]
 8003a88:	000b      	movs	r3, r1
 8003a8a:	2122      	movs	r1, #34	; 0x22
 8003a8c:	f7ff fc8e 	bl	80033ac <_ZN6I2Cdev9writeByteEhhhPv>
}
 8003a90:	46c0      	nop			; (mov r8, r8)
 8003a92:	46bd      	mov	sp, r7
 8003a94:	b002      	add	sp, #8
 8003a96:	bd80      	pop	{r7, pc}

08003a98 <_ZN12MPU6050_Base14setFIFOEnabledEb>:
 * @param enabled New FIFO enabled status
 * @see getFIFOEnabled()
 * @see MPU6050_RA_USER_CTRL
 * @see MPU6050_USERCTRL_FIFO_EN_BIT
 */
void MPU6050_Base::setFIFOEnabled(bool enabled) {
 8003a98:	b580      	push	{r7, lr}
 8003a9a:	b084      	sub	sp, #16
 8003a9c:	af02      	add	r7, sp, #8
 8003a9e:	6078      	str	r0, [r7, #4]
 8003aa0:	000a      	movs	r2, r1
 8003aa2:	1cfb      	adds	r3, r7, #3
 8003aa4:	701a      	strb	r2, [r3, #0]
    I2Cdev::writeBit(devAddr, MPU6050_RA_USER_CTRL, MPU6050_USERCTRL_FIFO_EN_BIT, enabled, wireObj);
 8003aa6:	687b      	ldr	r3, [r7, #4]
 8003aa8:	7818      	ldrb	r0, [r3, #0]
 8003aaa:	1cfb      	adds	r3, r7, #3
 8003aac:	781a      	ldrb	r2, [r3, #0]
 8003aae:	687b      	ldr	r3, [r7, #4]
 8003ab0:	685b      	ldr	r3, [r3, #4]
 8003ab2:	9300      	str	r3, [sp, #0]
 8003ab4:	0013      	movs	r3, r2
 8003ab6:	2206      	movs	r2, #6
 8003ab8:	216a      	movs	r1, #106	; 0x6a
 8003aba:	f7ff fbb1 	bl	8003220 <_ZN6I2Cdev8writeBitEhhhhPv>
}
 8003abe:	46c0      	nop			; (mov r8, r8)
 8003ac0:	46bd      	mov	sp, r7
 8003ac2:	b002      	add	sp, #8
 8003ac4:	bd80      	pop	{r7, pc}

08003ac6 <_ZN12MPU6050_Base13setDMPEnabledEb>:

void MPU6050_Base::setDMPEnabled(bool enabled) {
 8003ac6:	b580      	push	{r7, lr}
 8003ac8:	b084      	sub	sp, #16
 8003aca:	af02      	add	r7, sp, #8
 8003acc:	6078      	str	r0, [r7, #4]
 8003ace:	000a      	movs	r2, r1
 8003ad0:	1cfb      	adds	r3, r7, #3
 8003ad2:	701a      	strb	r2, [r3, #0]
    I2Cdev::writeBit(devAddr, MPU6050_RA_USER_CTRL, MPU6050_USERCTRL_DMP_EN_BIT, enabled, wireObj);
 8003ad4:	687b      	ldr	r3, [r7, #4]
 8003ad6:	7818      	ldrb	r0, [r3, #0]
 8003ad8:	1cfb      	adds	r3, r7, #3
 8003ada:	781a      	ldrb	r2, [r3, #0]
 8003adc:	687b      	ldr	r3, [r7, #4]
 8003ade:	685b      	ldr	r3, [r3, #4]
 8003ae0:	9300      	str	r3, [sp, #0]
 8003ae2:	0013      	movs	r3, r2
 8003ae4:	2207      	movs	r2, #7
 8003ae6:	216a      	movs	r1, #106	; 0x6a
 8003ae8:	f7ff fb9a 	bl	8003220 <_ZN6I2Cdev8writeBitEhhhhPv>
}
 8003aec:	46c0      	nop			; (mov r8, r8)
 8003aee:	46bd      	mov	sp, r7
 8003af0:	b002      	add	sp, #8
 8003af2:	bd80      	pop	{r7, pc}

08003af4 <_ZN12MPU6050_Base9resetFIFOEv>:
 * This bit resets the FIFO buffer when set to 1 while FIFO_EN equals 0. This
 * bit automatically clears to 0 after the reset has been triggered.
 * @see MPU6050_RA_USER_CTRL
 * @see MPU6050_USERCTRL_FIFO_RESET_BIT
 */
void MPU6050_Base::resetFIFO() {
 8003af4:	b580      	push	{r7, lr}
 8003af6:	b084      	sub	sp, #16
 8003af8:	af02      	add	r7, sp, #8
 8003afa:	6078      	str	r0, [r7, #4]
    I2Cdev::writeBit(devAddr, MPU6050_RA_USER_CTRL, MPU6050_USERCTRL_FIFO_RESET_BIT, true, wireObj);
 8003afc:	687b      	ldr	r3, [r7, #4]
 8003afe:	7818      	ldrb	r0, [r3, #0]
 8003b00:	687b      	ldr	r3, [r7, #4]
 8003b02:	685b      	ldr	r3, [r3, #4]
 8003b04:	9300      	str	r3, [sp, #0]
 8003b06:	2301      	movs	r3, #1
 8003b08:	2202      	movs	r2, #2
 8003b0a:	216a      	movs	r1, #106	; 0x6a
 8003b0c:	f7ff fb88 	bl	8003220 <_ZN6I2Cdev8writeBitEhhhhPv>
}
 8003b10:	46c0      	nop			; (mov r8, r8)
 8003b12:	46bd      	mov	sp, r7
 8003b14:	b002      	add	sp, #8
 8003b16:	bd80      	pop	{r7, pc}

08003b18 <_ZN12MPU6050_Base8resetDMPEv>:

void MPU6050_Base::resetDMP() {
 8003b18:	b580      	push	{r7, lr}
 8003b1a:	b084      	sub	sp, #16
 8003b1c:	af02      	add	r7, sp, #8
 8003b1e:	6078      	str	r0, [r7, #4]
    I2Cdev::writeBit(devAddr, MPU6050_RA_USER_CTRL, MPU6050_USERCTRL_DMP_RESET_BIT, true, wireObj);
 8003b20:	687b      	ldr	r3, [r7, #4]
 8003b22:	7818      	ldrb	r0, [r3, #0]
 8003b24:	687b      	ldr	r3, [r7, #4]
 8003b26:	685b      	ldr	r3, [r3, #4]
 8003b28:	9300      	str	r3, [sp, #0]
 8003b2a:	2301      	movs	r3, #1
 8003b2c:	2203      	movs	r2, #3
 8003b2e:	216a      	movs	r1, #106	; 0x6a
 8003b30:	f7ff fb76 	bl	8003220 <_ZN6I2Cdev8writeBitEhhhhPv>
}
 8003b34:	46c0      	nop			; (mov r8, r8)
 8003b36:	46bd      	mov	sp, r7
 8003b38:	b002      	add	sp, #8
 8003b3a:	bd80      	pop	{r7, pc}

08003b3c <_ZN12MPU6050_Base5resetEv>:
/** Trigger a full device reset.
 * A small delay of ~50ms may be desirable after triggering a reset.
 * @see MPU6050_RA_PWR_MGMT_1
 * @see MPU6050_PWR1_DEVICE_RESET_BIT
 */
void MPU6050_Base::reset() {
 8003b3c:	b580      	push	{r7, lr}
 8003b3e:	b084      	sub	sp, #16
 8003b40:	af02      	add	r7, sp, #8
 8003b42:	6078      	str	r0, [r7, #4]
    I2Cdev::writeBit(devAddr, MPU6050_RA_PWR_MGMT_1, MPU6050_PWR1_DEVICE_RESET_BIT, true, wireObj);
 8003b44:	687b      	ldr	r3, [r7, #4]
 8003b46:	7818      	ldrb	r0, [r3, #0]
 8003b48:	687b      	ldr	r3, [r7, #4]
 8003b4a:	685b      	ldr	r3, [r3, #4]
 8003b4c:	9300      	str	r3, [sp, #0]
 8003b4e:	2301      	movs	r3, #1
 8003b50:	2207      	movs	r2, #7
 8003b52:	216b      	movs	r1, #107	; 0x6b
 8003b54:	f7ff fb64 	bl	8003220 <_ZN6I2Cdev8writeBitEhhhhPv>
}
 8003b58:	46c0      	nop			; (mov r8, r8)
 8003b5a:	46bd      	mov	sp, r7
 8003b5c:	b002      	add	sp, #8
 8003b5e:	bd80      	pop	{r7, pc}

08003b60 <_ZN12MPU6050_Base12getIntStatusEv>:
 * for getting multiple INT statuses, since each single bit read clears
 * all of them because it has to read the whole byte.
 * @return Current interrupt status
 * @see MPU6050_RA_INT_STATUS
 */
uint8_t MPU6050_Base::getIntStatus() {
 8003b60:	b580      	push	{r7, lr}
 8003b62:	b084      	sub	sp, #16
 8003b64:	af02      	add	r7, sp, #8
 8003b66:	6078      	str	r0, [r7, #4]
    I2Cdev::readByte(devAddr, MPU6050_RA_INT_STATUS, buffer, I2Cdev::readTimeout, wireObj);
 8003b68:	687b      	ldr	r3, [r7, #4]
 8003b6a:	7818      	ldrb	r0, [r3, #0]
 8003b6c:	687b      	ldr	r3, [r7, #4]
 8003b6e:	3308      	adds	r3, #8
 8003b70:	001a      	movs	r2, r3
 8003b72:	4b07      	ldr	r3, [pc, #28]	; (8003b90 <_ZN12MPU6050_Base12getIntStatusEv+0x30>)
 8003b74:	8819      	ldrh	r1, [r3, #0]
 8003b76:	687b      	ldr	r3, [r7, #4]
 8003b78:	685b      	ldr	r3, [r3, #4]
 8003b7a:	9300      	str	r3, [sp, #0]
 8003b7c:	000b      	movs	r3, r1
 8003b7e:	213a      	movs	r1, #58	; 0x3a
 8003b80:	f7ff faf2 	bl	8003168 <_ZN6I2Cdev8readByteEhhPhtPv>
    return buffer[0];
 8003b84:	687b      	ldr	r3, [r7, #4]
 8003b86:	7a1b      	ldrb	r3, [r3, #8]
}
 8003b88:	0018      	movs	r0, r3
 8003b8a:	46bd      	mov	sp, r7
 8003b8c:	b002      	add	sp, #8
 8003b8e:	bd80      	pop	{r7, pc}
 8003b90:	20000000 	.word	0x20000000

08003b94 <_ZN12MPU6050_Base14getFIFOTimeoutEv>:

/** Get timeout to get a packet from FIFO buffer.
 * @return Current timeout to get a packet from FIFO buffer
 * @see MPU6050_FIFO_DEFAULT_TIMEOUT
 */
uint32_t MPU6050_Base::getFIFOTimeout() {
 8003b94:	b580      	push	{r7, lr}
 8003b96:	b082      	sub	sp, #8
 8003b98:	af00      	add	r7, sp, #0
 8003b9a:	6078      	str	r0, [r7, #4]
	return fifoTimeout;
 8003b9c:	687b      	ldr	r3, [r7, #4]
 8003b9e:	699b      	ldr	r3, [r3, #24]
}
 8003ba0:	0018      	movs	r0, r3
 8003ba2:	46bd      	mov	sp, r7
 8003ba4:	b002      	add	sp, #8
 8003ba6:	bd80      	pop	{r7, pc}

08003ba8 <_ZN12MPU6050_Base12getFIFOCountEv>:
 * number is in turn the number of bytes that can be read from the FIFO buffer
 * and it is directly proportional to the number of samples available given the
 * set of sensor data bound to be stored in the FIFO (register 35 and 36).
 * @return Current FIFO buffer size
 */
uint16_t MPU6050_Base::getFIFOCount() {
 8003ba8:	b580      	push	{r7, lr}
 8003baa:	b084      	sub	sp, #16
 8003bac:	af02      	add	r7, sp, #8
 8003bae:	6078      	str	r0, [r7, #4]
    I2Cdev::readBytes(devAddr, MPU6050_RA_FIFO_COUNTH, 2, buffer, I2Cdev::readTimeout, wireObj);
 8003bb0:	687b      	ldr	r3, [r7, #4]
 8003bb2:	7818      	ldrb	r0, [r3, #0]
 8003bb4:	687b      	ldr	r3, [r7, #4]
 8003bb6:	3308      	adds	r3, #8
 8003bb8:	0019      	movs	r1, r3
 8003bba:	4b0c      	ldr	r3, [pc, #48]	; (8003bec <_ZN12MPU6050_Base12getFIFOCountEv+0x44>)
 8003bbc:	881a      	ldrh	r2, [r3, #0]
 8003bbe:	687b      	ldr	r3, [r7, #4]
 8003bc0:	685b      	ldr	r3, [r3, #4]
 8003bc2:	9301      	str	r3, [sp, #4]
 8003bc4:	9200      	str	r2, [sp, #0]
 8003bc6:	000b      	movs	r3, r1
 8003bc8:	2202      	movs	r2, #2
 8003bca:	2172      	movs	r1, #114	; 0x72
 8003bcc:	f7ff faf0 	bl	80031b0 <_ZN6I2Cdev9readBytesEhhhPhtPv>
    return (((uint16_t)buffer[0]) << 8) | buffer[1];
 8003bd0:	687b      	ldr	r3, [r7, #4]
 8003bd2:	7a1b      	ldrb	r3, [r3, #8]
 8003bd4:	021b      	lsls	r3, r3, #8
 8003bd6:	b21a      	sxth	r2, r3
 8003bd8:	687b      	ldr	r3, [r7, #4]
 8003bda:	7a5b      	ldrb	r3, [r3, #9]
 8003bdc:	b21b      	sxth	r3, r3
 8003bde:	4313      	orrs	r3, r2
 8003be0:	b21b      	sxth	r3, r3
 8003be2:	b29b      	uxth	r3, r3
}
 8003be4:	0018      	movs	r0, r3
 8003be6:	46bd      	mov	sp, r7
 8003be8:	b002      	add	sp, #8
 8003bea:	bd80      	pop	{r7, pc}
 8003bec:	20000000 	.word	0x20000000

08003bf0 <_ZN12MPU6050_Base20GetCurrentFIFOPacketEPhh>:
 * ================================================================
 * Returns 1) when nothing special was done
 *         2) when recovering from overflow
 *         0) when no valid data is available
 * ================================================================ */
 int8_t MPU6050_Base::GetCurrentFIFOPacket(uint8_t *data, uint8_t length) { // overflow proof
 8003bf0:	b590      	push	{r4, r7, lr}
 8003bf2:	b091      	sub	sp, #68	; 0x44
 8003bf4:	af00      	add	r7, sp, #0
 8003bf6:	60f8      	str	r0, [r7, #12]
 8003bf8:	60b9      	str	r1, [r7, #8]
 8003bfa:	1dfb      	adds	r3, r7, #7
 8003bfc:	701a      	strb	r2, [r3, #0]
     int16_t fifoC;
     uint32_t BreakTimer = HAL_GetTick();
 8003bfe:	f002 fbb3 	bl	8006368 <HAL_GetTick>
 8003c02:	0003      	movs	r3, r0
 8003c04:	63bb      	str	r3, [r7, #56]	; 0x38
     // This section of code is for when we allowed more than 1 packet to be acquired
     bool packetReceived = false;
 8003c06:	2337      	movs	r3, #55	; 0x37
 8003c08:	18fb      	adds	r3, r7, r3
 8003c0a:	2200      	movs	r2, #0
 8003c0c:	701a      	strb	r2, [r3, #0]
     do {
         if ((fifoC = getFIFOCount())  > length) {
 8003c0e:	68fb      	ldr	r3, [r7, #12]
 8003c10:	0018      	movs	r0, r3
 8003c12:	f7ff ffc9 	bl	8003ba8 <_ZN12MPU6050_Base12getFIFOCountEv>
 8003c16:	0003      	movs	r3, r0
 8003c18:	001a      	movs	r2, r3
 8003c1a:	213e      	movs	r1, #62	; 0x3e
 8003c1c:	187b      	adds	r3, r7, r1
 8003c1e:	801a      	strh	r2, [r3, #0]
 8003c20:	187b      	adds	r3, r7, r1
 8003c22:	2200      	movs	r2, #0
 8003c24:	5e9a      	ldrsh	r2, [r3, r2]
 8003c26:	1dfb      	adds	r3, r7, #7
 8003c28:	781b      	ldrb	r3, [r3, #0]
 8003c2a:	2101      	movs	r1, #1
 8003c2c:	429a      	cmp	r2, r3
 8003c2e:	dc01      	bgt.n	8003c34 <_ZN12MPU6050_Base20GetCurrentFIFOPacketEPhh+0x44>
 8003c30:	2300      	movs	r3, #0
 8003c32:	1c19      	adds	r1, r3, #0
 8003c34:	b2cb      	uxtb	r3, r1
 8003c36:	2b00      	cmp	r3, #0
 8003c38:	d100      	bne.n	8003c3c <_ZN12MPU6050_Base20GetCurrentFIFOPacketEPhh+0x4c>
 8003c3a:	e06f      	b.n	8003d1c <_ZN12MPU6050_Base20GetCurrentFIFOPacketEPhh+0x12c>
             if (fifoC > 200) { // if you waited to get the FIFO buffer to > 200 bytes it will take longer to get the last packet in the FIFO Buffer than it will take to  reset the buffer and wait for the next to arrive
 8003c3c:	243e      	movs	r4, #62	; 0x3e
 8003c3e:	193b      	adds	r3, r7, r4
 8003c40:	2200      	movs	r2, #0
 8003c42:	5e9b      	ldrsh	r3, [r3, r2]
 8003c44:	2bc8      	cmp	r3, #200	; 0xc8
 8003c46:	dd26      	ble.n	8003c96 <_ZN12MPU6050_Base20GetCurrentFIFOPacketEPhh+0xa6>
                 resetFIFO();   // Fixes any overflow corruption
 8003c48:	68fb      	ldr	r3, [r7, #12]
 8003c4a:	0018      	movs	r0, r3
 8003c4c:	f7ff ff52 	bl	8003af4 <_ZN12MPU6050_Base9resetFIFOEv>
                 fifoC = 0;
 8003c50:	193b      	adds	r3, r7, r4
 8003c52:	2200      	movs	r2, #0
 8003c54:	801a      	strh	r2, [r3, #0]
                 while (!(fifoC = getFIFOCount()) && ((HAL_GetTick() - BreakTimer) <= (getFIFOTimeout()))); // Get Next New Packet
 8003c56:	68fb      	ldr	r3, [r7, #12]
 8003c58:	0018      	movs	r0, r3
 8003c5a:	f7ff ffa5 	bl	8003ba8 <_ZN12MPU6050_Base12getFIFOCountEv>
 8003c5e:	0003      	movs	r3, r0
 8003c60:	001a      	movs	r2, r3
 8003c62:	213e      	movs	r1, #62	; 0x3e
 8003c64:	187b      	adds	r3, r7, r1
 8003c66:	801a      	strh	r2, [r3, #0]
 8003c68:	187b      	adds	r3, r7, r1
 8003c6a:	2200      	movs	r2, #0
 8003c6c:	5e9b      	ldrsh	r3, [r3, r2]
 8003c6e:	2b00      	cmp	r3, #0
 8003c70:	d10d      	bne.n	8003c8e <_ZN12MPU6050_Base20GetCurrentFIFOPacketEPhh+0x9e>
 8003c72:	f002 fb79 	bl	8006368 <HAL_GetTick>
 8003c76:	0002      	movs	r2, r0
 8003c78:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003c7a:	1ad4      	subs	r4, r2, r3
 8003c7c:	68fb      	ldr	r3, [r7, #12]
 8003c7e:	0018      	movs	r0, r3
 8003c80:	f7ff ff88 	bl	8003b94 <_ZN12MPU6050_Base14getFIFOTimeoutEv>
 8003c84:	0003      	movs	r3, r0
 8003c86:	429c      	cmp	r4, r3
 8003c88:	d801      	bhi.n	8003c8e <_ZN12MPU6050_Base20GetCurrentFIFOPacketEPhh+0x9e>
 8003c8a:	2301      	movs	r3, #1
 8003c8c:	e000      	b.n	8003c90 <_ZN12MPU6050_Base20GetCurrentFIFOPacketEPhh+0xa0>
 8003c8e:	2300      	movs	r3, #0
 8003c90:	2b00      	cmp	r3, #0
 8003c92:	d043      	beq.n	8003d1c <_ZN12MPU6050_Base20GetCurrentFIFOPacketEPhh+0x12c>
 8003c94:	e7df      	b.n	8003c56 <_ZN12MPU6050_Base20GetCurrentFIFOPacketEPhh+0x66>
                 } else { //We have more than 1 packet but less than 200 bytes of data in the FIFO Buffer
                 uint8_t Trash[I2CDEVLIB_WIRE_BUFFER_LENGTH];
                 while ((fifoC = getFIFOCount()) > length) {  // Test each time just in case the MPU is writing to the FIFO Buffer
 8003c96:	68fb      	ldr	r3, [r7, #12]
 8003c98:	0018      	movs	r0, r3
 8003c9a:	f7ff ff85 	bl	8003ba8 <_ZN12MPU6050_Base12getFIFOCountEv>
 8003c9e:	0003      	movs	r3, r0
 8003ca0:	001a      	movs	r2, r3
 8003ca2:	213e      	movs	r1, #62	; 0x3e
 8003ca4:	187b      	adds	r3, r7, r1
 8003ca6:	801a      	strh	r2, [r3, #0]
 8003ca8:	187b      	adds	r3, r7, r1
 8003caa:	2200      	movs	r2, #0
 8003cac:	5e9a      	ldrsh	r2, [r3, r2]
 8003cae:	1dfb      	adds	r3, r7, #7
 8003cb0:	781b      	ldrb	r3, [r3, #0]
 8003cb2:	2101      	movs	r1, #1
 8003cb4:	429a      	cmp	r2, r3
 8003cb6:	dc01      	bgt.n	8003cbc <_ZN12MPU6050_Base20GetCurrentFIFOPacketEPhh+0xcc>
 8003cb8:	2300      	movs	r3, #0
 8003cba:	1c19      	adds	r1, r3, #0
 8003cbc:	b2cb      	uxtb	r3, r1
 8003cbe:	2b00      	cmp	r3, #0
 8003cc0:	d02c      	beq.n	8003d1c <_ZN12MPU6050_Base20GetCurrentFIFOPacketEPhh+0x12c>
                     fifoC = fifoC - length; // Save the last packet
 8003cc2:	213e      	movs	r1, #62	; 0x3e
 8003cc4:	187b      	adds	r3, r7, r1
 8003cc6:	881a      	ldrh	r2, [r3, #0]
 8003cc8:	1dfb      	adds	r3, r7, #7
 8003cca:	781b      	ldrb	r3, [r3, #0]
 8003ccc:	b29b      	uxth	r3, r3
 8003cce:	1ad3      	subs	r3, r2, r3
 8003cd0:	b29a      	uxth	r2, r3
 8003cd2:	187b      	adds	r3, r7, r1
 8003cd4:	801a      	strh	r2, [r3, #0]
                     uint16_t  RemoveBytes;
                     while (fifoC) { // fifo count will reach zero so this is safe
 8003cd6:	223e      	movs	r2, #62	; 0x3e
 8003cd8:	18bb      	adds	r3, r7, r2
 8003cda:	2100      	movs	r1, #0
 8003cdc:	5e5b      	ldrsh	r3, [r3, r1]
 8003cde:	2b00      	cmp	r3, #0
 8003ce0:	d0d9      	beq.n	8003c96 <_ZN12MPU6050_Base20GetCurrentFIFOPacketEPhh+0xa6>
                         RemoveBytes = (fifoC < I2CDEVLIB_WIRE_BUFFER_LENGTH) ? fifoC : I2CDEVLIB_WIRE_BUFFER_LENGTH; // Buffer Length is different than the packet length this will efficiently clear the buffer
 8003ce2:	18bb      	adds	r3, r7, r2
 8003ce4:	881b      	ldrh	r3, [r3, #0]
 8003ce6:	b21a      	sxth	r2, r3
 8003ce8:	2a20      	cmp	r2, #32
 8003cea:	dd00      	ble.n	8003cee <_ZN12MPU6050_Base20GetCurrentFIFOPacketEPhh+0xfe>
 8003cec:	2320      	movs	r3, #32
 8003cee:	b21a      	sxth	r2, r3
 8003cf0:	2434      	movs	r4, #52	; 0x34
 8003cf2:	193b      	adds	r3, r7, r4
 8003cf4:	801a      	strh	r2, [r3, #0]
                         getFIFOBytes(Trash, (uint8_t)RemoveBytes);
 8003cf6:	193b      	adds	r3, r7, r4
 8003cf8:	881b      	ldrh	r3, [r3, #0]
 8003cfa:	b2da      	uxtb	r2, r3
 8003cfc:	2314      	movs	r3, #20
 8003cfe:	18f9      	adds	r1, r7, r3
 8003d00:	68fb      	ldr	r3, [r7, #12]
 8003d02:	0018      	movs	r0, r3
 8003d04:	f000 f84a 	bl	8003d9c <_ZN12MPU6050_Base12getFIFOBytesEPhh>
                         fifoC -= RemoveBytes;
 8003d08:	213e      	movs	r1, #62	; 0x3e
 8003d0a:	187b      	adds	r3, r7, r1
 8003d0c:	881a      	ldrh	r2, [r3, #0]
 8003d0e:	193b      	adds	r3, r7, r4
 8003d10:	881b      	ldrh	r3, [r3, #0]
 8003d12:	1ad3      	subs	r3, r2, r3
 8003d14:	b29a      	uxth	r2, r3
 8003d16:	187b      	adds	r3, r7, r1
 8003d18:	801a      	strh	r2, [r3, #0]
                     while (fifoC) { // fifo count will reach zero so this is safe
 8003d1a:	e7dc      	b.n	8003cd6 <_ZN12MPU6050_Base20GetCurrentFIFOPacketEPhh+0xe6>
                     }
                 }
             }
         }
         if (!fifoC) return 0; // Called too early no data or we timed out after FIFO Reset
 8003d1c:	233e      	movs	r3, #62	; 0x3e
 8003d1e:	18fb      	adds	r3, r7, r3
 8003d20:	2200      	movs	r2, #0
 8003d22:	5e9b      	ldrsh	r3, [r3, r2]
 8003d24:	2b00      	cmp	r3, #0
 8003d26:	d101      	bne.n	8003d2c <_ZN12MPU6050_Base20GetCurrentFIFOPacketEPhh+0x13c>
 8003d28:	2300      	movs	r3, #0
 8003d2a:	e033      	b.n	8003d94 <_ZN12MPU6050_Base20GetCurrentFIFOPacketEPhh+0x1a4>
         // We have 1 packet
         packetReceived = fifoC == length;
 8003d2c:	233e      	movs	r3, #62	; 0x3e
 8003d2e:	18fb      	adds	r3, r7, r3
 8003d30:	2100      	movs	r1, #0
 8003d32:	5e59      	ldrsh	r1, [r3, r1]
 8003d34:	1dfb      	adds	r3, r7, #7
 8003d36:	781a      	ldrb	r2, [r3, #0]
 8003d38:	2037      	movs	r0, #55	; 0x37
 8003d3a:	183b      	adds	r3, r7, r0
 8003d3c:	1a8a      	subs	r2, r1, r2
 8003d3e:	4251      	negs	r1, r2
 8003d40:	414a      	adcs	r2, r1
 8003d42:	701a      	strb	r2, [r3, #0]
         if (!packetReceived && (HAL_GetTick() - BreakTimer) > (getFIFOTimeout())) return 0;
 8003d44:	183b      	adds	r3, r7, r0
 8003d46:	781b      	ldrb	r3, [r3, #0]
 8003d48:	2201      	movs	r2, #1
 8003d4a:	4053      	eors	r3, r2
 8003d4c:	b2db      	uxtb	r3, r3
 8003d4e:	2b00      	cmp	r3, #0
 8003d50:	d00d      	beq.n	8003d6e <_ZN12MPU6050_Base20GetCurrentFIFOPacketEPhh+0x17e>
 8003d52:	f002 fb09 	bl	8006368 <HAL_GetTick>
 8003d56:	0002      	movs	r2, r0
 8003d58:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003d5a:	1ad4      	subs	r4, r2, r3
 8003d5c:	68fb      	ldr	r3, [r7, #12]
 8003d5e:	0018      	movs	r0, r3
 8003d60:	f7ff ff18 	bl	8003b94 <_ZN12MPU6050_Base14getFIFOTimeoutEv>
 8003d64:	0003      	movs	r3, r0
 8003d66:	429c      	cmp	r4, r3
 8003d68:	d901      	bls.n	8003d6e <_ZN12MPU6050_Base20GetCurrentFIFOPacketEPhh+0x17e>
 8003d6a:	2301      	movs	r3, #1
 8003d6c:	e000      	b.n	8003d70 <_ZN12MPU6050_Base20GetCurrentFIFOPacketEPhh+0x180>
 8003d6e:	2300      	movs	r3, #0
 8003d70:	2b00      	cmp	r3, #0
 8003d72:	d001      	beq.n	8003d78 <_ZN12MPU6050_Base20GetCurrentFIFOPacketEPhh+0x188>
 8003d74:	2300      	movs	r3, #0
 8003d76:	e00d      	b.n	8003d94 <_ZN12MPU6050_Base20GetCurrentFIFOPacketEPhh+0x1a4>
     } while (!packetReceived);
 8003d78:	2337      	movs	r3, #55	; 0x37
 8003d7a:	18fb      	adds	r3, r7, r3
 8003d7c:	781b      	ldrb	r3, [r3, #0]
 8003d7e:	2b00      	cmp	r3, #0
 8003d80:	d100      	bne.n	8003d84 <_ZN12MPU6050_Base20GetCurrentFIFOPacketEPhh+0x194>
     do {
 8003d82:	e744      	b.n	8003c0e <_ZN12MPU6050_Base20GetCurrentFIFOPacketEPhh+0x1e>
     getFIFOBytes(data, length); //Get 1 packet
 8003d84:	1dfb      	adds	r3, r7, #7
 8003d86:	781a      	ldrb	r2, [r3, #0]
 8003d88:	68b9      	ldr	r1, [r7, #8]
 8003d8a:	68fb      	ldr	r3, [r7, #12]
 8003d8c:	0018      	movs	r0, r3
 8003d8e:	f000 f805 	bl	8003d9c <_ZN12MPU6050_Base12getFIFOBytesEPhh>
     return 1;
 8003d92:	2301      	movs	r3, #1
}
 8003d94:	0018      	movs	r0, r3
 8003d96:	46bd      	mov	sp, r7
 8003d98:	b011      	add	sp, #68	; 0x44
 8003d9a:	bd90      	pop	{r4, r7, pc}

08003d9c <_ZN12MPU6050_Base12getFIFOBytesEPhh>:

 void MPU6050_Base::getFIFOBytes(uint8_t *data, uint8_t length) {
 8003d9c:	b590      	push	{r4, r7, lr}
 8003d9e:	b087      	sub	sp, #28
 8003da0:	af02      	add	r7, sp, #8
 8003da2:	60f8      	str	r0, [r7, #12]
 8003da4:	60b9      	str	r1, [r7, #8]
 8003da6:	1dfb      	adds	r3, r7, #7
 8003da8:	701a      	strb	r2, [r3, #0]
     if(length > 0){
 8003daa:	1dfb      	adds	r3, r7, #7
 8003dac:	781b      	ldrb	r3, [r3, #0]
 8003dae:	2b00      	cmp	r3, #0
 8003db0:	d010      	beq.n	8003dd4 <_ZN12MPU6050_Base12getFIFOBytesEPhh+0x38>
         I2Cdev::readBytes(devAddr, MPU6050_RA_FIFO_R_W, length, data, I2Cdev::readTimeout, wireObj);
 8003db2:	68fb      	ldr	r3, [r7, #12]
 8003db4:	7818      	ldrb	r0, [r3, #0]
 8003db6:	4b0b      	ldr	r3, [pc, #44]	; (8003de4 <_ZN12MPU6050_Base12getFIFOBytesEPhh+0x48>)
 8003db8:	881a      	ldrh	r2, [r3, #0]
 8003dba:	68fb      	ldr	r3, [r7, #12]
 8003dbc:	685b      	ldr	r3, [r3, #4]
 8003dbe:	68bc      	ldr	r4, [r7, #8]
 8003dc0:	1df9      	adds	r1, r7, #7
 8003dc2:	7809      	ldrb	r1, [r1, #0]
 8003dc4:	9301      	str	r3, [sp, #4]
 8003dc6:	9200      	str	r2, [sp, #0]
 8003dc8:	0023      	movs	r3, r4
 8003dca:	000a      	movs	r2, r1
 8003dcc:	2174      	movs	r1, #116	; 0x74
 8003dce:	f7ff f9ef 	bl	80031b0 <_ZN6I2Cdev9readBytesEhhhPhtPv>
     } else {
     	*data = 0;
     }
 }
 8003dd2:	e002      	b.n	8003dda <_ZN12MPU6050_Base12getFIFOBytesEPhh+0x3e>
     	*data = 0;
 8003dd4:	68bb      	ldr	r3, [r7, #8]
 8003dd6:	2200      	movs	r2, #0
 8003dd8:	701a      	strb	r2, [r3, #0]
 }
 8003dda:	46c0      	nop			; (mov r8, r8)
 8003ddc:	46bd      	mov	sp, r7
 8003dde:	b005      	add	sp, #20
 8003de0:	bd90      	pop	{r4, r7, pc}
 8003de2:	46c0      	nop			; (mov r8, r8)
 8003de4:	20000000 	.word	0x20000000

08003de8 <_ZN12MPU6050_Base15getOTPBankValidEv>:

// XG_OFFS_TC register
uint8_t MPU6050_Base::getOTPBankValid() {
 8003de8:	b580      	push	{r7, lr}
 8003dea:	b084      	sub	sp, #16
 8003dec:	af02      	add	r7, sp, #8
 8003dee:	6078      	str	r0, [r7, #4]
    I2Cdev::readBit(devAddr, MPU6050_RA_XG_OFFS_TC, MPU6050_TC_OTP_BNK_VLD_BIT, buffer, I2Cdev::readTimeout, wireObj);
 8003df0:	687b      	ldr	r3, [r7, #4]
 8003df2:	7818      	ldrb	r0, [r3, #0]
 8003df4:	687b      	ldr	r3, [r7, #4]
 8003df6:	3308      	adds	r3, #8
 8003df8:	0019      	movs	r1, r3
 8003dfa:	4b08      	ldr	r3, [pc, #32]	; (8003e1c <_ZN12MPU6050_Base15getOTPBankValidEv+0x34>)
 8003dfc:	881a      	ldrh	r2, [r3, #0]
 8003dfe:	687b      	ldr	r3, [r7, #4]
 8003e00:	685b      	ldr	r3, [r3, #4]
 8003e02:	9301      	str	r3, [sp, #4]
 8003e04:	9200      	str	r2, [sp, #0]
 8003e06:	000b      	movs	r3, r1
 8003e08:	2200      	movs	r2, #0
 8003e0a:	2100      	movs	r1, #0
 8003e0c:	f7ff f974 	bl	80030f8 <_ZN6I2Cdev7readBitEhhhPhtPv>
    return buffer[0];
 8003e10:	687b      	ldr	r3, [r7, #4]
 8003e12:	7a1b      	ldrb	r3, [r3, #8]
}
 8003e14:	0018      	movs	r0, r3
 8003e16:	46bd      	mov	sp, r7
 8003e18:	b002      	add	sp, #8
 8003e1a:	bd80      	pop	{r7, pc}
 8003e1c:	20000000 	.word	0x20000000

08003e20 <_ZSt5atan2ff>:
  using ::atan2;

#ifndef __CORRECT_ISO_CPP_MATH_H_PROTO
  inline _GLIBCXX_CONSTEXPR float
  atan2(float __y, float __x)
  { return __builtin_atan2f(__y, __x); }
 8003e20:	b580      	push	{r7, lr}
 8003e22:	b082      	sub	sp, #8
 8003e24:	af00      	add	r7, sp, #0
 8003e26:	6078      	str	r0, [r7, #4]
 8003e28:	6039      	str	r1, [r7, #0]
 8003e2a:	683a      	ldr	r2, [r7, #0]
 8003e2c:	687b      	ldr	r3, [r7, #4]
 8003e2e:	1c11      	adds	r1, r2, #0
 8003e30:	1c18      	adds	r0, r3, #0
 8003e32:	f006 f8e2 	bl	8009ffa <atan2f>
 8003e36:	1c03      	adds	r3, r0, #0
 8003e38:	1c18      	adds	r0, r3, #0
 8003e3a:	46bd      	mov	sp, r7
 8003e3c:	b002      	add	sp, #8
 8003e3e:	bd80      	pop	{r7, pc}

08003e40 <_ZSt4sqrtf>:
  using ::sqrt;

#ifndef __CORRECT_ISO_CPP_MATH_H_PROTO
  inline _GLIBCXX_CONSTEXPR float
  sqrt(float __x)
  { return __builtin_sqrtf(__x); }
 8003e40:	b580      	push	{r7, lr}
 8003e42:	b082      	sub	sp, #8
 8003e44:	af00      	add	r7, sp, #0
 8003e46:	6078      	str	r0, [r7, #4]
 8003e48:	687b      	ldr	r3, [r7, #4]
 8003e4a:	1c18      	adds	r0, r3, #0
 8003e4c:	f006 f8d9 	bl	800a002 <sqrtf>
 8003e50:	1c03      	adds	r3, r0, #0
 8003e52:	1c18      	adds	r0, r3, #0
 8003e54:	46bd      	mov	sp, r7
 8003e56:	b002      	add	sp, #8
 8003e58:	bd80      	pop	{r7, pc}
	...

08003e5c <_ZN26MPU6050_6Axis_MotionApps2013dmpInitializeEv>:

#ifndef MPU6050_DMP_FIFO_RATE_DIVISOR
#define MPU6050_DMP_FIFO_RATE_DIVISOR 0x01 // The New instance of the Firmware has this as the default
#endif

uint8_t MPU6050_6Axis_MotionApps20::dmpInitialize() {
 8003e5c:	b580      	push	{r7, lr}
 8003e5e:	b088      	sub	sp, #32
 8003e60:	af04      	add	r7, sp, #16
 8003e62:	6078      	str	r0, [r7, #4]
	// reset device
	reset();
 8003e64:	687b      	ldr	r3, [r7, #4]
 8003e66:	0018      	movs	r0, r3
 8003e68:	f7ff fe68 	bl	8003b3c <_ZN12MPU6050_Base5resetEv>
	HAL_Delay(30); // wait after reset
 8003e6c:	201e      	movs	r0, #30
 8003e6e:	f002 fa85 	bl	800637c <HAL_Delay>

	// disable sleep mode
	setSleepEnabled(false);
 8003e72:	687b      	ldr	r3, [r7, #4]
 8003e74:	2100      	movs	r1, #0
 8003e76:	0018      	movs	r0, r3
 8003e78:	f7ff fb3a 	bl	80034f0 <_ZN12MPU6050_Base15setSleepEnabledEb>

	// get MPU hardware revision
	setMemoryBank(0x10, true, true);
 8003e7c:	6878      	ldr	r0, [r7, #4]
 8003e7e:	2301      	movs	r3, #1
 8003e80:	2201      	movs	r2, #1
 8003e82:	2110      	movs	r1, #16
 8003e84:	f7ff fb4b 	bl	800351e <_ZN12MPU6050_Base13setMemoryBankEhbb>
	setMemoryStartAddress(0x06);
 8003e88:	687b      	ldr	r3, [r7, #4]
 8003e8a:	2106      	movs	r1, #6
 8003e8c:	0018      	movs	r0, r3
 8003e8e:	f7ff fb7e 	bl	800358e <_ZN12MPU6050_Base21setMemoryStartAddressEh>
	//readMemoryByte();
	setMemoryBank(0, false, false);
 8003e92:	6878      	ldr	r0, [r7, #4]
 8003e94:	2300      	movs	r3, #0
 8003e96:	2200      	movs	r2, #0
 8003e98:	2100      	movs	r1, #0
 8003e9a:	f7ff fb40 	bl	800351e <_ZN12MPU6050_Base13setMemoryBankEhbb>

	// check OTP bank valid
	//DEBUG_PRINTLN(getOTPBankValid() ? F("valid!") : F("invalid!")); ?????
	getOTPBankValid();
 8003e9e:	687b      	ldr	r3, [r7, #4]
 8003ea0:	0018      	movs	r0, r3
 8003ea2:	f7ff ffa1 	bl	8003de8 <_ZN12MPU6050_Base15getOTPBankValidEv>
	// setup weird slave stuff (?)
	setSlaveAddress(0, 0x7F);
 8003ea6:	687b      	ldr	r3, [r7, #4]
 8003ea8:	227f      	movs	r2, #127	; 0x7f
 8003eaa:	2100      	movs	r1, #0
 8003eac:	0018      	movs	r0, r3
 8003eae:	f7ff fb83 	bl	80035b8 <_ZN12MPU6050_Base15setSlaveAddressEhh>
	setI2CMasterModeEnabled(false);
 8003eb2:	687b      	ldr	r3, [r7, #4]
 8003eb4:	2100      	movs	r1, #0
 8003eb6:	0018      	movs	r0, r3
 8003eb8:	f7ff fba4 	bl	8003604 <_ZN12MPU6050_Base23setI2CMasterModeEnabledEb>
	setSlaveAddress(0, 0x68);
 8003ebc:	687b      	ldr	r3, [r7, #4]
 8003ebe:	2268      	movs	r2, #104	; 0x68
 8003ec0:	2100      	movs	r1, #0
 8003ec2:	0018      	movs	r0, r3
 8003ec4:	f7ff fb78 	bl	80035b8 <_ZN12MPU6050_Base15setSlaveAddressEhh>
	resetI2CMaster();
 8003ec8:	687b      	ldr	r3, [r7, #4]
 8003eca:	0018      	movs	r0, r3
 8003ecc:	f7ff fbb1 	bl	8003632 <_ZN12MPU6050_Base14resetI2CMasterEv>
	HAL_Delay(20);
 8003ed0:	2014      	movs	r0, #20
 8003ed2:	f002 fa53 	bl	800637c <HAL_Delay>
	setClockSource(MPU6050_CLOCK_PLL_ZGYRO);
 8003ed6:	687b      	ldr	r3, [r7, #4]
 8003ed8:	2103      	movs	r1, #3
 8003eda:	0018      	movs	r0, r3
 8003edc:	f7ff fbbb 	bl	8003656 <_ZN12MPU6050_Base14setClockSourceEh>
	setIntEnabled(1<<MPU6050_INTERRUPT_FIFO_OFLOW_BIT|1<<MPU6050_INTERRUPT_DMP_INT_BIT);
 8003ee0:	687b      	ldr	r3, [r7, #4]
 8003ee2:	2112      	movs	r1, #18
 8003ee4:	0018      	movs	r0, r3
 8003ee6:	f7ff fbce 	bl	8003686 <_ZN12MPU6050_Base13setIntEnabledEh>
	setRate(4); // 1khz / (1 + 4) = 200 Hz
 8003eea:	687b      	ldr	r3, [r7, #4]
 8003eec:	2104      	movs	r1, #4
 8003eee:	0018      	movs	r0, r3
 8003ef0:	f7ff fbde 	bl	80036b0 <_ZN12MPU6050_Base7setRateEh>
	setExternalFrameSync(MPU6050_EXT_SYNC_TEMP_OUT_L);
 8003ef4:	687b      	ldr	r3, [r7, #4]
 8003ef6:	2101      	movs	r1, #1
 8003ef8:	0018      	movs	r0, r3
 8003efa:	f7ff fbee 	bl	80036da <_ZN12MPU6050_Base20setExternalFrameSyncEh>
	setDLPFMode(MPU6050_DLPF_BW_42);
 8003efe:	687b      	ldr	r3, [r7, #4]
 8003f00:	2103      	movs	r1, #3
 8003f02:	0018      	movs	r0, r3
 8003f04:	f7ff fc01 	bl	800370a <_ZN12MPU6050_Base11setDLPFModeEh>
	setFullScaleGyroRange(MPU6050_GYRO_FS_2000);
 8003f08:	687b      	ldr	r3, [r7, #4]
 8003f0a:	2103      	movs	r1, #3
 8003f0c:	0018      	movs	r0, r3
 8003f0e:	f7ff fc14 	bl	800373a <_ZN12MPU6050_Base21setFullScaleGyroRangeEh>
	// load DMP code into memory banks
	if (!writeProgMemoryBlock(dmpMemory, MPU6050_DMP_CODE_SIZE)) return 1; // Failed
 8003f12:	6878      	ldr	r0, [r7, #4]
 8003f14:	4a31      	ldr	r2, [pc, #196]	; (8003fdc <_ZN26MPU6050_6Axis_MotionApps2013dmpInitializeEv+0x180>)
 8003f16:	4932      	ldr	r1, [pc, #200]	; (8003fe0 <_ZN26MPU6050_6Axis_MotionApps2013dmpInitializeEv+0x184>)
 8003f18:	2301      	movs	r3, #1
 8003f1a:	9301      	str	r3, [sp, #4]
 8003f1c:	2300      	movs	r3, #0
 8003f1e:	9300      	str	r3, [sp, #0]
 8003f20:	2300      	movs	r3, #0
 8003f22:	f7ff fc22 	bl	800376a <_ZN12MPU6050_Base20writeProgMemoryBlockEPKhthhb>
 8003f26:	0003      	movs	r3, r0
 8003f28:	001a      	movs	r2, r3
 8003f2a:	2301      	movs	r3, #1
 8003f2c:	4053      	eors	r3, r2
 8003f2e:	b2db      	uxtb	r3, r3
 8003f30:	2b00      	cmp	r3, #0
 8003f32:	d001      	beq.n	8003f38 <_ZN26MPU6050_6Axis_MotionApps2013dmpInitializeEv+0xdc>
 8003f34:	2301      	movs	r3, #1
 8003f36:	e04d      	b.n	8003fd4 <_ZN26MPU6050_6Axis_MotionApps2013dmpInitializeEv+0x178>
	// Set the FIFO Rate Divisor int the DMP Firmware Memory
	unsigned char dmpUpdate[] = {0x00, MPU6050_DMP_FIFO_RATE_DIVISOR};
 8003f38:	210c      	movs	r1, #12
 8003f3a:	187b      	adds	r3, r7, r1
 8003f3c:	2280      	movs	r2, #128	; 0x80
 8003f3e:	0052      	lsls	r2, r2, #1
 8003f40:	801a      	strh	r2, [r3, #0]
	writeMemoryBlock(dmpUpdate, 0x02, 0x02, 0x16); // Lets write the dmpUpdate data to the Firmware image, we have 2 bytes to write in bank 0x02 with the Offset 0x16
 8003f42:	6878      	ldr	r0, [r7, #4]
 8003f44:	1879      	adds	r1, r7, r1
 8003f46:	2300      	movs	r3, #0
 8003f48:	9302      	str	r3, [sp, #8]
 8003f4a:	2301      	movs	r3, #1
 8003f4c:	9301      	str	r3, [sp, #4]
 8003f4e:	2316      	movs	r3, #22
 8003f50:	9300      	str	r3, [sp, #0]
 8003f52:	2302      	movs	r3, #2
 8003f54:	2202      	movs	r2, #2
 8003f56:	f7ff fc2b 	bl	80037b0 <_ZN12MPU6050_Base16writeMemoryBlockEPKhthhbb>
	//write start address MSB into register
	setDMPConfig1(0x03);
 8003f5a:	687b      	ldr	r3, [r7, #4]
 8003f5c:	2103      	movs	r1, #3
 8003f5e:	0018      	movs	r0, r3
 8003f60:	f7ff fd05 	bl	800396e <_ZN12MPU6050_Base13setDMPConfig1Eh>
	//write start address LSB into register
	setDMPConfig2(0x00);
 8003f64:	687b      	ldr	r3, [r7, #4]
 8003f66:	2100      	movs	r1, #0
 8003f68:	0018      	movs	r0, r3
 8003f6a:	f7ff fd15 	bl	8003998 <_ZN12MPU6050_Base13setDMPConfig2Eh>
	setOTPBankValid(false);
 8003f6e:	687b      	ldr	r3, [r7, #4]
 8003f70:	2100      	movs	r1, #0
 8003f72:	0018      	movs	r0, r3
 8003f74:	f7ff fd25 	bl	80039c2 <_ZN12MPU6050_Base15setOTPBankValidEb>
	setMotionDetectionThreshold(2);
 8003f78:	687b      	ldr	r3, [r7, #4]
 8003f7a:	2102      	movs	r1, #2
 8003f7c:	0018      	movs	r0, r3
 8003f7e:	f7ff fd37 	bl	80039f0 <_ZN12MPU6050_Base27setMotionDetectionThresholdEh>
	setZeroMotionDetectionThreshold(156);
 8003f82:	687b      	ldr	r3, [r7, #4]
 8003f84:	219c      	movs	r1, #156	; 0x9c
 8003f86:	0018      	movs	r0, r3
 8003f88:	f7ff fd47 	bl	8003a1a <_ZN12MPU6050_Base31setZeroMotionDetectionThresholdEh>
	setMotionDetectionDuration(80);
 8003f8c:	687b      	ldr	r3, [r7, #4]
 8003f8e:	2150      	movs	r1, #80	; 0x50
 8003f90:	0018      	movs	r0, r3
 8003f92:	f7ff fd57 	bl	8003a44 <_ZN12MPU6050_Base26setMotionDetectionDurationEh>
	setZeroMotionDetectionDuration(0);
 8003f96:	687b      	ldr	r3, [r7, #4]
 8003f98:	2100      	movs	r1, #0
 8003f9a:	0018      	movs	r0, r3
 8003f9c:	f7ff fd67 	bl	8003a6e <_ZN12MPU6050_Base30setZeroMotionDetectionDurationEh>
	setFIFOEnabled(true);
 8003fa0:	687b      	ldr	r3, [r7, #4]
 8003fa2:	2101      	movs	r1, #1
 8003fa4:	0018      	movs	r0, r3
 8003fa6:	f7ff fd77 	bl	8003a98 <_ZN12MPU6050_Base14setFIFOEnabledEb>
	resetDMP();
 8003faa:	687b      	ldr	r3, [r7, #4]
 8003fac:	0018      	movs	r0, r3
 8003fae:	f7ff fdb3 	bl	8003b18 <_ZN12MPU6050_Base8resetDMPEv>
	setDMPEnabled(false);
 8003fb2:	687b      	ldr	r3, [r7, #4]
 8003fb4:	2100      	movs	r1, #0
 8003fb6:	0018      	movs	r0, r3
 8003fb8:	f7ff fd85 	bl	8003ac6 <_ZN12MPU6050_Base13setDMPEnabledEb>
	dmpPacketSize = 42;
 8003fbc:	687b      	ldr	r3, [r7, #4]
 8003fbe:	222a      	movs	r2, #42	; 0x2a
 8003fc0:	859a      	strh	r2, [r3, #44]	; 0x2c
	resetFIFO();
 8003fc2:	687b      	ldr	r3, [r7, #4]
 8003fc4:	0018      	movs	r0, r3
 8003fc6:	f7ff fd95 	bl	8003af4 <_ZN12MPU6050_Base9resetFIFOEv>
	getIntStatus();
 8003fca:	687b      	ldr	r3, [r7, #4]
 8003fcc:	0018      	movs	r0, r3
 8003fce:	f7ff fdc7 	bl	8003b60 <_ZN12MPU6050_Base12getIntStatusEv>
	return 0; // success
 8003fd2:	2300      	movs	r3, #0
}
 8003fd4:	0018      	movs	r0, r3
 8003fd6:	46bd      	mov	sp, r7
 8003fd8:	b004      	add	sp, #16
 8003fda:	bd80      	pop	{r7, pc}
 8003fdc:	00000789 	.word	0x00000789
 8003fe0:	0800a8c0 	.word	0x0800a8c0

08003fe4 <_ZN26MPU6050_6Axis_MotionApps2023dmpGetCurrentFIFOPacketEPh>:

uint8_t MPU6050_6Axis_MotionApps20::dmpGetCurrentFIFOPacket(uint8_t *data) { // overflow proof
 8003fe4:	b580      	push	{r7, lr}
 8003fe6:	b082      	sub	sp, #8
 8003fe8:	af00      	add	r7, sp, #0
 8003fea:	6078      	str	r0, [r7, #4]
 8003fec:	6039      	str	r1, [r7, #0]
    return(GetCurrentFIFOPacket(data, dmpPacketSize));
 8003fee:	6878      	ldr	r0, [r7, #4]
 8003ff0:	687b      	ldr	r3, [r7, #4]
 8003ff2:	8d9b      	ldrh	r3, [r3, #44]	; 0x2c
 8003ff4:	b2da      	uxtb	r2, r3
 8003ff6:	683b      	ldr	r3, [r7, #0]
 8003ff8:	0019      	movs	r1, r3
 8003ffa:	f7ff fdf9 	bl	8003bf0 <_ZN12MPU6050_Base20GetCurrentFIFOPacketEPhh>
 8003ffe:	0003      	movs	r3, r0
 8004000:	b2db      	uxtb	r3, r3
}
 8004002:	0018      	movs	r0, r3
 8004004:	46bd      	mov	sp, r7
 8004006:	b002      	add	sp, #8
 8004008:	bd80      	pop	{r7, pc}

0800400a <_ZN26MPU6050_6Axis_MotionApps2016dmpGetQuaternionEPsPKh>:
    data[1] = (((uint32_t)packet[4] << 24) | ((uint32_t)packet[5] << 16) | ((uint32_t)packet[6] << 8) | packet[7]);
    data[2] = (((uint32_t)packet[8] << 24) | ((uint32_t)packet[9] << 16) | ((uint32_t)packet[10] << 8) | packet[11]);
    data[3] = (((uint32_t)packet[12] << 24) | ((uint32_t)packet[13] << 16) | ((uint32_t)packet[14] << 8) | packet[15]);
    return 0;
}
uint8_t MPU6050_6Axis_MotionApps20::dmpGetQuaternion(int16_t *data, const uint8_t* packet) {
 800400a:	b580      	push	{r7, lr}
 800400c:	b084      	sub	sp, #16
 800400e:	af00      	add	r7, sp, #0
 8004010:	60f8      	str	r0, [r7, #12]
 8004012:	60b9      	str	r1, [r7, #8]
 8004014:	607a      	str	r2, [r7, #4]
    // TODO: accommodate different arrangements of sent data (ONLY default supported now)
    if (packet == 0) packet = dmpPacketBuffer;
 8004016:	687b      	ldr	r3, [r7, #4]
 8004018:	2b00      	cmp	r3, #0
 800401a:	d102      	bne.n	8004022 <_ZN26MPU6050_6Axis_MotionApps2016dmpGetQuaternionEPsPKh+0x18>
 800401c:	68fb      	ldr	r3, [r7, #12]
 800401e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004020:	607b      	str	r3, [r7, #4]
    data[0] = ((packet[0] << 8) | packet[1]);
 8004022:	687b      	ldr	r3, [r7, #4]
 8004024:	781b      	ldrb	r3, [r3, #0]
 8004026:	021b      	lsls	r3, r3, #8
 8004028:	b21a      	sxth	r2, r3
 800402a:	687b      	ldr	r3, [r7, #4]
 800402c:	3301      	adds	r3, #1
 800402e:	781b      	ldrb	r3, [r3, #0]
 8004030:	b21b      	sxth	r3, r3
 8004032:	4313      	orrs	r3, r2
 8004034:	b21a      	sxth	r2, r3
 8004036:	68bb      	ldr	r3, [r7, #8]
 8004038:	801a      	strh	r2, [r3, #0]
    data[1] = ((packet[4] << 8) | packet[5]);
 800403a:	687b      	ldr	r3, [r7, #4]
 800403c:	3304      	adds	r3, #4
 800403e:	781b      	ldrb	r3, [r3, #0]
 8004040:	021b      	lsls	r3, r3, #8
 8004042:	b219      	sxth	r1, r3
 8004044:	687b      	ldr	r3, [r7, #4]
 8004046:	3305      	adds	r3, #5
 8004048:	781b      	ldrb	r3, [r3, #0]
 800404a:	b21a      	sxth	r2, r3
 800404c:	68bb      	ldr	r3, [r7, #8]
 800404e:	3302      	adds	r3, #2
 8004050:	430a      	orrs	r2, r1
 8004052:	b212      	sxth	r2, r2
 8004054:	801a      	strh	r2, [r3, #0]
    data[2] = ((packet[8] << 8) | packet[9]);
 8004056:	687b      	ldr	r3, [r7, #4]
 8004058:	3308      	adds	r3, #8
 800405a:	781b      	ldrb	r3, [r3, #0]
 800405c:	021b      	lsls	r3, r3, #8
 800405e:	b219      	sxth	r1, r3
 8004060:	687b      	ldr	r3, [r7, #4]
 8004062:	3309      	adds	r3, #9
 8004064:	781b      	ldrb	r3, [r3, #0]
 8004066:	b21a      	sxth	r2, r3
 8004068:	68bb      	ldr	r3, [r7, #8]
 800406a:	3304      	adds	r3, #4
 800406c:	430a      	orrs	r2, r1
 800406e:	b212      	sxth	r2, r2
 8004070:	801a      	strh	r2, [r3, #0]
    data[3] = ((packet[12] << 8) | packet[13]);
 8004072:	687b      	ldr	r3, [r7, #4]
 8004074:	330c      	adds	r3, #12
 8004076:	781b      	ldrb	r3, [r3, #0]
 8004078:	021b      	lsls	r3, r3, #8
 800407a:	b219      	sxth	r1, r3
 800407c:	687b      	ldr	r3, [r7, #4]
 800407e:	330d      	adds	r3, #13
 8004080:	781b      	ldrb	r3, [r3, #0]
 8004082:	b21a      	sxth	r2, r3
 8004084:	68bb      	ldr	r3, [r7, #8]
 8004086:	3306      	adds	r3, #6
 8004088:	430a      	orrs	r2, r1
 800408a:	b212      	sxth	r2, r2
 800408c:	801a      	strh	r2, [r3, #0]
    return 0;
 800408e:	2300      	movs	r3, #0
}
 8004090:	0018      	movs	r0, r3
 8004092:	46bd      	mov	sp, r7
 8004094:	b004      	add	sp, #16
 8004096:	bd80      	pop	{r7, pc}

08004098 <_ZN26MPU6050_6Axis_MotionApps2016dmpGetQuaternionEP10QuaternionPKh>:
uint8_t MPU6050_6Axis_MotionApps20::dmpGetQuaternion(Quaternion *q, const uint8_t* packet) {
 8004098:	b5f0      	push	{r4, r5, r6, r7, lr}
 800409a:	b089      	sub	sp, #36	; 0x24
 800409c:	af00      	add	r7, sp, #0
 800409e:	60f8      	str	r0, [r7, #12]
 80040a0:	60b9      	str	r1, [r7, #8]
 80040a2:	607a      	str	r2, [r7, #4]
    // TODO: accommodate different arrangements of sent data (ONLY default supported now)
    int16_t qI[4];
    uint8_t status = dmpGetQuaternion(qI, packet);
 80040a4:	261f      	movs	r6, #31
 80040a6:	19bc      	adds	r4, r7, r6
 80040a8:	687a      	ldr	r2, [r7, #4]
 80040aa:	2514      	movs	r5, #20
 80040ac:	1979      	adds	r1, r7, r5
 80040ae:	68fb      	ldr	r3, [r7, #12]
 80040b0:	0018      	movs	r0, r3
 80040b2:	f7ff ffaa 	bl	800400a <_ZN26MPU6050_6Axis_MotionApps2016dmpGetQuaternionEPsPKh>
 80040b6:	0003      	movs	r3, r0
 80040b8:	7023      	strb	r3, [r4, #0]
    if (status == 0) {
 80040ba:	19bb      	adds	r3, r7, r6
 80040bc:	781b      	ldrb	r3, [r3, #0]
 80040be:	2b00      	cmp	r3, #0
 80040c0:	d141      	bne.n	8004146 <_ZN26MPU6050_6Axis_MotionApps2016dmpGetQuaternionEP10QuaternionPKh+0xae>
        q -> w = (float)qI[0] / 16384.0f;
 80040c2:	197b      	adds	r3, r7, r5
 80040c4:	2200      	movs	r2, #0
 80040c6:	5e9b      	ldrsh	r3, [r3, r2]
 80040c8:	0018      	movs	r0, r3
 80040ca:	f7fd f8b1 	bl	8001230 <__aeabi_i2f>
 80040ce:	1c03      	adds	r3, r0, #0
 80040d0:	218d      	movs	r1, #141	; 0x8d
 80040d2:	05c9      	lsls	r1, r1, #23
 80040d4:	1c18      	adds	r0, r3, #0
 80040d6:	f7fc fbd9 	bl	800088c <__aeabi_fdiv>
 80040da:	1c03      	adds	r3, r0, #0
 80040dc:	1c1a      	adds	r2, r3, #0
 80040de:	68bb      	ldr	r3, [r7, #8]
 80040e0:	601a      	str	r2, [r3, #0]
        q -> x = (float)qI[1] / 16384.0f;
 80040e2:	197b      	adds	r3, r7, r5
 80040e4:	2202      	movs	r2, #2
 80040e6:	5e9b      	ldrsh	r3, [r3, r2]
 80040e8:	0018      	movs	r0, r3
 80040ea:	f7fd f8a1 	bl	8001230 <__aeabi_i2f>
 80040ee:	1c03      	adds	r3, r0, #0
 80040f0:	218d      	movs	r1, #141	; 0x8d
 80040f2:	05c9      	lsls	r1, r1, #23
 80040f4:	1c18      	adds	r0, r3, #0
 80040f6:	f7fc fbc9 	bl	800088c <__aeabi_fdiv>
 80040fa:	1c03      	adds	r3, r0, #0
 80040fc:	1c1a      	adds	r2, r3, #0
 80040fe:	68bb      	ldr	r3, [r7, #8]
 8004100:	605a      	str	r2, [r3, #4]
        q -> y = (float)qI[2] / 16384.0f;
 8004102:	197b      	adds	r3, r7, r5
 8004104:	2204      	movs	r2, #4
 8004106:	5e9b      	ldrsh	r3, [r3, r2]
 8004108:	0018      	movs	r0, r3
 800410a:	f7fd f891 	bl	8001230 <__aeabi_i2f>
 800410e:	1c03      	adds	r3, r0, #0
 8004110:	218d      	movs	r1, #141	; 0x8d
 8004112:	05c9      	lsls	r1, r1, #23
 8004114:	1c18      	adds	r0, r3, #0
 8004116:	f7fc fbb9 	bl	800088c <__aeabi_fdiv>
 800411a:	1c03      	adds	r3, r0, #0
 800411c:	1c1a      	adds	r2, r3, #0
 800411e:	68bb      	ldr	r3, [r7, #8]
 8004120:	609a      	str	r2, [r3, #8]
        q -> z = (float)qI[3] / 16384.0f;
 8004122:	197b      	adds	r3, r7, r5
 8004124:	2206      	movs	r2, #6
 8004126:	5e9b      	ldrsh	r3, [r3, r2]
 8004128:	0018      	movs	r0, r3
 800412a:	f7fd f881 	bl	8001230 <__aeabi_i2f>
 800412e:	1c03      	adds	r3, r0, #0
 8004130:	218d      	movs	r1, #141	; 0x8d
 8004132:	05c9      	lsls	r1, r1, #23
 8004134:	1c18      	adds	r0, r3, #0
 8004136:	f7fc fba9 	bl	800088c <__aeabi_fdiv>
 800413a:	1c03      	adds	r3, r0, #0
 800413c:	1c1a      	adds	r2, r3, #0
 800413e:	68bb      	ldr	r3, [r7, #8]
 8004140:	60da      	str	r2, [r3, #12]
        return 0;
 8004142:	2300      	movs	r3, #0
 8004144:	e002      	b.n	800414c <_ZN26MPU6050_6Axis_MotionApps2016dmpGetQuaternionEP10QuaternionPKh+0xb4>
    }
    return status; // int16 return value, indicates error if this line is reached
 8004146:	231f      	movs	r3, #31
 8004148:	18fb      	adds	r3, r7, r3
 800414a:	781b      	ldrb	r3, [r3, #0]
}
 800414c:	0018      	movs	r0, r3
 800414e:	46bd      	mov	sp, r7
 8004150:	b009      	add	sp, #36	; 0x24
 8004152:	bdf0      	pop	{r4, r5, r6, r7, pc}

08004154 <_ZN26MPU6050_6Axis_MotionApps2013dmpGetGravityEP11VectorFloatP10Quaternion>:
    data[2] = ((int32_t)qI[0] * qI[0] - (int32_t)qI[1] * qI[1]
	       - (int32_t)qI[2] * qI[2] + (int32_t)qI[3] * qI[3]) / (int32_t)(2 * 16384L);
    return status;
}

uint8_t MPU6050_6Axis_MotionApps20::dmpGetGravity(VectorFloat *v, Quaternion *q) {
 8004154:	b590      	push	{r4, r7, lr}
 8004156:	b085      	sub	sp, #20
 8004158:	af00      	add	r7, sp, #0
 800415a:	60f8      	str	r0, [r7, #12]
 800415c:	60b9      	str	r1, [r7, #8]
 800415e:	607a      	str	r2, [r7, #4]
    v -> x = 2 * (q -> x*q -> z - q -> w*q -> y);
 8004160:	687b      	ldr	r3, [r7, #4]
 8004162:	685a      	ldr	r2, [r3, #4]
 8004164:	687b      	ldr	r3, [r7, #4]
 8004166:	68db      	ldr	r3, [r3, #12]
 8004168:	1c19      	adds	r1, r3, #0
 800416a:	1c10      	adds	r0, r2, #0
 800416c:	f7fc fd56 	bl	8000c1c <__aeabi_fmul>
 8004170:	1c03      	adds	r3, r0, #0
 8004172:	1c1c      	adds	r4, r3, #0
 8004174:	687b      	ldr	r3, [r7, #4]
 8004176:	681a      	ldr	r2, [r3, #0]
 8004178:	687b      	ldr	r3, [r7, #4]
 800417a:	689b      	ldr	r3, [r3, #8]
 800417c:	1c19      	adds	r1, r3, #0
 800417e:	1c10      	adds	r0, r2, #0
 8004180:	f7fc fd4c 	bl	8000c1c <__aeabi_fmul>
 8004184:	1c03      	adds	r3, r0, #0
 8004186:	1c19      	adds	r1, r3, #0
 8004188:	1c20      	adds	r0, r4, #0
 800418a:	f7fc fe6d 	bl	8000e68 <__aeabi_fsub>
 800418e:	1c03      	adds	r3, r0, #0
 8004190:	1c19      	adds	r1, r3, #0
 8004192:	1c18      	adds	r0, r3, #0
 8004194:	f7fc f9dc 	bl	8000550 <__aeabi_fadd>
 8004198:	1c03      	adds	r3, r0, #0
 800419a:	1c1a      	adds	r2, r3, #0
 800419c:	68bb      	ldr	r3, [r7, #8]
 800419e:	601a      	str	r2, [r3, #0]
    v -> y = 2 * (q -> w*q -> x + q -> y*q -> z);
 80041a0:	687b      	ldr	r3, [r7, #4]
 80041a2:	681a      	ldr	r2, [r3, #0]
 80041a4:	687b      	ldr	r3, [r7, #4]
 80041a6:	685b      	ldr	r3, [r3, #4]
 80041a8:	1c19      	adds	r1, r3, #0
 80041aa:	1c10      	adds	r0, r2, #0
 80041ac:	f7fc fd36 	bl	8000c1c <__aeabi_fmul>
 80041b0:	1c03      	adds	r3, r0, #0
 80041b2:	1c1c      	adds	r4, r3, #0
 80041b4:	687b      	ldr	r3, [r7, #4]
 80041b6:	689a      	ldr	r2, [r3, #8]
 80041b8:	687b      	ldr	r3, [r7, #4]
 80041ba:	68db      	ldr	r3, [r3, #12]
 80041bc:	1c19      	adds	r1, r3, #0
 80041be:	1c10      	adds	r0, r2, #0
 80041c0:	f7fc fd2c 	bl	8000c1c <__aeabi_fmul>
 80041c4:	1c03      	adds	r3, r0, #0
 80041c6:	1c19      	adds	r1, r3, #0
 80041c8:	1c20      	adds	r0, r4, #0
 80041ca:	f7fc f9c1 	bl	8000550 <__aeabi_fadd>
 80041ce:	1c03      	adds	r3, r0, #0
 80041d0:	1c19      	adds	r1, r3, #0
 80041d2:	1c18      	adds	r0, r3, #0
 80041d4:	f7fc f9bc 	bl	8000550 <__aeabi_fadd>
 80041d8:	1c03      	adds	r3, r0, #0
 80041da:	1c1a      	adds	r2, r3, #0
 80041dc:	68bb      	ldr	r3, [r7, #8]
 80041de:	605a      	str	r2, [r3, #4]
    v -> z = q -> w*q -> w - q -> x*q -> x - q -> y*q -> y + q -> z*q -> z;
 80041e0:	687b      	ldr	r3, [r7, #4]
 80041e2:	681a      	ldr	r2, [r3, #0]
 80041e4:	687b      	ldr	r3, [r7, #4]
 80041e6:	681b      	ldr	r3, [r3, #0]
 80041e8:	1c19      	adds	r1, r3, #0
 80041ea:	1c10      	adds	r0, r2, #0
 80041ec:	f7fc fd16 	bl	8000c1c <__aeabi_fmul>
 80041f0:	1c03      	adds	r3, r0, #0
 80041f2:	1c1c      	adds	r4, r3, #0
 80041f4:	687b      	ldr	r3, [r7, #4]
 80041f6:	685a      	ldr	r2, [r3, #4]
 80041f8:	687b      	ldr	r3, [r7, #4]
 80041fa:	685b      	ldr	r3, [r3, #4]
 80041fc:	1c19      	adds	r1, r3, #0
 80041fe:	1c10      	adds	r0, r2, #0
 8004200:	f7fc fd0c 	bl	8000c1c <__aeabi_fmul>
 8004204:	1c03      	adds	r3, r0, #0
 8004206:	1c19      	adds	r1, r3, #0
 8004208:	1c20      	adds	r0, r4, #0
 800420a:	f7fc fe2d 	bl	8000e68 <__aeabi_fsub>
 800420e:	1c03      	adds	r3, r0, #0
 8004210:	1c1c      	adds	r4, r3, #0
 8004212:	687b      	ldr	r3, [r7, #4]
 8004214:	689a      	ldr	r2, [r3, #8]
 8004216:	687b      	ldr	r3, [r7, #4]
 8004218:	689b      	ldr	r3, [r3, #8]
 800421a:	1c19      	adds	r1, r3, #0
 800421c:	1c10      	adds	r0, r2, #0
 800421e:	f7fc fcfd 	bl	8000c1c <__aeabi_fmul>
 8004222:	1c03      	adds	r3, r0, #0
 8004224:	1c19      	adds	r1, r3, #0
 8004226:	1c20      	adds	r0, r4, #0
 8004228:	f7fc fe1e 	bl	8000e68 <__aeabi_fsub>
 800422c:	1c03      	adds	r3, r0, #0
 800422e:	1c1c      	adds	r4, r3, #0
 8004230:	687b      	ldr	r3, [r7, #4]
 8004232:	68da      	ldr	r2, [r3, #12]
 8004234:	687b      	ldr	r3, [r7, #4]
 8004236:	68db      	ldr	r3, [r3, #12]
 8004238:	1c19      	adds	r1, r3, #0
 800423a:	1c10      	adds	r0, r2, #0
 800423c:	f7fc fcee 	bl	8000c1c <__aeabi_fmul>
 8004240:	1c03      	adds	r3, r0, #0
 8004242:	1c19      	adds	r1, r3, #0
 8004244:	1c20      	adds	r0, r4, #0
 8004246:	f7fc f983 	bl	8000550 <__aeabi_fadd>
 800424a:	1c03      	adds	r3, r0, #0
 800424c:	1c1a      	adds	r2, r3, #0
 800424e:	68bb      	ldr	r3, [r7, #8]
 8004250:	609a      	str	r2, [r3, #8]
    return 0;
 8004252:	2300      	movs	r3, #0
}
 8004254:	0018      	movs	r0, r3
 8004256:	46bd      	mov	sp, r7
 8004258:	b005      	add	sp, #20
 800425a:	bd90      	pop	{r4, r7, pc}

0800425c <_ZN26MPU6050_6Axis_MotionApps2018dmpGetYawPitchRollEPfP10QuaternionP11VectorFloat>:

uint8_t MPU6050_6Axis_MotionApps20::dmpGetYawPitchRoll(float *data, Quaternion *q, VectorFloat *gravity) {
 800425c:	b5b0      	push	{r4, r5, r7, lr}
 800425e:	b084      	sub	sp, #16
 8004260:	af00      	add	r7, sp, #0
 8004262:	60f8      	str	r0, [r7, #12]
 8004264:	60b9      	str	r1, [r7, #8]
 8004266:	607a      	str	r2, [r7, #4]
 8004268:	603b      	str	r3, [r7, #0]
    // yaw: (about Z axis)
    data[0] = atan2(2*q -> x*q -> y - 2*q -> w*q -> z, 2*q -> w*q -> w + 2*q -> x*q -> x - 1);
 800426a:	687b      	ldr	r3, [r7, #4]
 800426c:	685b      	ldr	r3, [r3, #4]
 800426e:	1c19      	adds	r1, r3, #0
 8004270:	1c18      	adds	r0, r3, #0
 8004272:	f7fc f96d 	bl	8000550 <__aeabi_fadd>
 8004276:	1c03      	adds	r3, r0, #0
 8004278:	1c1a      	adds	r2, r3, #0
 800427a:	687b      	ldr	r3, [r7, #4]
 800427c:	689b      	ldr	r3, [r3, #8]
 800427e:	1c19      	adds	r1, r3, #0
 8004280:	1c10      	adds	r0, r2, #0
 8004282:	f7fc fccb 	bl	8000c1c <__aeabi_fmul>
 8004286:	1c03      	adds	r3, r0, #0
 8004288:	1c1c      	adds	r4, r3, #0
 800428a:	687b      	ldr	r3, [r7, #4]
 800428c:	681b      	ldr	r3, [r3, #0]
 800428e:	1c19      	adds	r1, r3, #0
 8004290:	1c18      	adds	r0, r3, #0
 8004292:	f7fc f95d 	bl	8000550 <__aeabi_fadd>
 8004296:	1c03      	adds	r3, r0, #0
 8004298:	1c1a      	adds	r2, r3, #0
 800429a:	687b      	ldr	r3, [r7, #4]
 800429c:	68db      	ldr	r3, [r3, #12]
 800429e:	1c19      	adds	r1, r3, #0
 80042a0:	1c10      	adds	r0, r2, #0
 80042a2:	f7fc fcbb 	bl	8000c1c <__aeabi_fmul>
 80042a6:	1c03      	adds	r3, r0, #0
 80042a8:	1c19      	adds	r1, r3, #0
 80042aa:	1c20      	adds	r0, r4, #0
 80042ac:	f7fc fddc 	bl	8000e68 <__aeabi_fsub>
 80042b0:	1c03      	adds	r3, r0, #0
 80042b2:	1c1c      	adds	r4, r3, #0
 80042b4:	687b      	ldr	r3, [r7, #4]
 80042b6:	681b      	ldr	r3, [r3, #0]
 80042b8:	1c19      	adds	r1, r3, #0
 80042ba:	1c18      	adds	r0, r3, #0
 80042bc:	f7fc f948 	bl	8000550 <__aeabi_fadd>
 80042c0:	1c03      	adds	r3, r0, #0
 80042c2:	1c1a      	adds	r2, r3, #0
 80042c4:	687b      	ldr	r3, [r7, #4]
 80042c6:	681b      	ldr	r3, [r3, #0]
 80042c8:	1c19      	adds	r1, r3, #0
 80042ca:	1c10      	adds	r0, r2, #0
 80042cc:	f7fc fca6 	bl	8000c1c <__aeabi_fmul>
 80042d0:	1c03      	adds	r3, r0, #0
 80042d2:	1c1d      	adds	r5, r3, #0
 80042d4:	687b      	ldr	r3, [r7, #4]
 80042d6:	685b      	ldr	r3, [r3, #4]
 80042d8:	1c19      	adds	r1, r3, #0
 80042da:	1c18      	adds	r0, r3, #0
 80042dc:	f7fc f938 	bl	8000550 <__aeabi_fadd>
 80042e0:	1c03      	adds	r3, r0, #0
 80042e2:	1c1a      	adds	r2, r3, #0
 80042e4:	687b      	ldr	r3, [r7, #4]
 80042e6:	685b      	ldr	r3, [r3, #4]
 80042e8:	1c19      	adds	r1, r3, #0
 80042ea:	1c10      	adds	r0, r2, #0
 80042ec:	f7fc fc96 	bl	8000c1c <__aeabi_fmul>
 80042f0:	1c03      	adds	r3, r0, #0
 80042f2:	1c19      	adds	r1, r3, #0
 80042f4:	1c28      	adds	r0, r5, #0
 80042f6:	f7fc f92b 	bl	8000550 <__aeabi_fadd>
 80042fa:	1c03      	adds	r3, r0, #0
 80042fc:	21fe      	movs	r1, #254	; 0xfe
 80042fe:	0589      	lsls	r1, r1, #22
 8004300:	1c18      	adds	r0, r3, #0
 8004302:	f7fc fdb1 	bl	8000e68 <__aeabi_fsub>
 8004306:	1c03      	adds	r3, r0, #0
 8004308:	1c19      	adds	r1, r3, #0
 800430a:	1c20      	adds	r0, r4, #0
 800430c:	f7ff fd88 	bl	8003e20 <_ZSt5atan2ff>
 8004310:	1c02      	adds	r2, r0, #0
 8004312:	68bb      	ldr	r3, [r7, #8]
 8004314:	601a      	str	r2, [r3, #0]
    // pitch: (nose up/down, about Y axis)
    data[1] = atan2(gravity -> x , sqrt(gravity -> y*gravity -> y + gravity -> z*gravity -> z));
 8004316:	683b      	ldr	r3, [r7, #0]
 8004318:	681d      	ldr	r5, [r3, #0]
 800431a:	683b      	ldr	r3, [r7, #0]
 800431c:	685a      	ldr	r2, [r3, #4]
 800431e:	683b      	ldr	r3, [r7, #0]
 8004320:	685b      	ldr	r3, [r3, #4]
 8004322:	1c19      	adds	r1, r3, #0
 8004324:	1c10      	adds	r0, r2, #0
 8004326:	f7fc fc79 	bl	8000c1c <__aeabi_fmul>
 800432a:	1c03      	adds	r3, r0, #0
 800432c:	1c1c      	adds	r4, r3, #0
 800432e:	683b      	ldr	r3, [r7, #0]
 8004330:	689a      	ldr	r2, [r3, #8]
 8004332:	683b      	ldr	r3, [r7, #0]
 8004334:	689b      	ldr	r3, [r3, #8]
 8004336:	1c19      	adds	r1, r3, #0
 8004338:	1c10      	adds	r0, r2, #0
 800433a:	f7fc fc6f 	bl	8000c1c <__aeabi_fmul>
 800433e:	1c03      	adds	r3, r0, #0
 8004340:	1c19      	adds	r1, r3, #0
 8004342:	1c20      	adds	r0, r4, #0
 8004344:	f7fc f904 	bl	8000550 <__aeabi_fadd>
 8004348:	1c03      	adds	r3, r0, #0
 800434a:	1c18      	adds	r0, r3, #0
 800434c:	f7ff fd78 	bl	8003e40 <_ZSt4sqrtf>
 8004350:	1c02      	adds	r2, r0, #0
 8004352:	68bb      	ldr	r3, [r7, #8]
 8004354:	1d1c      	adds	r4, r3, #4
 8004356:	1c11      	adds	r1, r2, #0
 8004358:	1c28      	adds	r0, r5, #0
 800435a:	f7ff fd61 	bl	8003e20 <_ZSt5atan2ff>
 800435e:	1c03      	adds	r3, r0, #0
 8004360:	6023      	str	r3, [r4, #0]
    // roll: (tilt left/right, about X axis)
    data[2] = atan2(gravity -> y , gravity -> z);
 8004362:	683b      	ldr	r3, [r7, #0]
 8004364:	685a      	ldr	r2, [r3, #4]
 8004366:	683b      	ldr	r3, [r7, #0]
 8004368:	6899      	ldr	r1, [r3, #8]
 800436a:	68bb      	ldr	r3, [r7, #8]
 800436c:	3308      	adds	r3, #8
 800436e:	001c      	movs	r4, r3
 8004370:	1c10      	adds	r0, r2, #0
 8004372:	f7ff fd55 	bl	8003e20 <_ZSt5atan2ff>
 8004376:	1c03      	adds	r3, r0, #0
 8004378:	6023      	str	r3, [r4, #0]
    if (gravity -> z < 0) {
 800437a:	683b      	ldr	r3, [r7, #0]
 800437c:	689b      	ldr	r3, [r3, #8]
 800437e:	2100      	movs	r1, #0
 8004380:	1c18      	adds	r0, r3, #0
 8004382:	f7fc f887 	bl	8000494 <__aeabi_fcmplt>
 8004386:	1e03      	subs	r3, r0, #0
 8004388:	d035      	beq.n	80043f6 <_ZN26MPU6050_6Axis_MotionApps2018dmpGetYawPitchRollEPfP10QuaternionP11VectorFloat+0x19a>
        if(data[1] > 0) {
 800438a:	68bb      	ldr	r3, [r7, #8]
 800438c:	3304      	adds	r3, #4
 800438e:	681b      	ldr	r3, [r3, #0]
 8004390:	2100      	movs	r1, #0
 8004392:	1c18      	adds	r0, r3, #0
 8004394:	f7fc f892 	bl	80004bc <__aeabi_fcmpgt>
 8004398:	1e03      	subs	r3, r0, #0
 800439a:	d016      	beq.n	80043ca <_ZN26MPU6050_6Axis_MotionApps2018dmpGetYawPitchRollEPfP10QuaternionP11VectorFloat+0x16e>
            data[1] = PI - data[1];
 800439c:	68bb      	ldr	r3, [r7, #8]
 800439e:	3304      	adds	r3, #4
 80043a0:	681b      	ldr	r3, [r3, #0]
 80043a2:	1c18      	adds	r0, r3, #0
 80043a4:	f7fe fdba 	bl	8002f1c <__aeabi_f2d>
 80043a8:	0002      	movs	r2, r0
 80043aa:	000b      	movs	r3, r1
 80043ac:	4814      	ldr	r0, [pc, #80]	; (8004400 <_ZN26MPU6050_6Axis_MotionApps2018dmpGetYawPitchRollEPfP10QuaternionP11VectorFloat+0x1a4>)
 80043ae:	4915      	ldr	r1, [pc, #84]	; (8004404 <_ZN26MPU6050_6Axis_MotionApps2018dmpGetYawPitchRollEPfP10QuaternionP11VectorFloat+0x1a8>)
 80043b0:	f7fe f978 	bl	80026a4 <__aeabi_dsub>
 80043b4:	0002      	movs	r2, r0
 80043b6:	000b      	movs	r3, r1
 80043b8:	68b9      	ldr	r1, [r7, #8]
 80043ba:	1d0c      	adds	r4, r1, #4
 80043bc:	0010      	movs	r0, r2
 80043be:	0019      	movs	r1, r3
 80043c0:	f7fe fdf4 	bl	8002fac <__aeabi_d2f>
 80043c4:	1c03      	adds	r3, r0, #0
 80043c6:	6023      	str	r3, [r4, #0]
 80043c8:	e015      	b.n	80043f6 <_ZN26MPU6050_6Axis_MotionApps2018dmpGetYawPitchRollEPfP10QuaternionP11VectorFloat+0x19a>
        } else {
            data[1] = -PI - data[1];
 80043ca:	68bb      	ldr	r3, [r7, #8]
 80043cc:	3304      	adds	r3, #4
 80043ce:	681b      	ldr	r3, [r3, #0]
 80043d0:	1c18      	adds	r0, r3, #0
 80043d2:	f7fe fda3 	bl	8002f1c <__aeabi_f2d>
 80043d6:	0002      	movs	r2, r0
 80043d8:	000b      	movs	r3, r1
 80043da:	4809      	ldr	r0, [pc, #36]	; (8004400 <_ZN26MPU6050_6Axis_MotionApps2018dmpGetYawPitchRollEPfP10QuaternionP11VectorFloat+0x1a4>)
 80043dc:	490a      	ldr	r1, [pc, #40]	; (8004408 <_ZN26MPU6050_6Axis_MotionApps2018dmpGetYawPitchRollEPfP10QuaternionP11VectorFloat+0x1ac>)
 80043de:	f7fe f961 	bl	80026a4 <__aeabi_dsub>
 80043e2:	0002      	movs	r2, r0
 80043e4:	000b      	movs	r3, r1
 80043e6:	68b9      	ldr	r1, [r7, #8]
 80043e8:	1d0c      	adds	r4, r1, #4
 80043ea:	0010      	movs	r0, r2
 80043ec:	0019      	movs	r1, r3
 80043ee:	f7fe fddd 	bl	8002fac <__aeabi_d2f>
 80043f2:	1c03      	adds	r3, r0, #0
 80043f4:	6023      	str	r3, [r4, #0]
        }
    }
    return 0;
 80043f6:	2300      	movs	r3, #0
}
 80043f8:	0018      	movs	r0, r3
 80043fa:	46bd      	mov	sp, r7
 80043fc:	b004      	add	sp, #16
 80043fe:	bdb0      	pop	{r4, r5, r7, pc}
 8004400:	54442d18 	.word	0x54442d18
 8004404:	400921fb 	.word	0x400921fb
 8004408:	c00921fb 	.word	0xc00921fb

0800440c <ARGB_Init>:

/**
 * @brief Init timer & prescalers
 * @param none
 */
void ARGB_Init(void) {
 800440c:	b580      	push	{r7, lr}
 800440e:	b082      	sub	sp, #8
 8004410:	af00      	add	r7, sp, #0
    /* Auto-calculation! */
    u32_t APBfq; // Clock freq
#ifdef APB1
    APBfq = HAL_RCC_GetPCLK1Freq();
 8004412:	f004 fcb3 	bl	8008d7c <HAL_RCC_GetPCLK1Freq>
 8004416:	0003      	movs	r3, r0
 8004418:	607b      	str	r3, [r7, #4]
    APBfq *= (RCC->CFGR & RCC_CFGR_PPRE) == 0 ? 1 : 2;
 800441a:	4b2d      	ldr	r3, [pc, #180]	; (80044d0 <ARGB_Init+0xc4>)
 800441c:	685a      	ldr	r2, [r3, #4]
 800441e:	23e0      	movs	r3, #224	; 0xe0
 8004420:	00db      	lsls	r3, r3, #3
 8004422:	4013      	ands	r3, r2
 8004424:	d101      	bne.n	800442a <ARGB_Init+0x1e>
 8004426:	2301      	movs	r3, #1
 8004428:	e000      	b.n	800442c <ARGB_Init+0x20>
 800442a:	2302      	movs	r3, #2
 800442c:	001a      	movs	r2, r3
 800442e:	687b      	ldr	r3, [r7, #4]
 8004430:	4353      	muls	r3, r2
 8004432:	607b      	str	r3, [r7, #4]
    APBfq *= (RCC->CFGR & RCC_CFGR_PPRE) == 0 ? 1 : 2;
#endif
#ifdef WS2811S
    APBfq /= (uint32_t) (400 * 1000);  // 400 KHz - 2.5us
#else
    APBfq /= (uint32_t) (800 * 1000);  // 800 KHz - 1.25us
 8004434:	687b      	ldr	r3, [r7, #4]
 8004436:	4927      	ldr	r1, [pc, #156]	; (80044d4 <ARGB_Init+0xc8>)
 8004438:	0018      	movs	r0, r3
 800443a:	f7fb fe65 	bl	8000108 <__udivsi3>
 800443e:	0003      	movs	r3, r0
 8004440:	607b      	str	r3, [r7, #4]
#endif
    TIM_HANDLE.Instance->PSC = 0;                        // dummy hardcode now
 8004442:	4b25      	ldr	r3, [pc, #148]	; (80044d8 <ARGB_Init+0xcc>)
 8004444:	681b      	ldr	r3, [r3, #0]
 8004446:	2200      	movs	r2, #0
 8004448:	629a      	str	r2, [r3, #40]	; 0x28
    TIM_HANDLE.Instance->ARR = (uint16_t) (APBfq - 1);   // set timer prescaler
 800444a:	687b      	ldr	r3, [r7, #4]
 800444c:	b29b      	uxth	r3, r3
 800444e:	3b01      	subs	r3, #1
 8004450:	b29a      	uxth	r2, r3
 8004452:	4b21      	ldr	r3, [pc, #132]	; (80044d8 <ARGB_Init+0xcc>)
 8004454:	681b      	ldr	r3, [r3, #0]
 8004456:	62da      	str	r2, [r3, #44]	; 0x2c
    TIM_HANDLE.Instance->EGR = 1;                        // update timer registers
 8004458:	4b1f      	ldr	r3, [pc, #124]	; (80044d8 <ARGB_Init+0xcc>)
 800445a:	681b      	ldr	r3, [r3, #0]
 800445c:	2201      	movs	r2, #1
 800445e:	615a      	str	r2, [r3, #20]
#if defined(WS2811F) || defined(WS2811S)
    PWM_HI = (u8_t) (APBfq * 0.48) - 1;     // Log.1 - 48% - 0.60us/1.2us
    PWM_LO = (u8_t) (APBfq * 0.20) - 1;     // Log.0 - 20% - 0.25us/0.5us
#endif
#ifdef WS2812
    PWM_HI = (u8_t) (APBfq * 0.56) - 1;     // Log.1 - 56% - 0.70us
 8004460:	6878      	ldr	r0, [r7, #4]
 8004462:	f7fe fd35 	bl	8002ed0 <__aeabi_ui2d>
 8004466:	4a1d      	ldr	r2, [pc, #116]	; (80044dc <ARGB_Init+0xd0>)
 8004468:	4b1d      	ldr	r3, [pc, #116]	; (80044e0 <ARGB_Init+0xd4>)
 800446a:	f7fd feaf 	bl	80021cc <__aeabi_dmul>
 800446e:	0002      	movs	r2, r0
 8004470:	000b      	movs	r3, r1
 8004472:	0010      	movs	r0, r2
 8004474:	0019      	movs	r1, r3
 8004476:	f7fc f84d 	bl	8000514 <__aeabi_d2uiz>
 800447a:	0003      	movs	r3, r0
 800447c:	b2db      	uxtb	r3, r3
 800447e:	3b01      	subs	r3, #1
 8004480:	b2da      	uxtb	r2, r3
 8004482:	4b18      	ldr	r3, [pc, #96]	; (80044e4 <ARGB_Init+0xd8>)
 8004484:	701a      	strb	r2, [r3, #0]
    PWM_LO = (u8_t) (APBfq * 0.28) - 1;     // Log.0 - 28% - 0.35us
 8004486:	6878      	ldr	r0, [r7, #4]
 8004488:	f7fe fd22 	bl	8002ed0 <__aeabi_ui2d>
 800448c:	4a13      	ldr	r2, [pc, #76]	; (80044dc <ARGB_Init+0xd0>)
 800448e:	4b16      	ldr	r3, [pc, #88]	; (80044e8 <ARGB_Init+0xdc>)
 8004490:	f7fd fe9c 	bl	80021cc <__aeabi_dmul>
 8004494:	0002      	movs	r2, r0
 8004496:	000b      	movs	r3, r1
 8004498:	0010      	movs	r0, r2
 800449a:	0019      	movs	r1, r3
 800449c:	f7fc f83a 	bl	8000514 <__aeabi_d2uiz>
 80044a0:	0003      	movs	r3, r0
 80044a2:	b2db      	uxtb	r3, r3
 80044a4:	3b01      	subs	r3, #1
 80044a6:	b2da      	uxtb	r2, r3
 80044a8:	4b10      	ldr	r3, [pc, #64]	; (80044ec <ARGB_Init+0xe0>)
 80044aa:	701a      	strb	r2, [r3, #0]
//#if INV_SIGNAL
//    TIM_POINTER->CCER |= TIM_CCER_CC2P; // set inv ch bit
//#else
//    TIM_POINTER->CCER &= ~TIM_CCER_CC2P;
//#endif
    ARGB_LOC_ST = ARGB_READY; // Set Ready Flag
 80044ac:	4b10      	ldr	r3, [pc, #64]	; (80044f0 <ARGB_Init+0xe4>)
 80044ae:	2201      	movs	r2, #1
 80044b0:	701a      	strb	r2, [r3, #0]
    TIM_CCxChannelCmd(TIM_HANDLE.Instance, TIM_CH, TIM_CCx_ENABLE); // Enable GPIO to IDLE state
 80044b2:	4b09      	ldr	r3, [pc, #36]	; (80044d8 <ARGB_Init+0xcc>)
 80044b4:	681b      	ldr	r3, [r3, #0]
 80044b6:	2201      	movs	r2, #1
 80044b8:	2108      	movs	r1, #8
 80044ba:	0018      	movs	r0, r3
 80044bc:	f005 fca4 	bl	8009e08 <TIM_CCxChannelCmd>
    HAL_Delay(1); // Make some delay
 80044c0:	2001      	movs	r0, #1
 80044c2:	f001 ff5b 	bl	800637c <HAL_Delay>
}
 80044c6:	46c0      	nop			; (mov r8, r8)
 80044c8:	46bd      	mov	sp, r7
 80044ca:	b002      	add	sp, #8
 80044cc:	bd80      	pop	{r7, pc}
 80044ce:	46c0      	nop			; (mov r8, r8)
 80044d0:	40021000 	.word	0x40021000
 80044d4:	000c3500 	.word	0x000c3500
 80044d8:	20000284 	.word	0x20000284
 80044dc:	1eb851ec 	.word	0x1eb851ec
 80044e0:	3fe1eb85 	.word	0x3fe1eb85
 80044e4:	20000090 	.word	0x20000090
 80044e8:	3fd1eb85 	.word	0x3fd1eb85
 80044ec:	20000091 	.word	0x20000091
 80044f0:	20000162 	.word	0x20000162

080044f4 <ARGB_Clear>:
/**
 * @brief Fill ALL LEDs with (0,0,0)
 * @param none
 * @note Update strip after that
 */
void ARGB_Clear(void) {
 80044f4:	b580      	push	{r7, lr}
 80044f6:	af00      	add	r7, sp, #0
    ARGB_FillRGB(0, 0, 0);
 80044f8:	2200      	movs	r2, #0
 80044fa:	2100      	movs	r1, #0
 80044fc:	2000      	movs	r0, #0
 80044fe:	f000 f8e3 	bl	80046c8 <ARGB_FillRGB>
#ifdef SK6812
    ARGB_FillWhite(0);
#endif
}
 8004502:	46c0      	nop			; (mov r8, r8)
 8004504:	46bd      	mov	sp, r7
 8004506:	bd80      	pop	{r7, pc}

08004508 <ARGB_SetRGB>:
 * @param[in] i LED position
 * @param[in] r Red component   [0..255]
 * @param[in] g Green component [0..255]
 * @param[in] b Blue component  [0..255]
 */
void ARGB_SetRGB(u16_t i, u8_t r, u8_t g, u8_t b) {
 8004508:	b5b0      	push	{r4, r5, r7, lr}
 800450a:	b084      	sub	sp, #16
 800450c:	af00      	add	r7, sp, #0
 800450e:	0005      	movs	r5, r0
 8004510:	000c      	movs	r4, r1
 8004512:	0010      	movs	r0, r2
 8004514:	0019      	movs	r1, r3
 8004516:	1dbb      	adds	r3, r7, #6
 8004518:	1c2a      	adds	r2, r5, #0
 800451a:	801a      	strh	r2, [r3, #0]
 800451c:	1d7b      	adds	r3, r7, #5
 800451e:	1c22      	adds	r2, r4, #0
 8004520:	701a      	strb	r2, [r3, #0]
 8004522:	1d3b      	adds	r3, r7, #4
 8004524:	1c02      	adds	r2, r0, #0
 8004526:	701a      	strb	r2, [r3, #0]
 8004528:	1cfb      	adds	r3, r7, #3
 800452a:	1c0a      	adds	r2, r1, #0
 800452c:	701a      	strb	r2, [r3, #0]
    // overflow protection
    if (i >= NUM_PIXELS) {
 800452e:	1dbb      	adds	r3, r7, #6
 8004530:	881b      	ldrh	r3, [r3, #0]
 8004532:	2b03      	cmp	r3, #3
 8004534:	d90e      	bls.n	8004554 <ARGB_SetRGB+0x4c>
        u16_t _i = i / NUM_PIXELS;
 8004536:	210e      	movs	r1, #14
 8004538:	187b      	adds	r3, r7, r1
 800453a:	1dba      	adds	r2, r7, #6
 800453c:	8812      	ldrh	r2, [r2, #0]
 800453e:	0892      	lsrs	r2, r2, #2
 8004540:	801a      	strh	r2, [r3, #0]
        i -= _i * NUM_PIXELS;
 8004542:	187b      	adds	r3, r7, r1
 8004544:	881b      	ldrh	r3, [r3, #0]
 8004546:	009b      	lsls	r3, r3, #2
 8004548:	b29a      	uxth	r2, r3
 800454a:	1dbb      	adds	r3, r7, #6
 800454c:	1db9      	adds	r1, r7, #6
 800454e:	8809      	ldrh	r1, [r1, #0]
 8004550:	1a8a      	subs	r2, r1, r2
 8004552:	801a      	strh	r2, [r3, #0]
    }
    // set brightness
    r /= 256 / ((u16_t) ARGB_BR + 1);
 8004554:	4b40      	ldr	r3, [pc, #256]	; (8004658 <ARGB_SetRGB+0x150>)
 8004556:	781b      	ldrb	r3, [r3, #0]
 8004558:	b2db      	uxtb	r3, r3
 800455a:	3301      	adds	r3, #1
 800455c:	0019      	movs	r1, r3
 800455e:	2380      	movs	r3, #128	; 0x80
 8004560:	0058      	lsls	r0, r3, #1
 8004562:	f7fb fe5b 	bl	800021c <__divsi3>
 8004566:	0003      	movs	r3, r0
 8004568:	001a      	movs	r2, r3
 800456a:	1d7b      	adds	r3, r7, #5
 800456c:	781b      	ldrb	r3, [r3, #0]
 800456e:	0011      	movs	r1, r2
 8004570:	0018      	movs	r0, r3
 8004572:	f7fb fe53 	bl	800021c <__divsi3>
 8004576:	0003      	movs	r3, r0
 8004578:	001a      	movs	r2, r3
 800457a:	1d7b      	adds	r3, r7, #5
 800457c:	701a      	strb	r2, [r3, #0]
    g /= 256 / ((u16_t) ARGB_BR + 1);
 800457e:	4b36      	ldr	r3, [pc, #216]	; (8004658 <ARGB_SetRGB+0x150>)
 8004580:	781b      	ldrb	r3, [r3, #0]
 8004582:	b2db      	uxtb	r3, r3
 8004584:	3301      	adds	r3, #1
 8004586:	0019      	movs	r1, r3
 8004588:	2380      	movs	r3, #128	; 0x80
 800458a:	0058      	lsls	r0, r3, #1
 800458c:	f7fb fe46 	bl	800021c <__divsi3>
 8004590:	0003      	movs	r3, r0
 8004592:	001a      	movs	r2, r3
 8004594:	1d3b      	adds	r3, r7, #4
 8004596:	781b      	ldrb	r3, [r3, #0]
 8004598:	0011      	movs	r1, r2
 800459a:	0018      	movs	r0, r3
 800459c:	f7fb fe3e 	bl	800021c <__divsi3>
 80045a0:	0003      	movs	r3, r0
 80045a2:	001a      	movs	r2, r3
 80045a4:	1d3b      	adds	r3, r7, #4
 80045a6:	701a      	strb	r2, [r3, #0]
    b /= 256 / ((u16_t) ARGB_BR + 1);
 80045a8:	4b2b      	ldr	r3, [pc, #172]	; (8004658 <ARGB_SetRGB+0x150>)
 80045aa:	781b      	ldrb	r3, [r3, #0]
 80045ac:	b2db      	uxtb	r3, r3
 80045ae:	3301      	adds	r3, #1
 80045b0:	0019      	movs	r1, r3
 80045b2:	2380      	movs	r3, #128	; 0x80
 80045b4:	0058      	lsls	r0, r3, #1
 80045b6:	f7fb fe31 	bl	800021c <__divsi3>
 80045ba:	0003      	movs	r3, r0
 80045bc:	001a      	movs	r2, r3
 80045be:	1cfb      	adds	r3, r7, #3
 80045c0:	781b      	ldrb	r3, [r3, #0]
 80045c2:	0011      	movs	r1, r2
 80045c4:	0018      	movs	r0, r3
 80045c6:	f7fb fe29 	bl	800021c <__divsi3>
 80045ca:	0003      	movs	r3, r0
 80045cc:	001a      	movs	r2, r3
 80045ce:	1cfb      	adds	r3, r7, #3
 80045d0:	701a      	strb	r2, [r3, #0]
#if USE_GAMMA_CORRECTION
    g = scale8(g, 0xB0);
 80045d2:	1d3c      	adds	r4, r7, #4
 80045d4:	1d3b      	adds	r3, r7, #4
 80045d6:	781b      	ldrb	r3, [r3, #0]
 80045d8:	21b0      	movs	r1, #176	; 0xb0
 80045da:	0018      	movs	r0, r3
 80045dc:	f000 fa4a 	bl	8004a74 <scale8>
 80045e0:	0003      	movs	r3, r0
 80045e2:	7023      	strb	r3, [r4, #0]
    b = scale8(b, 0xF0);
 80045e4:	1cfc      	adds	r4, r7, #3
 80045e6:	1cfb      	adds	r3, r7, #3
 80045e8:	781b      	ldrb	r3, [r3, #0]
 80045ea:	21f0      	movs	r1, #240	; 0xf0
 80045ec:	0018      	movs	r0, r3
 80045ee:	f000 fa41 	bl	8004a74 <scale8>
 80045f2:	0003      	movs	r3, r0
 80045f4:	7023      	strb	r3, [r4, #0]
#if defined(SK6812) || defined(WS2811F) || defined(WS2811S)
    const u8_t subp1 = r;
    const u8_t subp2 = g;
    const u8_t subp3 = b;
#else
    const u8_t subp1 = g;
 80045f6:	210d      	movs	r1, #13
 80045f8:	187b      	adds	r3, r7, r1
 80045fa:	1d3a      	adds	r2, r7, #4
 80045fc:	7812      	ldrb	r2, [r2, #0]
 80045fe:	701a      	strb	r2, [r3, #0]
    const u8_t subp2 = r;
 8004600:	200c      	movs	r0, #12
 8004602:	183b      	adds	r3, r7, r0
 8004604:	1d7a      	adds	r2, r7, #5
 8004606:	7812      	ldrb	r2, [r2, #0]
 8004608:	701a      	strb	r2, [r3, #0]
    const u8_t subp3 = b;
 800460a:	240b      	movs	r4, #11
 800460c:	193b      	adds	r3, r7, r4
 800460e:	1cfa      	adds	r2, r7, #3
 8004610:	7812      	ldrb	r2, [r2, #0]
 8004612:	701a      	strb	r2, [r3, #0]
#ifdef SK6812
    RGB_BUF[4 * i] = subp1;     // subpixel 1
    RGB_BUF[4 * i + 1] = subp2; // subpixel 2
    RGB_BUF[4 * i + 2] = subp3; // subpixel 3
#else
    RGB_BUF[3 * i] = subp1;     // subpixel 1
 8004614:	1dbb      	adds	r3, r7, #6
 8004616:	881a      	ldrh	r2, [r3, #0]
 8004618:	0013      	movs	r3, r2
 800461a:	005b      	lsls	r3, r3, #1
 800461c:	189b      	adds	r3, r3, r2
 800461e:	4a0f      	ldr	r2, [pc, #60]	; (800465c <ARGB_SetRGB+0x154>)
 8004620:	1879      	adds	r1, r7, r1
 8004622:	7809      	ldrb	r1, [r1, #0]
 8004624:	54d1      	strb	r1, [r2, r3]
    RGB_BUF[3 * i + 1] = subp2; // subpixel 2
 8004626:	1dbb      	adds	r3, r7, #6
 8004628:	881a      	ldrh	r2, [r3, #0]
 800462a:	0013      	movs	r3, r2
 800462c:	005b      	lsls	r3, r3, #1
 800462e:	189b      	adds	r3, r3, r2
 8004630:	3301      	adds	r3, #1
 8004632:	4a0a      	ldr	r2, [pc, #40]	; (800465c <ARGB_SetRGB+0x154>)
 8004634:	1839      	adds	r1, r7, r0
 8004636:	7809      	ldrb	r1, [r1, #0]
 8004638:	54d1      	strb	r1, [r2, r3]
    RGB_BUF[3 * i + 2] = subp3; // subpixel 3
 800463a:	1dbb      	adds	r3, r7, #6
 800463c:	881a      	ldrh	r2, [r3, #0]
 800463e:	0013      	movs	r3, r2
 8004640:	005b      	lsls	r3, r3, #1
 8004642:	189b      	adds	r3, r3, r2
 8004644:	3302      	adds	r3, #2
 8004646:	4a05      	ldr	r2, [pc, #20]	; (800465c <ARGB_SetRGB+0x154>)
 8004648:	1939      	adds	r1, r7, r4
 800464a:	7809      	ldrb	r1, [r1, #0]
 800464c:	54d1      	strb	r1, [r2, r3]
#endif
}
 800464e:	46c0      	nop			; (mov r8, r8)
 8004650:	46bd      	mov	sp, r7
 8004652:	b004      	add	sp, #16
 8004654:	bdb0      	pop	{r4, r5, r7, pc}
 8004656:	46c0      	nop			; (mov r8, r8)
 8004658:	20000002 	.word	0x20000002
 800465c:	20000094 	.word	0x20000094

08004660 <ARGB_SetHSV>:
 * @param[in] i LED position
 * @param[in] hue HUE (color) [0..255]
 * @param[in] sat Saturation  [0..255]
 * @param[in] val Value (brightness) [0..255]
 */
void ARGB_SetHSV(u16_t i, u8_t hue, u8_t sat, u8_t val) {
 8004660:	b5f0      	push	{r4, r5, r6, r7, lr}
 8004662:	b087      	sub	sp, #28
 8004664:	af02      	add	r7, sp, #8
 8004666:	0005      	movs	r5, r0
 8004668:	000c      	movs	r4, r1
 800466a:	0010      	movs	r0, r2
 800466c:	0019      	movs	r1, r3
 800466e:	1dbb      	adds	r3, r7, #6
 8004670:	1c2a      	adds	r2, r5, #0
 8004672:	801a      	strh	r2, [r3, #0]
 8004674:	1d7b      	adds	r3, r7, #5
 8004676:	1c22      	adds	r2, r4, #0
 8004678:	701a      	strb	r2, [r3, #0]
 800467a:	1d3b      	adds	r3, r7, #4
 800467c:	1c02      	adds	r2, r0, #0
 800467e:	701a      	strb	r2, [r3, #0]
 8004680:	1cfb      	adds	r3, r7, #3
 8004682:	1c0a      	adds	r2, r1, #0
 8004684:	701a      	strb	r2, [r3, #0]
    uint8_t _r, _g, _b;                    // init buffer color
    HSV2RGB(hue, sat, val, &_r, &_g, &_b); // get RGB color
 8004686:	250f      	movs	r5, #15
 8004688:	197c      	adds	r4, r7, r5
 800468a:	1cfb      	adds	r3, r7, #3
 800468c:	781a      	ldrb	r2, [r3, #0]
 800468e:	1d3b      	adds	r3, r7, #4
 8004690:	7819      	ldrb	r1, [r3, #0]
 8004692:	1d7b      	adds	r3, r7, #5
 8004694:	7818      	ldrb	r0, [r3, #0]
 8004696:	260d      	movs	r6, #13
 8004698:	19bb      	adds	r3, r7, r6
 800469a:	9301      	str	r3, [sp, #4]
 800469c:	230e      	movs	r3, #14
 800469e:	18fb      	adds	r3, r7, r3
 80046a0:	9300      	str	r3, [sp, #0]
 80046a2:	0023      	movs	r3, r4
 80046a4:	f000 f9fa 	bl	8004a9c <HSV2RGB>
    ARGB_SetRGB(i, _r, _g, _b);     // set color
 80046a8:	197b      	adds	r3, r7, r5
 80046aa:	7819      	ldrb	r1, [r3, #0]
 80046ac:	230e      	movs	r3, #14
 80046ae:	18fb      	adds	r3, r7, r3
 80046b0:	781a      	ldrb	r2, [r3, #0]
 80046b2:	19bb      	adds	r3, r7, r6
 80046b4:	781c      	ldrb	r4, [r3, #0]
 80046b6:	1dbb      	adds	r3, r7, #6
 80046b8:	8818      	ldrh	r0, [r3, #0]
 80046ba:	0023      	movs	r3, r4
 80046bc:	f7ff ff24 	bl	8004508 <ARGB_SetRGB>
}
 80046c0:	46c0      	nop			; (mov r8, r8)
 80046c2:	46bd      	mov	sp, r7
 80046c4:	b005      	add	sp, #20
 80046c6:	bdf0      	pop	{r4, r5, r6, r7, pc}

080046c8 <ARGB_FillRGB>:
 * @brief Fill ALL LEDs with RGB color
 * @param[in] r Red component   [0..255]
 * @param[in] g Green component [0..255]
 * @param[in] b Blue component  [0..255]
 */
void ARGB_FillRGB(u8_t r, u8_t g, u8_t b) {
 80046c8:	b5b0      	push	{r4, r5, r7, lr}
 80046ca:	b084      	sub	sp, #16
 80046cc:	af00      	add	r7, sp, #0
 80046ce:	0004      	movs	r4, r0
 80046d0:	0008      	movs	r0, r1
 80046d2:	0011      	movs	r1, r2
 80046d4:	1dfb      	adds	r3, r7, #7
 80046d6:	1c22      	adds	r2, r4, #0
 80046d8:	701a      	strb	r2, [r3, #0]
 80046da:	1dbb      	adds	r3, r7, #6
 80046dc:	1c02      	adds	r2, r0, #0
 80046de:	701a      	strb	r2, [r3, #0]
 80046e0:	1d7b      	adds	r3, r7, #5
 80046e2:	1c0a      	adds	r2, r1, #0
 80046e4:	701a      	strb	r2, [r3, #0]
    for (volatile u16_t i = 0; i < NUM_PIXELS; i++)
 80046e6:	230e      	movs	r3, #14
 80046e8:	18fb      	adds	r3, r7, r3
 80046ea:	2200      	movs	r2, #0
 80046ec:	801a      	strh	r2, [r3, #0]
 80046ee:	e013      	b.n	8004718 <ARGB_FillRGB+0x50>
        ARGB_SetRGB(i, r, g, b);
 80046f0:	250e      	movs	r5, #14
 80046f2:	197b      	adds	r3, r7, r5
 80046f4:	881b      	ldrh	r3, [r3, #0]
 80046f6:	b298      	uxth	r0, r3
 80046f8:	1d7b      	adds	r3, r7, #5
 80046fa:	781c      	ldrb	r4, [r3, #0]
 80046fc:	1dbb      	adds	r3, r7, #6
 80046fe:	781a      	ldrb	r2, [r3, #0]
 8004700:	1dfb      	adds	r3, r7, #7
 8004702:	7819      	ldrb	r1, [r3, #0]
 8004704:	0023      	movs	r3, r4
 8004706:	f7ff feff 	bl	8004508 <ARGB_SetRGB>
    for (volatile u16_t i = 0; i < NUM_PIXELS; i++)
 800470a:	197b      	adds	r3, r7, r5
 800470c:	881b      	ldrh	r3, [r3, #0]
 800470e:	b29b      	uxth	r3, r3
 8004710:	3301      	adds	r3, #1
 8004712:	b29a      	uxth	r2, r3
 8004714:	197b      	adds	r3, r7, r5
 8004716:	801a      	strh	r2, [r3, #0]
 8004718:	230e      	movs	r3, #14
 800471a:	18fb      	adds	r3, r7, r3
 800471c:	881b      	ldrh	r3, [r3, #0]
 800471e:	b29b      	uxth	r3, r3
 8004720:	2b03      	cmp	r3, #3
 8004722:	d9e5      	bls.n	80046f0 <ARGB_FillRGB+0x28>
}
 8004724:	46c0      	nop			; (mov r8, r8)
 8004726:	46c0      	nop			; (mov r8, r8)
 8004728:	46bd      	mov	sp, r7
 800472a:	b004      	add	sp, #16
 800472c:	bdb0      	pop	{r4, r5, r7, pc}
	...

08004730 <ARGB_Show>:
/**
 * @brief Update strip
 * @param none
 * @return #ARGB_STATE enum
 */
ARGB_STATE ARGB_Show(void) {
 8004730:	b580      	push	{r7, lr}
 8004732:	b084      	sub	sp, #16
 8004734:	af00      	add	r7, sp, #0
    ARGB_LOC_ST = ARGB_BUSY;
 8004736:	4bbf      	ldr	r3, [pc, #764]	; (8004a34 <ARGB_Show+0x304>)
 8004738:	2200      	movs	r2, #0
 800473a:	701a      	strb	r2, [r3, #0]
    if (BUF_COUNTER != 0 || DMA_HANDLE.State != HAL_DMA_STATE_READY) {
 800473c:	4bbe      	ldr	r3, [pc, #760]	; (8004a38 <ARGB_Show+0x308>)
 800473e:	881b      	ldrh	r3, [r3, #0]
 8004740:	b29b      	uxth	r3, r3
 8004742:	2b00      	cmp	r3, #0
 8004744:	d105      	bne.n	8004752 <ARGB_Show+0x22>
 8004746:	4bbd      	ldr	r3, [pc, #756]	; (8004a3c <ARGB_Show+0x30c>)
 8004748:	2221      	movs	r2, #33	; 0x21
 800474a:	5c9b      	ldrb	r3, [r3, r2]
 800474c:	b2db      	uxtb	r3, r3
 800474e:	2b01      	cmp	r3, #1
 8004750:	d001      	beq.n	8004756 <ARGB_Show+0x26>
        return ARGB_BUSY;
 8004752:	2300      	movs	r3, #0
 8004754:	e16a      	b.n	8004a2c <ARGB_Show+0x2fc>
    } else {
        for (volatile u8_t i = 0; i < 8; i++) {
 8004756:	1dfb      	adds	r3, r7, #7
 8004758:	2200      	movs	r2, #0
 800475a:	701a      	strb	r2, [r3, #0]
 800475c:	e0b9      	b.n	80048d2 <ARGB_Show+0x1a2>
            // set first transfer from first values
            PWM_BUF[i] = (((RGB_BUF[0] << i) & 0x80) > 0) ? PWM_HI : PWM_LO;
 800475e:	4bb8      	ldr	r3, [pc, #736]	; (8004a40 <ARGB_Show+0x310>)
 8004760:	781b      	ldrb	r3, [r3, #0]
 8004762:	b2db      	uxtb	r3, r3
 8004764:	001a      	movs	r2, r3
 8004766:	1dfb      	adds	r3, r7, #7
 8004768:	781b      	ldrb	r3, [r3, #0]
 800476a:	b2db      	uxtb	r3, r3
 800476c:	409a      	lsls	r2, r3
 800476e:	0013      	movs	r3, r2
 8004770:	2280      	movs	r2, #128	; 0x80
 8004772:	4013      	ands	r3, r2
 8004774:	2b00      	cmp	r3, #0
 8004776:	dd04      	ble.n	8004782 <ARGB_Show+0x52>
 8004778:	4bb2      	ldr	r3, [pc, #712]	; (8004a44 <ARGB_Show+0x314>)
 800477a:	781b      	ldrb	r3, [r3, #0]
 800477c:	b2db      	uxtb	r3, r3
 800477e:	0019      	movs	r1, r3
 8004780:	e003      	b.n	800478a <ARGB_Show+0x5a>
 8004782:	4bb1      	ldr	r3, [pc, #708]	; (8004a48 <ARGB_Show+0x318>)
 8004784:	781b      	ldrb	r3, [r3, #0]
 8004786:	b2db      	uxtb	r3, r3
 8004788:	0019      	movs	r1, r3
 800478a:	1dfb      	adds	r3, r7, #7
 800478c:	781b      	ldrb	r3, [r3, #0]
 800478e:	b2db      	uxtb	r3, r3
 8004790:	001a      	movs	r2, r3
 8004792:	4bae      	ldr	r3, [pc, #696]	; (8004a4c <ARGB_Show+0x31c>)
 8004794:	0092      	lsls	r2, r2, #2
 8004796:	50d1      	str	r1, [r2, r3]
            PWM_BUF[i + 8] = (((RGB_BUF[1] << i) & 0x80) > 0) ? PWM_HI : PWM_LO;
 8004798:	4ba9      	ldr	r3, [pc, #676]	; (8004a40 <ARGB_Show+0x310>)
 800479a:	785b      	ldrb	r3, [r3, #1]
 800479c:	b2db      	uxtb	r3, r3
 800479e:	001a      	movs	r2, r3
 80047a0:	1dfb      	adds	r3, r7, #7
 80047a2:	781b      	ldrb	r3, [r3, #0]
 80047a4:	b2db      	uxtb	r3, r3
 80047a6:	409a      	lsls	r2, r3
 80047a8:	0013      	movs	r3, r2
 80047aa:	2280      	movs	r2, #128	; 0x80
 80047ac:	4013      	ands	r3, r2
 80047ae:	2b00      	cmp	r3, #0
 80047b0:	dd04      	ble.n	80047bc <ARGB_Show+0x8c>
 80047b2:	4ba4      	ldr	r3, [pc, #656]	; (8004a44 <ARGB_Show+0x314>)
 80047b4:	781b      	ldrb	r3, [r3, #0]
 80047b6:	b2db      	uxtb	r3, r3
 80047b8:	0019      	movs	r1, r3
 80047ba:	e003      	b.n	80047c4 <ARGB_Show+0x94>
 80047bc:	4ba2      	ldr	r3, [pc, #648]	; (8004a48 <ARGB_Show+0x318>)
 80047be:	781b      	ldrb	r3, [r3, #0]
 80047c0:	b2db      	uxtb	r3, r3
 80047c2:	0019      	movs	r1, r3
 80047c4:	1dfb      	adds	r3, r7, #7
 80047c6:	781b      	ldrb	r3, [r3, #0]
 80047c8:	b2db      	uxtb	r3, r3
 80047ca:	3308      	adds	r3, #8
 80047cc:	001a      	movs	r2, r3
 80047ce:	4b9f      	ldr	r3, [pc, #636]	; (8004a4c <ARGB_Show+0x31c>)
 80047d0:	0092      	lsls	r2, r2, #2
 80047d2:	50d1      	str	r1, [r2, r3]
            PWM_BUF[i + 16] = (((RGB_BUF[2] << i) & 0x80) > 0) ? PWM_HI : PWM_LO;
 80047d4:	4b9a      	ldr	r3, [pc, #616]	; (8004a40 <ARGB_Show+0x310>)
 80047d6:	789b      	ldrb	r3, [r3, #2]
 80047d8:	b2db      	uxtb	r3, r3
 80047da:	001a      	movs	r2, r3
 80047dc:	1dfb      	adds	r3, r7, #7
 80047de:	781b      	ldrb	r3, [r3, #0]
 80047e0:	b2db      	uxtb	r3, r3
 80047e2:	409a      	lsls	r2, r3
 80047e4:	0013      	movs	r3, r2
 80047e6:	2280      	movs	r2, #128	; 0x80
 80047e8:	4013      	ands	r3, r2
 80047ea:	2b00      	cmp	r3, #0
 80047ec:	dd04      	ble.n	80047f8 <ARGB_Show+0xc8>
 80047ee:	4b95      	ldr	r3, [pc, #596]	; (8004a44 <ARGB_Show+0x314>)
 80047f0:	781b      	ldrb	r3, [r3, #0]
 80047f2:	b2db      	uxtb	r3, r3
 80047f4:	0019      	movs	r1, r3
 80047f6:	e003      	b.n	8004800 <ARGB_Show+0xd0>
 80047f8:	4b93      	ldr	r3, [pc, #588]	; (8004a48 <ARGB_Show+0x318>)
 80047fa:	781b      	ldrb	r3, [r3, #0]
 80047fc:	b2db      	uxtb	r3, r3
 80047fe:	0019      	movs	r1, r3
 8004800:	1dfb      	adds	r3, r7, #7
 8004802:	781b      	ldrb	r3, [r3, #0]
 8004804:	b2db      	uxtb	r3, r3
 8004806:	3310      	adds	r3, #16
 8004808:	001a      	movs	r2, r3
 800480a:	4b90      	ldr	r3, [pc, #576]	; (8004a4c <ARGB_Show+0x31c>)
 800480c:	0092      	lsls	r2, r2, #2
 800480e:	50d1      	str	r1, [r2, r3]
            PWM_BUF[i + 24] = (((RGB_BUF[3] << i) & 0x80) > 0) ? PWM_HI : PWM_LO;
 8004810:	4b8b      	ldr	r3, [pc, #556]	; (8004a40 <ARGB_Show+0x310>)
 8004812:	78db      	ldrb	r3, [r3, #3]
 8004814:	b2db      	uxtb	r3, r3
 8004816:	001a      	movs	r2, r3
 8004818:	1dfb      	adds	r3, r7, #7
 800481a:	781b      	ldrb	r3, [r3, #0]
 800481c:	b2db      	uxtb	r3, r3
 800481e:	409a      	lsls	r2, r3
 8004820:	0013      	movs	r3, r2
 8004822:	2280      	movs	r2, #128	; 0x80
 8004824:	4013      	ands	r3, r2
 8004826:	2b00      	cmp	r3, #0
 8004828:	dd04      	ble.n	8004834 <ARGB_Show+0x104>
 800482a:	4b86      	ldr	r3, [pc, #536]	; (8004a44 <ARGB_Show+0x314>)
 800482c:	781b      	ldrb	r3, [r3, #0]
 800482e:	b2db      	uxtb	r3, r3
 8004830:	0019      	movs	r1, r3
 8004832:	e003      	b.n	800483c <ARGB_Show+0x10c>
 8004834:	4b84      	ldr	r3, [pc, #528]	; (8004a48 <ARGB_Show+0x318>)
 8004836:	781b      	ldrb	r3, [r3, #0]
 8004838:	b2db      	uxtb	r3, r3
 800483a:	0019      	movs	r1, r3
 800483c:	1dfb      	adds	r3, r7, #7
 800483e:	781b      	ldrb	r3, [r3, #0]
 8004840:	b2db      	uxtb	r3, r3
 8004842:	3318      	adds	r3, #24
 8004844:	001a      	movs	r2, r3
 8004846:	4b81      	ldr	r3, [pc, #516]	; (8004a4c <ARGB_Show+0x31c>)
 8004848:	0092      	lsls	r2, r2, #2
 800484a:	50d1      	str	r1, [r2, r3]
            PWM_BUF[i + 32] = (((RGB_BUF[4] << i) & 0x80) > 0) ? PWM_HI : PWM_LO;
 800484c:	4b7c      	ldr	r3, [pc, #496]	; (8004a40 <ARGB_Show+0x310>)
 800484e:	791b      	ldrb	r3, [r3, #4]
 8004850:	b2db      	uxtb	r3, r3
 8004852:	001a      	movs	r2, r3
 8004854:	1dfb      	adds	r3, r7, #7
 8004856:	781b      	ldrb	r3, [r3, #0]
 8004858:	b2db      	uxtb	r3, r3
 800485a:	409a      	lsls	r2, r3
 800485c:	0013      	movs	r3, r2
 800485e:	2280      	movs	r2, #128	; 0x80
 8004860:	4013      	ands	r3, r2
 8004862:	2b00      	cmp	r3, #0
 8004864:	dd04      	ble.n	8004870 <ARGB_Show+0x140>
 8004866:	4b77      	ldr	r3, [pc, #476]	; (8004a44 <ARGB_Show+0x314>)
 8004868:	781b      	ldrb	r3, [r3, #0]
 800486a:	b2db      	uxtb	r3, r3
 800486c:	0019      	movs	r1, r3
 800486e:	e003      	b.n	8004878 <ARGB_Show+0x148>
 8004870:	4b75      	ldr	r3, [pc, #468]	; (8004a48 <ARGB_Show+0x318>)
 8004872:	781b      	ldrb	r3, [r3, #0]
 8004874:	b2db      	uxtb	r3, r3
 8004876:	0019      	movs	r1, r3
 8004878:	1dfb      	adds	r3, r7, #7
 800487a:	781b      	ldrb	r3, [r3, #0]
 800487c:	b2db      	uxtb	r3, r3
 800487e:	3320      	adds	r3, #32
 8004880:	001a      	movs	r2, r3
 8004882:	4b72      	ldr	r3, [pc, #456]	; (8004a4c <ARGB_Show+0x31c>)
 8004884:	0092      	lsls	r2, r2, #2
 8004886:	50d1      	str	r1, [r2, r3]
            PWM_BUF[i + 40] = (((RGB_BUF[5] << i) & 0x80) > 0) ? PWM_HI : PWM_LO;
 8004888:	4b6d      	ldr	r3, [pc, #436]	; (8004a40 <ARGB_Show+0x310>)
 800488a:	795b      	ldrb	r3, [r3, #5]
 800488c:	b2db      	uxtb	r3, r3
 800488e:	001a      	movs	r2, r3
 8004890:	1dfb      	adds	r3, r7, #7
 8004892:	781b      	ldrb	r3, [r3, #0]
 8004894:	b2db      	uxtb	r3, r3
 8004896:	409a      	lsls	r2, r3
 8004898:	0013      	movs	r3, r2
 800489a:	2280      	movs	r2, #128	; 0x80
 800489c:	4013      	ands	r3, r2
 800489e:	2b00      	cmp	r3, #0
 80048a0:	dd04      	ble.n	80048ac <ARGB_Show+0x17c>
 80048a2:	4b68      	ldr	r3, [pc, #416]	; (8004a44 <ARGB_Show+0x314>)
 80048a4:	781b      	ldrb	r3, [r3, #0]
 80048a6:	b2db      	uxtb	r3, r3
 80048a8:	0019      	movs	r1, r3
 80048aa:	e003      	b.n	80048b4 <ARGB_Show+0x184>
 80048ac:	4b66      	ldr	r3, [pc, #408]	; (8004a48 <ARGB_Show+0x318>)
 80048ae:	781b      	ldrb	r3, [r3, #0]
 80048b0:	b2db      	uxtb	r3, r3
 80048b2:	0019      	movs	r1, r3
 80048b4:	1dfb      	adds	r3, r7, #7
 80048b6:	781b      	ldrb	r3, [r3, #0]
 80048b8:	b2db      	uxtb	r3, r3
 80048ba:	3328      	adds	r3, #40	; 0x28
 80048bc:	001a      	movs	r2, r3
 80048be:	4b63      	ldr	r3, [pc, #396]	; (8004a4c <ARGB_Show+0x31c>)
 80048c0:	0092      	lsls	r2, r2, #2
 80048c2:	50d1      	str	r1, [r2, r3]
        for (volatile u8_t i = 0; i < 8; i++) {
 80048c4:	1dfb      	adds	r3, r7, #7
 80048c6:	781b      	ldrb	r3, [r3, #0]
 80048c8:	b2db      	uxtb	r3, r3
 80048ca:	3301      	adds	r3, #1
 80048cc:	b2da      	uxtb	r2, r3
 80048ce:	1dfb      	adds	r3, r7, #7
 80048d0:	701a      	strb	r2, [r3, #0]
 80048d2:	1dfb      	adds	r3, r7, #7
 80048d4:	781b      	ldrb	r3, [r3, #0]
 80048d6:	b2db      	uxtb	r3, r3
 80048d8:	2b07      	cmp	r3, #7
 80048da:	d800      	bhi.n	80048de <ARGB_Show+0x1ae>
 80048dc:	e73f      	b.n	800475e <ARGB_Show+0x2e>
#ifdef SK6812
            PWM_BUF[i + 48] = (((RGB_BUF[6] << i) & 0x80) > 0) ? PWM_HI : PWM_LO;
            PWM_BUF[i + 56] = (((RGB_BUF[7] << i) & 0x80) > 0) ? PWM_HI : PWM_LO;
#endif
        }
        HAL_StatusTypeDef DMA_Send_Stat = HAL_ERROR;
 80048de:	230f      	movs	r3, #15
 80048e0:	18fb      	adds	r3, r7, r3
 80048e2:	2201      	movs	r2, #1
 80048e4:	701a      	strb	r2, [r3, #0]
        while (DMA_Send_Stat != HAL_OK) {
 80048e6:	e097      	b.n	8004a18 <ARGB_Show+0x2e8>
            if (TIM_CHANNEL_STATE_GET(&TIM_HANDLE, TIM_CH) == HAL_TIM_CHANNEL_STATE_BUSY) {
 80048e8:	4b59      	ldr	r3, [pc, #356]	; (8004a50 <ARGB_Show+0x320>)
 80048ea:	2240      	movs	r2, #64	; 0x40
 80048ec:	5c9b      	ldrb	r3, [r3, r2]
 80048ee:	b2db      	uxtb	r3, r3
 80048f0:	2b02      	cmp	r3, #2
 80048f2:	d104      	bne.n	80048fe <ARGB_Show+0x1ce>
                DMA_Send_Stat = HAL_BUSY;
 80048f4:	230f      	movs	r3, #15
 80048f6:	18fb      	adds	r3, r7, r3
 80048f8:	2202      	movs	r2, #2
 80048fa:	701a      	strb	r2, [r3, #0]
                continue;
 80048fc:	e08c      	b.n	8004a18 <ARGB_Show+0x2e8>
            } else if (TIM_CHANNEL_STATE_GET(&TIM_HANDLE, TIM_CH) == HAL_TIM_CHANNEL_STATE_READY) {
 80048fe:	4b54      	ldr	r3, [pc, #336]	; (8004a50 <ARGB_Show+0x320>)
 8004900:	2240      	movs	r2, #64	; 0x40
 8004902:	5c9b      	ldrb	r3, [r3, r2]
 8004904:	b2db      	uxtb	r3, r3
 8004906:	2b01      	cmp	r3, #1
 8004908:	d11c      	bne.n	8004944 <ARGB_Show+0x214>
                TIM_CHANNEL_STATE_SET(&TIM_HANDLE, TIM_CH, HAL_TIM_CHANNEL_STATE_BUSY);
 800490a:	4b51      	ldr	r3, [pc, #324]	; (8004a50 <ARGB_Show+0x320>)
 800490c:	2240      	movs	r2, #64	; 0x40
 800490e:	2102      	movs	r1, #2
 8004910:	5499      	strb	r1, [r3, r2]
#elif TIM_CH == TIM_CHANNEL_4
#define ARGB_TIM_DMA_ID TIM_DMA_ID_CC4
#define ARGB_TIM_DMA_CC TIM_DMA_CC4
#define ARGB_TIM_CCR CCR4
#endif
            TIM_HANDLE.hdma[ARGB_TIM_DMA_ID]->XferCpltCallback = ARGB_TIM_DMADelayPulseCplt;
 8004912:	4b4f      	ldr	r3, [pc, #316]	; (8004a50 <ARGB_Show+0x320>)
 8004914:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004916:	4a4f      	ldr	r2, [pc, #316]	; (8004a54 <ARGB_Show+0x324>)
 8004918:	629a      	str	r2, [r3, #40]	; 0x28
            TIM_HANDLE.hdma[ARGB_TIM_DMA_ID]->XferHalfCpltCallback = ARGB_TIM_DMADelayPulseHalfCplt;
 800491a:	4b4d      	ldr	r3, [pc, #308]	; (8004a50 <ARGB_Show+0x320>)
 800491c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800491e:	4a4e      	ldr	r2, [pc, #312]	; (8004a58 <ARGB_Show+0x328>)
 8004920:	62da      	str	r2, [r3, #44]	; 0x2c
            TIM_HANDLE.hdma[ARGB_TIM_DMA_ID]->XferErrorCallback = TIM_DMAError;
 8004922:	4b4b      	ldr	r3, [pc, #300]	; (8004a50 <ARGB_Show+0x320>)
 8004924:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004926:	4a4d      	ldr	r2, [pc, #308]	; (8004a5c <ARGB_Show+0x32c>)
 8004928:	631a      	str	r2, [r3, #48]	; 0x30
            if (HAL_DMA_Start_IT(TIM_HANDLE.hdma[ARGB_TIM_DMA_ID], (u32_t) PWM_BUF,
 800492a:	4b49      	ldr	r3, [pc, #292]	; (8004a50 <ARGB_Show+0x320>)
 800492c:	6ad8      	ldr	r0, [r3, #44]	; 0x2c
 800492e:	4947      	ldr	r1, [pc, #284]	; (8004a4c <ARGB_Show+0x31c>)
                                 (u32_t) &TIM_HANDLE.Instance->ARGB_TIM_CCR,
 8004930:	4b47      	ldr	r3, [pc, #284]	; (8004a50 <ARGB_Show+0x320>)
 8004932:	681b      	ldr	r3, [r3, #0]
 8004934:	333c      	adds	r3, #60	; 0x3c
            if (HAL_DMA_Start_IT(TIM_HANDLE.hdma[ARGB_TIM_DMA_ID], (u32_t) PWM_BUF,
 8004936:	001a      	movs	r2, r3
 8004938:	2330      	movs	r3, #48	; 0x30
 800493a:	f002 fa59 	bl	8006df0 <HAL_DMA_Start_IT>
 800493e:	1e03      	subs	r3, r0, #0
 8004940:	d00a      	beq.n	8004958 <ARGB_Show+0x228>
 8004942:	e004      	b.n	800494e <ARGB_Show+0x21e>
                DMA_Send_Stat = HAL_ERROR;
 8004944:	230f      	movs	r3, #15
 8004946:	18fb      	adds	r3, r7, r3
 8004948:	2201      	movs	r2, #1
 800494a:	701a      	strb	r2, [r3, #0]
                continue;
 800494c:	e064      	b.n	8004a18 <ARGB_Show+0x2e8>
                                 (u16_t) PWM_BUF_LEN) != HAL_OK) {
                DMA_Send_Stat = HAL_ERROR;
 800494e:	230f      	movs	r3, #15
 8004950:	18fb      	adds	r3, r7, r3
 8004952:	2201      	movs	r2, #1
 8004954:	701a      	strb	r2, [r3, #0]
                continue;
 8004956:	e05f      	b.n	8004a18 <ARGB_Show+0x2e8>
            }
            __HAL_TIM_ENABLE_DMA(&TIM_HANDLE, ARGB_TIM_DMA_CC);
 8004958:	4b3d      	ldr	r3, [pc, #244]	; (8004a50 <ARGB_Show+0x320>)
 800495a:	681b      	ldr	r3, [r3, #0]
 800495c:	68da      	ldr	r2, [r3, #12]
 800495e:	4b3c      	ldr	r3, [pc, #240]	; (8004a50 <ARGB_Show+0x320>)
 8004960:	681b      	ldr	r3, [r3, #0]
 8004962:	2180      	movs	r1, #128	; 0x80
 8004964:	0109      	lsls	r1, r1, #4
 8004966:	430a      	orrs	r2, r1
 8004968:	60da      	str	r2, [r3, #12]
            if (IS_TIM_BREAK_INSTANCE(TIM_HANDLE.Instance) != RESET)
 800496a:	4b39      	ldr	r3, [pc, #228]	; (8004a50 <ARGB_Show+0x320>)
 800496c:	681b      	ldr	r3, [r3, #0]
 800496e:	4a3c      	ldr	r2, [pc, #240]	; (8004a60 <ARGB_Show+0x330>)
 8004970:	4293      	cmp	r3, r2
 8004972:	d00e      	beq.n	8004992 <ARGB_Show+0x262>
 8004974:	4b36      	ldr	r3, [pc, #216]	; (8004a50 <ARGB_Show+0x320>)
 8004976:	681b      	ldr	r3, [r3, #0]
 8004978:	4a3a      	ldr	r2, [pc, #232]	; (8004a64 <ARGB_Show+0x334>)
 800497a:	4293      	cmp	r3, r2
 800497c:	d009      	beq.n	8004992 <ARGB_Show+0x262>
 800497e:	4b34      	ldr	r3, [pc, #208]	; (8004a50 <ARGB_Show+0x320>)
 8004980:	681b      	ldr	r3, [r3, #0]
 8004982:	4a39      	ldr	r2, [pc, #228]	; (8004a68 <ARGB_Show+0x338>)
 8004984:	4293      	cmp	r3, r2
 8004986:	d004      	beq.n	8004992 <ARGB_Show+0x262>
 8004988:	4b31      	ldr	r3, [pc, #196]	; (8004a50 <ARGB_Show+0x320>)
 800498a:	681b      	ldr	r3, [r3, #0]
 800498c:	4a37      	ldr	r2, [pc, #220]	; (8004a6c <ARGB_Show+0x33c>)
 800498e:	4293      	cmp	r3, r2
 8004990:	d101      	bne.n	8004996 <ARGB_Show+0x266>
 8004992:	2301      	movs	r3, #1
 8004994:	e000      	b.n	8004998 <ARGB_Show+0x268>
 8004996:	2300      	movs	r3, #0
 8004998:	2b00      	cmp	r3, #0
 800499a:	d008      	beq.n	80049ae <ARGB_Show+0x27e>
                __HAL_TIM_MOE_ENABLE(&TIM_HANDLE);
 800499c:	4b2c      	ldr	r3, [pc, #176]	; (8004a50 <ARGB_Show+0x320>)
 800499e:	681b      	ldr	r3, [r3, #0]
 80049a0:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 80049a2:	4b2b      	ldr	r3, [pc, #172]	; (8004a50 <ARGB_Show+0x320>)
 80049a4:	681b      	ldr	r3, [r3, #0]
 80049a6:	2180      	movs	r1, #128	; 0x80
 80049a8:	0209      	lsls	r1, r1, #8
 80049aa:	430a      	orrs	r2, r1
 80049ac:	645a      	str	r2, [r3, #68]	; 0x44
            if (IS_TIM_SLAVE_INSTANCE(TIM_HANDLE.Instance)) {
 80049ae:	4b28      	ldr	r3, [pc, #160]	; (8004a50 <ARGB_Show+0x320>)
 80049b0:	681b      	ldr	r3, [r3, #0]
 80049b2:	4a2b      	ldr	r2, [pc, #172]	; (8004a60 <ARGB_Show+0x330>)
 80049b4:	4293      	cmp	r3, r2
 80049b6:	d00f      	beq.n	80049d8 <ARGB_Show+0x2a8>
 80049b8:	4b25      	ldr	r3, [pc, #148]	; (8004a50 <ARGB_Show+0x320>)
 80049ba:	681a      	ldr	r2, [r3, #0]
 80049bc:	2380      	movs	r3, #128	; 0x80
 80049be:	05db      	lsls	r3, r3, #23
 80049c0:	429a      	cmp	r2, r3
 80049c2:	d009      	beq.n	80049d8 <ARGB_Show+0x2a8>
 80049c4:	4b22      	ldr	r3, [pc, #136]	; (8004a50 <ARGB_Show+0x320>)
 80049c6:	681b      	ldr	r3, [r3, #0]
 80049c8:	4a29      	ldr	r2, [pc, #164]	; (8004a70 <ARGB_Show+0x340>)
 80049ca:	4293      	cmp	r3, r2
 80049cc:	d004      	beq.n	80049d8 <ARGB_Show+0x2a8>
 80049ce:	4b20      	ldr	r3, [pc, #128]	; (8004a50 <ARGB_Show+0x320>)
 80049d0:	681b      	ldr	r3, [r3, #0]
 80049d2:	4a24      	ldr	r2, [pc, #144]	; (8004a64 <ARGB_Show+0x334>)
 80049d4:	4293      	cmp	r3, r2
 80049d6:	d111      	bne.n	80049fc <ARGB_Show+0x2cc>
                u32_t tmpsmcr = TIM_HANDLE.Instance->SMCR & TIM_SMCR_SMS;
 80049d8:	4b1d      	ldr	r3, [pc, #116]	; (8004a50 <ARGB_Show+0x320>)
 80049da:	681b      	ldr	r3, [r3, #0]
 80049dc:	689b      	ldr	r3, [r3, #8]
 80049de:	2207      	movs	r2, #7
 80049e0:	4013      	ands	r3, r2
 80049e2:	60bb      	str	r3, [r7, #8]
                if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80049e4:	68bb      	ldr	r3, [r7, #8]
 80049e6:	2b06      	cmp	r3, #6
 80049e8:	d011      	beq.n	8004a0e <ARGB_Show+0x2de>
                    __HAL_TIM_ENABLE(&TIM_HANDLE);
 80049ea:	4b19      	ldr	r3, [pc, #100]	; (8004a50 <ARGB_Show+0x320>)
 80049ec:	681b      	ldr	r3, [r3, #0]
 80049ee:	681a      	ldr	r2, [r3, #0]
 80049f0:	4b17      	ldr	r3, [pc, #92]	; (8004a50 <ARGB_Show+0x320>)
 80049f2:	681b      	ldr	r3, [r3, #0]
 80049f4:	2101      	movs	r1, #1
 80049f6:	430a      	orrs	r2, r1
 80049f8:	601a      	str	r2, [r3, #0]
            if (IS_TIM_SLAVE_INSTANCE(TIM_HANDLE.Instance)) {
 80049fa:	e008      	b.n	8004a0e <ARGB_Show+0x2de>
            } else
                __HAL_TIM_ENABLE(&TIM_HANDLE);
 80049fc:	4b14      	ldr	r3, [pc, #80]	; (8004a50 <ARGB_Show+0x320>)
 80049fe:	681b      	ldr	r3, [r3, #0]
 8004a00:	681a      	ldr	r2, [r3, #0]
 8004a02:	4b13      	ldr	r3, [pc, #76]	; (8004a50 <ARGB_Show+0x320>)
 8004a04:	681b      	ldr	r3, [r3, #0]
 8004a06:	2101      	movs	r1, #1
 8004a08:	430a      	orrs	r2, r1
 8004a0a:	601a      	str	r2, [r3, #0]
 8004a0c:	e000      	b.n	8004a10 <ARGB_Show+0x2e0>
            if (IS_TIM_SLAVE_INSTANCE(TIM_HANDLE.Instance)) {
 8004a0e:	46c0      	nop			; (mov r8, r8)
            DMA_Send_Stat = HAL_OK;
 8004a10:	230f      	movs	r3, #15
 8004a12:	18fb      	adds	r3, r7, r3
 8004a14:	2200      	movs	r2, #0
 8004a16:	701a      	strb	r2, [r3, #0]
        while (DMA_Send_Stat != HAL_OK) {
 8004a18:	230f      	movs	r3, #15
 8004a1a:	18fb      	adds	r3, r7, r3
 8004a1c:	781b      	ldrb	r3, [r3, #0]
 8004a1e:	2b00      	cmp	r3, #0
 8004a20:	d000      	beq.n	8004a24 <ARGB_Show+0x2f4>
 8004a22:	e761      	b.n	80048e8 <ARGB_Show+0x1b8>
        }
        BUF_COUNTER = 2;
 8004a24:	4b04      	ldr	r3, [pc, #16]	; (8004a38 <ARGB_Show+0x308>)
 8004a26:	2202      	movs	r2, #2
 8004a28:	801a      	strh	r2, [r3, #0]
        return ARGB_OK;
 8004a2a:	2302      	movs	r3, #2
    }
}
 8004a2c:	0018      	movs	r0, r3
 8004a2e:	46bd      	mov	sp, r7
 8004a30:	b004      	add	sp, #16
 8004a32:	bd80      	pop	{r7, pc}
 8004a34:	20000162 	.word	0x20000162
 8004a38:	20000160 	.word	0x20000160
 8004a3c:	200002cc 	.word	0x200002cc
 8004a40:	20000094 	.word	0x20000094
 8004a44:	20000090 	.word	0x20000090
 8004a48:	20000091 	.word	0x20000091
 8004a4c:	200000a0 	.word	0x200000a0
 8004a50:	20000284 	.word	0x20000284
 8004a54:	08004d11 	.word	0x08004d11
 8004a58:	08005021 	.word	0x08005021
 8004a5c:	08009749 	.word	0x08009749
 8004a60:	40012c00 	.word	0x40012c00
 8004a64:	40014000 	.word	0x40014000
 8004a68:	40014400 	.word	0x40014400
 8004a6c:	40014800 	.word	0x40014800
 8004a70:	40000400 	.word	0x40000400

08004a74 <scale8>:
 * @brief Private method for gamma correction
 * @param[in] x Param to scale
 * @param[in] scale Scale coefficient
 * @return Scaled value
 */
static inline u8_t scale8(u8_t x, u8_t scale) {
 8004a74:	b580      	push	{r7, lr}
 8004a76:	b082      	sub	sp, #8
 8004a78:	af00      	add	r7, sp, #0
 8004a7a:	0002      	movs	r2, r0
 8004a7c:	1dfb      	adds	r3, r7, #7
 8004a7e:	701a      	strb	r2, [r3, #0]
 8004a80:	1dbb      	adds	r3, r7, #6
 8004a82:	1c0a      	adds	r2, r1, #0
 8004a84:	701a      	strb	r2, [r3, #0]
    return ((uint16_t) x * scale) >> 8;
 8004a86:	1dfb      	adds	r3, r7, #7
 8004a88:	781b      	ldrb	r3, [r3, #0]
 8004a8a:	1dba      	adds	r2, r7, #6
 8004a8c:	7812      	ldrb	r2, [r2, #0]
 8004a8e:	4353      	muls	r3, r2
 8004a90:	121b      	asrs	r3, r3, #8
 8004a92:	b2db      	uxtb	r3, r3
}
 8004a94:	0018      	movs	r0, r3
 8004a96:	46bd      	mov	sp, r7
 8004a98:	b002      	add	sp, #8
 8004a9a:	bd80      	pop	{r7, pc}

08004a9c <HSV2RGB>:
 * @param[in] val Value (brightness) [0..255]
 * @param[out] _r Pointer to RED component value
 * @param[out] _g Pointer to GREEN component value
 * @param[out] _b Pointer to BLUE component value
 */
static void HSV2RGB(u8_t hue, u8_t sat, u8_t val, u8_t *_r, u8_t *_g, u8_t *_b) {
 8004a9c:	b590      	push	{r4, r7, lr}
 8004a9e:	b089      	sub	sp, #36	; 0x24
 8004aa0:	af00      	add	r7, sp, #0
 8004aa2:	0004      	movs	r4, r0
 8004aa4:	0008      	movs	r0, r1
 8004aa6:	0011      	movs	r1, r2
 8004aa8:	603b      	str	r3, [r7, #0]
 8004aaa:	1dfb      	adds	r3, r7, #7
 8004aac:	1c22      	adds	r2, r4, #0
 8004aae:	701a      	strb	r2, [r3, #0]
 8004ab0:	1dbb      	adds	r3, r7, #6
 8004ab2:	1c02      	adds	r2, r0, #0
 8004ab4:	701a      	strb	r2, [r3, #0]
 8004ab6:	1d7b      	adds	r3, r7, #5
 8004ab8:	1c0a      	adds	r2, r1, #0
 8004aba:	701a      	strb	r2, [r3, #0]
    if (sat == 0) { // if white color
 8004abc:	1dbb      	adds	r3, r7, #6
 8004abe:	781b      	ldrb	r3, [r3, #0]
 8004ac0:	2b00      	cmp	r3, #0
 8004ac2:	d10c      	bne.n	8004ade <HSV2RGB+0x42>
        *_r = *_g = *_b = val;
 8004ac4:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8004ac6:	1d7a      	adds	r2, r7, #5
 8004ac8:	7812      	ldrb	r2, [r2, #0]
 8004aca:	701a      	strb	r2, [r3, #0]
 8004acc:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8004ace:	781a      	ldrb	r2, [r3, #0]
 8004ad0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004ad2:	701a      	strb	r2, [r3, #0]
 8004ad4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004ad6:	781a      	ldrb	r2, [r3, #0]
 8004ad8:	683b      	ldr	r3, [r7, #0]
 8004ada:	701a      	strb	r2, [r3, #0]
        return;
 8004adc:	e10c      	b.n	8004cf8 <HSV2RGB+0x25c>
    }
    // Float is smoother but check for FPU (Floating point unit) in your MCU
    // Otherwise it will take longer time in the code
    // FPU is in: F3/L3 and greater
    // Src: https://github.com/Inseckto/HSV-to-RGB
    float h = (float)hue / 255;
 8004ade:	1dfb      	adds	r3, r7, #7
 8004ae0:	781b      	ldrb	r3, [r3, #0]
 8004ae2:	0018      	movs	r0, r3
 8004ae4:	f7fc fbf2 	bl	80012cc <__aeabi_ui2f>
 8004ae8:	1c03      	adds	r3, r0, #0
 8004aea:	4985      	ldr	r1, [pc, #532]	; (8004d00 <HSV2RGB+0x264>)
 8004aec:	1c18      	adds	r0, r3, #0
 8004aee:	f7fb fecd 	bl	800088c <__aeabi_fdiv>
 8004af2:	1c03      	adds	r3, r0, #0
 8004af4:	61fb      	str	r3, [r7, #28]
    float s = (float)sat / 255;
 8004af6:	1dbb      	adds	r3, r7, #6
 8004af8:	781b      	ldrb	r3, [r3, #0]
 8004afa:	0018      	movs	r0, r3
 8004afc:	f7fc fbe6 	bl	80012cc <__aeabi_ui2f>
 8004b00:	1c03      	adds	r3, r0, #0
 8004b02:	497f      	ldr	r1, [pc, #508]	; (8004d00 <HSV2RGB+0x264>)
 8004b04:	1c18      	adds	r0, r3, #0
 8004b06:	f7fb fec1 	bl	800088c <__aeabi_fdiv>
 8004b0a:	1c03      	adds	r3, r0, #0
 8004b0c:	61bb      	str	r3, [r7, #24]
    float v = (float)val / 255;
 8004b0e:	1d7b      	adds	r3, r7, #5
 8004b10:	781b      	ldrb	r3, [r3, #0]
 8004b12:	0018      	movs	r0, r3
 8004b14:	f7fc fbda 	bl	80012cc <__aeabi_ui2f>
 8004b18:	1c03      	adds	r3, r0, #0
 8004b1a:	4979      	ldr	r1, [pc, #484]	; (8004d00 <HSV2RGB+0x264>)
 8004b1c:	1c18      	adds	r0, r3, #0
 8004b1e:	f7fb feb5 	bl	800088c <__aeabi_fdiv>
 8004b22:	1c03      	adds	r3, r0, #0
 8004b24:	617b      	str	r3, [r7, #20]

    int i = (int)floorf(h * 6);
 8004b26:	4977      	ldr	r1, [pc, #476]	; (8004d04 <HSV2RGB+0x268>)
 8004b28:	69f8      	ldr	r0, [r7, #28]
 8004b2a:	f7fc f877 	bl	8000c1c <__aeabi_fmul>
 8004b2e:	1c03      	adds	r3, r0, #0
 8004b30:	1c18      	adds	r0, r3, #0
 8004b32:	f005 f9fb 	bl	8009f2c <floorf>
 8004b36:	1c03      	adds	r3, r0, #0
 8004b38:	1c18      	adds	r0, r3, #0
 8004b3a:	f7fc fb59 	bl	80011f0 <__aeabi_f2iz>
 8004b3e:	0003      	movs	r3, r0
 8004b40:	613b      	str	r3, [r7, #16]
    float f = h * 6 - (float)i;
 8004b42:	4970      	ldr	r1, [pc, #448]	; (8004d04 <HSV2RGB+0x268>)
 8004b44:	69f8      	ldr	r0, [r7, #28]
 8004b46:	f7fc f869 	bl	8000c1c <__aeabi_fmul>
 8004b4a:	1c03      	adds	r3, r0, #0
 8004b4c:	1c1c      	adds	r4, r3, #0
 8004b4e:	6938      	ldr	r0, [r7, #16]
 8004b50:	f7fc fb6e 	bl	8001230 <__aeabi_i2f>
 8004b54:	1c03      	adds	r3, r0, #0
 8004b56:	1c19      	adds	r1, r3, #0
 8004b58:	1c20      	adds	r0, r4, #0
 8004b5a:	f7fc f985 	bl	8000e68 <__aeabi_fsub>
 8004b5e:	1c03      	adds	r3, r0, #0
 8004b60:	60fb      	str	r3, [r7, #12]
    u8_t p = (u8_t)(v * (1 - s) * 255.0);
 8004b62:	69b9      	ldr	r1, [r7, #24]
 8004b64:	20fe      	movs	r0, #254	; 0xfe
 8004b66:	0580      	lsls	r0, r0, #22
 8004b68:	f7fc f97e 	bl	8000e68 <__aeabi_fsub>
 8004b6c:	1c03      	adds	r3, r0, #0
 8004b6e:	6979      	ldr	r1, [r7, #20]
 8004b70:	1c18      	adds	r0, r3, #0
 8004b72:	f7fc f853 	bl	8000c1c <__aeabi_fmul>
 8004b76:	1c03      	adds	r3, r0, #0
 8004b78:	1c18      	adds	r0, r3, #0
 8004b7a:	f7fe f9cf 	bl	8002f1c <__aeabi_f2d>
 8004b7e:	2200      	movs	r2, #0
 8004b80:	4b61      	ldr	r3, [pc, #388]	; (8004d08 <HSV2RGB+0x26c>)
 8004b82:	f7fd fb23 	bl	80021cc <__aeabi_dmul>
 8004b86:	0002      	movs	r2, r0
 8004b88:	000b      	movs	r3, r1
 8004b8a:	210b      	movs	r1, #11
 8004b8c:	187c      	adds	r4, r7, r1
 8004b8e:	0010      	movs	r0, r2
 8004b90:	0019      	movs	r1, r3
 8004b92:	f7fb fcbf 	bl	8000514 <__aeabi_d2uiz>
 8004b96:	0003      	movs	r3, r0
 8004b98:	7023      	strb	r3, [r4, #0]
    u8_t q = (u8_t)(v * (1 - f * s) * 255.0);
 8004b9a:	69b9      	ldr	r1, [r7, #24]
 8004b9c:	68f8      	ldr	r0, [r7, #12]
 8004b9e:	f7fc f83d 	bl	8000c1c <__aeabi_fmul>
 8004ba2:	1c03      	adds	r3, r0, #0
 8004ba4:	1c19      	adds	r1, r3, #0
 8004ba6:	20fe      	movs	r0, #254	; 0xfe
 8004ba8:	0580      	lsls	r0, r0, #22
 8004baa:	f7fc f95d 	bl	8000e68 <__aeabi_fsub>
 8004bae:	1c03      	adds	r3, r0, #0
 8004bb0:	6979      	ldr	r1, [r7, #20]
 8004bb2:	1c18      	adds	r0, r3, #0
 8004bb4:	f7fc f832 	bl	8000c1c <__aeabi_fmul>
 8004bb8:	1c03      	adds	r3, r0, #0
 8004bba:	1c18      	adds	r0, r3, #0
 8004bbc:	f7fe f9ae 	bl	8002f1c <__aeabi_f2d>
 8004bc0:	2200      	movs	r2, #0
 8004bc2:	4b51      	ldr	r3, [pc, #324]	; (8004d08 <HSV2RGB+0x26c>)
 8004bc4:	f7fd fb02 	bl	80021cc <__aeabi_dmul>
 8004bc8:	0002      	movs	r2, r0
 8004bca:	000b      	movs	r3, r1
 8004bcc:	210a      	movs	r1, #10
 8004bce:	187c      	adds	r4, r7, r1
 8004bd0:	0010      	movs	r0, r2
 8004bd2:	0019      	movs	r1, r3
 8004bd4:	f7fb fc9e 	bl	8000514 <__aeabi_d2uiz>
 8004bd8:	0003      	movs	r3, r0
 8004bda:	7023      	strb	r3, [r4, #0]
    u8_t t = (u8_t)(v * (1 - (1 - f) * s)*255.0);
 8004bdc:	68f9      	ldr	r1, [r7, #12]
 8004bde:	20fe      	movs	r0, #254	; 0xfe
 8004be0:	0580      	lsls	r0, r0, #22
 8004be2:	f7fc f941 	bl	8000e68 <__aeabi_fsub>
 8004be6:	1c03      	adds	r3, r0, #0
 8004be8:	69b9      	ldr	r1, [r7, #24]
 8004bea:	1c18      	adds	r0, r3, #0
 8004bec:	f7fc f816 	bl	8000c1c <__aeabi_fmul>
 8004bf0:	1c03      	adds	r3, r0, #0
 8004bf2:	1c19      	adds	r1, r3, #0
 8004bf4:	20fe      	movs	r0, #254	; 0xfe
 8004bf6:	0580      	lsls	r0, r0, #22
 8004bf8:	f7fc f936 	bl	8000e68 <__aeabi_fsub>
 8004bfc:	1c03      	adds	r3, r0, #0
 8004bfe:	6979      	ldr	r1, [r7, #20]
 8004c00:	1c18      	adds	r0, r3, #0
 8004c02:	f7fc f80b 	bl	8000c1c <__aeabi_fmul>
 8004c06:	1c03      	adds	r3, r0, #0
 8004c08:	1c18      	adds	r0, r3, #0
 8004c0a:	f7fe f987 	bl	8002f1c <__aeabi_f2d>
 8004c0e:	2200      	movs	r2, #0
 8004c10:	4b3d      	ldr	r3, [pc, #244]	; (8004d08 <HSV2RGB+0x26c>)
 8004c12:	f7fd fadb 	bl	80021cc <__aeabi_dmul>
 8004c16:	0002      	movs	r2, r0
 8004c18:	000b      	movs	r3, r1
 8004c1a:	2109      	movs	r1, #9
 8004c1c:	187c      	adds	r4, r7, r1
 8004c1e:	0010      	movs	r0, r2
 8004c20:	0019      	movs	r1, r3
 8004c22:	f7fb fc77 	bl	8000514 <__aeabi_d2uiz>
 8004c26:	0003      	movs	r3, r0
 8004c28:	7023      	strb	r3, [r4, #0]

    switch (i % 6) {
 8004c2a:	693b      	ldr	r3, [r7, #16]
 8004c2c:	2106      	movs	r1, #6
 8004c2e:	0018      	movs	r0, r3
 8004c30:	f7fb fbda 	bl	80003e8 <__aeabi_idivmod>
 8004c34:	000b      	movs	r3, r1
 8004c36:	2b04      	cmp	r3, #4
 8004c38:	d84f      	bhi.n	8004cda <HSV2RGB+0x23e>
 8004c3a:	009a      	lsls	r2, r3, #2
 8004c3c:	4b33      	ldr	r3, [pc, #204]	; (8004d0c <HSV2RGB+0x270>)
 8004c3e:	18d3      	adds	r3, r2, r3
 8004c40:	681b      	ldr	r3, [r3, #0]
 8004c42:	469f      	mov	pc, r3
//    uint8_t rem = (hue - (reg * 43)) * 6;
//    uint8_t p = (val * (255 - sat)) >> 8;
//    uint8_t q = (val * (255 - ((sat * rem) >> 8))) >> 8;
//    uint8_t t = (val * (255 - ((sat * (255 - rem)) >> 8))) >> 8;
//    switch (reg) {
        case 0: *_r = val, *_g = t, *_b = p; break;
 8004c44:	683b      	ldr	r3, [r7, #0]
 8004c46:	1d7a      	adds	r2, r7, #5
 8004c48:	7812      	ldrb	r2, [r2, #0]
 8004c4a:	701a      	strb	r2, [r3, #0]
 8004c4c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004c4e:	2209      	movs	r2, #9
 8004c50:	18ba      	adds	r2, r7, r2
 8004c52:	7812      	ldrb	r2, [r2, #0]
 8004c54:	701a      	strb	r2, [r3, #0]
 8004c56:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8004c58:	220b      	movs	r2, #11
 8004c5a:	18ba      	adds	r2, r7, r2
 8004c5c:	7812      	ldrb	r2, [r2, #0]
 8004c5e:	701a      	strb	r2, [r3, #0]
 8004c60:	e04a      	b.n	8004cf8 <HSV2RGB+0x25c>
        case 1: *_r = q, *_g = val, *_b = p; break;
 8004c62:	683b      	ldr	r3, [r7, #0]
 8004c64:	220a      	movs	r2, #10
 8004c66:	18ba      	adds	r2, r7, r2
 8004c68:	7812      	ldrb	r2, [r2, #0]
 8004c6a:	701a      	strb	r2, [r3, #0]
 8004c6c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004c6e:	1d7a      	adds	r2, r7, #5
 8004c70:	7812      	ldrb	r2, [r2, #0]
 8004c72:	701a      	strb	r2, [r3, #0]
 8004c74:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8004c76:	220b      	movs	r2, #11
 8004c78:	18ba      	adds	r2, r7, r2
 8004c7a:	7812      	ldrb	r2, [r2, #0]
 8004c7c:	701a      	strb	r2, [r3, #0]
 8004c7e:	e03b      	b.n	8004cf8 <HSV2RGB+0x25c>
        case 2: *_r = p, *_g = val, *_b = t; break;
 8004c80:	683b      	ldr	r3, [r7, #0]
 8004c82:	220b      	movs	r2, #11
 8004c84:	18ba      	adds	r2, r7, r2
 8004c86:	7812      	ldrb	r2, [r2, #0]
 8004c88:	701a      	strb	r2, [r3, #0]
 8004c8a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004c8c:	1d7a      	adds	r2, r7, #5
 8004c8e:	7812      	ldrb	r2, [r2, #0]
 8004c90:	701a      	strb	r2, [r3, #0]
 8004c92:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8004c94:	2209      	movs	r2, #9
 8004c96:	18ba      	adds	r2, r7, r2
 8004c98:	7812      	ldrb	r2, [r2, #0]
 8004c9a:	701a      	strb	r2, [r3, #0]
 8004c9c:	e02c      	b.n	8004cf8 <HSV2RGB+0x25c>
        case 3: *_r = p, *_g = q, *_b = val; break;
 8004c9e:	683b      	ldr	r3, [r7, #0]
 8004ca0:	220b      	movs	r2, #11
 8004ca2:	18ba      	adds	r2, r7, r2
 8004ca4:	7812      	ldrb	r2, [r2, #0]
 8004ca6:	701a      	strb	r2, [r3, #0]
 8004ca8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004caa:	220a      	movs	r2, #10
 8004cac:	18ba      	adds	r2, r7, r2
 8004cae:	7812      	ldrb	r2, [r2, #0]
 8004cb0:	701a      	strb	r2, [r3, #0]
 8004cb2:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8004cb4:	1d7a      	adds	r2, r7, #5
 8004cb6:	7812      	ldrb	r2, [r2, #0]
 8004cb8:	701a      	strb	r2, [r3, #0]
 8004cba:	e01d      	b.n	8004cf8 <HSV2RGB+0x25c>
        case 4: *_r = t, *_g = p, *_b = val; break;
 8004cbc:	683b      	ldr	r3, [r7, #0]
 8004cbe:	2209      	movs	r2, #9
 8004cc0:	18ba      	adds	r2, r7, r2
 8004cc2:	7812      	ldrb	r2, [r2, #0]
 8004cc4:	701a      	strb	r2, [r3, #0]
 8004cc6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004cc8:	220b      	movs	r2, #11
 8004cca:	18ba      	adds	r2, r7, r2
 8004ccc:	7812      	ldrb	r2, [r2, #0]
 8004cce:	701a      	strb	r2, [r3, #0]
 8004cd0:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8004cd2:	1d7a      	adds	r2, r7, #5
 8004cd4:	7812      	ldrb	r2, [r2, #0]
 8004cd6:	701a      	strb	r2, [r3, #0]
 8004cd8:	e00e      	b.n	8004cf8 <HSV2RGB+0x25c>
        default: *_r = val, *_g = p, *_b = q; break;
 8004cda:	683b      	ldr	r3, [r7, #0]
 8004cdc:	1d7a      	adds	r2, r7, #5
 8004cde:	7812      	ldrb	r2, [r2, #0]
 8004ce0:	701a      	strb	r2, [r3, #0]
 8004ce2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004ce4:	220b      	movs	r2, #11
 8004ce6:	18ba      	adds	r2, r7, r2
 8004ce8:	7812      	ldrb	r2, [r2, #0]
 8004cea:	701a      	strb	r2, [r3, #0]
 8004cec:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8004cee:	220a      	movs	r2, #10
 8004cf0:	18ba      	adds	r2, r7, r2
 8004cf2:	7812      	ldrb	r2, [r2, #0]
 8004cf4:	701a      	strb	r2, [r3, #0]
 8004cf6:	46c0      	nop			; (mov r8, r8)
    }
}
 8004cf8:	46bd      	mov	sp, r7
 8004cfa:	b009      	add	sp, #36	; 0x24
 8004cfc:	bd90      	pop	{r4, r7, pc}
 8004cfe:	46c0      	nop			; (mov r8, r8)
 8004d00:	437f0000 	.word	0x437f0000
 8004d04:	40c00000 	.word	0x40c00000
 8004d08:	406fe000 	.word	0x406fe000
 8004d0c:	0800b04c 	.word	0x0800b04c

08004d10 <ARGB_TIM_DMADelayPulseCplt>:
/**
  * @brief  TIM DMA Delay Pulse complete callback.
  * @param  hdma pointer to DMA handle.
  * @retval None
  */
static void ARGB_TIM_DMADelayPulseCplt(DMA_HandleTypeDef *hdma) {
 8004d10:	b580      	push	{r7, lr}
 8004d12:	b084      	sub	sp, #16
 8004d14:	af00      	add	r7, sp, #0
 8004d16:	6078      	str	r0, [r7, #4]
    TIM_HandleTypeDef *htim = (TIM_HandleTypeDef *) ((DMA_HandleTypeDef *) hdma)->Parent;
 8004d18:	687b      	ldr	r3, [r7, #4]
 8004d1a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004d1c:	60fb      	str	r3, [r7, #12]
    // if wrong handlers
    if (hdma != &DMA_HANDLE || htim != &TIM_HANDLE) return;
 8004d1e:	687a      	ldr	r2, [r7, #4]
 8004d20:	4bae      	ldr	r3, [pc, #696]	; (8004fdc <ARGB_TIM_DMADelayPulseCplt+0x2cc>)
 8004d22:	429a      	cmp	r2, r3
 8004d24:	d000      	beq.n	8004d28 <ARGB_TIM_DMADelayPulseCplt+0x18>
 8004d26:	e152      	b.n	8004fce <ARGB_TIM_DMADelayPulseCplt+0x2be>
 8004d28:	68fa      	ldr	r2, [r7, #12]
 8004d2a:	4bad      	ldr	r3, [pc, #692]	; (8004fe0 <ARGB_TIM_DMADelayPulseCplt+0x2d0>)
 8004d2c:	429a      	cmp	r2, r3
 8004d2e:	d000      	beq.n	8004d32 <ARGB_TIM_DMADelayPulseCplt+0x22>
 8004d30:	e14d      	b.n	8004fce <ARGB_TIM_DMADelayPulseCplt+0x2be>
    if (BUF_COUNTER == 0) return; // if no data to transmit - return
 8004d32:	4bac      	ldr	r3, [pc, #688]	; (8004fe4 <ARGB_TIM_DMADelayPulseCplt+0x2d4>)
 8004d34:	881b      	ldrh	r3, [r3, #0]
 8004d36:	b29b      	uxth	r3, r3
 8004d38:	2b00      	cmp	r3, #0
 8004d3a:	d100      	bne.n	8004d3e <ARGB_TIM_DMADelayPulseCplt+0x2e>
 8004d3c:	e149      	b.n	8004fd2 <ARGB_TIM_DMADelayPulseCplt+0x2c2>
    if (hdma == htim->hdma[TIM_DMA_ID_CC1]) {
 8004d3e:	68fb      	ldr	r3, [r7, #12]
 8004d40:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004d42:	687a      	ldr	r2, [r7, #4]
 8004d44:	429a      	cmp	r2, r3
 8004d46:	d10b      	bne.n	8004d60 <ARGB_TIM_DMADelayPulseCplt+0x50>
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8004d48:	68fb      	ldr	r3, [r7, #12]
 8004d4a:	2201      	movs	r2, #1
 8004d4c:	771a      	strb	r2, [r3, #28]
        if (hdma->Init.Mode == DMA_NORMAL) {
 8004d4e:	687b      	ldr	r3, [r7, #4]
 8004d50:	699b      	ldr	r3, [r3, #24]
 8004d52:	2b00      	cmp	r3, #0
 8004d54:	d136      	bne.n	8004dc4 <ARGB_TIM_DMADelayPulseCplt+0xb4>
            TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_READY);
 8004d56:	68fb      	ldr	r3, [r7, #12]
 8004d58:	223e      	movs	r2, #62	; 0x3e
 8004d5a:	2101      	movs	r1, #1
 8004d5c:	5499      	strb	r1, [r3, r2]
 8004d5e:	e031      	b.n	8004dc4 <ARGB_TIM_DMADelayPulseCplt+0xb4>
        }
    } else if (hdma == htim->hdma[TIM_DMA_ID_CC2]) {
 8004d60:	68fb      	ldr	r3, [r7, #12]
 8004d62:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004d64:	687a      	ldr	r2, [r7, #4]
 8004d66:	429a      	cmp	r2, r3
 8004d68:	d10b      	bne.n	8004d82 <ARGB_TIM_DMADelayPulseCplt+0x72>
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8004d6a:	68fb      	ldr	r3, [r7, #12]
 8004d6c:	2202      	movs	r2, #2
 8004d6e:	771a      	strb	r2, [r3, #28]
        if (hdma->Init.Mode == DMA_NORMAL) {
 8004d70:	687b      	ldr	r3, [r7, #4]
 8004d72:	699b      	ldr	r3, [r3, #24]
 8004d74:	2b00      	cmp	r3, #0
 8004d76:	d125      	bne.n	8004dc4 <ARGB_TIM_DMADelayPulseCplt+0xb4>
            TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_READY);
 8004d78:	68fb      	ldr	r3, [r7, #12]
 8004d7a:	223f      	movs	r2, #63	; 0x3f
 8004d7c:	2101      	movs	r1, #1
 8004d7e:	5499      	strb	r1, [r3, r2]
 8004d80:	e020      	b.n	8004dc4 <ARGB_TIM_DMADelayPulseCplt+0xb4>
        }
    } else if (hdma == htim->hdma[TIM_DMA_ID_CC3]) {
 8004d82:	68fb      	ldr	r3, [r7, #12]
 8004d84:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004d86:	687a      	ldr	r2, [r7, #4]
 8004d88:	429a      	cmp	r2, r3
 8004d8a:	d10b      	bne.n	8004da4 <ARGB_TIM_DMADelayPulseCplt+0x94>
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8004d8c:	68fb      	ldr	r3, [r7, #12]
 8004d8e:	2204      	movs	r2, #4
 8004d90:	771a      	strb	r2, [r3, #28]
        if (hdma->Init.Mode == DMA_NORMAL) {
 8004d92:	687b      	ldr	r3, [r7, #4]
 8004d94:	699b      	ldr	r3, [r3, #24]
 8004d96:	2b00      	cmp	r3, #0
 8004d98:	d114      	bne.n	8004dc4 <ARGB_TIM_DMADelayPulseCplt+0xb4>
            TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_3, HAL_TIM_CHANNEL_STATE_READY);
 8004d9a:	68fb      	ldr	r3, [r7, #12]
 8004d9c:	2240      	movs	r2, #64	; 0x40
 8004d9e:	2101      	movs	r1, #1
 8004da0:	5499      	strb	r1, [r3, r2]
 8004da2:	e00f      	b.n	8004dc4 <ARGB_TIM_DMADelayPulseCplt+0xb4>
        }
    } else if (hdma == htim->hdma[TIM_DMA_ID_CC4]) {
 8004da4:	68fb      	ldr	r3, [r7, #12]
 8004da6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004da8:	687a      	ldr	r2, [r7, #4]
 8004daa:	429a      	cmp	r2, r3
 8004dac:	d10a      	bne.n	8004dc4 <ARGB_TIM_DMADelayPulseCplt+0xb4>
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8004dae:	68fb      	ldr	r3, [r7, #12]
 8004db0:	2208      	movs	r2, #8
 8004db2:	771a      	strb	r2, [r3, #28]
        if (hdma->Init.Mode == DMA_NORMAL) {
 8004db4:	687b      	ldr	r3, [r7, #4]
 8004db6:	699b      	ldr	r3, [r3, #24]
 8004db8:	2b00      	cmp	r3, #0
 8004dba:	d103      	bne.n	8004dc4 <ARGB_TIM_DMADelayPulseCplt+0xb4>
            TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_4, HAL_TIM_CHANNEL_STATE_READY);
 8004dbc:	68fb      	ldr	r3, [r7, #12]
 8004dbe:	2241      	movs	r2, #65	; 0x41
 8004dc0:	2101      	movs	r1, #1
 8004dc2:	5499      	strb	r1, [r3, r2]
        }
    } else {
        /* nothing to do */
    }
// if data transfer
    if (BUF_COUNTER < NUM_PIXELS) {
 8004dc4:	4b87      	ldr	r3, [pc, #540]	; (8004fe4 <ARGB_TIM_DMADelayPulseCplt+0x2d4>)
 8004dc6:	881b      	ldrh	r3, [r3, #0]
 8004dc8:	b29b      	uxth	r3, r3
 8004dca:	2b03      	cmp	r3, #3
 8004dcc:	d900      	bls.n	8004dd0 <ARGB_TIM_DMADelayPulseCplt+0xc0>
 8004dce:	e08f      	b.n	8004ef0 <ARGB_TIM_DMADelayPulseCplt+0x1e0>
        // fill second part of buffer
        for (volatile u8_t i = 0; i < 8; i++) {
 8004dd0:	230b      	movs	r3, #11
 8004dd2:	18fb      	adds	r3, r7, r3
 8004dd4:	2200      	movs	r2, #0
 8004dd6:	701a      	strb	r2, [r3, #0]
 8004dd8:	e07b      	b.n	8004ed2 <ARGB_TIM_DMADelayPulseCplt+0x1c2>
            PWM_BUF[i + 32] = (((RGB_BUF[4 * BUF_COUNTER] << i) & 0x80) > 0) ? PWM_HI : PWM_LO;
            PWM_BUF[i + 40] = (((RGB_BUF[4 * BUF_COUNTER + 1] << i) & 0x80) > 0) ? PWM_HI : PWM_LO;
            PWM_BUF[i + 48] = (((RGB_BUF[4 * BUF_COUNTER + 2] << i) & 0x80) > 0) ? PWM_HI : PWM_LO;
            PWM_BUF[i + 56] = (((RGB_BUF[4 * BUF_COUNTER + 3] << i) & 0x80) > 0) ? PWM_HI : PWM_LO;
#else
            PWM_BUF[i + 24] = (((RGB_BUF[3 * BUF_COUNTER] << i) & 0x80) > 0) ? PWM_HI : PWM_LO;
 8004dda:	4b82      	ldr	r3, [pc, #520]	; (8004fe4 <ARGB_TIM_DMADelayPulseCplt+0x2d4>)
 8004ddc:	881b      	ldrh	r3, [r3, #0]
 8004dde:	b29b      	uxth	r3, r3
 8004de0:	001a      	movs	r2, r3
 8004de2:	0013      	movs	r3, r2
 8004de4:	005b      	lsls	r3, r3, #1
 8004de6:	189b      	adds	r3, r3, r2
 8004de8:	4a7f      	ldr	r2, [pc, #508]	; (8004fe8 <ARGB_TIM_DMADelayPulseCplt+0x2d8>)
 8004dea:	5cd3      	ldrb	r3, [r2, r3]
 8004dec:	b2db      	uxtb	r3, r3
 8004dee:	001a      	movs	r2, r3
 8004df0:	230b      	movs	r3, #11
 8004df2:	18fb      	adds	r3, r7, r3
 8004df4:	781b      	ldrb	r3, [r3, #0]
 8004df6:	b2db      	uxtb	r3, r3
 8004df8:	409a      	lsls	r2, r3
 8004dfa:	0013      	movs	r3, r2
 8004dfc:	2280      	movs	r2, #128	; 0x80
 8004dfe:	4013      	ands	r3, r2
 8004e00:	2b00      	cmp	r3, #0
 8004e02:	dd04      	ble.n	8004e0e <ARGB_TIM_DMADelayPulseCplt+0xfe>
 8004e04:	4b79      	ldr	r3, [pc, #484]	; (8004fec <ARGB_TIM_DMADelayPulseCplt+0x2dc>)
 8004e06:	781b      	ldrb	r3, [r3, #0]
 8004e08:	b2db      	uxtb	r3, r3
 8004e0a:	0019      	movs	r1, r3
 8004e0c:	e003      	b.n	8004e16 <ARGB_TIM_DMADelayPulseCplt+0x106>
 8004e0e:	4b78      	ldr	r3, [pc, #480]	; (8004ff0 <ARGB_TIM_DMADelayPulseCplt+0x2e0>)
 8004e10:	781b      	ldrb	r3, [r3, #0]
 8004e12:	b2db      	uxtb	r3, r3
 8004e14:	0019      	movs	r1, r3
 8004e16:	200b      	movs	r0, #11
 8004e18:	183b      	adds	r3, r7, r0
 8004e1a:	781b      	ldrb	r3, [r3, #0]
 8004e1c:	b2db      	uxtb	r3, r3
 8004e1e:	3318      	adds	r3, #24
 8004e20:	001a      	movs	r2, r3
 8004e22:	4b74      	ldr	r3, [pc, #464]	; (8004ff4 <ARGB_TIM_DMADelayPulseCplt+0x2e4>)
 8004e24:	0092      	lsls	r2, r2, #2
 8004e26:	50d1      	str	r1, [r2, r3]
            PWM_BUF[i + 32] = (((RGB_BUF[3 * BUF_COUNTER + 1] << i) & 0x80) > 0) ? PWM_HI : PWM_LO;
 8004e28:	4b6e      	ldr	r3, [pc, #440]	; (8004fe4 <ARGB_TIM_DMADelayPulseCplt+0x2d4>)
 8004e2a:	881b      	ldrh	r3, [r3, #0]
 8004e2c:	b29b      	uxth	r3, r3
 8004e2e:	001a      	movs	r2, r3
 8004e30:	0013      	movs	r3, r2
 8004e32:	005b      	lsls	r3, r3, #1
 8004e34:	189b      	adds	r3, r3, r2
 8004e36:	3301      	adds	r3, #1
 8004e38:	4a6b      	ldr	r2, [pc, #428]	; (8004fe8 <ARGB_TIM_DMADelayPulseCplt+0x2d8>)
 8004e3a:	5cd3      	ldrb	r3, [r2, r3]
 8004e3c:	b2db      	uxtb	r3, r3
 8004e3e:	001a      	movs	r2, r3
 8004e40:	183b      	adds	r3, r7, r0
 8004e42:	781b      	ldrb	r3, [r3, #0]
 8004e44:	b2db      	uxtb	r3, r3
 8004e46:	409a      	lsls	r2, r3
 8004e48:	0013      	movs	r3, r2
 8004e4a:	2280      	movs	r2, #128	; 0x80
 8004e4c:	4013      	ands	r3, r2
 8004e4e:	2b00      	cmp	r3, #0
 8004e50:	dd04      	ble.n	8004e5c <ARGB_TIM_DMADelayPulseCplt+0x14c>
 8004e52:	4b66      	ldr	r3, [pc, #408]	; (8004fec <ARGB_TIM_DMADelayPulseCplt+0x2dc>)
 8004e54:	781b      	ldrb	r3, [r3, #0]
 8004e56:	b2db      	uxtb	r3, r3
 8004e58:	0019      	movs	r1, r3
 8004e5a:	e003      	b.n	8004e64 <ARGB_TIM_DMADelayPulseCplt+0x154>
 8004e5c:	4b64      	ldr	r3, [pc, #400]	; (8004ff0 <ARGB_TIM_DMADelayPulseCplt+0x2e0>)
 8004e5e:	781b      	ldrb	r3, [r3, #0]
 8004e60:	b2db      	uxtb	r3, r3
 8004e62:	0019      	movs	r1, r3
 8004e64:	200b      	movs	r0, #11
 8004e66:	183b      	adds	r3, r7, r0
 8004e68:	781b      	ldrb	r3, [r3, #0]
 8004e6a:	b2db      	uxtb	r3, r3
 8004e6c:	3320      	adds	r3, #32
 8004e6e:	001a      	movs	r2, r3
 8004e70:	4b60      	ldr	r3, [pc, #384]	; (8004ff4 <ARGB_TIM_DMADelayPulseCplt+0x2e4>)
 8004e72:	0092      	lsls	r2, r2, #2
 8004e74:	50d1      	str	r1, [r2, r3]
            PWM_BUF[i + 40] = (((RGB_BUF[3 * BUF_COUNTER + 2] << i) & 0x80) > 0) ? PWM_HI : PWM_LO;
 8004e76:	4b5b      	ldr	r3, [pc, #364]	; (8004fe4 <ARGB_TIM_DMADelayPulseCplt+0x2d4>)
 8004e78:	881b      	ldrh	r3, [r3, #0]
 8004e7a:	b29b      	uxth	r3, r3
 8004e7c:	001a      	movs	r2, r3
 8004e7e:	0013      	movs	r3, r2
 8004e80:	005b      	lsls	r3, r3, #1
 8004e82:	189b      	adds	r3, r3, r2
 8004e84:	3302      	adds	r3, #2
 8004e86:	4a58      	ldr	r2, [pc, #352]	; (8004fe8 <ARGB_TIM_DMADelayPulseCplt+0x2d8>)
 8004e88:	5cd3      	ldrb	r3, [r2, r3]
 8004e8a:	b2db      	uxtb	r3, r3
 8004e8c:	001a      	movs	r2, r3
 8004e8e:	183b      	adds	r3, r7, r0
 8004e90:	781b      	ldrb	r3, [r3, #0]
 8004e92:	b2db      	uxtb	r3, r3
 8004e94:	409a      	lsls	r2, r3
 8004e96:	0013      	movs	r3, r2
 8004e98:	2280      	movs	r2, #128	; 0x80
 8004e9a:	4013      	ands	r3, r2
 8004e9c:	2b00      	cmp	r3, #0
 8004e9e:	dd04      	ble.n	8004eaa <ARGB_TIM_DMADelayPulseCplt+0x19a>
 8004ea0:	4b52      	ldr	r3, [pc, #328]	; (8004fec <ARGB_TIM_DMADelayPulseCplt+0x2dc>)
 8004ea2:	781b      	ldrb	r3, [r3, #0]
 8004ea4:	b2db      	uxtb	r3, r3
 8004ea6:	0019      	movs	r1, r3
 8004ea8:	e003      	b.n	8004eb2 <ARGB_TIM_DMADelayPulseCplt+0x1a2>
 8004eaa:	4b51      	ldr	r3, [pc, #324]	; (8004ff0 <ARGB_TIM_DMADelayPulseCplt+0x2e0>)
 8004eac:	781b      	ldrb	r3, [r3, #0]
 8004eae:	b2db      	uxtb	r3, r3
 8004eb0:	0019      	movs	r1, r3
 8004eb2:	200b      	movs	r0, #11
 8004eb4:	183b      	adds	r3, r7, r0
 8004eb6:	781b      	ldrb	r3, [r3, #0]
 8004eb8:	b2db      	uxtb	r3, r3
 8004eba:	3328      	adds	r3, #40	; 0x28
 8004ebc:	001a      	movs	r2, r3
 8004ebe:	4b4d      	ldr	r3, [pc, #308]	; (8004ff4 <ARGB_TIM_DMADelayPulseCplt+0x2e4>)
 8004ec0:	0092      	lsls	r2, r2, #2
 8004ec2:	50d1      	str	r1, [r2, r3]
        for (volatile u8_t i = 0; i < 8; i++) {
 8004ec4:	183b      	adds	r3, r7, r0
 8004ec6:	781b      	ldrb	r3, [r3, #0]
 8004ec8:	b2db      	uxtb	r3, r3
 8004eca:	3301      	adds	r3, #1
 8004ecc:	b2da      	uxtb	r2, r3
 8004ece:	183b      	adds	r3, r7, r0
 8004ed0:	701a      	strb	r2, [r3, #0]
 8004ed2:	230b      	movs	r3, #11
 8004ed4:	18fb      	adds	r3, r7, r3
 8004ed6:	781b      	ldrb	r3, [r3, #0]
 8004ed8:	b2db      	uxtb	r3, r3
 8004eda:	2b07      	cmp	r3, #7
 8004edc:	d800      	bhi.n	8004ee0 <ARGB_TIM_DMADelayPulseCplt+0x1d0>
 8004ede:	e77c      	b.n	8004dda <ARGB_TIM_DMADelayPulseCplt+0xca>
#endif
        }
        BUF_COUNTER++;
 8004ee0:	4b40      	ldr	r3, [pc, #256]	; (8004fe4 <ARGB_TIM_DMADelayPulseCplt+0x2d4>)
 8004ee2:	881b      	ldrh	r3, [r3, #0]
 8004ee4:	b29b      	uxth	r3, r3
 8004ee6:	3301      	adds	r3, #1
 8004ee8:	b29a      	uxth	r2, r3
 8004eea:	4b3e      	ldr	r3, [pc, #248]	; (8004fe4 <ARGB_TIM_DMADelayPulseCplt+0x2d4>)
 8004eec:	801a      	strh	r2, [r3, #0]
 8004eee:	e06a      	b.n	8004fc6 <ARGB_TIM_DMADelayPulseCplt+0x2b6>
    } else if (BUF_COUNTER < NUM_PIXELS + 2) { // if RET transfer
 8004ef0:	4b3c      	ldr	r3, [pc, #240]	; (8004fe4 <ARGB_TIM_DMADelayPulseCplt+0x2d4>)
 8004ef2:	881b      	ldrh	r3, [r3, #0]
 8004ef4:	b29b      	uxth	r3, r3
 8004ef6:	2b05      	cmp	r3, #5
 8004ef8:	d80d      	bhi.n	8004f16 <ARGB_TIM_DMADelayPulseCplt+0x206>
        memset((dma_siz *) &PWM_BUF[PWM_BUF_LEN / 2], 0, (PWM_BUF_LEN / 2)*sizeof(dma_siz)); // second part
 8004efa:	4b3f      	ldr	r3, [pc, #252]	; (8004ff8 <ARGB_TIM_DMADelayPulseCplt+0x2e8>)
 8004efc:	2260      	movs	r2, #96	; 0x60
 8004efe:	2100      	movs	r1, #0
 8004f00:	0018      	movs	r0, r3
 8004f02:	f005 fbcb 	bl	800a69c <memset>
        BUF_COUNTER++;
 8004f06:	4b37      	ldr	r3, [pc, #220]	; (8004fe4 <ARGB_TIM_DMADelayPulseCplt+0x2d4>)
 8004f08:	881b      	ldrh	r3, [r3, #0]
 8004f0a:	b29b      	uxth	r3, r3
 8004f0c:	3301      	adds	r3, #1
 8004f0e:	b29a      	uxth	r2, r3
 8004f10:	4b34      	ldr	r3, [pc, #208]	; (8004fe4 <ARGB_TIM_DMADelayPulseCplt+0x2d4>)
 8004f12:	801a      	strh	r2, [r3, #0]
 8004f14:	e057      	b.n	8004fc6 <ARGB_TIM_DMADelayPulseCplt+0x2b6>
    } else { // if END of transfer
        BUF_COUNTER = 0;
 8004f16:	4b33      	ldr	r3, [pc, #204]	; (8004fe4 <ARGB_TIM_DMADelayPulseCplt+0x2d4>)
 8004f18:	2200      	movs	r2, #0
 8004f1a:	801a      	strh	r2, [r3, #0]
#if TIM_CH == TIM_CHANNEL_2
        __HAL_TIM_DISABLE_DMA(htim, TIM_DMA_CC2);
        (void) HAL_DMA_Abort_IT(htim->hdma[TIM_DMA_ID_CC2]);
#endif
#if TIM_CH == TIM_CHANNEL_3
        __HAL_TIM_DISABLE_DMA(htim, TIM_DMA_CC3);
 8004f1c:	68fb      	ldr	r3, [r7, #12]
 8004f1e:	681b      	ldr	r3, [r3, #0]
 8004f20:	68da      	ldr	r2, [r3, #12]
 8004f22:	68fb      	ldr	r3, [r7, #12]
 8004f24:	681b      	ldr	r3, [r3, #0]
 8004f26:	4935      	ldr	r1, [pc, #212]	; (8004ffc <ARGB_TIM_DMADelayPulseCplt+0x2ec>)
 8004f28:	400a      	ands	r2, r1
 8004f2a:	60da      	str	r2, [r3, #12]
        (void) HAL_DMA_Abort_IT(htim->hdma[TIM_DMA_ID_CC3]);
 8004f2c:	68fb      	ldr	r3, [r7, #12]
 8004f2e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004f30:	0018      	movs	r0, r3
 8004f32:	f001 ffc3 	bl	8006ebc <HAL_DMA_Abort_IT>
#endif
#if TIM_CH == TIM_CHANNEL_4
        __HAL_TIM_DISABLE_DMA(htim, TIM_DMA_CC4);
        (void) HAL_DMA_Abort_IT(htim->hdma[TIM_DMA_ID_CC4]);
#endif
        if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET) {
 8004f36:	68fb      	ldr	r3, [r7, #12]
 8004f38:	681b      	ldr	r3, [r3, #0]
 8004f3a:	4a31      	ldr	r2, [pc, #196]	; (8005000 <ARGB_TIM_DMADelayPulseCplt+0x2f0>)
 8004f3c:	4293      	cmp	r3, r2
 8004f3e:	d00e      	beq.n	8004f5e <ARGB_TIM_DMADelayPulseCplt+0x24e>
 8004f40:	68fb      	ldr	r3, [r7, #12]
 8004f42:	681b      	ldr	r3, [r3, #0]
 8004f44:	4a2f      	ldr	r2, [pc, #188]	; (8005004 <ARGB_TIM_DMADelayPulseCplt+0x2f4>)
 8004f46:	4293      	cmp	r3, r2
 8004f48:	d009      	beq.n	8004f5e <ARGB_TIM_DMADelayPulseCplt+0x24e>
 8004f4a:	68fb      	ldr	r3, [r7, #12]
 8004f4c:	681b      	ldr	r3, [r3, #0]
 8004f4e:	4a2e      	ldr	r2, [pc, #184]	; (8005008 <ARGB_TIM_DMADelayPulseCplt+0x2f8>)
 8004f50:	4293      	cmp	r3, r2
 8004f52:	d004      	beq.n	8004f5e <ARGB_TIM_DMADelayPulseCplt+0x24e>
 8004f54:	68fb      	ldr	r3, [r7, #12]
 8004f56:	681b      	ldr	r3, [r3, #0]
 8004f58:	4a2c      	ldr	r2, [pc, #176]	; (800500c <ARGB_TIM_DMADelayPulseCplt+0x2fc>)
 8004f5a:	4293      	cmp	r3, r2
 8004f5c:	d101      	bne.n	8004f62 <ARGB_TIM_DMADelayPulseCplt+0x252>
 8004f5e:	2301      	movs	r3, #1
 8004f60:	e000      	b.n	8004f64 <ARGB_TIM_DMADelayPulseCplt+0x254>
 8004f62:	2300      	movs	r3, #0
 8004f64:	2b00      	cmp	r3, #0
 8004f66:	d013      	beq.n	8004f90 <ARGB_TIM_DMADelayPulseCplt+0x280>
            /* Disable the Main Output */
            __HAL_TIM_MOE_DISABLE(htim);
 8004f68:	68fb      	ldr	r3, [r7, #12]
 8004f6a:	681b      	ldr	r3, [r3, #0]
 8004f6c:	6a1b      	ldr	r3, [r3, #32]
 8004f6e:	4a28      	ldr	r2, [pc, #160]	; (8005010 <ARGB_TIM_DMADelayPulseCplt+0x300>)
 8004f70:	4013      	ands	r3, r2
 8004f72:	d10d      	bne.n	8004f90 <ARGB_TIM_DMADelayPulseCplt+0x280>
 8004f74:	68fb      	ldr	r3, [r7, #12]
 8004f76:	681b      	ldr	r3, [r3, #0]
 8004f78:	6a1b      	ldr	r3, [r3, #32]
 8004f7a:	4a26      	ldr	r2, [pc, #152]	; (8005014 <ARGB_TIM_DMADelayPulseCplt+0x304>)
 8004f7c:	4013      	ands	r3, r2
 8004f7e:	d107      	bne.n	8004f90 <ARGB_TIM_DMADelayPulseCplt+0x280>
 8004f80:	68fb      	ldr	r3, [r7, #12]
 8004f82:	681b      	ldr	r3, [r3, #0]
 8004f84:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8004f86:	68fb      	ldr	r3, [r7, #12]
 8004f88:	681b      	ldr	r3, [r3, #0]
 8004f8a:	4923      	ldr	r1, [pc, #140]	; (8005018 <ARGB_TIM_DMADelayPulseCplt+0x308>)
 8004f8c:	400a      	ands	r2, r1
 8004f8e:	645a      	str	r2, [r3, #68]	; 0x44

        }
        /* Disable the Peripheral */
        __HAL_TIM_DISABLE(htim);
 8004f90:	68fb      	ldr	r3, [r7, #12]
 8004f92:	681b      	ldr	r3, [r3, #0]
 8004f94:	6a1b      	ldr	r3, [r3, #32]
 8004f96:	4a1e      	ldr	r2, [pc, #120]	; (8005010 <ARGB_TIM_DMADelayPulseCplt+0x300>)
 8004f98:	4013      	ands	r3, r2
 8004f9a:	d10d      	bne.n	8004fb8 <ARGB_TIM_DMADelayPulseCplt+0x2a8>
 8004f9c:	68fb      	ldr	r3, [r7, #12]
 8004f9e:	681b      	ldr	r3, [r3, #0]
 8004fa0:	6a1b      	ldr	r3, [r3, #32]
 8004fa2:	4a1c      	ldr	r2, [pc, #112]	; (8005014 <ARGB_TIM_DMADelayPulseCplt+0x304>)
 8004fa4:	4013      	ands	r3, r2
 8004fa6:	d107      	bne.n	8004fb8 <ARGB_TIM_DMADelayPulseCplt+0x2a8>
 8004fa8:	68fb      	ldr	r3, [r7, #12]
 8004faa:	681b      	ldr	r3, [r3, #0]
 8004fac:	681a      	ldr	r2, [r3, #0]
 8004fae:	68fb      	ldr	r3, [r7, #12]
 8004fb0:	681b      	ldr	r3, [r3, #0]
 8004fb2:	2101      	movs	r1, #1
 8004fb4:	438a      	bics	r2, r1
 8004fb6:	601a      	str	r2, [r3, #0]
        //CLEAR_BIT(TIM3->CR1, TIM_CR1_CEN);
        /* Set the TIM channel state */
        TIM_CHANNEL_STATE_SET(htim, TIM_CH, HAL_TIM_CHANNEL_STATE_READY);
 8004fb8:	68fb      	ldr	r3, [r7, #12]
 8004fba:	2240      	movs	r2, #64	; 0x40
 8004fbc:	2101      	movs	r1, #1
 8004fbe:	5499      	strb	r1, [r3, r2]
        ARGB_LOC_ST = ARGB_READY;
 8004fc0:	4b16      	ldr	r3, [pc, #88]	; (800501c <ARGB_TIM_DMADelayPulseCplt+0x30c>)
 8004fc2:	2201      	movs	r2, #1
 8004fc4:	701a      	strb	r2, [r3, #0]
    }
    htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8004fc6:	68fb      	ldr	r3, [r7, #12]
 8004fc8:	2200      	movs	r2, #0
 8004fca:	771a      	strb	r2, [r3, #28]
 8004fcc:	e002      	b.n	8004fd4 <ARGB_TIM_DMADelayPulseCplt+0x2c4>
    if (hdma != &DMA_HANDLE || htim != &TIM_HANDLE) return;
 8004fce:	46c0      	nop			; (mov r8, r8)
 8004fd0:	e000      	b.n	8004fd4 <ARGB_TIM_DMADelayPulseCplt+0x2c4>
    if (BUF_COUNTER == 0) return; // if no data to transmit - return
 8004fd2:	46c0      	nop			; (mov r8, r8)
}
 8004fd4:	46bd      	mov	sp, r7
 8004fd6:	b004      	add	sp, #16
 8004fd8:	bd80      	pop	{r7, pc}
 8004fda:	46c0      	nop			; (mov r8, r8)
 8004fdc:	200002cc 	.word	0x200002cc
 8004fe0:	20000284 	.word	0x20000284
 8004fe4:	20000160 	.word	0x20000160
 8004fe8:	20000094 	.word	0x20000094
 8004fec:	20000090 	.word	0x20000090
 8004ff0:	20000091 	.word	0x20000091
 8004ff4:	200000a0 	.word	0x200000a0
 8004ff8:	20000100 	.word	0x20000100
 8004ffc:	fffff7ff 	.word	0xfffff7ff
 8005000:	40012c00 	.word	0x40012c00
 8005004:	40014000 	.word	0x40014000
 8005008:	40014400 	.word	0x40014400
 800500c:	40014800 	.word	0x40014800
 8005010:	00001111 	.word	0x00001111
 8005014:	00000444 	.word	0x00000444
 8005018:	ffff7fff 	.word	0xffff7fff
 800501c:	20000162 	.word	0x20000162

08005020 <ARGB_TIM_DMADelayPulseHalfCplt>:
/**
  * @brief  TIM DMA Delay Pulse half complete callback.
  * @param  hdma pointer to DMA handle.
  * @retval None
  */
static void ARGB_TIM_DMADelayPulseHalfCplt(DMA_HandleTypeDef *hdma) {
 8005020:	b580      	push	{r7, lr}
 8005022:	b084      	sub	sp, #16
 8005024:	af00      	add	r7, sp, #0
 8005026:	6078      	str	r0, [r7, #4]
    TIM_HandleTypeDef *htim = (TIM_HandleTypeDef *) ((DMA_HandleTypeDef *) hdma)->Parent;
 8005028:	687b      	ldr	r3, [r7, #4]
 800502a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800502c:	60fb      	str	r3, [r7, #12]
    // if wrong handlers
    if (hdma != &DMA_HANDLE || htim != &TIM_HANDLE) return;
 800502e:	687a      	ldr	r2, [r7, #4]
 8005030:	4b5e      	ldr	r3, [pc, #376]	; (80051ac <ARGB_TIM_DMADelayPulseHalfCplt+0x18c>)
 8005032:	429a      	cmp	r2, r3
 8005034:	d000      	beq.n	8005038 <ARGB_TIM_DMADelayPulseHalfCplt+0x18>
 8005036:	e0b2      	b.n	800519e <ARGB_TIM_DMADelayPulseHalfCplt+0x17e>
 8005038:	68fa      	ldr	r2, [r7, #12]
 800503a:	4b5d      	ldr	r3, [pc, #372]	; (80051b0 <ARGB_TIM_DMADelayPulseHalfCplt+0x190>)
 800503c:	429a      	cmp	r2, r3
 800503e:	d000      	beq.n	8005042 <ARGB_TIM_DMADelayPulseHalfCplt+0x22>
 8005040:	e0ad      	b.n	800519e <ARGB_TIM_DMADelayPulseHalfCplt+0x17e>
    if (BUF_COUNTER == 0) return; // if no data to transmit - return
 8005042:	4b5c      	ldr	r3, [pc, #368]	; (80051b4 <ARGB_TIM_DMADelayPulseHalfCplt+0x194>)
 8005044:	881b      	ldrh	r3, [r3, #0]
 8005046:	b29b      	uxth	r3, r3
 8005048:	2b00      	cmp	r3, #0
 800504a:	d100      	bne.n	800504e <ARGB_TIM_DMADelayPulseHalfCplt+0x2e>
 800504c:	e0a9      	b.n	80051a2 <ARGB_TIM_DMADelayPulseHalfCplt+0x182>
    // if data transfer
    if (BUF_COUNTER < NUM_PIXELS) {
 800504e:	4b59      	ldr	r3, [pc, #356]	; (80051b4 <ARGB_TIM_DMADelayPulseHalfCplt+0x194>)
 8005050:	881b      	ldrh	r3, [r3, #0]
 8005052:	b29b      	uxth	r3, r3
 8005054:	2b03      	cmp	r3, #3
 8005056:	d900      	bls.n	800505a <ARGB_TIM_DMADelayPulseHalfCplt+0x3a>
 8005058:	e08e      	b.n	8005178 <ARGB_TIM_DMADelayPulseHalfCplt+0x158>
        // fill first part of buffer
        for (volatile u8_t i = 0; i < 8; i++) {
 800505a:	230b      	movs	r3, #11
 800505c:	18fb      	adds	r3, r7, r3
 800505e:	2200      	movs	r2, #0
 8005060:	701a      	strb	r2, [r3, #0]
 8005062:	e07a      	b.n	800515a <ARGB_TIM_DMADelayPulseHalfCplt+0x13a>
            PWM_BUF[i] = (((RGB_BUF[4 * BUF_COUNTER] << i) & 0x80) > 0) ? PWM_HI : PWM_LO;
            PWM_BUF[i + 8] = (((RGB_BUF[4 * BUF_COUNTER + 1] << i) & 0x80) > 0) ? PWM_HI : PWM_LO;
            PWM_BUF[i + 16] = (((RGB_BUF[4 * BUF_COUNTER + 2] << i) & 0x80) > 0) ? PWM_HI : PWM_LO;
            PWM_BUF[i + 24] = (((RGB_BUF[4 * BUF_COUNTER + 3] << i) & 0x80) > 0)? PWM_HI : PWM_LO;
#else
            PWM_BUF[i] = (((RGB_BUF[3 * BUF_COUNTER] << i) & 0x80) > 0) ? PWM_HI : PWM_LO;
 8005064:	4b53      	ldr	r3, [pc, #332]	; (80051b4 <ARGB_TIM_DMADelayPulseHalfCplt+0x194>)
 8005066:	881b      	ldrh	r3, [r3, #0]
 8005068:	b29b      	uxth	r3, r3
 800506a:	001a      	movs	r2, r3
 800506c:	0013      	movs	r3, r2
 800506e:	005b      	lsls	r3, r3, #1
 8005070:	189b      	adds	r3, r3, r2
 8005072:	4a51      	ldr	r2, [pc, #324]	; (80051b8 <ARGB_TIM_DMADelayPulseHalfCplt+0x198>)
 8005074:	5cd3      	ldrb	r3, [r2, r3]
 8005076:	b2db      	uxtb	r3, r3
 8005078:	001a      	movs	r2, r3
 800507a:	230b      	movs	r3, #11
 800507c:	18fb      	adds	r3, r7, r3
 800507e:	781b      	ldrb	r3, [r3, #0]
 8005080:	b2db      	uxtb	r3, r3
 8005082:	409a      	lsls	r2, r3
 8005084:	0013      	movs	r3, r2
 8005086:	2280      	movs	r2, #128	; 0x80
 8005088:	4013      	ands	r3, r2
 800508a:	2b00      	cmp	r3, #0
 800508c:	dd04      	ble.n	8005098 <ARGB_TIM_DMADelayPulseHalfCplt+0x78>
 800508e:	4b4b      	ldr	r3, [pc, #300]	; (80051bc <ARGB_TIM_DMADelayPulseHalfCplt+0x19c>)
 8005090:	781b      	ldrb	r3, [r3, #0]
 8005092:	b2db      	uxtb	r3, r3
 8005094:	0019      	movs	r1, r3
 8005096:	e003      	b.n	80050a0 <ARGB_TIM_DMADelayPulseHalfCplt+0x80>
 8005098:	4b49      	ldr	r3, [pc, #292]	; (80051c0 <ARGB_TIM_DMADelayPulseHalfCplt+0x1a0>)
 800509a:	781b      	ldrb	r3, [r3, #0]
 800509c:	b2db      	uxtb	r3, r3
 800509e:	0019      	movs	r1, r3
 80050a0:	200b      	movs	r0, #11
 80050a2:	183b      	adds	r3, r7, r0
 80050a4:	781b      	ldrb	r3, [r3, #0]
 80050a6:	b2db      	uxtb	r3, r3
 80050a8:	001a      	movs	r2, r3
 80050aa:	4b46      	ldr	r3, [pc, #280]	; (80051c4 <ARGB_TIM_DMADelayPulseHalfCplt+0x1a4>)
 80050ac:	0092      	lsls	r2, r2, #2
 80050ae:	50d1      	str	r1, [r2, r3]
            PWM_BUF[i + 8] = (((RGB_BUF[3 * BUF_COUNTER + 1] << i) & 0x80) > 0) ? PWM_HI : PWM_LO;
 80050b0:	4b40      	ldr	r3, [pc, #256]	; (80051b4 <ARGB_TIM_DMADelayPulseHalfCplt+0x194>)
 80050b2:	881b      	ldrh	r3, [r3, #0]
 80050b4:	b29b      	uxth	r3, r3
 80050b6:	001a      	movs	r2, r3
 80050b8:	0013      	movs	r3, r2
 80050ba:	005b      	lsls	r3, r3, #1
 80050bc:	189b      	adds	r3, r3, r2
 80050be:	3301      	adds	r3, #1
 80050c0:	4a3d      	ldr	r2, [pc, #244]	; (80051b8 <ARGB_TIM_DMADelayPulseHalfCplt+0x198>)
 80050c2:	5cd3      	ldrb	r3, [r2, r3]
 80050c4:	b2db      	uxtb	r3, r3
 80050c6:	001a      	movs	r2, r3
 80050c8:	183b      	adds	r3, r7, r0
 80050ca:	781b      	ldrb	r3, [r3, #0]
 80050cc:	b2db      	uxtb	r3, r3
 80050ce:	409a      	lsls	r2, r3
 80050d0:	0013      	movs	r3, r2
 80050d2:	2280      	movs	r2, #128	; 0x80
 80050d4:	4013      	ands	r3, r2
 80050d6:	2b00      	cmp	r3, #0
 80050d8:	dd04      	ble.n	80050e4 <ARGB_TIM_DMADelayPulseHalfCplt+0xc4>
 80050da:	4b38      	ldr	r3, [pc, #224]	; (80051bc <ARGB_TIM_DMADelayPulseHalfCplt+0x19c>)
 80050dc:	781b      	ldrb	r3, [r3, #0]
 80050de:	b2db      	uxtb	r3, r3
 80050e0:	0019      	movs	r1, r3
 80050e2:	e003      	b.n	80050ec <ARGB_TIM_DMADelayPulseHalfCplt+0xcc>
 80050e4:	4b36      	ldr	r3, [pc, #216]	; (80051c0 <ARGB_TIM_DMADelayPulseHalfCplt+0x1a0>)
 80050e6:	781b      	ldrb	r3, [r3, #0]
 80050e8:	b2db      	uxtb	r3, r3
 80050ea:	0019      	movs	r1, r3
 80050ec:	200b      	movs	r0, #11
 80050ee:	183b      	adds	r3, r7, r0
 80050f0:	781b      	ldrb	r3, [r3, #0]
 80050f2:	b2db      	uxtb	r3, r3
 80050f4:	3308      	adds	r3, #8
 80050f6:	001a      	movs	r2, r3
 80050f8:	4b32      	ldr	r3, [pc, #200]	; (80051c4 <ARGB_TIM_DMADelayPulseHalfCplt+0x1a4>)
 80050fa:	0092      	lsls	r2, r2, #2
 80050fc:	50d1      	str	r1, [r2, r3]
            PWM_BUF[i + 16] = (((RGB_BUF[3 * BUF_COUNTER + 2] << i) & 0x80) > 0) ? PWM_HI : PWM_LO;
 80050fe:	4b2d      	ldr	r3, [pc, #180]	; (80051b4 <ARGB_TIM_DMADelayPulseHalfCplt+0x194>)
 8005100:	881b      	ldrh	r3, [r3, #0]
 8005102:	b29b      	uxth	r3, r3
 8005104:	001a      	movs	r2, r3
 8005106:	0013      	movs	r3, r2
 8005108:	005b      	lsls	r3, r3, #1
 800510a:	189b      	adds	r3, r3, r2
 800510c:	3302      	adds	r3, #2
 800510e:	4a2a      	ldr	r2, [pc, #168]	; (80051b8 <ARGB_TIM_DMADelayPulseHalfCplt+0x198>)
 8005110:	5cd3      	ldrb	r3, [r2, r3]
 8005112:	b2db      	uxtb	r3, r3
 8005114:	001a      	movs	r2, r3
 8005116:	183b      	adds	r3, r7, r0
 8005118:	781b      	ldrb	r3, [r3, #0]
 800511a:	b2db      	uxtb	r3, r3
 800511c:	409a      	lsls	r2, r3
 800511e:	0013      	movs	r3, r2
 8005120:	2280      	movs	r2, #128	; 0x80
 8005122:	4013      	ands	r3, r2
 8005124:	2b00      	cmp	r3, #0
 8005126:	dd04      	ble.n	8005132 <ARGB_TIM_DMADelayPulseHalfCplt+0x112>
 8005128:	4b24      	ldr	r3, [pc, #144]	; (80051bc <ARGB_TIM_DMADelayPulseHalfCplt+0x19c>)
 800512a:	781b      	ldrb	r3, [r3, #0]
 800512c:	b2db      	uxtb	r3, r3
 800512e:	0019      	movs	r1, r3
 8005130:	e003      	b.n	800513a <ARGB_TIM_DMADelayPulseHalfCplt+0x11a>
 8005132:	4b23      	ldr	r3, [pc, #140]	; (80051c0 <ARGB_TIM_DMADelayPulseHalfCplt+0x1a0>)
 8005134:	781b      	ldrb	r3, [r3, #0]
 8005136:	b2db      	uxtb	r3, r3
 8005138:	0019      	movs	r1, r3
 800513a:	200b      	movs	r0, #11
 800513c:	183b      	adds	r3, r7, r0
 800513e:	781b      	ldrb	r3, [r3, #0]
 8005140:	b2db      	uxtb	r3, r3
 8005142:	3310      	adds	r3, #16
 8005144:	001a      	movs	r2, r3
 8005146:	4b1f      	ldr	r3, [pc, #124]	; (80051c4 <ARGB_TIM_DMADelayPulseHalfCplt+0x1a4>)
 8005148:	0092      	lsls	r2, r2, #2
 800514a:	50d1      	str	r1, [r2, r3]
        for (volatile u8_t i = 0; i < 8; i++) {
 800514c:	183b      	adds	r3, r7, r0
 800514e:	781b      	ldrb	r3, [r3, #0]
 8005150:	b2db      	uxtb	r3, r3
 8005152:	3301      	adds	r3, #1
 8005154:	b2da      	uxtb	r2, r3
 8005156:	183b      	adds	r3, r7, r0
 8005158:	701a      	strb	r2, [r3, #0]
 800515a:	230b      	movs	r3, #11
 800515c:	18fb      	adds	r3, r7, r3
 800515e:	781b      	ldrb	r3, [r3, #0]
 8005160:	b2db      	uxtb	r3, r3
 8005162:	2b07      	cmp	r3, #7
 8005164:	d800      	bhi.n	8005168 <ARGB_TIM_DMADelayPulseHalfCplt+0x148>
 8005166:	e77d      	b.n	8005064 <ARGB_TIM_DMADelayPulseHalfCplt+0x44>
#endif
        }
        BUF_COUNTER++;
 8005168:	4b12      	ldr	r3, [pc, #72]	; (80051b4 <ARGB_TIM_DMADelayPulseHalfCplt+0x194>)
 800516a:	881b      	ldrh	r3, [r3, #0]
 800516c:	b29b      	uxth	r3, r3
 800516e:	3301      	adds	r3, #1
 8005170:	b29a      	uxth	r2, r3
 8005172:	4b10      	ldr	r3, [pc, #64]	; (80051b4 <ARGB_TIM_DMADelayPulseHalfCplt+0x194>)
 8005174:	801a      	strh	r2, [r3, #0]
 8005176:	e015      	b.n	80051a4 <ARGB_TIM_DMADelayPulseHalfCplt+0x184>
    } else if (BUF_COUNTER < NUM_PIXELS + 2) { // if RET transfer
 8005178:	4b0e      	ldr	r3, [pc, #56]	; (80051b4 <ARGB_TIM_DMADelayPulseHalfCplt+0x194>)
 800517a:	881b      	ldrh	r3, [r3, #0]
 800517c:	b29b      	uxth	r3, r3
 800517e:	2b05      	cmp	r3, #5
 8005180:	d810      	bhi.n	80051a4 <ARGB_TIM_DMADelayPulseHalfCplt+0x184>
        memset((dma_siz *) &PWM_BUF[0], 0, (PWM_BUF_LEN / 2)*sizeof(dma_siz)); // first part
 8005182:	4b10      	ldr	r3, [pc, #64]	; (80051c4 <ARGB_TIM_DMADelayPulseHalfCplt+0x1a4>)
 8005184:	2260      	movs	r2, #96	; 0x60
 8005186:	2100      	movs	r1, #0
 8005188:	0018      	movs	r0, r3
 800518a:	f005 fa87 	bl	800a69c <memset>
        BUF_COUNTER++;
 800518e:	4b09      	ldr	r3, [pc, #36]	; (80051b4 <ARGB_TIM_DMADelayPulseHalfCplt+0x194>)
 8005190:	881b      	ldrh	r3, [r3, #0]
 8005192:	b29b      	uxth	r3, r3
 8005194:	3301      	adds	r3, #1
 8005196:	b29a      	uxth	r2, r3
 8005198:	4b06      	ldr	r3, [pc, #24]	; (80051b4 <ARGB_TIM_DMADelayPulseHalfCplt+0x194>)
 800519a:	801a      	strh	r2, [r3, #0]
 800519c:	e002      	b.n	80051a4 <ARGB_TIM_DMADelayPulseHalfCplt+0x184>
    if (hdma != &DMA_HANDLE || htim != &TIM_HANDLE) return;
 800519e:	46c0      	nop			; (mov r8, r8)
 80051a0:	e000      	b.n	80051a4 <ARGB_TIM_DMADelayPulseHalfCplt+0x184>
    if (BUF_COUNTER == 0) return; // if no data to transmit - return
 80051a2:	46c0      	nop			; (mov r8, r8)
    }
}
 80051a4:	46bd      	mov	sp, r7
 80051a6:	b004      	add	sp, #16
 80051a8:	bd80      	pop	{r7, pc}
 80051aa:	46c0      	nop			; (mov r8, r8)
 80051ac:	200002cc 	.word	0x200002cc
 80051b0:	20000284 	.word	0x20000284
 80051b4:	20000160 	.word	0x20000160
 80051b8:	20000094 	.word	0x20000094
 80051bc:	20000090 	.word	0x20000090
 80051c0:	20000091 	.word	0x20000091
 80051c4:	200000a0 	.word	0x200000a0

080051c8 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 80051c8:	b580      	push	{r7, lr}
 80051ca:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 80051cc:	f001 f872 	bl	80062b4 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 80051d0:	f000 f81c 	bl	800520c <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 80051d4:	f000 fa0e 	bl	80055f4 <MX_GPIO_Init>
  MX_DMA_Init();
 80051d8:	f000 f9e6 	bl	80055a8 <MX_DMA_Init>
  MX_ADC_Init();
 80051dc:	f000 f876 	bl	80052cc <MX_ADC_Init>
  MX_TIM3_Init();
 80051e0:	f000 f962 	bl	80054a8 <MX_TIM3_Init>
  MX_I2C1_Init();
 80051e4:	f000 f8cc 	bl	8005380 <MX_I2C1_Init>
  MX_TIM2_Init();
 80051e8:	f000 f90a 	bl	8005400 <MX_TIM2_Init>
  /* USER CODE BEGIN 2 */
  HAL_ADC_Start_DMA (&hadc, (uint32_t *)adcBuf, 10);
 80051ec:	4905      	ldr	r1, [pc, #20]	; (8005204 <main+0x3c>)
 80051ee:	4b06      	ldr	r3, [pc, #24]	; (8005208 <main+0x40>)
 80051f0:	220a      	movs	r2, #10
 80051f2:	0018      	movs	r0, r3
 80051f4:	f001 fa26 	bl	8006644 <HAL_ADC_Start_DMA>
  doWork();
 80051f8:	f000 fcc2 	bl	8005b80 <doWork>
  while (1)
  {
    /* USER CODE END WHILE */

    /* USER CODE BEGIN 3 */
	  Work();
 80051fc:	f000 fe3a 	bl	8005e74 <Work>
 8005200:	e7fc      	b.n	80051fc <main+0x34>
 8005202:	46c0      	nop			; (mov r8, r8)
 8005204:	20000310 	.word	0x20000310
 8005208:	20000164 	.word	0x20000164

0800520c <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 800520c:	b590      	push	{r4, r7, lr}
 800520e:	b099      	sub	sp, #100	; 0x64
 8005210:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8005212:	242c      	movs	r4, #44	; 0x2c
 8005214:	193b      	adds	r3, r7, r4
 8005216:	0018      	movs	r0, r3
 8005218:	2334      	movs	r3, #52	; 0x34
 800521a:	001a      	movs	r2, r3
 800521c:	2100      	movs	r1, #0
 800521e:	f005 fa3d 	bl	800a69c <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8005222:	231c      	movs	r3, #28
 8005224:	18fb      	adds	r3, r7, r3
 8005226:	0018      	movs	r0, r3
 8005228:	2310      	movs	r3, #16
 800522a:	001a      	movs	r2, r3
 800522c:	2100      	movs	r1, #0
 800522e:	f005 fa35 	bl	800a69c <memset>
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8005232:	003b      	movs	r3, r7
 8005234:	0018      	movs	r0, r3
 8005236:	231c      	movs	r3, #28
 8005238:	001a      	movs	r2, r3
 800523a:	2100      	movs	r1, #0
 800523c:	f005 fa2e 	bl	800a69c <memset>

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI|RCC_OSCILLATORTYPE_HSI14
 8005240:	0021      	movs	r1, r4
 8005242:	187b      	adds	r3, r7, r1
 8005244:	2232      	movs	r2, #50	; 0x32
 8005246:	601a      	str	r2, [r3, #0]
                              |RCC_OSCILLATORTYPE_HSI48;
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8005248:	187b      	adds	r3, r7, r1
 800524a:	2201      	movs	r2, #1
 800524c:	60da      	str	r2, [r3, #12]
  RCC_OscInitStruct.HSI48State = RCC_HSI48_ON;
 800524e:	187b      	adds	r3, r7, r1
 8005250:	2201      	movs	r2, #1
 8005252:	621a      	str	r2, [r3, #32]
  RCC_OscInitStruct.HSI14State = RCC_HSI14_ON;
 8005254:	187b      	adds	r3, r7, r1
 8005256:	2201      	movs	r2, #1
 8005258:	615a      	str	r2, [r3, #20]
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 800525a:	187b      	adds	r3, r7, r1
 800525c:	2210      	movs	r2, #16
 800525e:	611a      	str	r2, [r3, #16]
  RCC_OscInitStruct.HSI14CalibrationValue = 16;
 8005260:	187b      	adds	r3, r7, r1
 8005262:	2210      	movs	r2, #16
 8005264:	619a      	str	r2, [r3, #24]
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_NONE;
 8005266:	187b      	adds	r3, r7, r1
 8005268:	2200      	movs	r2, #0
 800526a:	625a      	str	r2, [r3, #36]	; 0x24
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 800526c:	187b      	adds	r3, r7, r1
 800526e:	0018      	movs	r0, r3
 8005270:	f003 f8a6 	bl	80083c0 <HAL_RCC_OscConfig>
 8005274:	1e03      	subs	r3, r0, #0
 8005276:	d001      	beq.n	800527c <SystemClock_Config+0x70>
  {
    Error_Handler();
 8005278:	f000 fa56 	bl	8005728 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 800527c:	211c      	movs	r1, #28
 800527e:	187b      	adds	r3, r7, r1
 8005280:	2207      	movs	r2, #7
 8005282:	601a      	str	r2, [r3, #0]
                              |RCC_CLOCKTYPE_PCLK1;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_HSI48;
 8005284:	187b      	adds	r3, r7, r1
 8005286:	2203      	movs	r2, #3
 8005288:	605a      	str	r2, [r3, #4]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 800528a:	187b      	adds	r3, r7, r1
 800528c:	2200      	movs	r2, #0
 800528e:	609a      	str	r2, [r3, #8]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 8005290:	187b      	adds	r3, r7, r1
 8005292:	2200      	movs	r2, #0
 8005294:	60da      	str	r2, [r3, #12]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_1) != HAL_OK)
 8005296:	187b      	adds	r3, r7, r1
 8005298:	2101      	movs	r1, #1
 800529a:	0018      	movs	r0, r3
 800529c:	f003 fc16 	bl	8008acc <HAL_RCC_ClockConfig>
 80052a0:	1e03      	subs	r3, r0, #0
 80052a2:	d001      	beq.n	80052a8 <SystemClock_Config+0x9c>
  {
    Error_Handler();
 80052a4:	f000 fa40 	bl	8005728 <Error_Handler>
  }
  PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_I2C1;
 80052a8:	003b      	movs	r3, r7
 80052aa:	2220      	movs	r2, #32
 80052ac:	601a      	str	r2, [r3, #0]
  PeriphClkInit.I2c1ClockSelection = RCC_I2C1CLKSOURCE_HSI;
 80052ae:	003b      	movs	r3, r7
 80052b0:	2200      	movs	r2, #0
 80052b2:	611a      	str	r2, [r3, #16]
  if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 80052b4:	003b      	movs	r3, r7
 80052b6:	0018      	movs	r0, r3
 80052b8:	f003 fd76 	bl	8008da8 <HAL_RCCEx_PeriphCLKConfig>
 80052bc:	1e03      	subs	r3, r0, #0
 80052be:	d001      	beq.n	80052c4 <SystemClock_Config+0xb8>
  {
    Error_Handler();
 80052c0:	f000 fa32 	bl	8005728 <Error_Handler>
  }
}
 80052c4:	46c0      	nop			; (mov r8, r8)
 80052c6:	46bd      	mov	sp, r7
 80052c8:	b019      	add	sp, #100	; 0x64
 80052ca:	bd90      	pop	{r4, r7, pc}

080052cc <MX_ADC_Init>:
  * @brief ADC Initialization Function
  * @param None
  * @retval None
  */
static void MX_ADC_Init(void)
{
 80052cc:	b580      	push	{r7, lr}
 80052ce:	b084      	sub	sp, #16
 80052d0:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC_Init 0 */

  /* USER CODE END ADC_Init 0 */

  ADC_ChannelConfTypeDef sConfig = {0};
 80052d2:	1d3b      	adds	r3, r7, #4
 80052d4:	0018      	movs	r0, r3
 80052d6:	230c      	movs	r3, #12
 80052d8:	001a      	movs	r2, r3
 80052da:	2100      	movs	r1, #0
 80052dc:	f005 f9de 	bl	800a69c <memset>

  /* USER CODE END ADC_Init 1 */

  /** Configure the global features of the ADC (Clock, Resolution, Data Alignment and number of conversion)
  */
  hadc.Instance = ADC1;
 80052e0:	4b25      	ldr	r3, [pc, #148]	; (8005378 <MX_ADC_Init+0xac>)
 80052e2:	4a26      	ldr	r2, [pc, #152]	; (800537c <MX_ADC_Init+0xb0>)
 80052e4:	601a      	str	r2, [r3, #0]
  hadc.Init.ClockPrescaler = ADC_CLOCK_ASYNC_DIV1;
 80052e6:	4b24      	ldr	r3, [pc, #144]	; (8005378 <MX_ADC_Init+0xac>)
 80052e8:	2200      	movs	r2, #0
 80052ea:	605a      	str	r2, [r3, #4]
  hadc.Init.Resolution = ADC_RESOLUTION_12B;
 80052ec:	4b22      	ldr	r3, [pc, #136]	; (8005378 <MX_ADC_Init+0xac>)
 80052ee:	2200      	movs	r2, #0
 80052f0:	609a      	str	r2, [r3, #8]
  hadc.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 80052f2:	4b21      	ldr	r3, [pc, #132]	; (8005378 <MX_ADC_Init+0xac>)
 80052f4:	2200      	movs	r2, #0
 80052f6:	60da      	str	r2, [r3, #12]
  hadc.Init.ScanConvMode = ADC_SCAN_DIRECTION_FORWARD;
 80052f8:	4b1f      	ldr	r3, [pc, #124]	; (8005378 <MX_ADC_Init+0xac>)
 80052fa:	2201      	movs	r2, #1
 80052fc:	611a      	str	r2, [r3, #16]
  hadc.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 80052fe:	4b1e      	ldr	r3, [pc, #120]	; (8005378 <MX_ADC_Init+0xac>)
 8005300:	2204      	movs	r2, #4
 8005302:	615a      	str	r2, [r3, #20]
  hadc.Init.LowPowerAutoWait = DISABLE;
 8005304:	4b1c      	ldr	r3, [pc, #112]	; (8005378 <MX_ADC_Init+0xac>)
 8005306:	2200      	movs	r2, #0
 8005308:	761a      	strb	r2, [r3, #24]
  hadc.Init.LowPowerAutoPowerOff = DISABLE;
 800530a:	4b1b      	ldr	r3, [pc, #108]	; (8005378 <MX_ADC_Init+0xac>)
 800530c:	2200      	movs	r2, #0
 800530e:	765a      	strb	r2, [r3, #25]
  hadc.Init.ContinuousConvMode = ENABLE;
 8005310:	4b19      	ldr	r3, [pc, #100]	; (8005378 <MX_ADC_Init+0xac>)
 8005312:	2201      	movs	r2, #1
 8005314:	769a      	strb	r2, [r3, #26]
  hadc.Init.DiscontinuousConvMode = DISABLE;
 8005316:	4b18      	ldr	r3, [pc, #96]	; (8005378 <MX_ADC_Init+0xac>)
 8005318:	2200      	movs	r2, #0
 800531a:	76da      	strb	r2, [r3, #27]
  hadc.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 800531c:	4b16      	ldr	r3, [pc, #88]	; (8005378 <MX_ADC_Init+0xac>)
 800531e:	22c2      	movs	r2, #194	; 0xc2
 8005320:	32ff      	adds	r2, #255	; 0xff
 8005322:	61da      	str	r2, [r3, #28]
  hadc.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_NONE;
 8005324:	4b14      	ldr	r3, [pc, #80]	; (8005378 <MX_ADC_Init+0xac>)
 8005326:	2200      	movs	r2, #0
 8005328:	621a      	str	r2, [r3, #32]
  hadc.Init.DMAContinuousRequests = ENABLE;
 800532a:	4b13      	ldr	r3, [pc, #76]	; (8005378 <MX_ADC_Init+0xac>)
 800532c:	2224      	movs	r2, #36	; 0x24
 800532e:	2101      	movs	r1, #1
 8005330:	5499      	strb	r1, [r3, r2]
  hadc.Init.Overrun = ADC_OVR_DATA_PRESERVED;
 8005332:	4b11      	ldr	r3, [pc, #68]	; (8005378 <MX_ADC_Init+0xac>)
 8005334:	2201      	movs	r2, #1
 8005336:	629a      	str	r2, [r3, #40]	; 0x28
  if (HAL_ADC_Init(&hadc) != HAL_OK)
 8005338:	4b0f      	ldr	r3, [pc, #60]	; (8005378 <MX_ADC_Init+0xac>)
 800533a:	0018      	movs	r0, r3
 800533c:	f001 f842 	bl	80063c4 <HAL_ADC_Init>
 8005340:	1e03      	subs	r3, r0, #0
 8005342:	d001      	beq.n	8005348 <MX_ADC_Init+0x7c>
  {
    Error_Handler();
 8005344:	f000 f9f0 	bl	8005728 <Error_Handler>
  }

  /** Configure for the selected ADC regular channel to be converted.
  */
  sConfig.Channel = ADC_CHANNEL_0;
 8005348:	1d3b      	adds	r3, r7, #4
 800534a:	2200      	movs	r2, #0
 800534c:	601a      	str	r2, [r3, #0]
  sConfig.Rank = ADC_RANK_CHANNEL_NUMBER;
 800534e:	1d3b      	adds	r3, r7, #4
 8005350:	2280      	movs	r2, #128	; 0x80
 8005352:	0152      	lsls	r2, r2, #5
 8005354:	605a      	str	r2, [r3, #4]
  sConfig.SamplingTime = ADC_SAMPLETIME_239CYCLES_5;
 8005356:	1d3b      	adds	r3, r7, #4
 8005358:	2207      	movs	r2, #7
 800535a:	609a      	str	r2, [r3, #8]
  if (HAL_ADC_ConfigChannel(&hadc, &sConfig) != HAL_OK)
 800535c:	1d3a      	adds	r2, r7, #4
 800535e:	4b06      	ldr	r3, [pc, #24]	; (8005378 <MX_ADC_Init+0xac>)
 8005360:	0011      	movs	r1, r2
 8005362:	0018      	movs	r0, r3
 8005364:	f001 fa08 	bl	8006778 <HAL_ADC_ConfigChannel>
 8005368:	1e03      	subs	r3, r0, #0
 800536a:	d001      	beq.n	8005370 <MX_ADC_Init+0xa4>
  {
    Error_Handler();
 800536c:	f000 f9dc 	bl	8005728 <Error_Handler>
  }
  /* USER CODE BEGIN ADC_Init 2 */

  /* USER CODE END ADC_Init 2 */

}
 8005370:	46c0      	nop			; (mov r8, r8)
 8005372:	46bd      	mov	sp, r7
 8005374:	b004      	add	sp, #16
 8005376:	bd80      	pop	{r7, pc}
 8005378:	20000164 	.word	0x20000164
 800537c:	40012400 	.word	0x40012400

08005380 <MX_I2C1_Init>:
  * @brief I2C1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2C1_Init(void)
{
 8005380:	b580      	push	{r7, lr}
 8005382:	af00      	add	r7, sp, #0
  /* USER CODE END I2C1_Init 0 */

  /* USER CODE BEGIN I2C1_Init 1 */

  /* USER CODE END I2C1_Init 1 */
  hi2c1.Instance = I2C1;
 8005384:	4b1b      	ldr	r3, [pc, #108]	; (80053f4 <MX_I2C1_Init+0x74>)
 8005386:	4a1c      	ldr	r2, [pc, #112]	; (80053f8 <MX_I2C1_Init+0x78>)
 8005388:	601a      	str	r2, [r3, #0]
  hi2c1.Init.Timing = 0x2000090E;
 800538a:	4b1a      	ldr	r3, [pc, #104]	; (80053f4 <MX_I2C1_Init+0x74>)
 800538c:	4a1b      	ldr	r2, [pc, #108]	; (80053fc <MX_I2C1_Init+0x7c>)
 800538e:	605a      	str	r2, [r3, #4]
  hi2c1.Init.OwnAddress1 = 0;
 8005390:	4b18      	ldr	r3, [pc, #96]	; (80053f4 <MX_I2C1_Init+0x74>)
 8005392:	2200      	movs	r2, #0
 8005394:	609a      	str	r2, [r3, #8]
  hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 8005396:	4b17      	ldr	r3, [pc, #92]	; (80053f4 <MX_I2C1_Init+0x74>)
 8005398:	2201      	movs	r2, #1
 800539a:	60da      	str	r2, [r3, #12]
  hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 800539c:	4b15      	ldr	r3, [pc, #84]	; (80053f4 <MX_I2C1_Init+0x74>)
 800539e:	2200      	movs	r2, #0
 80053a0:	611a      	str	r2, [r3, #16]
  hi2c1.Init.OwnAddress2 = 0;
 80053a2:	4b14      	ldr	r3, [pc, #80]	; (80053f4 <MX_I2C1_Init+0x74>)
 80053a4:	2200      	movs	r2, #0
 80053a6:	615a      	str	r2, [r3, #20]
  hi2c1.Init.OwnAddress2Masks = I2C_OA2_NOMASK;
 80053a8:	4b12      	ldr	r3, [pc, #72]	; (80053f4 <MX_I2C1_Init+0x74>)
 80053aa:	2200      	movs	r2, #0
 80053ac:	619a      	str	r2, [r3, #24]
  hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 80053ae:	4b11      	ldr	r3, [pc, #68]	; (80053f4 <MX_I2C1_Init+0x74>)
 80053b0:	2200      	movs	r2, #0
 80053b2:	61da      	str	r2, [r3, #28]
  hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 80053b4:	4b0f      	ldr	r3, [pc, #60]	; (80053f4 <MX_I2C1_Init+0x74>)
 80053b6:	2200      	movs	r2, #0
 80053b8:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 80053ba:	4b0e      	ldr	r3, [pc, #56]	; (80053f4 <MX_I2C1_Init+0x74>)
 80053bc:	0018      	movs	r0, r3
 80053be:	f002 f879 	bl	80074b4 <HAL_I2C_Init>
 80053c2:	1e03      	subs	r3, r0, #0
 80053c4:	d001      	beq.n	80053ca <MX_I2C1_Init+0x4a>
  {
    Error_Handler();
 80053c6:	f000 f9af 	bl	8005728 <Error_Handler>
  }

  /** Configure Analogue filter
  */
  if (HAL_I2CEx_ConfigAnalogFilter(&hi2c1, I2C_ANALOGFILTER_ENABLE) != HAL_OK)
 80053ca:	4b0a      	ldr	r3, [pc, #40]	; (80053f4 <MX_I2C1_Init+0x74>)
 80053cc:	2100      	movs	r1, #0
 80053ce:	0018      	movs	r0, r3
 80053d0:	f002 ff5e 	bl	8008290 <HAL_I2CEx_ConfigAnalogFilter>
 80053d4:	1e03      	subs	r3, r0, #0
 80053d6:	d001      	beq.n	80053dc <MX_I2C1_Init+0x5c>
  {
    Error_Handler();
 80053d8:	f000 f9a6 	bl	8005728 <Error_Handler>
  }

  /** Configure Digital filter
  */
  if (HAL_I2CEx_ConfigDigitalFilter(&hi2c1, 0) != HAL_OK)
 80053dc:	4b05      	ldr	r3, [pc, #20]	; (80053f4 <MX_I2C1_Init+0x74>)
 80053de:	2100      	movs	r1, #0
 80053e0:	0018      	movs	r0, r3
 80053e2:	f002 ffa1 	bl	8008328 <HAL_I2CEx_ConfigDigitalFilter>
 80053e6:	1e03      	subs	r3, r0, #0
 80053e8:	d001      	beq.n	80053ee <MX_I2C1_Init+0x6e>
  {
    Error_Handler();
 80053ea:	f000 f99d 	bl	8005728 <Error_Handler>
  }
  /* USER CODE BEGIN I2C1_Init 2 */

  /* USER CODE END I2C1_Init 2 */

}
 80053ee:	46c0      	nop			; (mov r8, r8)
 80053f0:	46bd      	mov	sp, r7
 80053f2:	bd80      	pop	{r7, pc}
 80053f4:	200001e8 	.word	0x200001e8
 80053f8:	40005400 	.word	0x40005400
 80053fc:	2000090e 	.word	0x2000090e

08005400 <MX_TIM2_Init>:
  * @brief TIM2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM2_Init(void)
{
 8005400:	b580      	push	{r7, lr}
 8005402:	b086      	sub	sp, #24
 8005404:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM2_Init 0 */

  /* USER CODE END TIM2_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8005406:	2308      	movs	r3, #8
 8005408:	18fb      	adds	r3, r7, r3
 800540a:	0018      	movs	r0, r3
 800540c:	2310      	movs	r3, #16
 800540e:	001a      	movs	r2, r3
 8005410:	2100      	movs	r1, #0
 8005412:	f005 f943 	bl	800a69c <memset>
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8005416:	003b      	movs	r3, r7
 8005418:	0018      	movs	r0, r3
 800541a:	2308      	movs	r3, #8
 800541c:	001a      	movs	r2, r3
 800541e:	2100      	movs	r1, #0
 8005420:	f005 f93c 	bl	800a69c <memset>

  /* USER CODE BEGIN TIM2_Init 1 */

  /* USER CODE END TIM2_Init 1 */
  htim2.Instance = TIM2;
 8005424:	4b1e      	ldr	r3, [pc, #120]	; (80054a0 <MX_TIM2_Init+0xa0>)
 8005426:	2280      	movs	r2, #128	; 0x80
 8005428:	05d2      	lsls	r2, r2, #23
 800542a:	601a      	str	r2, [r3, #0]
  htim2.Init.Prescaler = 0;
 800542c:	4b1c      	ldr	r3, [pc, #112]	; (80054a0 <MX_TIM2_Init+0xa0>)
 800542e:	2200      	movs	r2, #0
 8005430:	605a      	str	r2, [r3, #4]
  htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 8005432:	4b1b      	ldr	r3, [pc, #108]	; (80054a0 <MX_TIM2_Init+0xa0>)
 8005434:	2200      	movs	r2, #0
 8005436:	609a      	str	r2, [r3, #8]
  htim2.Init.Period = 20000;
 8005438:	4b19      	ldr	r3, [pc, #100]	; (80054a0 <MX_TIM2_Init+0xa0>)
 800543a:	4a1a      	ldr	r2, [pc, #104]	; (80054a4 <MX_TIM2_Init+0xa4>)
 800543c:	60da      	str	r2, [r3, #12]
  htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 800543e:	4b18      	ldr	r3, [pc, #96]	; (80054a0 <MX_TIM2_Init+0xa0>)
 8005440:	2200      	movs	r2, #0
 8005442:	611a      	str	r2, [r3, #16]
  htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8005444:	4b16      	ldr	r3, [pc, #88]	; (80054a0 <MX_TIM2_Init+0xa0>)
 8005446:	2200      	movs	r2, #0
 8005448:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim2) != HAL_OK)
 800544a:	4b15      	ldr	r3, [pc, #84]	; (80054a0 <MX_TIM2_Init+0xa0>)
 800544c:	0018      	movs	r0, r3
 800544e:	f003 fda9 	bl	8008fa4 <HAL_TIM_Base_Init>
 8005452:	1e03      	subs	r3, r0, #0
 8005454:	d001      	beq.n	800545a <MX_TIM2_Init+0x5a>
  {
    Error_Handler();
 8005456:	f000 f967 	bl	8005728 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 800545a:	2108      	movs	r1, #8
 800545c:	187b      	adds	r3, r7, r1
 800545e:	2280      	movs	r2, #128	; 0x80
 8005460:	0152      	lsls	r2, r2, #5
 8005462:	601a      	str	r2, [r3, #0]
  if (HAL_TIM_ConfigClockSource(&htim2, &sClockSourceConfig) != HAL_OK)
 8005464:	187a      	adds	r2, r7, r1
 8005466:	4b0e      	ldr	r3, [pc, #56]	; (80054a0 <MX_TIM2_Init+0xa0>)
 8005468:	0011      	movs	r1, r2
 800546a:	0018      	movs	r0, r3
 800546c:	f004 f870 	bl	8009550 <HAL_TIM_ConfigClockSource>
 8005470:	1e03      	subs	r3, r0, #0
 8005472:	d001      	beq.n	8005478 <MX_TIM2_Init+0x78>
  {
    Error_Handler();
 8005474:	f000 f958 	bl	8005728 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8005478:	003b      	movs	r3, r7
 800547a:	2200      	movs	r2, #0
 800547c:	601a      	str	r2, [r3, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 800547e:	003b      	movs	r3, r7
 8005480:	2200      	movs	r2, #0
 8005482:	605a      	str	r2, [r3, #4]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 8005484:	003a      	movs	r2, r7
 8005486:	4b06      	ldr	r3, [pc, #24]	; (80054a0 <MX_TIM2_Init+0xa0>)
 8005488:	0011      	movs	r1, r2
 800548a:	0018      	movs	r0, r3
 800548c:	f004 fce0 	bl	8009e50 <HAL_TIMEx_MasterConfigSynchronization>
 8005490:	1e03      	subs	r3, r0, #0
 8005492:	d001      	beq.n	8005498 <MX_TIM2_Init+0x98>
  {
    Error_Handler();
 8005494:	f000 f948 	bl	8005728 <Error_Handler>
  }
  /* USER CODE BEGIN TIM2_Init 2 */

  /* USER CODE END TIM2_Init 2 */

}
 8005498:	46c0      	nop			; (mov r8, r8)
 800549a:	46bd      	mov	sp, r7
 800549c:	b006      	add	sp, #24
 800549e:	bd80      	pop	{r7, pc}
 80054a0:	2000023c 	.word	0x2000023c
 80054a4:	00004e20 	.word	0x00004e20

080054a8 <MX_TIM3_Init>:
  * @brief TIM3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM3_Init(void)
{
 80054a8:	b580      	push	{r7, lr}
 80054aa:	b08e      	sub	sp, #56	; 0x38
 80054ac:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM3_Init 0 */

  /* USER CODE END TIM3_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 80054ae:	2328      	movs	r3, #40	; 0x28
 80054b0:	18fb      	adds	r3, r7, r3
 80054b2:	0018      	movs	r0, r3
 80054b4:	2310      	movs	r3, #16
 80054b6:	001a      	movs	r2, r3
 80054b8:	2100      	movs	r1, #0
 80054ba:	f005 f8ef 	bl	800a69c <memset>
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 80054be:	2320      	movs	r3, #32
 80054c0:	18fb      	adds	r3, r7, r3
 80054c2:	0018      	movs	r0, r3
 80054c4:	2308      	movs	r3, #8
 80054c6:	001a      	movs	r2, r3
 80054c8:	2100      	movs	r1, #0
 80054ca:	f005 f8e7 	bl	800a69c <memset>
  TIM_OC_InitTypeDef sConfigOC = {0};
 80054ce:	1d3b      	adds	r3, r7, #4
 80054d0:	0018      	movs	r0, r3
 80054d2:	231c      	movs	r3, #28
 80054d4:	001a      	movs	r2, r3
 80054d6:	2100      	movs	r1, #0
 80054d8:	f005 f8e0 	bl	800a69c <memset>

  /* USER CODE BEGIN TIM3_Init 1 */

  /* USER CODE END TIM3_Init 1 */
  htim3.Instance = TIM3;
 80054dc:	4b2f      	ldr	r3, [pc, #188]	; (800559c <MX_TIM3_Init+0xf4>)
 80054de:	4a30      	ldr	r2, [pc, #192]	; (80055a0 <MX_TIM3_Init+0xf8>)
 80054e0:	601a      	str	r2, [r3, #0]
  htim3.Init.Prescaler = 0;
 80054e2:	4b2e      	ldr	r3, [pc, #184]	; (800559c <MX_TIM3_Init+0xf4>)
 80054e4:	2200      	movs	r2, #0
 80054e6:	605a      	str	r2, [r3, #4]
  htim3.Init.CounterMode = TIM_COUNTERMODE_UP;
 80054e8:	4b2c      	ldr	r3, [pc, #176]	; (800559c <MX_TIM3_Init+0xf4>)
 80054ea:	2200      	movs	r2, #0
 80054ec:	609a      	str	r2, [r3, #8]
  htim3.Init.Period = 65535;
 80054ee:	4b2b      	ldr	r3, [pc, #172]	; (800559c <MX_TIM3_Init+0xf4>)
 80054f0:	4a2c      	ldr	r2, [pc, #176]	; (80055a4 <MX_TIM3_Init+0xfc>)
 80054f2:	60da      	str	r2, [r3, #12]
  htim3.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 80054f4:	4b29      	ldr	r3, [pc, #164]	; (800559c <MX_TIM3_Init+0xf4>)
 80054f6:	2200      	movs	r2, #0
 80054f8:	611a      	str	r2, [r3, #16]
  htim3.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 80054fa:	4b28      	ldr	r3, [pc, #160]	; (800559c <MX_TIM3_Init+0xf4>)
 80054fc:	2200      	movs	r2, #0
 80054fe:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim3) != HAL_OK)
 8005500:	4b26      	ldr	r3, [pc, #152]	; (800559c <MX_TIM3_Init+0xf4>)
 8005502:	0018      	movs	r0, r3
 8005504:	f003 fd4e 	bl	8008fa4 <HAL_TIM_Base_Init>
 8005508:	1e03      	subs	r3, r0, #0
 800550a:	d001      	beq.n	8005510 <MX_TIM3_Init+0x68>
  {
    Error_Handler();
 800550c:	f000 f90c 	bl	8005728 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8005510:	2128      	movs	r1, #40	; 0x28
 8005512:	187b      	adds	r3, r7, r1
 8005514:	2280      	movs	r2, #128	; 0x80
 8005516:	0152      	lsls	r2, r2, #5
 8005518:	601a      	str	r2, [r3, #0]
  if (HAL_TIM_ConfigClockSource(&htim3, &sClockSourceConfig) != HAL_OK)
 800551a:	187a      	adds	r2, r7, r1
 800551c:	4b1f      	ldr	r3, [pc, #124]	; (800559c <MX_TIM3_Init+0xf4>)
 800551e:	0011      	movs	r1, r2
 8005520:	0018      	movs	r0, r3
 8005522:	f004 f815 	bl	8009550 <HAL_TIM_ConfigClockSource>
 8005526:	1e03      	subs	r3, r0, #0
 8005528:	d001      	beq.n	800552e <MX_TIM3_Init+0x86>
  {
    Error_Handler();
 800552a:	f000 f8fd 	bl	8005728 <Error_Handler>
  }
  if (HAL_TIM_PWM_Init(&htim3) != HAL_OK)
 800552e:	4b1b      	ldr	r3, [pc, #108]	; (800559c <MX_TIM3_Init+0xf4>)
 8005530:	0018      	movs	r0, r3
 8005532:	f003 fdd9 	bl	80090e8 <HAL_TIM_PWM_Init>
 8005536:	1e03      	subs	r3, r0, #0
 8005538:	d001      	beq.n	800553e <MX_TIM3_Init+0x96>
  {
    Error_Handler();
 800553a:	f000 f8f5 	bl	8005728 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 800553e:	2120      	movs	r1, #32
 8005540:	187b      	adds	r3, r7, r1
 8005542:	2200      	movs	r2, #0
 8005544:	601a      	str	r2, [r3, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8005546:	187b      	adds	r3, r7, r1
 8005548:	2200      	movs	r2, #0
 800554a:	605a      	str	r2, [r3, #4]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim3, &sMasterConfig) != HAL_OK)
 800554c:	187a      	adds	r2, r7, r1
 800554e:	4b13      	ldr	r3, [pc, #76]	; (800559c <MX_TIM3_Init+0xf4>)
 8005550:	0011      	movs	r1, r2
 8005552:	0018      	movs	r0, r3
 8005554:	f004 fc7c 	bl	8009e50 <HAL_TIMEx_MasterConfigSynchronization>
 8005558:	1e03      	subs	r3, r0, #0
 800555a:	d001      	beq.n	8005560 <MX_TIM3_Init+0xb8>
  {
    Error_Handler();
 800555c:	f000 f8e4 	bl	8005728 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8005560:	1d3b      	adds	r3, r7, #4
 8005562:	2260      	movs	r2, #96	; 0x60
 8005564:	601a      	str	r2, [r3, #0]
  sConfigOC.Pulse = 0;
 8005566:	1d3b      	adds	r3, r7, #4
 8005568:	2200      	movs	r2, #0
 800556a:	605a      	str	r2, [r3, #4]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 800556c:	1d3b      	adds	r3, r7, #4
 800556e:	2200      	movs	r2, #0
 8005570:	609a      	str	r2, [r3, #8]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8005572:	1d3b      	adds	r3, r7, #4
 8005574:	2200      	movs	r2, #0
 8005576:	611a      	str	r2, [r3, #16]
  if (HAL_TIM_PWM_ConfigChannel(&htim3, &sConfigOC, TIM_CHANNEL_3) != HAL_OK)
 8005578:	1d39      	adds	r1, r7, #4
 800557a:	4b08      	ldr	r3, [pc, #32]	; (800559c <MX_TIM3_Init+0xf4>)
 800557c:	2208      	movs	r2, #8
 800557e:	0018      	movs	r0, r3
 8005580:	f003 ff20 	bl	80093c4 <HAL_TIM_PWM_ConfigChannel>
 8005584:	1e03      	subs	r3, r0, #0
 8005586:	d001      	beq.n	800558c <MX_TIM3_Init+0xe4>
  {
    Error_Handler();
 8005588:	f000 f8ce 	bl	8005728 <Error_Handler>
  }
  /* USER CODE BEGIN TIM3_Init 2 */

  /* USER CODE END TIM3_Init 2 */
  HAL_TIM_MspPostInit(&htim3);
 800558c:	4b03      	ldr	r3, [pc, #12]	; (800559c <MX_TIM3_Init+0xf4>)
 800558e:	0018      	movs	r0, r3
 8005590:	f000 fa18 	bl	80059c4 <HAL_TIM_MspPostInit>

}
 8005594:	46c0      	nop			; (mov r8, r8)
 8005596:	46bd      	mov	sp, r7
 8005598:	b00e      	add	sp, #56	; 0x38
 800559a:	bd80      	pop	{r7, pc}
 800559c:	20000284 	.word	0x20000284
 80055a0:	40000400 	.word	0x40000400
 80055a4:	0000ffff 	.word	0x0000ffff

080055a8 <MX_DMA_Init>:

/**
  * Enable DMA controller clock
  */
static void MX_DMA_Init(void)
{
 80055a8:	b580      	push	{r7, lr}
 80055aa:	b082      	sub	sp, #8
 80055ac:	af00      	add	r7, sp, #0

  /* DMA controller clock enable */
  __HAL_RCC_DMA1_CLK_ENABLE();
 80055ae:	4b10      	ldr	r3, [pc, #64]	; (80055f0 <MX_DMA_Init+0x48>)
 80055b0:	695a      	ldr	r2, [r3, #20]
 80055b2:	4b0f      	ldr	r3, [pc, #60]	; (80055f0 <MX_DMA_Init+0x48>)
 80055b4:	2101      	movs	r1, #1
 80055b6:	430a      	orrs	r2, r1
 80055b8:	615a      	str	r2, [r3, #20]
 80055ba:	4b0d      	ldr	r3, [pc, #52]	; (80055f0 <MX_DMA_Init+0x48>)
 80055bc:	695b      	ldr	r3, [r3, #20]
 80055be:	2201      	movs	r2, #1
 80055c0:	4013      	ands	r3, r2
 80055c2:	607b      	str	r3, [r7, #4]
 80055c4:	687b      	ldr	r3, [r7, #4]

  /* DMA interrupt init */
  /* DMA1_Channel1_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Channel1_IRQn, 0, 0);
 80055c6:	2200      	movs	r2, #0
 80055c8:	2100      	movs	r1, #0
 80055ca:	2009      	movs	r0, #9
 80055cc:	f001 fb96 	bl	8006cfc <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Channel1_IRQn);
 80055d0:	2009      	movs	r0, #9
 80055d2:	f001 fba8 	bl	8006d26 <HAL_NVIC_EnableIRQ>
  /* DMA1_Channel2_3_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Channel2_3_IRQn, 0, 0);
 80055d6:	2200      	movs	r2, #0
 80055d8:	2100      	movs	r1, #0
 80055da:	200a      	movs	r0, #10
 80055dc:	f001 fb8e 	bl	8006cfc <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Channel2_3_IRQn);
 80055e0:	200a      	movs	r0, #10
 80055e2:	f001 fba0 	bl	8006d26 <HAL_NVIC_EnableIRQ>

}
 80055e6:	46c0      	nop			; (mov r8, r8)
 80055e8:	46bd      	mov	sp, r7
 80055ea:	b002      	add	sp, #8
 80055ec:	bd80      	pop	{r7, pc}
 80055ee:	46c0      	nop			; (mov r8, r8)
 80055f0:	40021000 	.word	0x40021000

080055f4 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 80055f4:	b590      	push	{r4, r7, lr}
 80055f6:	b08b      	sub	sp, #44	; 0x2c
 80055f8:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80055fa:	2414      	movs	r4, #20
 80055fc:	193b      	adds	r3, r7, r4
 80055fe:	0018      	movs	r0, r3
 8005600:	2314      	movs	r3, #20
 8005602:	001a      	movs	r2, r3
 8005604:	2100      	movs	r1, #0
 8005606:	f005 f849 	bl	800a69c <memset>

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 800560a:	4b43      	ldr	r3, [pc, #268]	; (8005718 <MX_GPIO_Init+0x124>)
 800560c:	695a      	ldr	r2, [r3, #20]
 800560e:	4b42      	ldr	r3, [pc, #264]	; (8005718 <MX_GPIO_Init+0x124>)
 8005610:	2180      	movs	r1, #128	; 0x80
 8005612:	0309      	lsls	r1, r1, #12
 8005614:	430a      	orrs	r2, r1
 8005616:	615a      	str	r2, [r3, #20]
 8005618:	4b3f      	ldr	r3, [pc, #252]	; (8005718 <MX_GPIO_Init+0x124>)
 800561a:	695a      	ldr	r2, [r3, #20]
 800561c:	2380      	movs	r3, #128	; 0x80
 800561e:	031b      	lsls	r3, r3, #12
 8005620:	4013      	ands	r3, r2
 8005622:	613b      	str	r3, [r7, #16]
 8005624:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOF_CLK_ENABLE();
 8005626:	4b3c      	ldr	r3, [pc, #240]	; (8005718 <MX_GPIO_Init+0x124>)
 8005628:	695a      	ldr	r2, [r3, #20]
 800562a:	4b3b      	ldr	r3, [pc, #236]	; (8005718 <MX_GPIO_Init+0x124>)
 800562c:	2180      	movs	r1, #128	; 0x80
 800562e:	03c9      	lsls	r1, r1, #15
 8005630:	430a      	orrs	r2, r1
 8005632:	615a      	str	r2, [r3, #20]
 8005634:	4b38      	ldr	r3, [pc, #224]	; (8005718 <MX_GPIO_Init+0x124>)
 8005636:	695a      	ldr	r2, [r3, #20]
 8005638:	2380      	movs	r3, #128	; 0x80
 800563a:	03db      	lsls	r3, r3, #15
 800563c:	4013      	ands	r3, r2
 800563e:	60fb      	str	r3, [r7, #12]
 8005640:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8005642:	4b35      	ldr	r3, [pc, #212]	; (8005718 <MX_GPIO_Init+0x124>)
 8005644:	695a      	ldr	r2, [r3, #20]
 8005646:	4b34      	ldr	r3, [pc, #208]	; (8005718 <MX_GPIO_Init+0x124>)
 8005648:	2180      	movs	r1, #128	; 0x80
 800564a:	0289      	lsls	r1, r1, #10
 800564c:	430a      	orrs	r2, r1
 800564e:	615a      	str	r2, [r3, #20]
 8005650:	4b31      	ldr	r3, [pc, #196]	; (8005718 <MX_GPIO_Init+0x124>)
 8005652:	695a      	ldr	r2, [r3, #20]
 8005654:	2380      	movs	r3, #128	; 0x80
 8005656:	029b      	lsls	r3, r3, #10
 8005658:	4013      	ands	r3, r2
 800565a:	60bb      	str	r3, [r7, #8]
 800565c:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 800565e:	4b2e      	ldr	r3, [pc, #184]	; (8005718 <MX_GPIO_Init+0x124>)
 8005660:	695a      	ldr	r2, [r3, #20]
 8005662:	4b2d      	ldr	r3, [pc, #180]	; (8005718 <MX_GPIO_Init+0x124>)
 8005664:	2180      	movs	r1, #128	; 0x80
 8005666:	02c9      	lsls	r1, r1, #11
 8005668:	430a      	orrs	r2, r1
 800566a:	615a      	str	r2, [r3, #20]
 800566c:	4b2a      	ldr	r3, [pc, #168]	; (8005718 <MX_GPIO_Init+0x124>)
 800566e:	695a      	ldr	r2, [r3, #20]
 8005670:	2380      	movs	r3, #128	; 0x80
 8005672:	02db      	lsls	r3, r3, #11
 8005674:	4013      	ands	r3, r2
 8005676:	607b      	str	r3, [r7, #4]
 8005678:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(LED_GPIO_Port, LED_Pin, GPIO_PIN_RESET);
 800567a:	2380      	movs	r3, #128	; 0x80
 800567c:	019b      	lsls	r3, r3, #6
 800567e:	4827      	ldr	r0, [pc, #156]	; (800571c <MX_GPIO_Init+0x128>)
 8005680:	2200      	movs	r2, #0
 8005682:	0019      	movs	r1, r3
 8005684:	f001 fec2 	bl	800740c <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, STEP_Pin|DIR_Pin, GPIO_PIN_RESET);
 8005688:	4925      	ldr	r1, [pc, #148]	; (8005720 <MX_GPIO_Init+0x12c>)
 800568a:	4b26      	ldr	r3, [pc, #152]	; (8005724 <MX_GPIO_Init+0x130>)
 800568c:	2200      	movs	r2, #0
 800568e:	0018      	movs	r0, r3
 8005690:	f001 febc 	bl	800740c <HAL_GPIO_WritePin>

  /*Configure GPIO pin : LED_Pin */
  GPIO_InitStruct.Pin = LED_Pin;
 8005694:	193b      	adds	r3, r7, r4
 8005696:	2280      	movs	r2, #128	; 0x80
 8005698:	0192      	lsls	r2, r2, #6
 800569a:	601a      	str	r2, [r3, #0]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800569c:	193b      	adds	r3, r7, r4
 800569e:	2201      	movs	r2, #1
 80056a0:	605a      	str	r2, [r3, #4]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80056a2:	193b      	adds	r3, r7, r4
 80056a4:	2200      	movs	r2, #0
 80056a6:	609a      	str	r2, [r3, #8]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80056a8:	193b      	adds	r3, r7, r4
 80056aa:	2200      	movs	r2, #0
 80056ac:	60da      	str	r2, [r3, #12]
  HAL_GPIO_Init(LED_GPIO_Port, &GPIO_InitStruct);
 80056ae:	193b      	adds	r3, r7, r4
 80056b0:	4a1a      	ldr	r2, [pc, #104]	; (800571c <MX_GPIO_Init+0x128>)
 80056b2:	0019      	movs	r1, r3
 80056b4:	0010      	movs	r0, r2
 80056b6:	f001 fd31 	bl	800711c <HAL_GPIO_Init>

  /*Configure GPIO pins : STEP_Pin DIR_Pin */
  GPIO_InitStruct.Pin = STEP_Pin|DIR_Pin;
 80056ba:	193b      	adds	r3, r7, r4
 80056bc:	4a18      	ldr	r2, [pc, #96]	; (8005720 <MX_GPIO_Init+0x12c>)
 80056be:	601a      	str	r2, [r3, #0]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80056c0:	193b      	adds	r3, r7, r4
 80056c2:	2201      	movs	r2, #1
 80056c4:	605a      	str	r2, [r3, #4]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80056c6:	193b      	adds	r3, r7, r4
 80056c8:	2200      	movs	r2, #0
 80056ca:	609a      	str	r2, [r3, #8]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80056cc:	193b      	adds	r3, r7, r4
 80056ce:	2200      	movs	r2, #0
 80056d0:	60da      	str	r2, [r3, #12]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80056d2:	193b      	adds	r3, r7, r4
 80056d4:	4a13      	ldr	r2, [pc, #76]	; (8005724 <MX_GPIO_Init+0x130>)
 80056d6:	0019      	movs	r1, r3
 80056d8:	0010      	movs	r0, r2
 80056da:	f001 fd1f 	bl	800711c <HAL_GPIO_Init>

  /*Configure GPIO pin : Interrups_Pin */
  GPIO_InitStruct.Pin = Interrups_Pin;
 80056de:	0021      	movs	r1, r4
 80056e0:	187b      	adds	r3, r7, r1
 80056e2:	2240      	movs	r2, #64	; 0x40
 80056e4:	601a      	str	r2, [r3, #0]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 80056e6:	187b      	adds	r3, r7, r1
 80056e8:	2288      	movs	r2, #136	; 0x88
 80056ea:	0352      	lsls	r2, r2, #13
 80056ec:	605a      	str	r2, [r3, #4]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80056ee:	187b      	adds	r3, r7, r1
 80056f0:	2200      	movs	r2, #0
 80056f2:	609a      	str	r2, [r3, #8]
  HAL_GPIO_Init(Interrups_GPIO_Port, &GPIO_InitStruct);
 80056f4:	187b      	adds	r3, r7, r1
 80056f6:	4a0b      	ldr	r2, [pc, #44]	; (8005724 <MX_GPIO_Init+0x130>)
 80056f8:	0019      	movs	r1, r3
 80056fa:	0010      	movs	r0, r2
 80056fc:	f001 fd0e 	bl	800711c <HAL_GPIO_Init>

  /* EXTI interrupt init*/
  HAL_NVIC_SetPriority(EXTI4_15_IRQn, 0, 0);
 8005700:	2200      	movs	r2, #0
 8005702:	2100      	movs	r1, #0
 8005704:	2007      	movs	r0, #7
 8005706:	f001 faf9 	bl	8006cfc <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI4_15_IRQn);
 800570a:	2007      	movs	r0, #7
 800570c:	f001 fb0b 	bl	8006d26 <HAL_NVIC_EnableIRQ>

}
 8005710:	46c0      	nop			; (mov r8, r8)
 8005712:	46bd      	mov	sp, r7
 8005714:	b00b      	add	sp, #44	; 0x2c
 8005716:	bd90      	pop	{r4, r7, pc}
 8005718:	40021000 	.word	0x40021000
 800571c:	48000800 	.word	0x48000800
 8005720:	00000404 	.word	0x00000404
 8005724:	48000400 	.word	0x48000400

08005728 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8005728:	b580      	push	{r7, lr}
 800572a:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 800572c:	b672      	cpsid	i
}
 800572e:	46c0      	nop			; (mov r8, r8)
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8005730:	e7fe      	b.n	8005730 <Error_Handler+0x8>
	...

08005734 <HAL_MspInit>:
void HAL_TIM_MspPostInit(TIM_HandleTypeDef *htim);
                    /**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8005734:	b580      	push	{r7, lr}
 8005736:	b082      	sub	sp, #8
 8005738:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 800573a:	4b0f      	ldr	r3, [pc, #60]	; (8005778 <HAL_MspInit+0x44>)
 800573c:	699a      	ldr	r2, [r3, #24]
 800573e:	4b0e      	ldr	r3, [pc, #56]	; (8005778 <HAL_MspInit+0x44>)
 8005740:	2101      	movs	r1, #1
 8005742:	430a      	orrs	r2, r1
 8005744:	619a      	str	r2, [r3, #24]
 8005746:	4b0c      	ldr	r3, [pc, #48]	; (8005778 <HAL_MspInit+0x44>)
 8005748:	699b      	ldr	r3, [r3, #24]
 800574a:	2201      	movs	r2, #1
 800574c:	4013      	ands	r3, r2
 800574e:	607b      	str	r3, [r7, #4]
 8005750:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8005752:	4b09      	ldr	r3, [pc, #36]	; (8005778 <HAL_MspInit+0x44>)
 8005754:	69da      	ldr	r2, [r3, #28]
 8005756:	4b08      	ldr	r3, [pc, #32]	; (8005778 <HAL_MspInit+0x44>)
 8005758:	2180      	movs	r1, #128	; 0x80
 800575a:	0549      	lsls	r1, r1, #21
 800575c:	430a      	orrs	r2, r1
 800575e:	61da      	str	r2, [r3, #28]
 8005760:	4b05      	ldr	r3, [pc, #20]	; (8005778 <HAL_MspInit+0x44>)
 8005762:	69da      	ldr	r2, [r3, #28]
 8005764:	2380      	movs	r3, #128	; 0x80
 8005766:	055b      	lsls	r3, r3, #21
 8005768:	4013      	ands	r3, r2
 800576a:	603b      	str	r3, [r7, #0]
 800576c:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 800576e:	46c0      	nop			; (mov r8, r8)
 8005770:	46bd      	mov	sp, r7
 8005772:	b002      	add	sp, #8
 8005774:	bd80      	pop	{r7, pc}
 8005776:	46c0      	nop			; (mov r8, r8)
 8005778:	40021000 	.word	0x40021000

0800577c <HAL_ADC_MspInit>:
* This function configures the hardware resources used in this example
* @param hadc: ADC handle pointer
* @retval None
*/
void HAL_ADC_MspInit(ADC_HandleTypeDef* hadc)
{
 800577c:	b590      	push	{r4, r7, lr}
 800577e:	b08b      	sub	sp, #44	; 0x2c
 8005780:	af00      	add	r7, sp, #0
 8005782:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8005784:	2414      	movs	r4, #20
 8005786:	193b      	adds	r3, r7, r4
 8005788:	0018      	movs	r0, r3
 800578a:	2314      	movs	r3, #20
 800578c:	001a      	movs	r2, r3
 800578e:	2100      	movs	r1, #0
 8005790:	f004 ff84 	bl	800a69c <memset>
  if(hadc->Instance==ADC1)
 8005794:	687b      	ldr	r3, [r7, #4]
 8005796:	681b      	ldr	r3, [r3, #0]
 8005798:	4a2d      	ldr	r2, [pc, #180]	; (8005850 <HAL_ADC_MspInit+0xd4>)
 800579a:	4293      	cmp	r3, r2
 800579c:	d153      	bne.n	8005846 <HAL_ADC_MspInit+0xca>
  {
  /* USER CODE BEGIN ADC1_MspInit 0 */

  /* USER CODE END ADC1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_ADC1_CLK_ENABLE();
 800579e:	4b2d      	ldr	r3, [pc, #180]	; (8005854 <HAL_ADC_MspInit+0xd8>)
 80057a0:	699a      	ldr	r2, [r3, #24]
 80057a2:	4b2c      	ldr	r3, [pc, #176]	; (8005854 <HAL_ADC_MspInit+0xd8>)
 80057a4:	2180      	movs	r1, #128	; 0x80
 80057a6:	0089      	lsls	r1, r1, #2
 80057a8:	430a      	orrs	r2, r1
 80057aa:	619a      	str	r2, [r3, #24]
 80057ac:	4b29      	ldr	r3, [pc, #164]	; (8005854 <HAL_ADC_MspInit+0xd8>)
 80057ae:	699a      	ldr	r2, [r3, #24]
 80057b0:	2380      	movs	r3, #128	; 0x80
 80057b2:	009b      	lsls	r3, r3, #2
 80057b4:	4013      	ands	r3, r2
 80057b6:	613b      	str	r3, [r7, #16]
 80057b8:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 80057ba:	4b26      	ldr	r3, [pc, #152]	; (8005854 <HAL_ADC_MspInit+0xd8>)
 80057bc:	695a      	ldr	r2, [r3, #20]
 80057be:	4b25      	ldr	r3, [pc, #148]	; (8005854 <HAL_ADC_MspInit+0xd8>)
 80057c0:	2180      	movs	r1, #128	; 0x80
 80057c2:	0289      	lsls	r1, r1, #10
 80057c4:	430a      	orrs	r2, r1
 80057c6:	615a      	str	r2, [r3, #20]
 80057c8:	4b22      	ldr	r3, [pc, #136]	; (8005854 <HAL_ADC_MspInit+0xd8>)
 80057ca:	695a      	ldr	r2, [r3, #20]
 80057cc:	2380      	movs	r3, #128	; 0x80
 80057ce:	029b      	lsls	r3, r3, #10
 80057d0:	4013      	ands	r3, r2
 80057d2:	60fb      	str	r3, [r7, #12]
 80057d4:	68fb      	ldr	r3, [r7, #12]
    /**ADC GPIO Configuration
    PA0     ------> ADC_IN0
    */
    GPIO_InitStruct.Pin = GPIO_PIN_0;
 80057d6:	193b      	adds	r3, r7, r4
 80057d8:	2201      	movs	r2, #1
 80057da:	601a      	str	r2, [r3, #0]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 80057dc:	193b      	adds	r3, r7, r4
 80057de:	2203      	movs	r2, #3
 80057e0:	605a      	str	r2, [r3, #4]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80057e2:	193b      	adds	r3, r7, r4
 80057e4:	2200      	movs	r2, #0
 80057e6:	609a      	str	r2, [r3, #8]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80057e8:	193a      	adds	r2, r7, r4
 80057ea:	2390      	movs	r3, #144	; 0x90
 80057ec:	05db      	lsls	r3, r3, #23
 80057ee:	0011      	movs	r1, r2
 80057f0:	0018      	movs	r0, r3
 80057f2:	f001 fc93 	bl	800711c <HAL_GPIO_Init>

    /* ADC1 DMA Init */
    /* ADC Init */
    hdma_adc.Instance = DMA1_Channel1;
 80057f6:	4b18      	ldr	r3, [pc, #96]	; (8005858 <HAL_ADC_MspInit+0xdc>)
 80057f8:	4a18      	ldr	r2, [pc, #96]	; (800585c <HAL_ADC_MspInit+0xe0>)
 80057fa:	601a      	str	r2, [r3, #0]
    hdma_adc.Init.Direction = DMA_PERIPH_TO_MEMORY;
 80057fc:	4b16      	ldr	r3, [pc, #88]	; (8005858 <HAL_ADC_MspInit+0xdc>)
 80057fe:	2200      	movs	r2, #0
 8005800:	605a      	str	r2, [r3, #4]
    hdma_adc.Init.PeriphInc = DMA_PINC_DISABLE;
 8005802:	4b15      	ldr	r3, [pc, #84]	; (8005858 <HAL_ADC_MspInit+0xdc>)
 8005804:	2200      	movs	r2, #0
 8005806:	609a      	str	r2, [r3, #8]
    hdma_adc.Init.MemInc = DMA_MINC_ENABLE;
 8005808:	4b13      	ldr	r3, [pc, #76]	; (8005858 <HAL_ADC_MspInit+0xdc>)
 800580a:	2280      	movs	r2, #128	; 0x80
 800580c:	60da      	str	r2, [r3, #12]
    hdma_adc.Init.PeriphDataAlignment = DMA_PDATAALIGN_HALFWORD;
 800580e:	4b12      	ldr	r3, [pc, #72]	; (8005858 <HAL_ADC_MspInit+0xdc>)
 8005810:	2280      	movs	r2, #128	; 0x80
 8005812:	0052      	lsls	r2, r2, #1
 8005814:	611a      	str	r2, [r3, #16]
    hdma_adc.Init.MemDataAlignment = DMA_MDATAALIGN_HALFWORD;
 8005816:	4b10      	ldr	r3, [pc, #64]	; (8005858 <HAL_ADC_MspInit+0xdc>)
 8005818:	2280      	movs	r2, #128	; 0x80
 800581a:	00d2      	lsls	r2, r2, #3
 800581c:	615a      	str	r2, [r3, #20]
    hdma_adc.Init.Mode = DMA_CIRCULAR;
 800581e:	4b0e      	ldr	r3, [pc, #56]	; (8005858 <HAL_ADC_MspInit+0xdc>)
 8005820:	2220      	movs	r2, #32
 8005822:	619a      	str	r2, [r3, #24]
    hdma_adc.Init.Priority = DMA_PRIORITY_LOW;
 8005824:	4b0c      	ldr	r3, [pc, #48]	; (8005858 <HAL_ADC_MspInit+0xdc>)
 8005826:	2200      	movs	r2, #0
 8005828:	61da      	str	r2, [r3, #28]
    if (HAL_DMA_Init(&hdma_adc) != HAL_OK)
 800582a:	4b0b      	ldr	r3, [pc, #44]	; (8005858 <HAL_ADC_MspInit+0xdc>)
 800582c:	0018      	movs	r0, r3
 800582e:	f001 fa97 	bl	8006d60 <HAL_DMA_Init>
 8005832:	1e03      	subs	r3, r0, #0
 8005834:	d001      	beq.n	800583a <HAL_ADC_MspInit+0xbe>
    {
      Error_Handler();
 8005836:	f7ff ff77 	bl	8005728 <Error_Handler>
    }

    __HAL_LINKDMA(hadc,DMA_Handle,hdma_adc);
 800583a:	687b      	ldr	r3, [r7, #4]
 800583c:	4a06      	ldr	r2, [pc, #24]	; (8005858 <HAL_ADC_MspInit+0xdc>)
 800583e:	631a      	str	r2, [r3, #48]	; 0x30
 8005840:	4b05      	ldr	r3, [pc, #20]	; (8005858 <HAL_ADC_MspInit+0xdc>)
 8005842:	687a      	ldr	r2, [r7, #4]
 8005844:	625a      	str	r2, [r3, #36]	; 0x24
  /* USER CODE BEGIN ADC1_MspInit 1 */

  /* USER CODE END ADC1_MspInit 1 */
  }

}
 8005846:	46c0      	nop			; (mov r8, r8)
 8005848:	46bd      	mov	sp, r7
 800584a:	b00b      	add	sp, #44	; 0x2c
 800584c:	bd90      	pop	{r4, r7, pc}
 800584e:	46c0      	nop			; (mov r8, r8)
 8005850:	40012400 	.word	0x40012400
 8005854:	40021000 	.word	0x40021000
 8005858:	200001a4 	.word	0x200001a4
 800585c:	40020008 	.word	0x40020008

08005860 <HAL_I2C_MspInit>:
* This function configures the hardware resources used in this example
* @param hi2c: I2C handle pointer
* @retval None
*/
void HAL_I2C_MspInit(I2C_HandleTypeDef* hi2c)
{
 8005860:	b590      	push	{r4, r7, lr}
 8005862:	b08b      	sub	sp, #44	; 0x2c
 8005864:	af00      	add	r7, sp, #0
 8005866:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8005868:	2414      	movs	r4, #20
 800586a:	193b      	adds	r3, r7, r4
 800586c:	0018      	movs	r0, r3
 800586e:	2314      	movs	r3, #20
 8005870:	001a      	movs	r2, r3
 8005872:	2100      	movs	r1, #0
 8005874:	f004 ff12 	bl	800a69c <memset>
  if(hi2c->Instance==I2C1)
 8005878:	687b      	ldr	r3, [r7, #4]
 800587a:	681b      	ldr	r3, [r3, #0]
 800587c:	4a1c      	ldr	r2, [pc, #112]	; (80058f0 <HAL_I2C_MspInit+0x90>)
 800587e:	4293      	cmp	r3, r2
 8005880:	d132      	bne.n	80058e8 <HAL_I2C_MspInit+0x88>
  {
  /* USER CODE BEGIN I2C1_MspInit 0 */

  /* USER CODE END I2C1_MspInit 0 */

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8005882:	4b1c      	ldr	r3, [pc, #112]	; (80058f4 <HAL_I2C_MspInit+0x94>)
 8005884:	695a      	ldr	r2, [r3, #20]
 8005886:	4b1b      	ldr	r3, [pc, #108]	; (80058f4 <HAL_I2C_MspInit+0x94>)
 8005888:	2180      	movs	r1, #128	; 0x80
 800588a:	02c9      	lsls	r1, r1, #11
 800588c:	430a      	orrs	r2, r1
 800588e:	615a      	str	r2, [r3, #20]
 8005890:	4b18      	ldr	r3, [pc, #96]	; (80058f4 <HAL_I2C_MspInit+0x94>)
 8005892:	695a      	ldr	r2, [r3, #20]
 8005894:	2380      	movs	r3, #128	; 0x80
 8005896:	02db      	lsls	r3, r3, #11
 8005898:	4013      	ands	r3, r2
 800589a:	613b      	str	r3, [r7, #16]
 800589c:	693b      	ldr	r3, [r7, #16]
    /**I2C1 GPIO Configuration
    PB8     ------> I2C1_SCL
    PB9     ------> I2C1_SDA
    */
    GPIO_InitStruct.Pin = GPIO_PIN_8|GPIO_PIN_9;
 800589e:	193b      	adds	r3, r7, r4
 80058a0:	22c0      	movs	r2, #192	; 0xc0
 80058a2:	0092      	lsls	r2, r2, #2
 80058a4:	601a      	str	r2, [r3, #0]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 80058a6:	0021      	movs	r1, r4
 80058a8:	187b      	adds	r3, r7, r1
 80058aa:	2212      	movs	r2, #18
 80058ac:	605a      	str	r2, [r3, #4]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80058ae:	187b      	adds	r3, r7, r1
 80058b0:	2200      	movs	r2, #0
 80058b2:	609a      	str	r2, [r3, #8]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 80058b4:	187b      	adds	r3, r7, r1
 80058b6:	2203      	movs	r2, #3
 80058b8:	60da      	str	r2, [r3, #12]
    GPIO_InitStruct.Alternate = GPIO_AF1_I2C1;
 80058ba:	187b      	adds	r3, r7, r1
 80058bc:	2201      	movs	r2, #1
 80058be:	611a      	str	r2, [r3, #16]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80058c0:	187b      	adds	r3, r7, r1
 80058c2:	4a0d      	ldr	r2, [pc, #52]	; (80058f8 <HAL_I2C_MspInit+0x98>)
 80058c4:	0019      	movs	r1, r3
 80058c6:	0010      	movs	r0, r2
 80058c8:	f001 fc28 	bl	800711c <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_I2C1_CLK_ENABLE();
 80058cc:	4b09      	ldr	r3, [pc, #36]	; (80058f4 <HAL_I2C_MspInit+0x94>)
 80058ce:	69da      	ldr	r2, [r3, #28]
 80058d0:	4b08      	ldr	r3, [pc, #32]	; (80058f4 <HAL_I2C_MspInit+0x94>)
 80058d2:	2180      	movs	r1, #128	; 0x80
 80058d4:	0389      	lsls	r1, r1, #14
 80058d6:	430a      	orrs	r2, r1
 80058d8:	61da      	str	r2, [r3, #28]
 80058da:	4b06      	ldr	r3, [pc, #24]	; (80058f4 <HAL_I2C_MspInit+0x94>)
 80058dc:	69da      	ldr	r2, [r3, #28]
 80058de:	2380      	movs	r3, #128	; 0x80
 80058e0:	039b      	lsls	r3, r3, #14
 80058e2:	4013      	ands	r3, r2
 80058e4:	60fb      	str	r3, [r7, #12]
 80058e6:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN I2C1_MspInit 1 */

  /* USER CODE END I2C1_MspInit 1 */
  }

}
 80058e8:	46c0      	nop			; (mov r8, r8)
 80058ea:	46bd      	mov	sp, r7
 80058ec:	b00b      	add	sp, #44	; 0x2c
 80058ee:	bd90      	pop	{r4, r7, pc}
 80058f0:	40005400 	.word	0x40005400
 80058f4:	40021000 	.word	0x40021000
 80058f8:	48000400 	.word	0x48000400

080058fc <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 80058fc:	b580      	push	{r7, lr}
 80058fe:	b084      	sub	sp, #16
 8005900:	af00      	add	r7, sp, #0
 8005902:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM2)
 8005904:	687b      	ldr	r3, [r7, #4]
 8005906:	681a      	ldr	r2, [r3, #0]
 8005908:	2380      	movs	r3, #128	; 0x80
 800590a:	05db      	lsls	r3, r3, #23
 800590c:	429a      	cmp	r2, r3
 800590e:	d114      	bne.n	800593a <HAL_TIM_Base_MspInit+0x3e>
  {
  /* USER CODE BEGIN TIM2_MspInit 0 */

  /* USER CODE END TIM2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM2_CLK_ENABLE();
 8005910:	4b28      	ldr	r3, [pc, #160]	; (80059b4 <HAL_TIM_Base_MspInit+0xb8>)
 8005912:	69da      	ldr	r2, [r3, #28]
 8005914:	4b27      	ldr	r3, [pc, #156]	; (80059b4 <HAL_TIM_Base_MspInit+0xb8>)
 8005916:	2101      	movs	r1, #1
 8005918:	430a      	orrs	r2, r1
 800591a:	61da      	str	r2, [r3, #28]
 800591c:	4b25      	ldr	r3, [pc, #148]	; (80059b4 <HAL_TIM_Base_MspInit+0xb8>)
 800591e:	69db      	ldr	r3, [r3, #28]
 8005920:	2201      	movs	r2, #1
 8005922:	4013      	ands	r3, r2
 8005924:	60fb      	str	r3, [r7, #12]
 8005926:	68fb      	ldr	r3, [r7, #12]
    /* TIM2 interrupt Init */
    HAL_NVIC_SetPriority(TIM2_IRQn, 0, 0);
 8005928:	2200      	movs	r2, #0
 800592a:	2100      	movs	r1, #0
 800592c:	200f      	movs	r0, #15
 800592e:	f001 f9e5 	bl	8006cfc <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM2_IRQn);
 8005932:	200f      	movs	r0, #15
 8005934:	f001 f9f7 	bl	8006d26 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN TIM3_MspInit 1 */

  /* USER CODE END TIM3_MspInit 1 */
  }

}
 8005938:	e038      	b.n	80059ac <HAL_TIM_Base_MspInit+0xb0>
  else if(htim_base->Instance==TIM3)
 800593a:	687b      	ldr	r3, [r7, #4]
 800593c:	681b      	ldr	r3, [r3, #0]
 800593e:	4a1e      	ldr	r2, [pc, #120]	; (80059b8 <HAL_TIM_Base_MspInit+0xbc>)
 8005940:	4293      	cmp	r3, r2
 8005942:	d133      	bne.n	80059ac <HAL_TIM_Base_MspInit+0xb0>
    __HAL_RCC_TIM3_CLK_ENABLE();
 8005944:	4b1b      	ldr	r3, [pc, #108]	; (80059b4 <HAL_TIM_Base_MspInit+0xb8>)
 8005946:	69da      	ldr	r2, [r3, #28]
 8005948:	4b1a      	ldr	r3, [pc, #104]	; (80059b4 <HAL_TIM_Base_MspInit+0xb8>)
 800594a:	2102      	movs	r1, #2
 800594c:	430a      	orrs	r2, r1
 800594e:	61da      	str	r2, [r3, #28]
 8005950:	4b18      	ldr	r3, [pc, #96]	; (80059b4 <HAL_TIM_Base_MspInit+0xb8>)
 8005952:	69db      	ldr	r3, [r3, #28]
 8005954:	2202      	movs	r2, #2
 8005956:	4013      	ands	r3, r2
 8005958:	60bb      	str	r3, [r7, #8]
 800595a:	68bb      	ldr	r3, [r7, #8]
    hdma_tim3_ch3.Instance = DMA1_Channel2;
 800595c:	4b17      	ldr	r3, [pc, #92]	; (80059bc <HAL_TIM_Base_MspInit+0xc0>)
 800595e:	4a18      	ldr	r2, [pc, #96]	; (80059c0 <HAL_TIM_Base_MspInit+0xc4>)
 8005960:	601a      	str	r2, [r3, #0]
    hdma_tim3_ch3.Init.Direction = DMA_MEMORY_TO_PERIPH;
 8005962:	4b16      	ldr	r3, [pc, #88]	; (80059bc <HAL_TIM_Base_MspInit+0xc0>)
 8005964:	2210      	movs	r2, #16
 8005966:	605a      	str	r2, [r3, #4]
    hdma_tim3_ch3.Init.PeriphInc = DMA_PINC_DISABLE;
 8005968:	4b14      	ldr	r3, [pc, #80]	; (80059bc <HAL_TIM_Base_MspInit+0xc0>)
 800596a:	2200      	movs	r2, #0
 800596c:	609a      	str	r2, [r3, #8]
    hdma_tim3_ch3.Init.MemInc = DMA_MINC_ENABLE;
 800596e:	4b13      	ldr	r3, [pc, #76]	; (80059bc <HAL_TIM_Base_MspInit+0xc0>)
 8005970:	2280      	movs	r2, #128	; 0x80
 8005972:	60da      	str	r2, [r3, #12]
    hdma_tim3_ch3.Init.PeriphDataAlignment = DMA_PDATAALIGN_WORD;
 8005974:	4b11      	ldr	r3, [pc, #68]	; (80059bc <HAL_TIM_Base_MspInit+0xc0>)
 8005976:	2280      	movs	r2, #128	; 0x80
 8005978:	0092      	lsls	r2, r2, #2
 800597a:	611a      	str	r2, [r3, #16]
    hdma_tim3_ch3.Init.MemDataAlignment = DMA_MDATAALIGN_WORD;
 800597c:	4b0f      	ldr	r3, [pc, #60]	; (80059bc <HAL_TIM_Base_MspInit+0xc0>)
 800597e:	2280      	movs	r2, #128	; 0x80
 8005980:	0112      	lsls	r2, r2, #4
 8005982:	615a      	str	r2, [r3, #20]
    hdma_tim3_ch3.Init.Mode = DMA_CIRCULAR;
 8005984:	4b0d      	ldr	r3, [pc, #52]	; (80059bc <HAL_TIM_Base_MspInit+0xc0>)
 8005986:	2220      	movs	r2, #32
 8005988:	619a      	str	r2, [r3, #24]
    hdma_tim3_ch3.Init.Priority = DMA_PRIORITY_LOW;
 800598a:	4b0c      	ldr	r3, [pc, #48]	; (80059bc <HAL_TIM_Base_MspInit+0xc0>)
 800598c:	2200      	movs	r2, #0
 800598e:	61da      	str	r2, [r3, #28]
    if (HAL_DMA_Init(&hdma_tim3_ch3) != HAL_OK)
 8005990:	4b0a      	ldr	r3, [pc, #40]	; (80059bc <HAL_TIM_Base_MspInit+0xc0>)
 8005992:	0018      	movs	r0, r3
 8005994:	f001 f9e4 	bl	8006d60 <HAL_DMA_Init>
 8005998:	1e03      	subs	r3, r0, #0
 800599a:	d001      	beq.n	80059a0 <HAL_TIM_Base_MspInit+0xa4>
      Error_Handler();
 800599c:	f7ff fec4 	bl	8005728 <Error_Handler>
    __HAL_LINKDMA(htim_base,hdma[TIM_DMA_ID_CC3],hdma_tim3_ch3);
 80059a0:	687b      	ldr	r3, [r7, #4]
 80059a2:	4a06      	ldr	r2, [pc, #24]	; (80059bc <HAL_TIM_Base_MspInit+0xc0>)
 80059a4:	62da      	str	r2, [r3, #44]	; 0x2c
 80059a6:	4b05      	ldr	r3, [pc, #20]	; (80059bc <HAL_TIM_Base_MspInit+0xc0>)
 80059a8:	687a      	ldr	r2, [r7, #4]
 80059aa:	625a      	str	r2, [r3, #36]	; 0x24
}
 80059ac:	46c0      	nop			; (mov r8, r8)
 80059ae:	46bd      	mov	sp, r7
 80059b0:	b004      	add	sp, #16
 80059b2:	bd80      	pop	{r7, pc}
 80059b4:	40021000 	.word	0x40021000
 80059b8:	40000400 	.word	0x40000400
 80059bc:	200002cc 	.word	0x200002cc
 80059c0:	4002001c 	.word	0x4002001c

080059c4 <HAL_TIM_MspPostInit>:

void HAL_TIM_MspPostInit(TIM_HandleTypeDef* htim)
{
 80059c4:	b590      	push	{r4, r7, lr}
 80059c6:	b089      	sub	sp, #36	; 0x24
 80059c8:	af00      	add	r7, sp, #0
 80059ca:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80059cc:	240c      	movs	r4, #12
 80059ce:	193b      	adds	r3, r7, r4
 80059d0:	0018      	movs	r0, r3
 80059d2:	2314      	movs	r3, #20
 80059d4:	001a      	movs	r2, r3
 80059d6:	2100      	movs	r1, #0
 80059d8:	f004 fe60 	bl	800a69c <memset>
  if(htim->Instance==TIM3)
 80059dc:	687b      	ldr	r3, [r7, #4]
 80059de:	681b      	ldr	r3, [r3, #0]
 80059e0:	4a15      	ldr	r2, [pc, #84]	; (8005a38 <HAL_TIM_MspPostInit+0x74>)
 80059e2:	4293      	cmp	r3, r2
 80059e4:	d123      	bne.n	8005a2e <HAL_TIM_MspPostInit+0x6a>
  {
  /* USER CODE BEGIN TIM3_MspPostInit 0 */

  /* USER CODE END TIM3_MspPostInit 0 */

    __HAL_RCC_GPIOB_CLK_ENABLE();
 80059e6:	4b15      	ldr	r3, [pc, #84]	; (8005a3c <HAL_TIM_MspPostInit+0x78>)
 80059e8:	695a      	ldr	r2, [r3, #20]
 80059ea:	4b14      	ldr	r3, [pc, #80]	; (8005a3c <HAL_TIM_MspPostInit+0x78>)
 80059ec:	2180      	movs	r1, #128	; 0x80
 80059ee:	02c9      	lsls	r1, r1, #11
 80059f0:	430a      	orrs	r2, r1
 80059f2:	615a      	str	r2, [r3, #20]
 80059f4:	4b11      	ldr	r3, [pc, #68]	; (8005a3c <HAL_TIM_MspPostInit+0x78>)
 80059f6:	695a      	ldr	r2, [r3, #20]
 80059f8:	2380      	movs	r3, #128	; 0x80
 80059fa:	02db      	lsls	r3, r3, #11
 80059fc:	4013      	ands	r3, r2
 80059fe:	60bb      	str	r3, [r7, #8]
 8005a00:	68bb      	ldr	r3, [r7, #8]
    /**TIM3 GPIO Configuration
    PB0     ------> TIM3_CH3
    */
    GPIO_InitStruct.Pin = GPIO_PIN_0;
 8005a02:	0021      	movs	r1, r4
 8005a04:	187b      	adds	r3, r7, r1
 8005a06:	2201      	movs	r2, #1
 8005a08:	601a      	str	r2, [r3, #0]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8005a0a:	187b      	adds	r3, r7, r1
 8005a0c:	2212      	movs	r2, #18
 8005a0e:	605a      	str	r2, [r3, #4]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8005a10:	187b      	adds	r3, r7, r1
 8005a12:	2200      	movs	r2, #0
 8005a14:	609a      	str	r2, [r3, #8]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8005a16:	187b      	adds	r3, r7, r1
 8005a18:	2203      	movs	r2, #3
 8005a1a:	60da      	str	r2, [r3, #12]
    GPIO_InitStruct.Alternate = GPIO_AF1_TIM3;
 8005a1c:	187b      	adds	r3, r7, r1
 8005a1e:	2201      	movs	r2, #1
 8005a20:	611a      	str	r2, [r3, #16]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8005a22:	187b      	adds	r3, r7, r1
 8005a24:	4a06      	ldr	r2, [pc, #24]	; (8005a40 <HAL_TIM_MspPostInit+0x7c>)
 8005a26:	0019      	movs	r1, r3
 8005a28:	0010      	movs	r0, r2
 8005a2a:	f001 fb77 	bl	800711c <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM3_MspPostInit 1 */

  /* USER CODE END TIM3_MspPostInit 1 */
  }

}
 8005a2e:	46c0      	nop			; (mov r8, r8)
 8005a30:	46bd      	mov	sp, r7
 8005a32:	b009      	add	sp, #36	; 0x24
 8005a34:	bd90      	pop	{r4, r7, pc}
 8005a36:	46c0      	nop			; (mov r8, r8)
 8005a38:	40000400 	.word	0x40000400
 8005a3c:	40021000 	.word	0x40021000
 8005a40:	48000400 	.word	0x48000400

08005a44 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8005a44:	b580      	push	{r7, lr}
 8005a46:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8005a48:	e7fe      	b.n	8005a48 <NMI_Handler+0x4>

08005a4a <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8005a4a:	b580      	push	{r7, lr}
 8005a4c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8005a4e:	e7fe      	b.n	8005a4e <HardFault_Handler+0x4>

08005a50 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8005a50:	b580      	push	{r7, lr}
 8005a52:	af00      	add	r7, sp, #0

  /* USER CODE END SVC_IRQn 0 */
  /* USER CODE BEGIN SVC_IRQn 1 */

  /* USER CODE END SVC_IRQn 1 */
}
 8005a54:	46c0      	nop			; (mov r8, r8)
 8005a56:	46bd      	mov	sp, r7
 8005a58:	bd80      	pop	{r7, pc}

08005a5a <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8005a5a:	b580      	push	{r7, lr}
 8005a5c:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8005a5e:	46c0      	nop			; (mov r8, r8)
 8005a60:	46bd      	mov	sp, r7
 8005a62:	bd80      	pop	{r7, pc}

08005a64 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8005a64:	b580      	push	{r7, lr}
 8005a66:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8005a68:	f000 fc6c 	bl	8006344 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8005a6c:	46c0      	nop			; (mov r8, r8)
 8005a6e:	46bd      	mov	sp, r7
 8005a70:	bd80      	pop	{r7, pc}

08005a72 <EXTI4_15_IRQHandler>:

/**
  * @brief This function handles EXTI line 4 to 15 interrupts.
  */
void EXTI4_15_IRQHandler(void)
{
 8005a72:	b580      	push	{r7, lr}
 8005a74:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI4_15_IRQn 0 */

  /* USER CODE END EXTI4_15_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(Interrups_Pin);
 8005a76:	2040      	movs	r0, #64	; 0x40
 8005a78:	f001 fd00 	bl	800747c <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI4_15_IRQn 1 */

  /* USER CODE END EXTI4_15_IRQn 1 */
}
 8005a7c:	46c0      	nop			; (mov r8, r8)
 8005a7e:	46bd      	mov	sp, r7
 8005a80:	bd80      	pop	{r7, pc}
	...

08005a84 <DMA1_Channel1_IRQHandler>:

/**
  * @brief This function handles DMA1 channel 1 global interrupt.
  */
void DMA1_Channel1_IRQHandler(void)
{
 8005a84:	b580      	push	{r7, lr}
 8005a86:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Channel1_IRQn 0 */

  /* USER CODE END DMA1_Channel1_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_adc);
 8005a88:	4b03      	ldr	r3, [pc, #12]	; (8005a98 <DMA1_Channel1_IRQHandler+0x14>)
 8005a8a:	0018      	movs	r0, r3
 8005a8c:	f001 fa5b 	bl	8006f46 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Channel1_IRQn 1 */

  /* USER CODE END DMA1_Channel1_IRQn 1 */
}
 8005a90:	46c0      	nop			; (mov r8, r8)
 8005a92:	46bd      	mov	sp, r7
 8005a94:	bd80      	pop	{r7, pc}
 8005a96:	46c0      	nop			; (mov r8, r8)
 8005a98:	200001a4 	.word	0x200001a4

08005a9c <DMA1_Channel2_3_IRQHandler>:

/**
  * @brief This function handles DMA1 channel 2 and 3 interrupts.
  */
void DMA1_Channel2_3_IRQHandler(void)
{
 8005a9c:	b580      	push	{r7, lr}
 8005a9e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Channel2_3_IRQn 0 */

  /* USER CODE END DMA1_Channel2_3_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_tim3_ch3);
 8005aa0:	4b03      	ldr	r3, [pc, #12]	; (8005ab0 <DMA1_Channel2_3_IRQHandler+0x14>)
 8005aa2:	0018      	movs	r0, r3
 8005aa4:	f001 fa4f 	bl	8006f46 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Channel2_3_IRQn 1 */

  /* USER CODE END DMA1_Channel2_3_IRQn 1 */
}
 8005aa8:	46c0      	nop			; (mov r8, r8)
 8005aaa:	46bd      	mov	sp, r7
 8005aac:	bd80      	pop	{r7, pc}
 8005aae:	46c0      	nop			; (mov r8, r8)
 8005ab0:	200002cc 	.word	0x200002cc

08005ab4 <TIM2_IRQHandler>:

/**
  * @brief This function handles TIM2 global interrupt.
  */
void TIM2_IRQHandler(void)
{
 8005ab4:	b580      	push	{r7, lr}
 8005ab6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM2_IRQn 0 */

  /* USER CODE END TIM2_IRQn 0 */
  HAL_TIM_IRQHandler(&htim2);
 8005ab8:	4b03      	ldr	r3, [pc, #12]	; (8005ac8 <TIM2_IRQHandler+0x14>)
 8005aba:	0018      	movs	r0, r3
 8005abc:	f003 fb6c 	bl	8009198 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM2_IRQn 1 */

  /* USER CODE END TIM2_IRQn 1 */
}
 8005ac0:	46c0      	nop			; (mov r8, r8)
 8005ac2:	46bd      	mov	sp, r7
 8005ac4:	bd80      	pop	{r7, pc}
 8005ac6:	46c0      	nop			; (mov r8, r8)
 8005ac8:	2000023c 	.word	0x2000023c

08005acc <constrain>:
//------------------------------ функции ---------------------------------------------//
int32_t map(int32_t x, int32_t in_min, int32_t in_max, int32_t out_min, int32_t out_max) {
  return (x - in_min) * (out_max - out_min) / (in_max - in_min) + out_min;
}

int32_t constrain(int32_t x, int32_t min, int32_t max) {
 8005acc:	b580      	push	{r7, lr}
 8005ace:	b084      	sub	sp, #16
 8005ad0:	af00      	add	r7, sp, #0
 8005ad2:	60f8      	str	r0, [r7, #12]
 8005ad4:	60b9      	str	r1, [r7, #8]
 8005ad6:	607a      	str	r2, [r7, #4]
  if (x < min) {
 8005ad8:	68fa      	ldr	r2, [r7, #12]
 8005ada:	68bb      	ldr	r3, [r7, #8]
 8005adc:	429a      	cmp	r2, r3
 8005ade:	da01      	bge.n	8005ae4 <constrain+0x18>
    return min;
 8005ae0:	68bb      	ldr	r3, [r7, #8]
 8005ae2:	e006      	b.n	8005af2 <constrain+0x26>
  } else if (x > max) {
 8005ae4:	68fa      	ldr	r2, [r7, #12]
 8005ae6:	687b      	ldr	r3, [r7, #4]
 8005ae8:	429a      	cmp	r2, r3
 8005aea:	dd01      	ble.n	8005af0 <constrain+0x24>
    return max;
 8005aec:	687b      	ldr	r3, [r7, #4]
 8005aee:	e000      	b.n	8005af2 <constrain+0x26>
  } else {
    return x;
 8005af0:	68fb      	ldr	r3, [r7, #12]
  }
}
 8005af2:	0018      	movs	r0, r3
 8005af4:	46bd      	mov	sp, r7
 8005af6:	b004      	add	sp, #16
 8005af8:	bd80      	pop	{r7, pc}

08005afa <SystemInit>:
  * @brief  Setup the microcontroller system
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8005afa:	b580      	push	{r7, lr}
 8005afc:	af00      	add	r7, sp, #0
                         before branch to main program. This call is made inside
                         the "startup_stm32f0xx.s" file.
                         User can setups the default system clock (System clock source, PLL Multiplier
                         and Divider factors, AHB/APBx prescalers and Flash settings).
   */
}
 8005afe:	46c0      	nop			; (mov r8, r8)
 8005b00:	46bd      	mov	sp, r7
 8005b02:	bd80      	pop	{r7, pc}

08005b04 <_ZN10QuaternionC1Ev>:
        float w;
        float x;
        float y;
        float z;

        Quaternion() {
 8005b04:	b580      	push	{r7, lr}
 8005b06:	b082      	sub	sp, #8
 8005b08:	af00      	add	r7, sp, #0
 8005b0a:	6078      	str	r0, [r7, #4]
            w = 1.0f;
 8005b0c:	687b      	ldr	r3, [r7, #4]
 8005b0e:	22fe      	movs	r2, #254	; 0xfe
 8005b10:	0592      	lsls	r2, r2, #22
 8005b12:	601a      	str	r2, [r3, #0]
            x = 0.0f;
 8005b14:	687b      	ldr	r3, [r7, #4]
 8005b16:	2200      	movs	r2, #0
 8005b18:	605a      	str	r2, [r3, #4]
            y = 0.0f;
 8005b1a:	687b      	ldr	r3, [r7, #4]
 8005b1c:	2200      	movs	r2, #0
 8005b1e:	609a      	str	r2, [r3, #8]
            z = 0.0f;
 8005b20:	687b      	ldr	r3, [r7, #4]
 8005b22:	2200      	movs	r2, #0
 8005b24:	60da      	str	r2, [r3, #12]
        }
 8005b26:	687b      	ldr	r3, [r7, #4]
 8005b28:	0018      	movs	r0, r3
 8005b2a:	46bd      	mov	sp, r7
 8005b2c:	b002      	add	sp, #8
 8005b2e:	bd80      	pop	{r7, pc}

08005b30 <_ZN11VectorFloatC1Ev>:
    public:
        float x;
        float y;
        float z;

        VectorFloat() {
 8005b30:	b580      	push	{r7, lr}
 8005b32:	b082      	sub	sp, #8
 8005b34:	af00      	add	r7, sp, #0
 8005b36:	6078      	str	r0, [r7, #4]
            x = 0;
 8005b38:	687b      	ldr	r3, [r7, #4]
 8005b3a:	2200      	movs	r2, #0
 8005b3c:	601a      	str	r2, [r3, #0]
            y = 0;
 8005b3e:	687b      	ldr	r3, [r7, #4]
 8005b40:	2200      	movs	r2, #0
 8005b42:	605a      	str	r2, [r3, #4]
            z = 0;
 8005b44:	687b      	ldr	r3, [r7, #4]
 8005b46:	2200      	movs	r2, #0
 8005b48:	609a      	str	r2, [r3, #8]
        }
 8005b4a:	687b      	ldr	r3, [r7, #4]
 8005b4c:	0018      	movs	r0, r3
 8005b4e:	46bd      	mov	sp, r7
 8005b50:	b002      	add	sp, #8
 8005b52:	bd80      	pop	{r7, pc}

08005b54 <_ZN26MPU6050_6Axis_MotionApps20C1EhPv>:

#include "MPU6050.hpp"
#include "stm32f0xx_hal.h"
class MPU6050_6Axis_MotionApps20 : public MPU6050_Base {
    public:
        MPU6050_6Axis_MotionApps20(uint8_t address=MPU6050_DEFAULT_ADDRESS, void *wireObj=0) : MPU6050_Base(address, wireObj) { }
 8005b54:	b590      	push	{r4, r7, lr}
 8005b56:	b085      	sub	sp, #20
 8005b58:	af00      	add	r7, sp, #0
 8005b5a:	60f8      	str	r0, [r7, #12]
 8005b5c:	607a      	str	r2, [r7, #4]
 8005b5e:	240b      	movs	r4, #11
 8005b60:	193b      	adds	r3, r7, r4
 8005b62:	1c0a      	adds	r2, r1, #0
 8005b64:	701a      	strb	r2, [r3, #0]
 8005b66:	68f8      	ldr	r0, [r7, #12]
 8005b68:	687a      	ldr	r2, [r7, #4]
 8005b6a:	193b      	adds	r3, r7, r4
 8005b6c:	781b      	ldrb	r3, [r3, #0]
 8005b6e:	0019      	movs	r1, r3
 8005b70:	f7fd fc70 	bl	8003454 <_ZN12MPU6050_BaseC1EhPv>
 8005b74:	68fb      	ldr	r3, [r7, #12]
 8005b76:	0018      	movs	r0, r3
 8005b78:	46bd      	mov	sp, r7
 8005b7a:	b005      	add	sp, #20
 8005b7c:	bd90      	pop	{r4, r7, pc}
	...

08005b80 <doWork>:
Quaternion q;
VectorFloat gravity;
float rawAngle[3];
int32_t yaw, pitch, roll, targetAngle, currentAngle;
//------------------------------ функции ---------------------------------------------//
void doWork (void) {
 8005b80:	b580      	push	{r7, lr}
 8005b82:	af00      	add	r7, sp, #0
	mpu.initialize();
 8005b84:	4b0d      	ldr	r3, [pc, #52]	; (8005bbc <doWork+0x3c>)
 8005b86:	0018      	movs	r0, r3
 8005b88:	f7fd fc7e 	bl	8003488 <_ZN12MPU6050_Base10initializeEv>
	mpu.dmpInitialize();
 8005b8c:	4b0b      	ldr	r3, [pc, #44]	; (8005bbc <doWork+0x3c>)
 8005b8e:	0018      	movs	r0, r3
 8005b90:	f7fe f964 	bl	8003e5c <_ZN26MPU6050_6Axis_MotionApps2013dmpInitializeEv>
	mpu.setDMPEnabled(true);
 8005b94:	4b09      	ldr	r3, [pc, #36]	; (8005bbc <doWork+0x3c>)
 8005b96:	2101      	movs	r1, #1
 8005b98:	0018      	movs	r0, r3
 8005b9a:	f7fd ff94 	bl	8003ac6 <_ZN12MPU6050_Base13setDMPEnabledEb>
	HAL_TIM_Base_Start_IT (&htim2);
 8005b9e:	4b08      	ldr	r3, [pc, #32]	; (8005bc0 <doWork+0x40>)
 8005ba0:	0018      	movs	r0, r3
 8005ba2:	f003 fa4f 	bl	8009044 <HAL_TIM_Base_Start_IT>
    ARGB_Init();  // Initialization
 8005ba6:	f7fe fc31 	bl	800440c <ARGB_Init>
    ARGB_Clear(); // Clear stirp
 8005baa:	f7fe fca3 	bl	80044f4 <ARGB_Clear>
    startMoveAndLed (20, COUNT_SCREENSAVER);
 8005bae:	2178      	movs	r1, #120	; 0x78
 8005bb0:	2014      	movs	r0, #20
 8005bb2:	f000 f807 	bl	8005bc4 <startMoveAndLed>
}
 8005bb6:	46c0      	nop			; (mov r8, r8)
 8005bb8:	46bd      	mov	sp, r7
 8005bba:	bd80      	pop	{r7, pc}
 8005bbc:	20000328 	.word	0x20000328
 8005bc0:	2000023c 	.word	0x2000023c

08005bc4 <startMoveAndLed>:

void startMoveAndLed (uint8_t delay, uint32_t count) {
 8005bc4:	b5f0      	push	{r4, r5, r6, r7, lr}
 8005bc6:	b08b      	sub	sp, #44	; 0x2c
 8005bc8:	af00      	add	r7, sp, #0
 8005bca:	0002      	movs	r2, r0
 8005bcc:	6039      	str	r1, [r7, #0]
 8005bce:	1dfb      	adds	r3, r7, #7
 8005bd0:	701a      	strb	r2, [r3, #0]
	uint8_t temporary = 0;
 8005bd2:	2323      	movs	r3, #35	; 0x23
 8005bd4:	18fb      	adds	r3, r7, r3
 8005bd6:	2200      	movs	r2, #0
 8005bd8:	701a      	strb	r2, [r3, #0]
	currentAngle = 0;
 8005bda:	4b78      	ldr	r3, [pc, #480]	; (8005dbc <startMoveAndLed+0x1f8>)
 8005bdc:	2200      	movs	r2, #0
 8005bde:	601a      	str	r2, [r3, #0]
	targetAngle = 1280;
 8005be0:	4b77      	ldr	r3, [pc, #476]	; (8005dc0 <startMoveAndLed+0x1fc>)
 8005be2:	22a0      	movs	r2, #160	; 0xa0
 8005be4:	00d2      	lsls	r2, r2, #3
 8005be6:	601a      	str	r2, [r3, #0]
	for (uint32_t i = 0; i < count; i ++) {
 8005be8:	2300      	movs	r3, #0
 8005bea:	627b      	str	r3, [r7, #36]	; 0x24
 8005bec:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8005bee:	683b      	ldr	r3, [r7, #0]
 8005bf0:	429a      	cmp	r2, r3
 8005bf2:	d300      	bcc.n	8005bf6 <startMoveAndLed+0x32>
 8005bf4:	e0dd      	b.n	8005db2 <startMoveAndLed+0x1ee>
			// Рассчитываем оттенки для каждого светодиода с учетом запаздывания в 90 градусов
			float hue1 = i; // для первого светодиода
 8005bf6:	6a78      	ldr	r0, [r7, #36]	; 0x24
 8005bf8:	f7fb fb68 	bl	80012cc <__aeabi_ui2f>
 8005bfc:	1c03      	adds	r3, r0, #0
 8005bfe:	61fb      	str	r3, [r7, #28]
			float hue2 = fmod(i + 90, 360.0); // для второго светодиода
 8005c00:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005c02:	335a      	adds	r3, #90	; 0x5a
 8005c04:	0019      	movs	r1, r3
 8005c06:	2200      	movs	r2, #0
 8005c08:	4b6e      	ldr	r3, [pc, #440]	; (8005dc4 <startMoveAndLed+0x200>)
 8005c0a:	0008      	movs	r0, r1
 8005c0c:	f000 fae2 	bl	80061d4 <_ZSt4fmodImdEN9__gnu_cxx11__promote_2IT_T0_NS0_9__promoteIS2_XsrSt12__is_integerIS2_E7__valueEE6__typeENS4_IS3_XsrS5_IS3_E7__valueEE6__typeEE6__typeES2_S3_>
 8005c10:	0002      	movs	r2, r0
 8005c12:	000b      	movs	r3, r1
 8005c14:	0010      	movs	r0, r2
 8005c16:	0019      	movs	r1, r3
 8005c18:	f7fd f9c8 	bl	8002fac <__aeabi_d2f>
 8005c1c:	1c03      	adds	r3, r0, #0
 8005c1e:	61bb      	str	r3, [r7, #24]
			float hue3 = fmod(i + 180, 360.0); // для третьего светодиода
 8005c20:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005c22:	33b4      	adds	r3, #180	; 0xb4
 8005c24:	0019      	movs	r1, r3
 8005c26:	2200      	movs	r2, #0
 8005c28:	4b66      	ldr	r3, [pc, #408]	; (8005dc4 <startMoveAndLed+0x200>)
 8005c2a:	0008      	movs	r0, r1
 8005c2c:	f000 fad2 	bl	80061d4 <_ZSt4fmodImdEN9__gnu_cxx11__promote_2IT_T0_NS0_9__promoteIS2_XsrSt12__is_integerIS2_E7__valueEE6__typeENS4_IS3_XsrS5_IS3_E7__valueEE6__typeEE6__typeES2_S3_>
 8005c30:	0002      	movs	r2, r0
 8005c32:	000b      	movs	r3, r1
 8005c34:	0010      	movs	r0, r2
 8005c36:	0019      	movs	r1, r3
 8005c38:	f7fd f9b8 	bl	8002fac <__aeabi_d2f>
 8005c3c:	1c03      	adds	r3, r0, #0
 8005c3e:	617b      	str	r3, [r7, #20]
			float hue4 = fmod(i + 270, 360.0); // для четвертого светодиода
 8005c40:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005c42:	330f      	adds	r3, #15
 8005c44:	33ff      	adds	r3, #255	; 0xff
 8005c46:	0019      	movs	r1, r3
 8005c48:	2200      	movs	r2, #0
 8005c4a:	4b5e      	ldr	r3, [pc, #376]	; (8005dc4 <startMoveAndLed+0x200>)
 8005c4c:	0008      	movs	r0, r1
 8005c4e:	f000 fac1 	bl	80061d4 <_ZSt4fmodImdEN9__gnu_cxx11__promote_2IT_T0_NS0_9__promoteIS2_XsrSt12__is_integerIS2_E7__valueEE6__typeENS4_IS3_XsrS5_IS3_E7__valueEE6__typeEE6__typeES2_S3_>
 8005c52:	0002      	movs	r2, r0
 8005c54:	000b      	movs	r3, r1
 8005c56:	0010      	movs	r0, r2
 8005c58:	0019      	movs	r1, r3
 8005c5a:	f7fd f9a7 	bl	8002fac <__aeabi_d2f>
 8005c5e:	1c03      	adds	r3, r0, #0
 8005c60:	613b      	str	r3, [r7, #16]
			// Преобразуем оттенки в диапазон [0, 255]
			uint8_t hueByte1 = hue1 * 255 / 360;
 8005c62:	4959      	ldr	r1, [pc, #356]	; (8005dc8 <startMoveAndLed+0x204>)
 8005c64:	69f8      	ldr	r0, [r7, #28]
 8005c66:	f7fa ffd9 	bl	8000c1c <__aeabi_fmul>
 8005c6a:	1c03      	adds	r3, r0, #0
 8005c6c:	4957      	ldr	r1, [pc, #348]	; (8005dcc <startMoveAndLed+0x208>)
 8005c6e:	1c18      	adds	r0, r3, #0
 8005c70:	f7fa fe0c 	bl	800088c <__aeabi_fdiv>
 8005c74:	1c03      	adds	r3, r0, #0
 8005c76:	250f      	movs	r5, #15
 8005c78:	197c      	adds	r4, r7, r5
 8005c7a:	1c18      	adds	r0, r3, #0
 8005c7c:	f7fa fc32 	bl	80004e4 <__aeabi_f2uiz>
 8005c80:	0003      	movs	r3, r0
 8005c82:	7023      	strb	r3, [r4, #0]
			uint8_t hueByte2 = hue2 * 255 / 360;
 8005c84:	4950      	ldr	r1, [pc, #320]	; (8005dc8 <startMoveAndLed+0x204>)
 8005c86:	69b8      	ldr	r0, [r7, #24]
 8005c88:	f7fa ffc8 	bl	8000c1c <__aeabi_fmul>
 8005c8c:	1c03      	adds	r3, r0, #0
 8005c8e:	494f      	ldr	r1, [pc, #316]	; (8005dcc <startMoveAndLed+0x208>)
 8005c90:	1c18      	adds	r0, r3, #0
 8005c92:	f7fa fdfb 	bl	800088c <__aeabi_fdiv>
 8005c96:	1c03      	adds	r3, r0, #0
 8005c98:	260e      	movs	r6, #14
 8005c9a:	19bc      	adds	r4, r7, r6
 8005c9c:	1c18      	adds	r0, r3, #0
 8005c9e:	f7fa fc21 	bl	80004e4 <__aeabi_f2uiz>
 8005ca2:	0003      	movs	r3, r0
 8005ca4:	7023      	strb	r3, [r4, #0]
			uint8_t hueByte3 = hue3 * 255 / 360;
 8005ca6:	4948      	ldr	r1, [pc, #288]	; (8005dc8 <startMoveAndLed+0x204>)
 8005ca8:	6978      	ldr	r0, [r7, #20]
 8005caa:	f7fa ffb7 	bl	8000c1c <__aeabi_fmul>
 8005cae:	1c03      	adds	r3, r0, #0
 8005cb0:	4946      	ldr	r1, [pc, #280]	; (8005dcc <startMoveAndLed+0x208>)
 8005cb2:	1c18      	adds	r0, r3, #0
 8005cb4:	f7fa fdea 	bl	800088c <__aeabi_fdiv>
 8005cb8:	1c03      	adds	r3, r0, #0
 8005cba:	220d      	movs	r2, #13
 8005cbc:	18bc      	adds	r4, r7, r2
 8005cbe:	1c18      	adds	r0, r3, #0
 8005cc0:	f7fa fc10 	bl	80004e4 <__aeabi_f2uiz>
 8005cc4:	0003      	movs	r3, r0
 8005cc6:	7023      	strb	r3, [r4, #0]
			uint8_t hueByte4 = hue4 * 255 / 360;
 8005cc8:	493f      	ldr	r1, [pc, #252]	; (8005dc8 <startMoveAndLed+0x204>)
 8005cca:	6938      	ldr	r0, [r7, #16]
 8005ccc:	f7fa ffa6 	bl	8000c1c <__aeabi_fmul>
 8005cd0:	1c03      	adds	r3, r0, #0
 8005cd2:	493e      	ldr	r1, [pc, #248]	; (8005dcc <startMoveAndLed+0x208>)
 8005cd4:	1c18      	adds	r0, r3, #0
 8005cd6:	f7fa fdd9 	bl	800088c <__aeabi_fdiv>
 8005cda:	1c03      	adds	r3, r0, #0
 8005cdc:	210c      	movs	r1, #12
 8005cde:	187c      	adds	r4, r7, r1
 8005ce0:	1c18      	adds	r0, r3, #0
 8005ce2:	f7fa fbff 	bl	80004e4 <__aeabi_f2uiz>
 8005ce6:	0003      	movs	r3, r0
 8005ce8:	7023      	strb	r3, [r4, #0]
			// Устанавливаем цвета HSV для каждого светодиода
			ARGB_SetHSV(0, hueByte1, 255, 255); // для первого светодиода
 8005cea:	197b      	adds	r3, r7, r5
 8005cec:	7819      	ldrb	r1, [r3, #0]
 8005cee:	23ff      	movs	r3, #255	; 0xff
 8005cf0:	22ff      	movs	r2, #255	; 0xff
 8005cf2:	2000      	movs	r0, #0
 8005cf4:	f7fe fcb4 	bl	8004660 <ARGB_SetHSV>
			ARGB_SetHSV(1, hueByte2, 255, 255); // для второго светодиода
 8005cf8:	19bb      	adds	r3, r7, r6
 8005cfa:	7819      	ldrb	r1, [r3, #0]
 8005cfc:	23ff      	movs	r3, #255	; 0xff
 8005cfe:	22ff      	movs	r2, #255	; 0xff
 8005d00:	2001      	movs	r0, #1
 8005d02:	f7fe fcad 	bl	8004660 <ARGB_SetHSV>
			ARGB_SetHSV(2, hueByte3, 255, 255); // для третьего светодиода
 8005d06:	220d      	movs	r2, #13
 8005d08:	18bb      	adds	r3, r7, r2
 8005d0a:	7819      	ldrb	r1, [r3, #0]
 8005d0c:	23ff      	movs	r3, #255	; 0xff
 8005d0e:	22ff      	movs	r2, #255	; 0xff
 8005d10:	2002      	movs	r0, #2
 8005d12:	f7fe fca5 	bl	8004660 <ARGB_SetHSV>
			ARGB_SetHSV(3, hueByte4, 255, 255); // для четвертого светодиода
 8005d16:	210c      	movs	r1, #12
 8005d18:	187b      	adds	r3, r7, r1
 8005d1a:	7819      	ldrb	r1, [r3, #0]
 8005d1c:	23ff      	movs	r3, #255	; 0xff
 8005d1e:	22ff      	movs	r2, #255	; 0xff
 8005d20:	2003      	movs	r0, #3
 8005d22:	f7fe fc9d 	bl	8004660 <ARGB_SetHSV>
			while (!ARGB_Show());  // Update - Option 2
 8005d26:	f7fe fd03 	bl	8004730 <ARGB_Show>
 8005d2a:	0003      	movs	r3, r0
 8005d2c:	425a      	negs	r2, r3
 8005d2e:	4153      	adcs	r3, r2
 8005d30:	b2db      	uxtb	r3, r3
 8005d32:	2b00      	cmp	r3, #0
 8005d34:	d000      	beq.n	8005d38 <startMoveAndLed+0x174>
 8005d36:	e7f6      	b.n	8005d26 <startMoveAndLed+0x162>
			temporary = adcBuf[0] % 10;
 8005d38:	4b25      	ldr	r3, [pc, #148]	; (8005dd0 <startMoveAndLed+0x20c>)
 8005d3a:	881b      	ldrh	r3, [r3, #0]
 8005d3c:	210a      	movs	r1, #10
 8005d3e:	0018      	movs	r0, r3
 8005d40:	f7fa fa68 	bl	8000214 <__aeabi_uidivmod>
 8005d44:	000b      	movs	r3, r1
 8005d46:	b29a      	uxth	r2, r3
 8005d48:	2123      	movs	r1, #35	; 0x23
 8005d4a:	187b      	adds	r3, r7, r1
 8005d4c:	701a      	strb	r2, [r3, #0]
			if (temporary > 5) {
 8005d4e:	187b      	adds	r3, r7, r1
 8005d50:	781b      	ldrb	r3, [r3, #0]
 8005d52:	2b05      	cmp	r3, #5
 8005d54:	d912      	bls.n	8005d7c <startMoveAndLed+0x1b8>
				if (currentAngle == targetAngle) targetAngle = (HAL_GetTick() % 900);
 8005d56:	4b19      	ldr	r3, [pc, #100]	; (8005dbc <startMoveAndLed+0x1f8>)
 8005d58:	681a      	ldr	r2, [r3, #0]
 8005d5a:	4b19      	ldr	r3, [pc, #100]	; (8005dc0 <startMoveAndLed+0x1fc>)
 8005d5c:	681b      	ldr	r3, [r3, #0]
 8005d5e:	429a      	cmp	r2, r3
 8005d60:	d11e      	bne.n	8005da0 <startMoveAndLed+0x1dc>
 8005d62:	f000 fb01 	bl	8006368 <HAL_GetTick>
 8005d66:	0002      	movs	r2, r0
 8005d68:	23e1      	movs	r3, #225	; 0xe1
 8005d6a:	0099      	lsls	r1, r3, #2
 8005d6c:	0010      	movs	r0, r2
 8005d6e:	f7fa fa51 	bl	8000214 <__aeabi_uidivmod>
 8005d72:	000b      	movs	r3, r1
 8005d74:	001a      	movs	r2, r3
 8005d76:	4b12      	ldr	r3, [pc, #72]	; (8005dc0 <startMoveAndLed+0x1fc>)
 8005d78:	601a      	str	r2, [r3, #0]
 8005d7a:	e011      	b.n	8005da0 <startMoveAndLed+0x1dc>
			} else {
				if (currentAngle == targetAngle) targetAngle = -(adcBuf[5] % 600);
 8005d7c:	4b0f      	ldr	r3, [pc, #60]	; (8005dbc <startMoveAndLed+0x1f8>)
 8005d7e:	681a      	ldr	r2, [r3, #0]
 8005d80:	4b0f      	ldr	r3, [pc, #60]	; (8005dc0 <startMoveAndLed+0x1fc>)
 8005d82:	681b      	ldr	r3, [r3, #0]
 8005d84:	429a      	cmp	r2, r3
 8005d86:	d10b      	bne.n	8005da0 <startMoveAndLed+0x1dc>
 8005d88:	4b11      	ldr	r3, [pc, #68]	; (8005dd0 <startMoveAndLed+0x20c>)
 8005d8a:	895b      	ldrh	r3, [r3, #10]
 8005d8c:	2296      	movs	r2, #150	; 0x96
 8005d8e:	0091      	lsls	r1, r2, #2
 8005d90:	0018      	movs	r0, r3
 8005d92:	f7fa fa3f 	bl	8000214 <__aeabi_uidivmod>
 8005d96:	000b      	movs	r3, r1
 8005d98:	b29b      	uxth	r3, r3
 8005d9a:	425a      	negs	r2, r3
 8005d9c:	4b08      	ldr	r3, [pc, #32]	; (8005dc0 <startMoveAndLed+0x1fc>)
 8005d9e:	601a      	str	r2, [r3, #0]
			}
			HAL_Delay(delay);
 8005da0:	1dfb      	adds	r3, r7, #7
 8005da2:	781b      	ldrb	r3, [r3, #0]
 8005da4:	0018      	movs	r0, r3
 8005da6:	f000 fae9 	bl	800637c <HAL_Delay>
	for (uint32_t i = 0; i < count; i ++) {
 8005daa:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005dac:	3301      	adds	r3, #1
 8005dae:	627b      	str	r3, [r7, #36]	; 0x24
 8005db0:	e71c      	b.n	8005bec <startMoveAndLed+0x28>
	}
}
 8005db2:	46c0      	nop			; (mov r8, r8)
 8005db4:	46bd      	mov	sp, r7
 8005db6:	b00b      	add	sp, #44	; 0x2c
 8005db8:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8005dba:	46c0      	nop			; (mov r8, r8)
 8005dbc:	200003c0 	.word	0x200003c0
 8005dc0:	200003bc 	.word	0x200003bc
 8005dc4:	40768000 	.word	0x40768000
 8005dc8:	437f0000 	.word	0x437f0000
 8005dcc:	43b40000 	.word	0x43b40000
 8005dd0:	20000310 	.word	0x20000310

08005dd4 <_Z10fixDegreesf>:

float fixDegrees(float deg) {
 8005dd4:	b580      	push	{r7, lr}
 8005dd6:	b082      	sub	sp, #8
 8005dd8:	af00      	add	r7, sp, #0
 8005dda:	6078      	str	r0, [r7, #4]
  if (deg < 0) {
 8005ddc:	2100      	movs	r1, #0
 8005dde:	6878      	ldr	r0, [r7, #4]
 8005de0:	f7fa fb58 	bl	8000494 <__aeabi_fcmplt>
 8005de4:	1e03      	subs	r3, r0, #0
 8005de6:	d005      	beq.n	8005df4 <_Z10fixDegreesf+0x20>
    return deg + 360; // добавляем 360 к отрицательным углам
 8005de8:	4905      	ldr	r1, [pc, #20]	; (8005e00 <_Z10fixDegreesf+0x2c>)
 8005dea:	6878      	ldr	r0, [r7, #4]
 8005dec:	f7fa fbb0 	bl	8000550 <__aeabi_fadd>
 8005df0:	1c03      	adds	r3, r0, #0
 8005df2:	e000      	b.n	8005df6 <_Z10fixDegreesf+0x22>
  } else {
    return deg;
 8005df4:	687b      	ldr	r3, [r7, #4]
  }
}
 8005df6:	1c18      	adds	r0, r3, #0
 8005df8:	46bd      	mov	sp, r7
 8005dfa:	b002      	add	sp, #8
 8005dfc:	bd80      	pop	{r7, pc}
 8005dfe:	46c0      	nop			; (mov r8, r8)
 8005e00:	43b40000 	.word	0x43b40000

08005e04 <_Z17setRandomPozitionv>:

void setRandomPozition (void) {
 8005e04:	b5b0      	push	{r4, r5, r7, lr}
 8005e06:	af00      	add	r7, sp, #0
	if ((HAL_GetTick() % 10000)==0) {
 8005e08:	f000 faae 	bl	8006368 <HAL_GetTick>
 8005e0c:	0003      	movs	r3, r0
 8005e0e:	4917      	ldr	r1, [pc, #92]	; (8005e6c <_Z17setRandomPozitionv+0x68>)
 8005e10:	0018      	movs	r0, r3
 8005e12:	f7fa f9ff 	bl	8000214 <__aeabi_uidivmod>
 8005e16:	000b      	movs	r3, r1
 8005e18:	425a      	negs	r2, r3
 8005e1a:	4153      	adcs	r3, r2
 8005e1c:	b2db      	uxtb	r3, r3
 8005e1e:	2b00      	cmp	r3, #0
 8005e20:	d020      	beq.n	8005e64 <_Z17setRandomPozitionv+0x60>
		startMoveAndLed (constrain (adcBuf[0] % 50, 15, 50), constrain(adcBuf[1] % 100, 20, 80) );
 8005e22:	4b13      	ldr	r3, [pc, #76]	; (8005e70 <_Z17setRandomPozitionv+0x6c>)
 8005e24:	881b      	ldrh	r3, [r3, #0]
 8005e26:	2132      	movs	r1, #50	; 0x32
 8005e28:	0018      	movs	r0, r3
 8005e2a:	f7fa f9f3 	bl	8000214 <__aeabi_uidivmod>
 8005e2e:	000b      	movs	r3, r1
 8005e30:	b29b      	uxth	r3, r3
 8005e32:	2232      	movs	r2, #50	; 0x32
 8005e34:	210f      	movs	r1, #15
 8005e36:	0018      	movs	r0, r3
 8005e38:	f7ff fe48 	bl	8005acc <constrain>
 8005e3c:	0003      	movs	r3, r0
 8005e3e:	b2dc      	uxtb	r4, r3
 8005e40:	4b0b      	ldr	r3, [pc, #44]	; (8005e70 <_Z17setRandomPozitionv+0x6c>)
 8005e42:	885b      	ldrh	r3, [r3, #2]
 8005e44:	2164      	movs	r1, #100	; 0x64
 8005e46:	0018      	movs	r0, r3
 8005e48:	f7fa f9e4 	bl	8000214 <__aeabi_uidivmod>
 8005e4c:	000b      	movs	r3, r1
 8005e4e:	b29b      	uxth	r3, r3
 8005e50:	2250      	movs	r2, #80	; 0x50
 8005e52:	2114      	movs	r1, #20
 8005e54:	0018      	movs	r0, r3
 8005e56:	f7ff fe39 	bl	8005acc <constrain>
 8005e5a:	0003      	movs	r3, r0
 8005e5c:	0019      	movs	r1, r3
 8005e5e:	0020      	movs	r0, r4
 8005e60:	f7ff feb0 	bl	8005bc4 <startMoveAndLed>
	}
}
 8005e64:	46c0      	nop			; (mov r8, r8)
 8005e66:	46bd      	mov	sp, r7
 8005e68:	bdb0      	pop	{r4, r5, r7, pc}
 8005e6a:	46c0      	nop			; (mov r8, r8)
 8005e6c:	00002710 	.word	0x00002710
 8005e70:	20000310 	.word	0x20000310

08005e74 <Work>:

void Work (void) {
 8005e74:	b5b0      	push	{r4, r5, r7, lr}
 8005e76:	b084      	sub	sp, #16
 8005e78:	af00      	add	r7, sp, #0
	int32_t deltaYaw = 0;
 8005e7a:	2300      	movs	r3, #0
 8005e7c:	60fb      	str	r3, [r7, #12]
	static int32_t lastYaw = 0;
	setRandomPozition();
 8005e7e:	f7ff ffc1 	bl	8005e04 <_Z17setRandomPozitionv>
	if (flag) {
 8005e82:	4b96      	ldr	r3, [pc, #600]	; (80060dc <Work+0x268>)
 8005e84:	681b      	ldr	r3, [r3, #0]
 8005e86:	2b00      	cmp	r3, #0
 8005e88:	d100      	bne.n	8005e8c <Work+0x18>
 8005e8a:	e122      	b.n	80060d2 <Work+0x25e>
		flag = false;
 8005e8c:	4b93      	ldr	r3, [pc, #588]	; (80060dc <Work+0x268>)
 8005e8e:	2200      	movs	r2, #0
 8005e90:	601a      	str	r2, [r3, #0]
		if (mpu.dmpGetCurrentFIFOPacket(fifoBuffer)) {     // расчёты
 8005e92:	4a93      	ldr	r2, [pc, #588]	; (80060e0 <Work+0x26c>)
 8005e94:	4b93      	ldr	r3, [pc, #588]	; (80060e4 <Work+0x270>)
 8005e96:	0011      	movs	r1, r2
 8005e98:	0018      	movs	r0, r3
 8005e9a:	f7fe f8a3 	bl	8003fe4 <_ZN26MPU6050_6Axis_MotionApps2023dmpGetCurrentFIFOPacketEPh>
 8005e9e:	0003      	movs	r3, r0
 8005ea0:	1e5a      	subs	r2, r3, #1
 8005ea2:	4193      	sbcs	r3, r2
 8005ea4:	b2db      	uxtb	r3, r3
 8005ea6:	2b00      	cmp	r3, #0
 8005ea8:	d100      	bne.n	8005eac <Work+0x38>
 8005eaa:	e112      	b.n	80060d2 <Work+0x25e>
		    mpu.dmpGetQuaternion(&q, fifoBuffer);
 8005eac:	4a8c      	ldr	r2, [pc, #560]	; (80060e0 <Work+0x26c>)
 8005eae:	498e      	ldr	r1, [pc, #568]	; (80060e8 <Work+0x274>)
 8005eb0:	4b8c      	ldr	r3, [pc, #560]	; (80060e4 <Work+0x270>)
 8005eb2:	0018      	movs	r0, r3
 8005eb4:	f7fe f8f0 	bl	8004098 <_ZN26MPU6050_6Axis_MotionApps2016dmpGetQuaternionEP10QuaternionPKh>
		    mpu.dmpGetGravity(&gravity, &q);
 8005eb8:	4a8b      	ldr	r2, [pc, #556]	; (80060e8 <Work+0x274>)
 8005eba:	498c      	ldr	r1, [pc, #560]	; (80060ec <Work+0x278>)
 8005ebc:	4b89      	ldr	r3, [pc, #548]	; (80060e4 <Work+0x270>)
 8005ebe:	0018      	movs	r0, r3
 8005ec0:	f7fe f948 	bl	8004154 <_ZN26MPU6050_6Axis_MotionApps2013dmpGetGravityEP11VectorFloatP10Quaternion>
		    mpu.dmpGetYawPitchRoll(rawAngle, &q, &gravity);
 8005ec4:	4b89      	ldr	r3, [pc, #548]	; (80060ec <Work+0x278>)
 8005ec6:	4a88      	ldr	r2, [pc, #544]	; (80060e8 <Work+0x274>)
 8005ec8:	4989      	ldr	r1, [pc, #548]	; (80060f0 <Work+0x27c>)
 8005eca:	4886      	ldr	r0, [pc, #536]	; (80060e4 <Work+0x270>)
 8005ecc:	f7fe f9c6 	bl	800425c <_ZN26MPU6050_6Axis_MotionApps2018dmpGetYawPitchRollEPfP10QuaternionP11VectorFloat>
		    yaw = (int32_t)fixDegrees (degrees(rawAngle[0]));
 8005ed0:	4b87      	ldr	r3, [pc, #540]	; (80060f0 <Work+0x27c>)
 8005ed2:	681b      	ldr	r3, [r3, #0]
 8005ed4:	1c18      	adds	r0, r3, #0
 8005ed6:	f7fd f821 	bl	8002f1c <__aeabi_f2d>
 8005eda:	4a86      	ldr	r2, [pc, #536]	; (80060f4 <Work+0x280>)
 8005edc:	4b86      	ldr	r3, [pc, #536]	; (80060f8 <Work+0x284>)
 8005ede:	f7fc f975 	bl	80021cc <__aeabi_dmul>
 8005ee2:	0002      	movs	r2, r0
 8005ee4:	000b      	movs	r3, r1
 8005ee6:	0010      	movs	r0, r2
 8005ee8:	0019      	movs	r1, r3
 8005eea:	f7fd f85f 	bl	8002fac <__aeabi_d2f>
 8005eee:	1c03      	adds	r3, r0, #0
 8005ef0:	1c18      	adds	r0, r3, #0
 8005ef2:	f7ff ff6f 	bl	8005dd4 <_Z10fixDegreesf>
 8005ef6:	1c03      	adds	r3, r0, #0
 8005ef8:	1c18      	adds	r0, r3, #0
 8005efa:	f7fb f979 	bl	80011f0 <__aeabi_f2iz>
 8005efe:	0002      	movs	r2, r0
 8005f00:	4b7e      	ldr	r3, [pc, #504]	; (80060fc <Work+0x288>)
 8005f02:	601a      	str	r2, [r3, #0]
		    pitch = (int32_t)fixDegrees (degrees(rawAngle[1]));
 8005f04:	4b7a      	ldr	r3, [pc, #488]	; (80060f0 <Work+0x27c>)
 8005f06:	685b      	ldr	r3, [r3, #4]
 8005f08:	1c18      	adds	r0, r3, #0
 8005f0a:	f7fd f807 	bl	8002f1c <__aeabi_f2d>
 8005f0e:	4a79      	ldr	r2, [pc, #484]	; (80060f4 <Work+0x280>)
 8005f10:	4b79      	ldr	r3, [pc, #484]	; (80060f8 <Work+0x284>)
 8005f12:	f7fc f95b 	bl	80021cc <__aeabi_dmul>
 8005f16:	0002      	movs	r2, r0
 8005f18:	000b      	movs	r3, r1
 8005f1a:	0010      	movs	r0, r2
 8005f1c:	0019      	movs	r1, r3
 8005f1e:	f7fd f845 	bl	8002fac <__aeabi_d2f>
 8005f22:	1c03      	adds	r3, r0, #0
 8005f24:	1c18      	adds	r0, r3, #0
 8005f26:	f7ff ff55 	bl	8005dd4 <_Z10fixDegreesf>
 8005f2a:	1c03      	adds	r3, r0, #0
 8005f2c:	1c18      	adds	r0, r3, #0
 8005f2e:	f7fb f95f 	bl	80011f0 <__aeabi_f2iz>
 8005f32:	0002      	movs	r2, r0
 8005f34:	4b72      	ldr	r3, [pc, #456]	; (8006100 <Work+0x28c>)
 8005f36:	601a      	str	r2, [r3, #0]
		    roll = (int32_t)fixDegrees (degrees(rawAngle[2]));
 8005f38:	4b6d      	ldr	r3, [pc, #436]	; (80060f0 <Work+0x27c>)
 8005f3a:	689b      	ldr	r3, [r3, #8]
 8005f3c:	1c18      	adds	r0, r3, #0
 8005f3e:	f7fc ffed 	bl	8002f1c <__aeabi_f2d>
 8005f42:	4a6c      	ldr	r2, [pc, #432]	; (80060f4 <Work+0x280>)
 8005f44:	4b6c      	ldr	r3, [pc, #432]	; (80060f8 <Work+0x284>)
 8005f46:	f7fc f941 	bl	80021cc <__aeabi_dmul>
 8005f4a:	0002      	movs	r2, r0
 8005f4c:	000b      	movs	r3, r1
 8005f4e:	0010      	movs	r0, r2
 8005f50:	0019      	movs	r1, r3
 8005f52:	f7fd f82b 	bl	8002fac <__aeabi_d2f>
 8005f56:	1c03      	adds	r3, r0, #0
 8005f58:	1c18      	adds	r0, r3, #0
 8005f5a:	f7ff ff3b 	bl	8005dd4 <_Z10fixDegreesf>
 8005f5e:	1c03      	adds	r3, r0, #0
 8005f60:	1c18      	adds	r0, r3, #0
 8005f62:	f7fb f945 	bl	80011f0 <__aeabi_f2iz>
 8005f66:	0002      	movs	r2, r0
 8005f68:	4b66      	ldr	r3, [pc, #408]	; (8006104 <Work+0x290>)
 8005f6a:	601a      	str	r2, [r3, #0]
		    deltaYaw = yaw - lastYaw;
 8005f6c:	4b63      	ldr	r3, [pc, #396]	; (80060fc <Work+0x288>)
 8005f6e:	681a      	ldr	r2, [r3, #0]
 8005f70:	4b65      	ldr	r3, [pc, #404]	; (8006108 <Work+0x294>)
 8005f72:	681b      	ldr	r3, [r3, #0]
 8005f74:	1ad3      	subs	r3, r2, r3
 8005f76:	60fb      	str	r3, [r7, #12]
		    if (deltaYaw > 180) {
 8005f78:	68fb      	ldr	r3, [r7, #12]
 8005f7a:	2bb4      	cmp	r3, #180	; 0xb4
 8005f7c:	dd04      	ble.n	8005f88 <Work+0x114>
		        deltaYaw -= 360;
 8005f7e:	68fb      	ldr	r3, [r7, #12]
 8005f80:	3b69      	subs	r3, #105	; 0x69
 8005f82:	3bff      	subs	r3, #255	; 0xff
 8005f84:	60fb      	str	r3, [r7, #12]
 8005f86:	e006      	b.n	8005f96 <Work+0x122>
		    } else if (deltaYaw < -180) {
 8005f88:	68fb      	ldr	r3, [r7, #12]
 8005f8a:	33b4      	adds	r3, #180	; 0xb4
 8005f8c:	da03      	bge.n	8005f96 <Work+0x122>
		        deltaYaw += 360;
 8005f8e:	68fb      	ldr	r3, [r7, #12]
 8005f90:	3369      	adds	r3, #105	; 0x69
 8005f92:	33ff      	adds	r3, #255	; 0xff
 8005f94:	60fb      	str	r3, [r7, #12]
		    }
		    lastYaw = yaw;
 8005f96:	4b59      	ldr	r3, [pc, #356]	; (80060fc <Work+0x288>)
 8005f98:	681a      	ldr	r2, [r3, #0]
 8005f9a:	4b5b      	ldr	r3, [pc, #364]	; (8006108 <Work+0x294>)
 8005f9c:	601a      	str	r2, [r3, #0]
		    targetAngle += deltaYaw * 3.5;
 8005f9e:	4b5b      	ldr	r3, [pc, #364]	; (800610c <Work+0x298>)
 8005fa0:	681b      	ldr	r3, [r3, #0]
 8005fa2:	0018      	movs	r0, r3
 8005fa4:	f7fc ff64 	bl	8002e70 <__aeabi_i2d>
 8005fa8:	0004      	movs	r4, r0
 8005faa:	000d      	movs	r5, r1
 8005fac:	68f8      	ldr	r0, [r7, #12]
 8005fae:	f7fc ff5f 	bl	8002e70 <__aeabi_i2d>
 8005fb2:	2200      	movs	r2, #0
 8005fb4:	4b56      	ldr	r3, [pc, #344]	; (8006110 <Work+0x29c>)
 8005fb6:	f7fc f909 	bl	80021cc <__aeabi_dmul>
 8005fba:	0002      	movs	r2, r0
 8005fbc:	000b      	movs	r3, r1
 8005fbe:	0020      	movs	r0, r4
 8005fc0:	0029      	movs	r1, r5
 8005fc2:	f7fb f9c5 	bl	8001350 <__aeabi_dadd>
 8005fc6:	0002      	movs	r2, r0
 8005fc8:	000b      	movs	r3, r1
 8005fca:	0010      	movs	r0, r2
 8005fcc:	0019      	movs	r1, r3
 8005fce:	f7fc ff19 	bl	8002e04 <__aeabi_d2iz>
 8005fd2:	0002      	movs	r2, r0
 8005fd4:	4b4d      	ldr	r3, [pc, #308]	; (800610c <Work+0x298>)
 8005fd6:	601a      	str	r2, [r3, #0]
		    // Определяем отношение угла к каждому цвету
		    float hue;
		    if (yaw < 120) {
 8005fd8:	4b48      	ldr	r3, [pc, #288]	; (80060fc <Work+0x288>)
 8005fda:	681b      	ldr	r3, [r3, #0]
 8005fdc:	2b77      	cmp	r3, #119	; 0x77
 8005fde:	dc11      	bgt.n	8006004 <Work+0x190>
		        hue = yaw * (1.0 / 120.0); // Оттенок для перехода от синего к зеленому
 8005fe0:	4b46      	ldr	r3, [pc, #280]	; (80060fc <Work+0x288>)
 8005fe2:	681b      	ldr	r3, [r3, #0]
 8005fe4:	0018      	movs	r0, r3
 8005fe6:	f7fc ff43 	bl	8002e70 <__aeabi_i2d>
 8005fea:	4a4a      	ldr	r2, [pc, #296]	; (8006114 <Work+0x2a0>)
 8005fec:	4b4a      	ldr	r3, [pc, #296]	; (8006118 <Work+0x2a4>)
 8005fee:	f7fc f8ed 	bl	80021cc <__aeabi_dmul>
 8005ff2:	0002      	movs	r2, r0
 8005ff4:	000b      	movs	r3, r1
 8005ff6:	0010      	movs	r0, r2
 8005ff8:	0019      	movs	r1, r3
 8005ffa:	f7fc ffd7 	bl	8002fac <__aeabi_d2f>
 8005ffe:	1c03      	adds	r3, r0, #0
 8006000:	60bb      	str	r3, [r7, #8]
 8006002:	e036      	b.n	8006072 <Work+0x1fe>
		    } else if (yaw < 240) {
 8006004:	4b3d      	ldr	r3, [pc, #244]	; (80060fc <Work+0x288>)
 8006006:	681b      	ldr	r3, [r3, #0]
 8006008:	2bef      	cmp	r3, #239	; 0xef
 800600a:	dc19      	bgt.n	8006040 <Work+0x1cc>
		        hue = (yaw - 120.0) * (1.0 / 120.0); // Оттенок для перехода от зеленого к красному
 800600c:	4b3b      	ldr	r3, [pc, #236]	; (80060fc <Work+0x288>)
 800600e:	681b      	ldr	r3, [r3, #0]
 8006010:	0018      	movs	r0, r3
 8006012:	f7fc ff2d 	bl	8002e70 <__aeabi_i2d>
 8006016:	2200      	movs	r2, #0
 8006018:	4b40      	ldr	r3, [pc, #256]	; (800611c <Work+0x2a8>)
 800601a:	f7fc fb43 	bl	80026a4 <__aeabi_dsub>
 800601e:	0002      	movs	r2, r0
 8006020:	000b      	movs	r3, r1
 8006022:	0010      	movs	r0, r2
 8006024:	0019      	movs	r1, r3
 8006026:	4a3b      	ldr	r2, [pc, #236]	; (8006114 <Work+0x2a0>)
 8006028:	4b3b      	ldr	r3, [pc, #236]	; (8006118 <Work+0x2a4>)
 800602a:	f7fc f8cf 	bl	80021cc <__aeabi_dmul>
 800602e:	0002      	movs	r2, r0
 8006030:	000b      	movs	r3, r1
 8006032:	0010      	movs	r0, r2
 8006034:	0019      	movs	r1, r3
 8006036:	f7fc ffb9 	bl	8002fac <__aeabi_d2f>
 800603a:	1c03      	adds	r3, r0, #0
 800603c:	60bb      	str	r3, [r7, #8]
 800603e:	e018      	b.n	8006072 <Work+0x1fe>
		    } else {
		        hue = (yaw - 240.0) * (1.0 / 120.0); // Оттенок для перехода от красного к синему
 8006040:	4b2e      	ldr	r3, [pc, #184]	; (80060fc <Work+0x288>)
 8006042:	681b      	ldr	r3, [r3, #0]
 8006044:	0018      	movs	r0, r3
 8006046:	f7fc ff13 	bl	8002e70 <__aeabi_i2d>
 800604a:	2200      	movs	r2, #0
 800604c:	4b34      	ldr	r3, [pc, #208]	; (8006120 <Work+0x2ac>)
 800604e:	f7fc fb29 	bl	80026a4 <__aeabi_dsub>
 8006052:	0002      	movs	r2, r0
 8006054:	000b      	movs	r3, r1
 8006056:	0010      	movs	r0, r2
 8006058:	0019      	movs	r1, r3
 800605a:	4a2e      	ldr	r2, [pc, #184]	; (8006114 <Work+0x2a0>)
 800605c:	4b2e      	ldr	r3, [pc, #184]	; (8006118 <Work+0x2a4>)
 800605e:	f7fc f8b5 	bl	80021cc <__aeabi_dmul>
 8006062:	0002      	movs	r2, r0
 8006064:	000b      	movs	r3, r1
 8006066:	0010      	movs	r0, r2
 8006068:	0019      	movs	r1, r3
 800606a:	f7fc ff9f 	bl	8002fac <__aeabi_d2f>
 800606e:	1c03      	adds	r3, r0, #0
 8006070:	60bb      	str	r3, [r7, #8]
		    }
		    // Преобразуем оттенок в диапазон [0, 255]
		    uint8_t hueByte = hue * 255;       // Устанавливаем цвет HSV
 8006072:	492c      	ldr	r1, [pc, #176]	; (8006124 <Work+0x2b0>)
 8006074:	68b8      	ldr	r0, [r7, #8]
 8006076:	f7fa fdd1 	bl	8000c1c <__aeabi_fmul>
 800607a:	1c03      	adds	r3, r0, #0
 800607c:	1dfc      	adds	r4, r7, #7
 800607e:	1c18      	adds	r0, r3, #0
 8006080:	f7fa fa30 	bl	80004e4 <__aeabi_f2uiz>
 8006084:	0003      	movs	r3, r0
 8006086:	7023      	strb	r3, [r4, #0]
		    ARGB_SetHSV(0, hueByte, 255, 255); // Saturation и Value оставляем максимальными
 8006088:	1dfb      	adds	r3, r7, #7
 800608a:	7819      	ldrb	r1, [r3, #0]
 800608c:	23ff      	movs	r3, #255	; 0xff
 800608e:	22ff      	movs	r2, #255	; 0xff
 8006090:	2000      	movs	r0, #0
 8006092:	f7fe fae5 	bl	8004660 <ARGB_SetHSV>
		    ARGB_SetHSV(1, hueByte, 255, 255); // Saturation и Value оставляем максимальными
 8006096:	1dfb      	adds	r3, r7, #7
 8006098:	7819      	ldrb	r1, [r3, #0]
 800609a:	23ff      	movs	r3, #255	; 0xff
 800609c:	22ff      	movs	r2, #255	; 0xff
 800609e:	2001      	movs	r0, #1
 80060a0:	f7fe fade 	bl	8004660 <ARGB_SetHSV>
		    ARGB_SetHSV(2, hueByte, 255, 255); // Saturation и Value оставляем максимальными
 80060a4:	1dfb      	adds	r3, r7, #7
 80060a6:	7819      	ldrb	r1, [r3, #0]
 80060a8:	23ff      	movs	r3, #255	; 0xff
 80060aa:	22ff      	movs	r2, #255	; 0xff
 80060ac:	2002      	movs	r0, #2
 80060ae:	f7fe fad7 	bl	8004660 <ARGB_SetHSV>
		    ARGB_SetHSV(3, hueByte, 255, 255); // Saturation и Value оставляем максимальными
 80060b2:	1dfb      	adds	r3, r7, #7
 80060b4:	7819      	ldrb	r1, [r3, #0]
 80060b6:	23ff      	movs	r3, #255	; 0xff
 80060b8:	22ff      	movs	r2, #255	; 0xff
 80060ba:	2003      	movs	r0, #3
 80060bc:	f7fe fad0 	bl	8004660 <ARGB_SetHSV>
		    while (!ARGB_Show());  // Update - Option 2
 80060c0:	f7fe fb36 	bl	8004730 <ARGB_Show>
 80060c4:	0003      	movs	r3, r0
 80060c6:	425a      	negs	r2, r3
 80060c8:	4153      	adcs	r3, r2
 80060ca:	b2db      	uxtb	r3, r3
 80060cc:	2b00      	cmp	r3, #0
 80060ce:	d000      	beq.n	80060d2 <Work+0x25e>
 80060d0:	e7f6      	b.n	80060c0 <Work+0x24c>
		}
	}
	/*if (count >= 100280) {                     //1280
		HAL_TIM_Base_Stop_IT (&htim2);
	}*/
}
 80060d2:	46c0      	nop			; (mov r8, r8)
 80060d4:	46bd      	mov	sp, r7
 80060d6:	b004      	add	sp, #16
 80060d8:	bdb0      	pop	{r4, r5, r7, pc}
 80060da:	46c0      	nop			; (mov r8, r8)
 80060dc:	20000324 	.word	0x20000324
 80060e0:	20000358 	.word	0x20000358
 80060e4:	20000328 	.word	0x20000328
 80060e8:	20000388 	.word	0x20000388
 80060ec:	20000398 	.word	0x20000398
 80060f0:	200003a4 	.word	0x200003a4
 80060f4:	1a63c1f8 	.word	0x1a63c1f8
 80060f8:	404ca5dc 	.word	0x404ca5dc
 80060fc:	200003b0 	.word	0x200003b0
 8006100:	200003b4 	.word	0x200003b4
 8006104:	200003b8 	.word	0x200003b8
 8006108:	200003c4 	.word	0x200003c4
 800610c:	200003bc 	.word	0x200003bc
 8006110:	400c0000 	.word	0x400c0000
 8006114:	11111111 	.word	0x11111111
 8006118:	3f811111 	.word	0x3f811111
 800611c:	405e0000 	.word	0x405e0000
 8006120:	406e0000 	.word	0x406e0000
 8006124:	437f0000 	.word	0x437f0000

08006128 <HAL_GPIO_EXTI_Callback>:

//------------------------------ прерывания ------------------------------------------//
void HAL_GPIO_EXTI_Callback(uint16_t GPIO_Pin) {
 8006128:	b580      	push	{r7, lr}
 800612a:	b082      	sub	sp, #8
 800612c:	af00      	add	r7, sp, #0
 800612e:	0002      	movs	r2, r0
 8006130:	1dbb      	adds	r3, r7, #6
 8006132:	801a      	strh	r2, [r3, #0]
	flag = true;
 8006134:	4b03      	ldr	r3, [pc, #12]	; (8006144 <HAL_GPIO_EXTI_Callback+0x1c>)
 8006136:	2201      	movs	r2, #1
 8006138:	601a      	str	r2, [r3, #0]
}
 800613a:	46c0      	nop			; (mov r8, r8)
 800613c:	46bd      	mov	sp, r7
 800613e:	b002      	add	sp, #8
 8006140:	bd80      	pop	{r7, pc}
 8006142:	46c0      	nop			; (mov r8, r8)
 8006144:	20000324 	.word	0x20000324

08006148 <HAL_TIM_PeriodElapsedCallback>:

void HAL_TIM_PeriodElapsedCallback (TIM_HandleTypeDef *htim3) {
 8006148:	b580      	push	{r7, lr}
 800614a:	b082      	sub	sp, #8
 800614c:	af00      	add	r7, sp, #0
 800614e:	6078      	str	r0, [r7, #4]
	HAL_GPIO_TogglePin(LED_GPIO_Port, LED_Pin);
 8006150:	2380      	movs	r3, #128	; 0x80
 8006152:	019b      	lsls	r3, r3, #6
 8006154:	4a1b      	ldr	r2, [pc, #108]	; (80061c4 <HAL_TIM_PeriodElapsedCallback+0x7c>)
 8006156:	0019      	movs	r1, r3
 8006158:	0010      	movs	r0, r2
 800615a:	f001 f974 	bl	8007446 <HAL_GPIO_TogglePin>
	if (currentAngle < targetAngle) {
 800615e:	4b1a      	ldr	r3, [pc, #104]	; (80061c8 <HAL_TIM_PeriodElapsedCallback+0x80>)
 8006160:	681a      	ldr	r2, [r3, #0]
 8006162:	4b1a      	ldr	r3, [pc, #104]	; (80061cc <HAL_TIM_PeriodElapsedCallback+0x84>)
 8006164:	681b      	ldr	r3, [r3, #0]
 8006166:	429a      	cmp	r2, r3
 8006168:	da10      	bge.n	800618c <HAL_TIM_PeriodElapsedCallback+0x44>
		HAL_GPIO_WritePin(DIR_GPIO_Port, DIR_Pin, GPIO_PIN_RESET);
 800616a:	2380      	movs	r3, #128	; 0x80
 800616c:	00db      	lsls	r3, r3, #3
 800616e:	4818      	ldr	r0, [pc, #96]	; (80061d0 <HAL_TIM_PeriodElapsedCallback+0x88>)
 8006170:	2200      	movs	r2, #0
 8006172:	0019      	movs	r1, r3
 8006174:	f001 f94a 	bl	800740c <HAL_GPIO_WritePin>
		HAL_GPIO_TogglePin(STEP_GPIO_Port, STEP_Pin);
 8006178:	4b15      	ldr	r3, [pc, #84]	; (80061d0 <HAL_TIM_PeriodElapsedCallback+0x88>)
 800617a:	2104      	movs	r1, #4
 800617c:	0018      	movs	r0, r3
 800617e:	f001 f962 	bl	8007446 <HAL_GPIO_TogglePin>
		currentAngle ++;
 8006182:	4b11      	ldr	r3, [pc, #68]	; (80061c8 <HAL_TIM_PeriodElapsedCallback+0x80>)
 8006184:	681b      	ldr	r3, [r3, #0]
 8006186:	1c5a      	adds	r2, r3, #1
 8006188:	4b0f      	ldr	r3, [pc, #60]	; (80061c8 <HAL_TIM_PeriodElapsedCallback+0x80>)
 800618a:	601a      	str	r2, [r3, #0]
	}
	if (currentAngle > targetAngle) {
 800618c:	4b0e      	ldr	r3, [pc, #56]	; (80061c8 <HAL_TIM_PeriodElapsedCallback+0x80>)
 800618e:	681a      	ldr	r2, [r3, #0]
 8006190:	4b0e      	ldr	r3, [pc, #56]	; (80061cc <HAL_TIM_PeriodElapsedCallback+0x84>)
 8006192:	681b      	ldr	r3, [r3, #0]
 8006194:	429a      	cmp	r2, r3
 8006196:	dd10      	ble.n	80061ba <HAL_TIM_PeriodElapsedCallback+0x72>
		HAL_GPIO_WritePin(DIR_GPIO_Port, DIR_Pin, GPIO_PIN_SET);
 8006198:	2380      	movs	r3, #128	; 0x80
 800619a:	00db      	lsls	r3, r3, #3
 800619c:	480c      	ldr	r0, [pc, #48]	; (80061d0 <HAL_TIM_PeriodElapsedCallback+0x88>)
 800619e:	2201      	movs	r2, #1
 80061a0:	0019      	movs	r1, r3
 80061a2:	f001 f933 	bl	800740c <HAL_GPIO_WritePin>
		HAL_GPIO_TogglePin(STEP_GPIO_Port, STEP_Pin);
 80061a6:	4b0a      	ldr	r3, [pc, #40]	; (80061d0 <HAL_TIM_PeriodElapsedCallback+0x88>)
 80061a8:	2104      	movs	r1, #4
 80061aa:	0018      	movs	r0, r3
 80061ac:	f001 f94b 	bl	8007446 <HAL_GPIO_TogglePin>
		currentAngle --;
 80061b0:	4b05      	ldr	r3, [pc, #20]	; (80061c8 <HAL_TIM_PeriodElapsedCallback+0x80>)
 80061b2:	681b      	ldr	r3, [r3, #0]
 80061b4:	1e5a      	subs	r2, r3, #1
 80061b6:	4b04      	ldr	r3, [pc, #16]	; (80061c8 <HAL_TIM_PeriodElapsedCallback+0x80>)
 80061b8:	601a      	str	r2, [r3, #0]
	}
}
 80061ba:	46c0      	nop			; (mov r8, r8)
 80061bc:	46bd      	mov	sp, r7
 80061be:	b002      	add	sp, #8
 80061c0:	bd80      	pop	{r7, pc}
 80061c2:	46c0      	nop			; (mov r8, r8)
 80061c4:	48000800 	.word	0x48000800
 80061c8:	200003c0 	.word	0x200003c0
 80061cc:	200003bc 	.word	0x200003bc
 80061d0:	48000400 	.word	0x48000400

080061d4 <_ZSt4fmodImdEN9__gnu_cxx11__promote_2IT_T0_NS0_9__promoteIS2_XsrSt12__is_integerIS2_E7__valueEE6__typeENS4_IS3_XsrS5_IS3_E7__valueEE6__typeEE6__typeES2_S3_>:
    fmod(_Tp __x, _Up __y)
 80061d4:	b580      	push	{r7, lr}
 80061d6:	b084      	sub	sp, #16
 80061d8:	af00      	add	r7, sp, #0
 80061da:	60f8      	str	r0, [r7, #12]
 80061dc:	603a      	str	r2, [r7, #0]
 80061de:	607b      	str	r3, [r7, #4]
      return fmod(__type(__x), __type(__y));
 80061e0:	68f8      	ldr	r0, [r7, #12]
 80061e2:	f7fc fe75 	bl	8002ed0 <__aeabi_ui2d>
 80061e6:	683a      	ldr	r2, [r7, #0]
 80061e8:	687b      	ldr	r3, [r7, #4]
 80061ea:	f003 fedd 	bl	8009fa8 <fmod>
 80061ee:	0002      	movs	r2, r0
 80061f0:	000b      	movs	r3, r1
    }
 80061f2:	0010      	movs	r0, r2
 80061f4:	0019      	movs	r1, r3
 80061f6:	46bd      	mov	sp, r7
 80061f8:	b004      	add	sp, #16
 80061fa:	bd80      	pop	{r7, pc}

080061fc <_Z41__static_initialization_and_destruction_0ii>:
 80061fc:	b580      	push	{r7, lr}
 80061fe:	b082      	sub	sp, #8
 8006200:	af00      	add	r7, sp, #0
 8006202:	6078      	str	r0, [r7, #4]
 8006204:	6039      	str	r1, [r7, #0]
 8006206:	687b      	ldr	r3, [r7, #4]
 8006208:	2b01      	cmp	r3, #1
 800620a:	d111      	bne.n	8006230 <_Z41__static_initialization_and_destruction_0ii+0x34>
 800620c:	683b      	ldr	r3, [r7, #0]
 800620e:	4a0a      	ldr	r2, [pc, #40]	; (8006238 <_Z41__static_initialization_and_destruction_0ii+0x3c>)
 8006210:	4293      	cmp	r3, r2
 8006212:	d10d      	bne.n	8006230 <_Z41__static_initialization_and_destruction_0ii+0x34>
MPU6050 mpu;
 8006214:	4b09      	ldr	r3, [pc, #36]	; (800623c <_Z41__static_initialization_and_destruction_0ii+0x40>)
 8006216:	2200      	movs	r2, #0
 8006218:	21d0      	movs	r1, #208	; 0xd0
 800621a:	0018      	movs	r0, r3
 800621c:	f7ff fc9a 	bl	8005b54 <_ZN26MPU6050_6Axis_MotionApps20C1EhPv>
Quaternion q;
 8006220:	4b07      	ldr	r3, [pc, #28]	; (8006240 <_Z41__static_initialization_and_destruction_0ii+0x44>)
 8006222:	0018      	movs	r0, r3
 8006224:	f7ff fc6e 	bl	8005b04 <_ZN10QuaternionC1Ev>
VectorFloat gravity;
 8006228:	4b06      	ldr	r3, [pc, #24]	; (8006244 <_Z41__static_initialization_and_destruction_0ii+0x48>)
 800622a:	0018      	movs	r0, r3
 800622c:	f7ff fc80 	bl	8005b30 <_ZN11VectorFloatC1Ev>
}
 8006230:	46c0      	nop			; (mov r8, r8)
 8006232:	46bd      	mov	sp, r7
 8006234:	b002      	add	sp, #8
 8006236:	bd80      	pop	{r7, pc}
 8006238:	0000ffff 	.word	0x0000ffff
 800623c:	20000328 	.word	0x20000328
 8006240:	20000388 	.word	0x20000388
 8006244:	20000398 	.word	0x20000398

08006248 <_GLOBAL__sub_I_flag>:
 8006248:	b580      	push	{r7, lr}
 800624a:	af00      	add	r7, sp, #0
 800624c:	4b03      	ldr	r3, [pc, #12]	; (800625c <_GLOBAL__sub_I_flag+0x14>)
 800624e:	0019      	movs	r1, r3
 8006250:	2001      	movs	r0, #1
 8006252:	f7ff ffd3 	bl	80061fc <_Z41__static_initialization_and_destruction_0ii>
 8006256:	46bd      	mov	sp, r7
 8006258:	bd80      	pop	{r7, pc}
 800625a:	46c0      	nop			; (mov r8, r8)
 800625c:	0000ffff 	.word	0x0000ffff

08006260 <Reset_Handler>:

  .section .text.Reset_Handler
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:
  ldr   r0, =_estack
 8006260:	480d      	ldr	r0, [pc, #52]	; (8006298 <LoopForever+0x2>)
  mov   sp, r0          /* set stack pointer */
 8006262:	4685      	mov	sp, r0
  
/* Call the clock system initialization function.*/
  bl  SystemInit
 8006264:	f7ff fc49 	bl	8005afa <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8006268:	480c      	ldr	r0, [pc, #48]	; (800629c <LoopForever+0x6>)
  ldr r1, =_edata
 800626a:	490d      	ldr	r1, [pc, #52]	; (80062a0 <LoopForever+0xa>)
  ldr r2, =_sidata
 800626c:	4a0d      	ldr	r2, [pc, #52]	; (80062a4 <LoopForever+0xe>)
  movs r3, #0
 800626e:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8006270:	e002      	b.n	8006278 <LoopCopyDataInit>

08006272 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8006272:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8006274:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8006276:	3304      	adds	r3, #4

08006278 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8006278:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 800627a:	428c      	cmp	r4, r1
  bcc CopyDataInit
 800627c:	d3f9      	bcc.n	8006272 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 800627e:	4a0a      	ldr	r2, [pc, #40]	; (80062a8 <LoopForever+0x12>)
  ldr r4, =_ebss
 8006280:	4c0a      	ldr	r4, [pc, #40]	; (80062ac <LoopForever+0x16>)
  movs r3, #0
 8006282:	2300      	movs	r3, #0
  b LoopFillZerobss
 8006284:	e001      	b.n	800628a <LoopFillZerobss>

08006286 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8006286:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8006288:	3204      	adds	r2, #4

0800628a <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 800628a:	42a2      	cmp	r2, r4
  bcc FillZerobss
 800628c:	d3fb      	bcc.n	8006286 <FillZerobss>

/* Call static constructors */
  bl __libc_init_array
 800628e:	f004 f9d7 	bl	800a640 <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 8006292:	f7fe ff99 	bl	80051c8 <main>

08006296 <LoopForever>:

LoopForever:
    b LoopForever
 8006296:	e7fe      	b.n	8006296 <LoopForever>
  ldr   r0, =_estack
 8006298:	20004000 	.word	0x20004000
  ldr r0, =_sdata
 800629c:	20000000 	.word	0x20000000
  ldr r1, =_edata
 80062a0:	20000074 	.word	0x20000074
  ldr r2, =_sidata
 80062a4:	0800b0ec 	.word	0x0800b0ec
  ldr r2, =_sbss
 80062a8:	20000074 	.word	0x20000074
  ldr r4, =_ebss
 80062ac:	200003d4 	.word	0x200003d4

080062b0 <ADC1_COMP_IRQHandler>:
 * @retval : None
*/
    .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 80062b0:	e7fe      	b.n	80062b0 <ADC1_COMP_IRQHandler>
	...

080062b4 <HAL_Init>:
  *       In the default implementation,Systick is used as source of time base.
  *       The tick variable is incremented each 1ms in its ISR.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 80062b4:	b580      	push	{r7, lr}
 80062b6:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch */ 
#if (PREFETCH_ENABLE != 0)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 80062b8:	4b07      	ldr	r3, [pc, #28]	; (80062d8 <HAL_Init+0x24>)
 80062ba:	681a      	ldr	r2, [r3, #0]
 80062bc:	4b06      	ldr	r3, [pc, #24]	; (80062d8 <HAL_Init+0x24>)
 80062be:	2110      	movs	r1, #16
 80062c0:	430a      	orrs	r2, r1
 80062c2:	601a      	str	r2, [r3, #0]
#endif /* PREFETCH_ENABLE */

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */

  HAL_InitTick(TICK_INT_PRIORITY);
 80062c4:	2003      	movs	r0, #3
 80062c6:	f000 f809 	bl	80062dc <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 80062ca:	f7ff fa33 	bl	8005734 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 80062ce:	2300      	movs	r3, #0
}
 80062d0:	0018      	movs	r0, r3
 80062d2:	46bd      	mov	sp, r7
 80062d4:	bd80      	pop	{r7, pc}
 80062d6:	46c0      	nop			; (mov r8, r8)
 80062d8:	40022000 	.word	0x40022000

080062dc <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 80062dc:	b590      	push	{r4, r7, lr}
 80062de:	b083      	sub	sp, #12
 80062e0:	af00      	add	r7, sp, #0
 80062e2:	6078      	str	r0, [r7, #4]
  /*Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 80062e4:	4b14      	ldr	r3, [pc, #80]	; (8006338 <HAL_InitTick+0x5c>)
 80062e6:	681c      	ldr	r4, [r3, #0]
 80062e8:	4b14      	ldr	r3, [pc, #80]	; (800633c <HAL_InitTick+0x60>)
 80062ea:	781b      	ldrb	r3, [r3, #0]
 80062ec:	0019      	movs	r1, r3
 80062ee:	23fa      	movs	r3, #250	; 0xfa
 80062f0:	0098      	lsls	r0, r3, #2
 80062f2:	f7f9 ff09 	bl	8000108 <__udivsi3>
 80062f6:	0003      	movs	r3, r0
 80062f8:	0019      	movs	r1, r3
 80062fa:	0020      	movs	r0, r4
 80062fc:	f7f9 ff04 	bl	8000108 <__udivsi3>
 8006300:	0003      	movs	r3, r0
 8006302:	0018      	movs	r0, r3
 8006304:	f000 fd1f 	bl	8006d46 <HAL_SYSTICK_Config>
 8006308:	1e03      	subs	r3, r0, #0
 800630a:	d001      	beq.n	8006310 <HAL_InitTick+0x34>
  {
    return HAL_ERROR;
 800630c:	2301      	movs	r3, #1
 800630e:	e00f      	b.n	8006330 <HAL_InitTick+0x54>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8006310:	687b      	ldr	r3, [r7, #4]
 8006312:	2b03      	cmp	r3, #3
 8006314:	d80b      	bhi.n	800632e <HAL_InitTick+0x52>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8006316:	6879      	ldr	r1, [r7, #4]
 8006318:	2301      	movs	r3, #1
 800631a:	425b      	negs	r3, r3
 800631c:	2200      	movs	r2, #0
 800631e:	0018      	movs	r0, r3
 8006320:	f000 fcec 	bl	8006cfc <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8006324:	4b06      	ldr	r3, [pc, #24]	; (8006340 <HAL_InitTick+0x64>)
 8006326:	687a      	ldr	r2, [r7, #4]
 8006328:	601a      	str	r2, [r3, #0]
  {
    return HAL_ERROR;
  }

   /* Return function status */
  return HAL_OK;
 800632a:	2300      	movs	r3, #0
 800632c:	e000      	b.n	8006330 <HAL_InitTick+0x54>
    return HAL_ERROR;
 800632e:	2301      	movs	r3, #1
}
 8006330:	0018      	movs	r0, r3
 8006332:	46bd      	mov	sp, r7
 8006334:	b003      	add	sp, #12
 8006336:	bd90      	pop	{r4, r7, pc}
 8006338:	20000004 	.word	0x20000004
 800633c:	2000000c 	.word	0x2000000c
 8006340:	20000008 	.word	0x20000008

08006344 <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8006344:	b580      	push	{r7, lr}
 8006346:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8006348:	4b05      	ldr	r3, [pc, #20]	; (8006360 <HAL_IncTick+0x1c>)
 800634a:	781b      	ldrb	r3, [r3, #0]
 800634c:	001a      	movs	r2, r3
 800634e:	4b05      	ldr	r3, [pc, #20]	; (8006364 <HAL_IncTick+0x20>)
 8006350:	681b      	ldr	r3, [r3, #0]
 8006352:	18d2      	adds	r2, r2, r3
 8006354:	4b03      	ldr	r3, [pc, #12]	; (8006364 <HAL_IncTick+0x20>)
 8006356:	601a      	str	r2, [r3, #0]
}
 8006358:	46c0      	nop			; (mov r8, r8)
 800635a:	46bd      	mov	sp, r7
 800635c:	bd80      	pop	{r7, pc}
 800635e:	46c0      	nop			; (mov r8, r8)
 8006360:	2000000c 	.word	0x2000000c
 8006364:	200003c8 	.word	0x200003c8

08006368 <HAL_GetTick>:
  * @note   This function is declared as __weak  to be overwritten  in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8006368:	b580      	push	{r7, lr}
 800636a:	af00      	add	r7, sp, #0
  return uwTick;
 800636c:	4b02      	ldr	r3, [pc, #8]	; (8006378 <HAL_GetTick+0x10>)
 800636e:	681b      	ldr	r3, [r3, #0]
}
 8006370:	0018      	movs	r0, r3
 8006372:	46bd      	mov	sp, r7
 8006374:	bd80      	pop	{r7, pc}
 8006376:	46c0      	nop			; (mov r8, r8)
 8006378:	200003c8 	.word	0x200003c8

0800637c <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 800637c:	b580      	push	{r7, lr}
 800637e:	b084      	sub	sp, #16
 8006380:	af00      	add	r7, sp, #0
 8006382:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8006384:	f7ff fff0 	bl	8006368 <HAL_GetTick>
 8006388:	0003      	movs	r3, r0
 800638a:	60bb      	str	r3, [r7, #8]
  uint32_t wait = Delay;
 800638c:	687b      	ldr	r3, [r7, #4]
 800638e:	60fb      	str	r3, [r7, #12]
  
  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8006390:	68fb      	ldr	r3, [r7, #12]
 8006392:	3301      	adds	r3, #1
 8006394:	d005      	beq.n	80063a2 <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8006396:	4b0a      	ldr	r3, [pc, #40]	; (80063c0 <HAL_Delay+0x44>)
 8006398:	781b      	ldrb	r3, [r3, #0]
 800639a:	001a      	movs	r2, r3
 800639c:	68fb      	ldr	r3, [r7, #12]
 800639e:	189b      	adds	r3, r3, r2
 80063a0:	60fb      	str	r3, [r7, #12]
  }
  
  while((HAL_GetTick() - tickstart) < wait)
 80063a2:	46c0      	nop			; (mov r8, r8)
 80063a4:	f7ff ffe0 	bl	8006368 <HAL_GetTick>
 80063a8:	0002      	movs	r2, r0
 80063aa:	68bb      	ldr	r3, [r7, #8]
 80063ac:	1ad3      	subs	r3, r2, r3
 80063ae:	68fa      	ldr	r2, [r7, #12]
 80063b0:	429a      	cmp	r2, r3
 80063b2:	d8f7      	bhi.n	80063a4 <HAL_Delay+0x28>
  {
  }
}
 80063b4:	46c0      	nop			; (mov r8, r8)
 80063b6:	46c0      	nop			; (mov r8, r8)
 80063b8:	46bd      	mov	sp, r7
 80063ba:	b004      	add	sp, #16
 80063bc:	bd80      	pop	{r7, pc}
 80063be:	46c0      	nop			; (mov r8, r8)
 80063c0:	2000000c 	.word	0x2000000c

080063c4 <HAL_ADC_Init>:
  *         of structure "ADC_InitTypeDef".
  * @param  hadc ADC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Init(ADC_HandleTypeDef* hadc)
{
 80063c4:	b580      	push	{r7, lr}
 80063c6:	b084      	sub	sp, #16
 80063c8:	af00      	add	r7, sp, #0
 80063ca:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 80063cc:	230f      	movs	r3, #15
 80063ce:	18fb      	adds	r3, r7, r3
 80063d0:	2200      	movs	r2, #0
 80063d2:	701a      	strb	r2, [r3, #0]
  uint32_t tmpCFGR1 = 0U;
 80063d4:	2300      	movs	r3, #0
 80063d6:	60bb      	str	r3, [r7, #8]

  /* Check ADC handle */
  if(hadc == NULL)
 80063d8:	687b      	ldr	r3, [r7, #4]
 80063da:	2b00      	cmp	r3, #0
 80063dc:	d101      	bne.n	80063e2 <HAL_ADC_Init+0x1e>
  {
    return HAL_ERROR;
 80063de:	2301      	movs	r3, #1
 80063e0:	e125      	b.n	800662e <HAL_ADC_Init+0x26a>
  /* Refer to header of this file for more details on clock enabling procedure*/
  
  /* Actions performed only if ADC is coming from state reset:                */
  /* - Initialization of ADC MSP                                              */
  /* - ADC voltage regulator enable                                           */
  if (hadc->State == HAL_ADC_STATE_RESET)
 80063e2:	687b      	ldr	r3, [r7, #4]
 80063e4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80063e6:	2b00      	cmp	r3, #0
 80063e8:	d10a      	bne.n	8006400 <HAL_ADC_Init+0x3c>
  {
    /* Initialize ADC error code */
    ADC_CLEAR_ERRORCODE(hadc);
 80063ea:	687b      	ldr	r3, [r7, #4]
 80063ec:	2200      	movs	r2, #0
 80063ee:	63da      	str	r2, [r3, #60]	; 0x3c
    
    /* Allocate lock resource and initialize it */
    hadc->Lock = HAL_UNLOCKED;
 80063f0:	687b      	ldr	r3, [r7, #4]
 80063f2:	2234      	movs	r2, #52	; 0x34
 80063f4:	2100      	movs	r1, #0
 80063f6:	5499      	strb	r1, [r3, r2]
    
    /* Init the low level hardware */
    hadc->MspInitCallback(hadc);
#else
    /* Init the low level hardware */
    HAL_ADC_MspInit(hadc);
 80063f8:	687b      	ldr	r3, [r7, #4]
 80063fa:	0018      	movs	r0, r3
 80063fc:	f7ff f9be 	bl	800577c <HAL_ADC_MspInit>
  /* Configuration of ADC parameters if previous preliminary actions are      */ 
  /* correctly completed.                                                     */
  /* and if there is no conversion on going on regular group (ADC can be      */ 
  /* enabled anyway, in case of call of this function to update a parameter   */
  /* on the fly).                                                             */
  if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL) &&
 8006400:	687b      	ldr	r3, [r7, #4]
 8006402:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006404:	2210      	movs	r2, #16
 8006406:	4013      	ands	r3, r2
 8006408:	d000      	beq.n	800640c <HAL_ADC_Init+0x48>
 800640a:	e103      	b.n	8006614 <HAL_ADC_Init+0x250>
 800640c:	230f      	movs	r3, #15
 800640e:	18fb      	adds	r3, r7, r3
 8006410:	781b      	ldrb	r3, [r3, #0]
 8006412:	2b00      	cmp	r3, #0
 8006414:	d000      	beq.n	8006418 <HAL_ADC_Init+0x54>
 8006416:	e0fd      	b.n	8006614 <HAL_ADC_Init+0x250>
      (tmp_hal_status == HAL_OK)                                &&
      (ADC_IS_CONVERSION_ONGOING_REGULAR(hadc) == RESET)          )
 8006418:	687b      	ldr	r3, [r7, #4]
 800641a:	681b      	ldr	r3, [r3, #0]
 800641c:	689b      	ldr	r3, [r3, #8]
 800641e:	2204      	movs	r2, #4
 8006420:	4013      	ands	r3, r2
      (tmp_hal_status == HAL_OK)                                &&
 8006422:	d000      	beq.n	8006426 <HAL_ADC_Init+0x62>
 8006424:	e0f6      	b.n	8006614 <HAL_ADC_Init+0x250>
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8006426:	687b      	ldr	r3, [r7, #4]
 8006428:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800642a:	4a83      	ldr	r2, [pc, #524]	; (8006638 <HAL_ADC_Init+0x274>)
 800642c:	4013      	ands	r3, r2
 800642e:	2202      	movs	r2, #2
 8006430:	431a      	orrs	r2, r3
 8006432:	687b      	ldr	r3, [r7, #4]
 8006434:	639a      	str	r2, [r3, #56]	; 0x38
    /* Parameters update conditioned to ADC state:                            */
    /* Parameters that can be updated only when ADC is disabled:              */
    /*  - ADC clock mode                                                      */
    /*  - ADC clock prescaler                                                 */
    /*  - ADC resolution                                                      */
    if (ADC_IS_ENABLE(hadc) == RESET)
 8006436:	687b      	ldr	r3, [r7, #4]
 8006438:	681b      	ldr	r3, [r3, #0]
 800643a:	689b      	ldr	r3, [r3, #8]
 800643c:	2203      	movs	r2, #3
 800643e:	4013      	ands	r3, r2
 8006440:	2b01      	cmp	r3, #1
 8006442:	d112      	bne.n	800646a <HAL_ADC_Init+0xa6>
 8006444:	687b      	ldr	r3, [r7, #4]
 8006446:	681b      	ldr	r3, [r3, #0]
 8006448:	681b      	ldr	r3, [r3, #0]
 800644a:	2201      	movs	r2, #1
 800644c:	4013      	ands	r3, r2
 800644e:	2b01      	cmp	r3, #1
 8006450:	d009      	beq.n	8006466 <HAL_ADC_Init+0xa2>
 8006452:	687b      	ldr	r3, [r7, #4]
 8006454:	681b      	ldr	r3, [r3, #0]
 8006456:	68da      	ldr	r2, [r3, #12]
 8006458:	2380      	movs	r3, #128	; 0x80
 800645a:	021b      	lsls	r3, r3, #8
 800645c:	401a      	ands	r2, r3
 800645e:	2380      	movs	r3, #128	; 0x80
 8006460:	021b      	lsls	r3, r3, #8
 8006462:	429a      	cmp	r2, r3
 8006464:	d101      	bne.n	800646a <HAL_ADC_Init+0xa6>
 8006466:	2301      	movs	r3, #1
 8006468:	e000      	b.n	800646c <HAL_ADC_Init+0xa8>
 800646a:	2300      	movs	r3, #0
 800646c:	2b00      	cmp	r3, #0
 800646e:	d116      	bne.n	800649e <HAL_ADC_Init+0xda>
      /* parameters):                                                         */
      /*   - internal measurement paths: Vbat, temperature sensor, Vref       */
      /*     (set into HAL_ADC_ConfigChannel() )                              */
     
      /* Configuration of ADC resolution                                      */
      MODIFY_REG(hadc->Instance->CFGR1,
 8006470:	687b      	ldr	r3, [r7, #4]
 8006472:	681b      	ldr	r3, [r3, #0]
 8006474:	68db      	ldr	r3, [r3, #12]
 8006476:	2218      	movs	r2, #24
 8006478:	4393      	bics	r3, r2
 800647a:	0019      	movs	r1, r3
 800647c:	687b      	ldr	r3, [r7, #4]
 800647e:	689a      	ldr	r2, [r3, #8]
 8006480:	687b      	ldr	r3, [r7, #4]
 8006482:	681b      	ldr	r3, [r3, #0]
 8006484:	430a      	orrs	r2, r1
 8006486:	60da      	str	r2, [r3, #12]
                 ADC_CFGR1_RES        ,
                 hadc->Init.Resolution );
      
      /* Configuration of ADC clock mode: clock source AHB or HSI with        */
      /* selectable prescaler                                                 */
      MODIFY_REG(hadc->Instance->CFGR2    ,
 8006488:	687b      	ldr	r3, [r7, #4]
 800648a:	681b      	ldr	r3, [r3, #0]
 800648c:	691b      	ldr	r3, [r3, #16]
 800648e:	009b      	lsls	r3, r3, #2
 8006490:	0899      	lsrs	r1, r3, #2
 8006492:	687b      	ldr	r3, [r7, #4]
 8006494:	685a      	ldr	r2, [r3, #4]
 8006496:	687b      	ldr	r3, [r7, #4]
 8006498:	681b      	ldr	r3, [r3, #0]
 800649a:	430a      	orrs	r2, r1
 800649c:	611a      	str	r2, [r3, #16]
    /*  - external trigger polarity                                           */
    /*  - data alignment                                                      */
    /*  - resolution                                                          */
    /*  - scan direction                                                      */
    /*  - DMA continuous request                                              */
    hadc->Instance->CFGR1 &= ~( ADC_CFGR1_DISCEN  |
 800649e:	687b      	ldr	r3, [r7, #4]
 80064a0:	681b      	ldr	r3, [r3, #0]
 80064a2:	68da      	ldr	r2, [r3, #12]
 80064a4:	687b      	ldr	r3, [r7, #4]
 80064a6:	681b      	ldr	r3, [r3, #0]
 80064a8:	4964      	ldr	r1, [pc, #400]	; (800663c <HAL_ADC_Init+0x278>)
 80064aa:	400a      	ands	r2, r1
 80064ac:	60da      	str	r2, [r3, #12]
                                ADC_CFGR1_EXTEN   |
                                ADC_CFGR1_ALIGN   |
                                ADC_CFGR1_SCANDIR |
                                ADC_CFGR1_DMACFG   );

    tmpCFGR1 |= (ADC_CFGR1_AUTOWAIT((uint32_t)hadc->Init.LowPowerAutoWait)        |
 80064ae:	687b      	ldr	r3, [r7, #4]
 80064b0:	7e1b      	ldrb	r3, [r3, #24]
 80064b2:	039a      	lsls	r2, r3, #14
                 ADC_CFGR1_AUTOOFF((uint32_t)hadc->Init.LowPowerAutoPowerOff)     |
 80064b4:	687b      	ldr	r3, [r7, #4]
 80064b6:	7e5b      	ldrb	r3, [r3, #25]
 80064b8:	03db      	lsls	r3, r3, #15
    tmpCFGR1 |= (ADC_CFGR1_AUTOWAIT((uint32_t)hadc->Init.LowPowerAutoWait)        |
 80064ba:	431a      	orrs	r2, r3
                 ADC_CFGR1_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)    |
 80064bc:	687b      	ldr	r3, [r7, #4]
 80064be:	7e9b      	ldrb	r3, [r3, #26]
 80064c0:	035b      	lsls	r3, r3, #13
                 ADC_CFGR1_AUTOOFF((uint32_t)hadc->Init.LowPowerAutoPowerOff)     |
 80064c2:	431a      	orrs	r2, r3
                 ADC_CFGR1_OVERRUN(hadc->Init.Overrun)                            |
 80064c4:	687b      	ldr	r3, [r7, #4]
 80064c6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80064c8:	2b01      	cmp	r3, #1
 80064ca:	d002      	beq.n	80064d2 <HAL_ADC_Init+0x10e>
 80064cc:	2380      	movs	r3, #128	; 0x80
 80064ce:	015b      	lsls	r3, r3, #5
 80064d0:	e000      	b.n	80064d4 <HAL_ADC_Init+0x110>
 80064d2:	2300      	movs	r3, #0
                 ADC_CFGR1_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)    |
 80064d4:	431a      	orrs	r2, r3
                 hadc->Init.DataAlign                                             |
 80064d6:	687b      	ldr	r3, [r7, #4]
 80064d8:	68db      	ldr	r3, [r3, #12]
                 ADC_CFGR1_OVERRUN(hadc->Init.Overrun)                            |
 80064da:	431a      	orrs	r2, r3
                 ADC_SCANDIR(hadc->Init.ScanConvMode)                             |
 80064dc:	687b      	ldr	r3, [r7, #4]
 80064de:	691b      	ldr	r3, [r3, #16]
 80064e0:	2b02      	cmp	r3, #2
 80064e2:	d101      	bne.n	80064e8 <HAL_ADC_Init+0x124>
 80064e4:	2304      	movs	r3, #4
 80064e6:	e000      	b.n	80064ea <HAL_ADC_Init+0x126>
 80064e8:	2300      	movs	r3, #0
                 hadc->Init.DataAlign                                             |
 80064ea:	431a      	orrs	r2, r3
                 ADC_CFGR1_DMACONTREQ((uint32_t)hadc->Init.DMAContinuousRequests)  );
 80064ec:	687b      	ldr	r3, [r7, #4]
 80064ee:	2124      	movs	r1, #36	; 0x24
 80064f0:	5c5b      	ldrb	r3, [r3, r1]
 80064f2:	005b      	lsls	r3, r3, #1
                 ADC_SCANDIR(hadc->Init.ScanConvMode)                             |
 80064f4:	4313      	orrs	r3, r2
    tmpCFGR1 |= (ADC_CFGR1_AUTOWAIT((uint32_t)hadc->Init.LowPowerAutoWait)        |
 80064f6:	68ba      	ldr	r2, [r7, #8]
 80064f8:	4313      	orrs	r3, r2
 80064fa:	60bb      	str	r3, [r7, #8]
    
    /* Enable discontinuous mode only if continuous mode is disabled */
    if (hadc->Init.DiscontinuousConvMode == ENABLE)
 80064fc:	687b      	ldr	r3, [r7, #4]
 80064fe:	7edb      	ldrb	r3, [r3, #27]
 8006500:	2b01      	cmp	r3, #1
 8006502:	d115      	bne.n	8006530 <HAL_ADC_Init+0x16c>
    {
      if (hadc->Init.ContinuousConvMode == DISABLE)
 8006504:	687b      	ldr	r3, [r7, #4]
 8006506:	7e9b      	ldrb	r3, [r3, #26]
 8006508:	2b00      	cmp	r3, #0
 800650a:	d105      	bne.n	8006518 <HAL_ADC_Init+0x154>
      {
        /* Enable the selected ADC group regular discontinuous mode */
        tmpCFGR1 |= ADC_CFGR1_DISCEN;
 800650c:	68bb      	ldr	r3, [r7, #8]
 800650e:	2280      	movs	r2, #128	; 0x80
 8006510:	0252      	lsls	r2, r2, #9
 8006512:	4313      	orrs	r3, r2
 8006514:	60bb      	str	r3, [r7, #8]
 8006516:	e00b      	b.n	8006530 <HAL_ADC_Init+0x16c>
        /* ADC regular group discontinuous was intended to be enabled,        */
        /* but ADC regular group modes continuous and sequencer discontinuous */
        /* cannot be enabled simultaneously.                                  */
        
        /* Update ADC state machine to error */
        SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8006518:	687b      	ldr	r3, [r7, #4]
 800651a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800651c:	2220      	movs	r2, #32
 800651e:	431a      	orrs	r2, r3
 8006520:	687b      	ldr	r3, [r7, #4]
 8006522:	639a      	str	r2, [r3, #56]	; 0x38
        
        /* Set ADC error code to ADC IP internal error */
        SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8006524:	687b      	ldr	r3, [r7, #4]
 8006526:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8006528:	2201      	movs	r2, #1
 800652a:	431a      	orrs	r2, r3
 800652c:	687b      	ldr	r3, [r7, #4]
 800652e:	63da      	str	r2, [r3, #60]	; 0x3c
    /* Enable external trigger if trigger selection is different of software  */
    /* start.                                                                 */
    /* Note: This configuration keeps the hardware feature of parameter       */
    /*       ExternalTrigConvEdge "trigger edge none" equivalent to           */
    /*       software start.                                                  */
    if (hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
 8006530:	687b      	ldr	r3, [r7, #4]
 8006532:	69da      	ldr	r2, [r3, #28]
 8006534:	23c2      	movs	r3, #194	; 0xc2
 8006536:	33ff      	adds	r3, #255	; 0xff
 8006538:	429a      	cmp	r2, r3
 800653a:	d007      	beq.n	800654c <HAL_ADC_Init+0x188>
    {
      tmpCFGR1 |= ( hadc->Init.ExternalTrigConv    |
 800653c:	687b      	ldr	r3, [r7, #4]
 800653e:	69da      	ldr	r2, [r3, #28]
                    hadc->Init.ExternalTrigConvEdge );
 8006540:	687b      	ldr	r3, [r7, #4]
 8006542:	6a1b      	ldr	r3, [r3, #32]
      tmpCFGR1 |= ( hadc->Init.ExternalTrigConv    |
 8006544:	4313      	orrs	r3, r2
 8006546:	68ba      	ldr	r2, [r7, #8]
 8006548:	4313      	orrs	r3, r2
 800654a:	60bb      	str	r3, [r7, #8]
    }
    
    /* Update ADC configuration register with previous settings */
    hadc->Instance->CFGR1 |= tmpCFGR1;
 800654c:	687b      	ldr	r3, [r7, #4]
 800654e:	681b      	ldr	r3, [r3, #0]
 8006550:	68d9      	ldr	r1, [r3, #12]
 8006552:	687b      	ldr	r3, [r7, #4]
 8006554:	681b      	ldr	r3, [r3, #0]
 8006556:	68ba      	ldr	r2, [r7, #8]
 8006558:	430a      	orrs	r2, r1
 800655a:	60da      	str	r2, [r3, #12]
    /* Management of parameters "SamplingTimeCommon" and "SamplingTime"       */
    /* (obsolete): sampling time set in this function if parameter            */
    /*  "SamplingTimeCommon" has been set to a valid sampling time.           */
    /* Otherwise, sampling time is set into ADC channel initialization        */
    /* structure with parameter "SamplingTime" (obsolete).                    */
    if (IS_ADC_SAMPLE_TIME(hadc->Init.SamplingTimeCommon))
 800655c:	687b      	ldr	r3, [r7, #4]
 800655e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8006560:	2380      	movs	r3, #128	; 0x80
 8006562:	055b      	lsls	r3, r3, #21
 8006564:	429a      	cmp	r2, r3
 8006566:	d01b      	beq.n	80065a0 <HAL_ADC_Init+0x1dc>
 8006568:	687b      	ldr	r3, [r7, #4]
 800656a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800656c:	2b01      	cmp	r3, #1
 800656e:	d017      	beq.n	80065a0 <HAL_ADC_Init+0x1dc>
 8006570:	687b      	ldr	r3, [r7, #4]
 8006572:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006574:	2b02      	cmp	r3, #2
 8006576:	d013      	beq.n	80065a0 <HAL_ADC_Init+0x1dc>
 8006578:	687b      	ldr	r3, [r7, #4]
 800657a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800657c:	2b03      	cmp	r3, #3
 800657e:	d00f      	beq.n	80065a0 <HAL_ADC_Init+0x1dc>
 8006580:	687b      	ldr	r3, [r7, #4]
 8006582:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006584:	2b04      	cmp	r3, #4
 8006586:	d00b      	beq.n	80065a0 <HAL_ADC_Init+0x1dc>
 8006588:	687b      	ldr	r3, [r7, #4]
 800658a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800658c:	2b05      	cmp	r3, #5
 800658e:	d007      	beq.n	80065a0 <HAL_ADC_Init+0x1dc>
 8006590:	687b      	ldr	r3, [r7, #4]
 8006592:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006594:	2b06      	cmp	r3, #6
 8006596:	d003      	beq.n	80065a0 <HAL_ADC_Init+0x1dc>
 8006598:	687b      	ldr	r3, [r7, #4]
 800659a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800659c:	2b07      	cmp	r3, #7
 800659e:	d112      	bne.n	80065c6 <HAL_ADC_Init+0x202>
    {
      /* Channel sampling time configuration */
      /* Clear the old sample time */
      hadc->Instance->SMPR &= ~(ADC_SMPR_SMP);
 80065a0:	687b      	ldr	r3, [r7, #4]
 80065a2:	681b      	ldr	r3, [r3, #0]
 80065a4:	695a      	ldr	r2, [r3, #20]
 80065a6:	687b      	ldr	r3, [r7, #4]
 80065a8:	681b      	ldr	r3, [r3, #0]
 80065aa:	2107      	movs	r1, #7
 80065ac:	438a      	bics	r2, r1
 80065ae:	615a      	str	r2, [r3, #20]
      
      /* Set the new sample time */
      hadc->Instance->SMPR |= ADC_SMPR_SET(hadc->Init.SamplingTimeCommon);
 80065b0:	687b      	ldr	r3, [r7, #4]
 80065b2:	681b      	ldr	r3, [r3, #0]
 80065b4:	6959      	ldr	r1, [r3, #20]
 80065b6:	687b      	ldr	r3, [r7, #4]
 80065b8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80065ba:	2207      	movs	r2, #7
 80065bc:	401a      	ands	r2, r3
 80065be:	687b      	ldr	r3, [r7, #4]
 80065c0:	681b      	ldr	r3, [r3, #0]
 80065c2:	430a      	orrs	r2, r1
 80065c4:	615a      	str	r2, [r3, #20]
    /* Check back that ADC registers have effectively been configured to      */
    /* ensure of no potential problem of ADC core IP clocking.                */
    /* Check through register CFGR1 (excluding analog watchdog configuration: */
    /* set into separate dedicated function, and bits of ADC resolution set   */
    /* out of temporary variable 'tmpCFGR1').                                 */
    if ((hadc->Instance->CFGR1 & ~(ADC_CFGR1_AWDCH | ADC_CFGR1_AWDEN | ADC_CFGR1_AWDSGL | ADC_CFGR1_RES))
 80065c6:	687b      	ldr	r3, [r7, #4]
 80065c8:	681b      	ldr	r3, [r3, #0]
 80065ca:	68db      	ldr	r3, [r3, #12]
 80065cc:	4a1c      	ldr	r2, [pc, #112]	; (8006640 <HAL_ADC_Init+0x27c>)
 80065ce:	4013      	ands	r3, r2
 80065d0:	68ba      	ldr	r2, [r7, #8]
 80065d2:	429a      	cmp	r2, r3
 80065d4:	d10b      	bne.n	80065ee <HAL_ADC_Init+0x22a>
         == tmpCFGR1)
    {
      /* Set ADC error code to none */
      ADC_CLEAR_ERRORCODE(hadc);
 80065d6:	687b      	ldr	r3, [r7, #4]
 80065d8:	2200      	movs	r2, #0
 80065da:	63da      	str	r2, [r3, #60]	; 0x3c
      
      /* Set the ADC state */
      ADC_STATE_CLR_SET(hadc->State,
 80065dc:	687b      	ldr	r3, [r7, #4]
 80065de:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80065e0:	2203      	movs	r2, #3
 80065e2:	4393      	bics	r3, r2
 80065e4:	2201      	movs	r2, #1
 80065e6:	431a      	orrs	r2, r3
 80065e8:	687b      	ldr	r3, [r7, #4]
 80065ea:	639a      	str	r2, [r3, #56]	; 0x38
    if ((hadc->Instance->CFGR1 & ~(ADC_CFGR1_AWDCH | ADC_CFGR1_AWDEN | ADC_CFGR1_AWDSGL | ADC_CFGR1_RES))
 80065ec:	e01c      	b.n	8006628 <HAL_ADC_Init+0x264>
                        HAL_ADC_STATE_READY);
    }
    else
    {
      /* Update ADC state machine to error */
      ADC_STATE_CLR_SET(hadc->State,
 80065ee:	687b      	ldr	r3, [r7, #4]
 80065f0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80065f2:	2212      	movs	r2, #18
 80065f4:	4393      	bics	r3, r2
 80065f6:	2210      	movs	r2, #16
 80065f8:	431a      	orrs	r2, r3
 80065fa:	687b      	ldr	r3, [r7, #4]
 80065fc:	639a      	str	r2, [r3, #56]	; 0x38
                        HAL_ADC_STATE_BUSY_INTERNAL,
                        HAL_ADC_STATE_ERROR_INTERNAL);
      
      /* Set ADC error code to ADC IP internal error */
      SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 80065fe:	687b      	ldr	r3, [r7, #4]
 8006600:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8006602:	2201      	movs	r2, #1
 8006604:	431a      	orrs	r2, r3
 8006606:	687b      	ldr	r3, [r7, #4]
 8006608:	63da      	str	r2, [r3, #60]	; 0x3c
      
      tmp_hal_status = HAL_ERROR;
 800660a:	230f      	movs	r3, #15
 800660c:	18fb      	adds	r3, r7, r3
 800660e:	2201      	movs	r2, #1
 8006610:	701a      	strb	r2, [r3, #0]
    if ((hadc->Instance->CFGR1 & ~(ADC_CFGR1_AWDCH | ADC_CFGR1_AWDEN | ADC_CFGR1_AWDSGL | ADC_CFGR1_RES))
 8006612:	e009      	b.n	8006628 <HAL_ADC_Init+0x264>
  
  }
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8006614:	687b      	ldr	r3, [r7, #4]
 8006616:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006618:	2210      	movs	r2, #16
 800661a:	431a      	orrs	r2, r3
 800661c:	687b      	ldr	r3, [r7, #4]
 800661e:	639a      	str	r2, [r3, #56]	; 0x38
        
    tmp_hal_status = HAL_ERROR;
 8006620:	230f      	movs	r3, #15
 8006622:	18fb      	adds	r3, r7, r3
 8006624:	2201      	movs	r2, #1
 8006626:	701a      	strb	r2, [r3, #0]
  }
  
  /* Return function status */
  return tmp_hal_status;
 8006628:	230f      	movs	r3, #15
 800662a:	18fb      	adds	r3, r7, r3
 800662c:	781b      	ldrb	r3, [r3, #0]
}
 800662e:	0018      	movs	r0, r3
 8006630:	46bd      	mov	sp, r7
 8006632:	b004      	add	sp, #16
 8006634:	bd80      	pop	{r7, pc}
 8006636:	46c0      	nop			; (mov r8, r8)
 8006638:	fffffefd 	.word	0xfffffefd
 800663c:	fffe0219 	.word	0xfffe0219
 8006640:	833fffe7 	.word	0x833fffe7

08006644 <HAL_ADC_Start_DMA>:
  * @param  pData The destination Buffer address.
  * @param  Length The length of data to be transferred from ADC peripheral to memory.
  * @retval None
  */
HAL_StatusTypeDef HAL_ADC_Start_DMA(ADC_HandleTypeDef* hadc, uint32_t* pData, uint32_t Length)
{
 8006644:	b590      	push	{r4, r7, lr}
 8006646:	b087      	sub	sp, #28
 8006648:	af00      	add	r7, sp, #0
 800664a:	60f8      	str	r0, [r7, #12]
 800664c:	60b9      	str	r1, [r7, #8]
 800664e:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8006650:	2317      	movs	r3, #23
 8006652:	18fb      	adds	r3, r7, r3
 8006654:	2200      	movs	r2, #0
 8006656:	701a      	strb	r2, [r3, #0]
  
  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));

  /* Perform ADC enable and conversion start if no conversion is on going */
  if (ADC_IS_CONVERSION_ONGOING_REGULAR(hadc) == RESET)
 8006658:	68fb      	ldr	r3, [r7, #12]
 800665a:	681b      	ldr	r3, [r3, #0]
 800665c:	689b      	ldr	r3, [r3, #8]
 800665e:	2204      	movs	r2, #4
 8006660:	4013      	ands	r3, r2
 8006662:	d15e      	bne.n	8006722 <HAL_ADC_Start_DMA+0xde>
  {
    /* Process locked */
    __HAL_LOCK(hadc);
 8006664:	68fb      	ldr	r3, [r7, #12]
 8006666:	2234      	movs	r2, #52	; 0x34
 8006668:	5c9b      	ldrb	r3, [r3, r2]
 800666a:	2b01      	cmp	r3, #1
 800666c:	d101      	bne.n	8006672 <HAL_ADC_Start_DMA+0x2e>
 800666e:	2302      	movs	r3, #2
 8006670:	e05e      	b.n	8006730 <HAL_ADC_Start_DMA+0xec>
 8006672:	68fb      	ldr	r3, [r7, #12]
 8006674:	2234      	movs	r2, #52	; 0x34
 8006676:	2101      	movs	r1, #1
 8006678:	5499      	strb	r1, [r3, r2]

    /* Enable the ADC peripheral */
    /* If low power mode AutoPowerOff is enabled, power-on/off phases are       */
    /* performed automatically by hardware.                                     */
    if (hadc->Init.LowPowerAutoPowerOff != ENABLE)
 800667a:	68fb      	ldr	r3, [r7, #12]
 800667c:	7e5b      	ldrb	r3, [r3, #25]
 800667e:	2b01      	cmp	r3, #1
 8006680:	d007      	beq.n	8006692 <HAL_ADC_Start_DMA+0x4e>
    {
      tmp_hal_status = ADC_Enable(hadc);
 8006682:	2317      	movs	r3, #23
 8006684:	18fc      	adds	r4, r7, r3
 8006686:	68fb      	ldr	r3, [r7, #12]
 8006688:	0018      	movs	r0, r3
 800668a:	f000 f983 	bl	8006994 <ADC_Enable>
 800668e:	0003      	movs	r3, r0
 8006690:	7023      	strb	r3, [r4, #0]
    }
    
    /* Start conversion if ADC is effectively enabled */
    if (tmp_hal_status == HAL_OK)
 8006692:	2317      	movs	r3, #23
 8006694:	18fb      	adds	r3, r7, r3
 8006696:	781b      	ldrb	r3, [r3, #0]
 8006698:	2b00      	cmp	r3, #0
 800669a:	d146      	bne.n	800672a <HAL_ADC_Start_DMA+0xe6>
    {
      /* Set ADC state                                                        */
      /* - Clear state bitfield related to regular group conversion results   */
      /* - Set state bitfield related to regular operation                    */
      ADC_STATE_CLR_SET(hadc->State,
 800669c:	68fb      	ldr	r3, [r7, #12]
 800669e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80066a0:	4a25      	ldr	r2, [pc, #148]	; (8006738 <HAL_ADC_Start_DMA+0xf4>)
 80066a2:	4013      	ands	r3, r2
 80066a4:	2280      	movs	r2, #128	; 0x80
 80066a6:	0052      	lsls	r2, r2, #1
 80066a8:	431a      	orrs	r2, r3
 80066aa:	68fb      	ldr	r3, [r7, #12]
 80066ac:	639a      	str	r2, [r3, #56]	; 0x38
                        HAL_ADC_STATE_READY | HAL_ADC_STATE_REG_EOC | HAL_ADC_STATE_REG_OVR | HAL_ADC_STATE_REG_EOSMP,
                        HAL_ADC_STATE_REG_BUSY);
      
      /* Reset ADC all error code fields */
      ADC_CLEAR_ERRORCODE(hadc);
 80066ae:	68fb      	ldr	r3, [r7, #12]
 80066b0:	2200      	movs	r2, #0
 80066b2:	63da      	str	r2, [r3, #60]	; 0x3c
      
      /* Process unlocked */
      /* Unlock before starting ADC conversions: in case of potential         */
      /* interruption, to let the process to ADC IRQ Handler.                 */
      __HAL_UNLOCK(hadc);
 80066b4:	68fb      	ldr	r3, [r7, #12]
 80066b6:	2234      	movs	r2, #52	; 0x34
 80066b8:	2100      	movs	r1, #0
 80066ba:	5499      	strb	r1, [r3, r2]

      /* Set the DMA transfer complete callback */
      hadc->DMA_Handle->XferCpltCallback = ADC_DMAConvCplt;
 80066bc:	68fb      	ldr	r3, [r7, #12]
 80066be:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80066c0:	4a1e      	ldr	r2, [pc, #120]	; (800673c <HAL_ADC_Start_DMA+0xf8>)
 80066c2:	629a      	str	r2, [r3, #40]	; 0x28

      /* Set the DMA half transfer complete callback */
      hadc->DMA_Handle->XferHalfCpltCallback = ADC_DMAHalfConvCplt;
 80066c4:	68fb      	ldr	r3, [r7, #12]
 80066c6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80066c8:	4a1d      	ldr	r2, [pc, #116]	; (8006740 <HAL_ADC_Start_DMA+0xfc>)
 80066ca:	62da      	str	r2, [r3, #44]	; 0x2c
      
      /* Set the DMA error callback */
      hadc->DMA_Handle->XferErrorCallback = ADC_DMAError;
 80066cc:	68fb      	ldr	r3, [r7, #12]
 80066ce:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80066d0:	4a1c      	ldr	r2, [pc, #112]	; (8006744 <HAL_ADC_Start_DMA+0x100>)
 80066d2:	631a      	str	r2, [r3, #48]	; 0x30
      /* start (in case of SW start):                                         */
      
      /* Clear regular group conversion flag and overrun flag */
      /* (To ensure of no unknown state from potential previous ADC           */
      /* operations)                                                          */
      __HAL_ADC_CLEAR_FLAG(hadc, (ADC_FLAG_EOC | ADC_FLAG_EOS | ADC_FLAG_OVR));
 80066d4:	68fb      	ldr	r3, [r7, #12]
 80066d6:	681b      	ldr	r3, [r3, #0]
 80066d8:	221c      	movs	r2, #28
 80066da:	601a      	str	r2, [r3, #0]
      
      /* Enable ADC overrun interrupt */
      __HAL_ADC_ENABLE_IT(hadc, ADC_IT_OVR);
 80066dc:	68fb      	ldr	r3, [r7, #12]
 80066de:	681b      	ldr	r3, [r3, #0]
 80066e0:	685a      	ldr	r2, [r3, #4]
 80066e2:	68fb      	ldr	r3, [r7, #12]
 80066e4:	681b      	ldr	r3, [r3, #0]
 80066e6:	2110      	movs	r1, #16
 80066e8:	430a      	orrs	r2, r1
 80066ea:	605a      	str	r2, [r3, #4]
      
      /* Enable ADC DMA mode */
      hadc->Instance->CFGR1 |= ADC_CFGR1_DMAEN;
 80066ec:	68fb      	ldr	r3, [r7, #12]
 80066ee:	681b      	ldr	r3, [r3, #0]
 80066f0:	68da      	ldr	r2, [r3, #12]
 80066f2:	68fb      	ldr	r3, [r7, #12]
 80066f4:	681b      	ldr	r3, [r3, #0]
 80066f6:	2101      	movs	r1, #1
 80066f8:	430a      	orrs	r2, r1
 80066fa:	60da      	str	r2, [r3, #12]
      
      /* Start the DMA channel */
      HAL_DMA_Start_IT(hadc->DMA_Handle, (uint32_t)&hadc->Instance->DR, (uint32_t)pData, Length);
 80066fc:	68fb      	ldr	r3, [r7, #12]
 80066fe:	6b18      	ldr	r0, [r3, #48]	; 0x30
 8006700:	68fb      	ldr	r3, [r7, #12]
 8006702:	681b      	ldr	r3, [r3, #0]
 8006704:	3340      	adds	r3, #64	; 0x40
 8006706:	0019      	movs	r1, r3
 8006708:	68ba      	ldr	r2, [r7, #8]
 800670a:	687b      	ldr	r3, [r7, #4]
 800670c:	f000 fb70 	bl	8006df0 <HAL_DMA_Start_IT>
           
      /* Enable conversion of regular group.                                  */
      /* If software start has been selected, conversion starts immediately.  */
      /* If external trigger has been selected, conversion will start at next */
      /* trigger event.                                                       */
      hadc->Instance->CR |= ADC_CR_ADSTART;
 8006710:	68fb      	ldr	r3, [r7, #12]
 8006712:	681b      	ldr	r3, [r3, #0]
 8006714:	689a      	ldr	r2, [r3, #8]
 8006716:	68fb      	ldr	r3, [r7, #12]
 8006718:	681b      	ldr	r3, [r3, #0]
 800671a:	2104      	movs	r1, #4
 800671c:	430a      	orrs	r2, r1
 800671e:	609a      	str	r2, [r3, #8]
 8006720:	e003      	b.n	800672a <HAL_ADC_Start_DMA+0xe6>
    }
  }
  else
  {
    tmp_hal_status = HAL_BUSY;
 8006722:	2317      	movs	r3, #23
 8006724:	18fb      	adds	r3, r7, r3
 8006726:	2202      	movs	r2, #2
 8006728:	701a      	strb	r2, [r3, #0]
  }
    
  /* Return function status */
  return tmp_hal_status;
 800672a:	2317      	movs	r3, #23
 800672c:	18fb      	adds	r3, r7, r3
 800672e:	781b      	ldrb	r3, [r3, #0]
}
 8006730:	0018      	movs	r0, r3
 8006732:	46bd      	mov	sp, r7
 8006734:	b007      	add	sp, #28
 8006736:	bd90      	pop	{r4, r7, pc}
 8006738:	fffff0fe 	.word	0xfffff0fe
 800673c:	08006a9d 	.word	0x08006a9d
 8006740:	08006b51 	.word	0x08006b51
 8006744:	08006b6f 	.word	0x08006b6f

08006748 <HAL_ADC_ConvCpltCallback>:
  * @brief  Conversion complete callback in non blocking mode 
  * @param  hadc ADC handle
  * @retval None
  */
__weak void HAL_ADC_ConvCpltCallback(ADC_HandleTypeDef* hadc)
{
 8006748:	b580      	push	{r7, lr}
 800674a:	b082      	sub	sp, #8
 800674c:	af00      	add	r7, sp, #0
 800674e:	6078      	str	r0, [r7, #4]
  UNUSED(hadc);

  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADC_ConvCpltCallback must be implemented in the user file.
   */
}
 8006750:	46c0      	nop			; (mov r8, r8)
 8006752:	46bd      	mov	sp, r7
 8006754:	b002      	add	sp, #8
 8006756:	bd80      	pop	{r7, pc}

08006758 <HAL_ADC_ConvHalfCpltCallback>:
  * @brief  Conversion DMA half-transfer callback in non blocking mode 
  * @param  hadc ADC handle
  * @retval None
  */
__weak void HAL_ADC_ConvHalfCpltCallback(ADC_HandleTypeDef* hadc)
{
 8006758:	b580      	push	{r7, lr}
 800675a:	b082      	sub	sp, #8
 800675c:	af00      	add	r7, sp, #0
 800675e:	6078      	str	r0, [r7, #4]
  UNUSED(hadc);

  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADC_ConvHalfCpltCallback must be implemented in the user file.
  */
}
 8006760:	46c0      	nop			; (mov r8, r8)
 8006762:	46bd      	mov	sp, r7
 8006764:	b002      	add	sp, #8
 8006766:	bd80      	pop	{r7, pc}

08006768 <HAL_ADC_ErrorCallback>:
  *        (ADC conversion with interruption or transfer by DMA)
  * @param  hadc ADC handle
  * @retval None
  */
__weak void HAL_ADC_ErrorCallback(ADC_HandleTypeDef *hadc)
{
 8006768:	b580      	push	{r7, lr}
 800676a:	b082      	sub	sp, #8
 800676c:	af00      	add	r7, sp, #0
 800676e:	6078      	str	r0, [r7, #4]
  UNUSED(hadc);

  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADC_ErrorCallback must be implemented in the user file.
  */
}
 8006770:	46c0      	nop			; (mov r8, r8)
 8006772:	46bd      	mov	sp, r7
 8006774:	b002      	add	sp, #8
 8006776:	bd80      	pop	{r7, pc}

08006778 <HAL_ADC_ConfigChannel>:
  * @param  hadc ADC handle
  * @param  sConfig Structure of ADC channel for regular group.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_ConfigChannel(ADC_HandleTypeDef* hadc, ADC_ChannelConfTypeDef* sConfig)
{
 8006778:	b580      	push	{r7, lr}
 800677a:	b084      	sub	sp, #16
 800677c:	af00      	add	r7, sp, #0
 800677e:	6078      	str	r0, [r7, #4]
 8006780:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8006782:	230f      	movs	r3, #15
 8006784:	18fb      	adds	r3, r7, r3
 8006786:	2200      	movs	r2, #0
 8006788:	701a      	strb	r2, [r3, #0]
  __IO uint32_t wait_loop_index = 0U;
 800678a:	2300      	movs	r3, #0
 800678c:	60bb      	str	r3, [r7, #8]
  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));
  assert_param(IS_ADC_CHANNEL(sConfig->Channel));
  assert_param(IS_ADC_RANK(sConfig->Rank));
  
  if (! IS_ADC_SAMPLE_TIME(hadc->Init.SamplingTimeCommon))
 800678e:	687b      	ldr	r3, [r7, #4]
 8006790:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8006792:	2380      	movs	r3, #128	; 0x80
 8006794:	055b      	lsls	r3, r3, #21
 8006796:	429a      	cmp	r2, r3
 8006798:	d011      	beq.n	80067be <HAL_ADC_ConfigChannel+0x46>
 800679a:	687b      	ldr	r3, [r7, #4]
 800679c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800679e:	2b01      	cmp	r3, #1
 80067a0:	d00d      	beq.n	80067be <HAL_ADC_ConfigChannel+0x46>
 80067a2:	687b      	ldr	r3, [r7, #4]
 80067a4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80067a6:	2b02      	cmp	r3, #2
 80067a8:	d009      	beq.n	80067be <HAL_ADC_ConfigChannel+0x46>
 80067aa:	687b      	ldr	r3, [r7, #4]
 80067ac:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80067ae:	2b03      	cmp	r3, #3
 80067b0:	d005      	beq.n	80067be <HAL_ADC_ConfigChannel+0x46>
 80067b2:	687b      	ldr	r3, [r7, #4]
 80067b4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80067b6:	2b04      	cmp	r3, #4
 80067b8:	d001      	beq.n	80067be <HAL_ADC_ConfigChannel+0x46>
 80067ba:	687b      	ldr	r3, [r7, #4]
 80067bc:	6adb      	ldr	r3, [r3, #44]	; 0x2c
  {
    assert_param(IS_ADC_SAMPLE_TIME(sConfig->SamplingTime));
  }
  
  /* Process locked */
  __HAL_LOCK(hadc);
 80067be:	687b      	ldr	r3, [r7, #4]
 80067c0:	2234      	movs	r2, #52	; 0x34
 80067c2:	5c9b      	ldrb	r3, [r3, r2]
 80067c4:	2b01      	cmp	r3, #1
 80067c6:	d101      	bne.n	80067cc <HAL_ADC_ConfigChannel+0x54>
 80067c8:	2302      	movs	r3, #2
 80067ca:	e0d0      	b.n	800696e <HAL_ADC_ConfigChannel+0x1f6>
 80067cc:	687b      	ldr	r3, [r7, #4]
 80067ce:	2234      	movs	r2, #52	; 0x34
 80067d0:	2101      	movs	r1, #1
 80067d2:	5499      	strb	r1, [r3, r2]
  /* Parameters that can be updated when ADC is disabled or enabled without   */
  /* conversion on going on regular group:                                    */
  /*  - Channel number                                                        */
  /*  - Channel sampling time                                                 */
  /*  - Management of internal measurement channels: VrefInt/TempSensor/Vbat  */
  if (ADC_IS_CONVERSION_ONGOING_REGULAR(hadc) == RESET)
 80067d4:	687b      	ldr	r3, [r7, #4]
 80067d6:	681b      	ldr	r3, [r3, #0]
 80067d8:	689b      	ldr	r3, [r3, #8]
 80067da:	2204      	movs	r2, #4
 80067dc:	4013      	ands	r3, r2
 80067de:	d000      	beq.n	80067e2 <HAL_ADC_ConfigChannel+0x6a>
 80067e0:	e0b4      	b.n	800694c <HAL_ADC_ConfigChannel+0x1d4>
  {
    /* Configure channel: depending on rank setting, add it or remove it from */
    /* ADC conversion sequencer.                                              */
    if (sConfig->Rank != ADC_RANK_NONE)
 80067e2:	683b      	ldr	r3, [r7, #0]
 80067e4:	685b      	ldr	r3, [r3, #4]
 80067e6:	4a64      	ldr	r2, [pc, #400]	; (8006978 <HAL_ADC_ConfigChannel+0x200>)
 80067e8:	4293      	cmp	r3, r2
 80067ea:	d100      	bne.n	80067ee <HAL_ADC_ConfigChannel+0x76>
 80067ec:	e082      	b.n	80068f4 <HAL_ADC_ConfigChannel+0x17c>
    {
      /* Regular sequence configuration */
      /* Set the channel selection register from the selected channel */
      hadc->Instance->CHSELR |= ADC_CHSELR_CHANNEL(sConfig->Channel);
 80067ee:	687b      	ldr	r3, [r7, #4]
 80067f0:	681b      	ldr	r3, [r3, #0]
 80067f2:	6a99      	ldr	r1, [r3, #40]	; 0x28
 80067f4:	683b      	ldr	r3, [r7, #0]
 80067f6:	681b      	ldr	r3, [r3, #0]
 80067f8:	2201      	movs	r2, #1
 80067fa:	409a      	lsls	r2, r3
 80067fc:	687b      	ldr	r3, [r7, #4]
 80067fe:	681b      	ldr	r3, [r3, #0]
 8006800:	430a      	orrs	r2, r1
 8006802:	629a      	str	r2, [r3, #40]	; 0x28
      /* Channel sampling time configuration */
      /* Management of parameters "SamplingTimeCommon" and "SamplingTime"     */
      /* (obsolete): sampling time set in this function with                  */
      /* parameter "SamplingTime" (obsolete) only if not already set into     */
      /* ADC initialization structure with parameter "SamplingTimeCommon".    */
      if (! IS_ADC_SAMPLE_TIME(hadc->Init.SamplingTimeCommon))
 8006804:	687b      	ldr	r3, [r7, #4]
 8006806:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8006808:	2380      	movs	r3, #128	; 0x80
 800680a:	055b      	lsls	r3, r3, #21
 800680c:	429a      	cmp	r2, r3
 800680e:	d037      	beq.n	8006880 <HAL_ADC_ConfigChannel+0x108>
 8006810:	687b      	ldr	r3, [r7, #4]
 8006812:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006814:	2b01      	cmp	r3, #1
 8006816:	d033      	beq.n	8006880 <HAL_ADC_ConfigChannel+0x108>
 8006818:	687b      	ldr	r3, [r7, #4]
 800681a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800681c:	2b02      	cmp	r3, #2
 800681e:	d02f      	beq.n	8006880 <HAL_ADC_ConfigChannel+0x108>
 8006820:	687b      	ldr	r3, [r7, #4]
 8006822:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006824:	2b03      	cmp	r3, #3
 8006826:	d02b      	beq.n	8006880 <HAL_ADC_ConfigChannel+0x108>
 8006828:	687b      	ldr	r3, [r7, #4]
 800682a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800682c:	2b04      	cmp	r3, #4
 800682e:	d027      	beq.n	8006880 <HAL_ADC_ConfigChannel+0x108>
 8006830:	687b      	ldr	r3, [r7, #4]
 8006832:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006834:	2b05      	cmp	r3, #5
 8006836:	d023      	beq.n	8006880 <HAL_ADC_ConfigChannel+0x108>
 8006838:	687b      	ldr	r3, [r7, #4]
 800683a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800683c:	2b06      	cmp	r3, #6
 800683e:	d01f      	beq.n	8006880 <HAL_ADC_ConfigChannel+0x108>
 8006840:	687b      	ldr	r3, [r7, #4]
 8006842:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006844:	2b07      	cmp	r3, #7
 8006846:	d01b      	beq.n	8006880 <HAL_ADC_ConfigChannel+0x108>
      {
        /* Modify sampling time if needed (not needed in case of recurrence */
        /* for several channels programmed consecutively into the sequencer)  */
        if (sConfig->SamplingTime != ADC_GET_SAMPLINGTIME(hadc))
 8006848:	683b      	ldr	r3, [r7, #0]
 800684a:	689a      	ldr	r2, [r3, #8]
 800684c:	687b      	ldr	r3, [r7, #4]
 800684e:	681b      	ldr	r3, [r3, #0]
 8006850:	695b      	ldr	r3, [r3, #20]
 8006852:	2107      	movs	r1, #7
 8006854:	400b      	ands	r3, r1
 8006856:	429a      	cmp	r2, r3
 8006858:	d012      	beq.n	8006880 <HAL_ADC_ConfigChannel+0x108>
        {
          /* Channel sampling time configuration */
          /* Clear the old sample time */
          hadc->Instance->SMPR &= ~(ADC_SMPR_SMP);
 800685a:	687b      	ldr	r3, [r7, #4]
 800685c:	681b      	ldr	r3, [r3, #0]
 800685e:	695a      	ldr	r2, [r3, #20]
 8006860:	687b      	ldr	r3, [r7, #4]
 8006862:	681b      	ldr	r3, [r3, #0]
 8006864:	2107      	movs	r1, #7
 8006866:	438a      	bics	r2, r1
 8006868:	615a      	str	r2, [r3, #20]
          
          /* Set the new sample time */
          hadc->Instance->SMPR |= ADC_SMPR_SET(sConfig->SamplingTime);
 800686a:	687b      	ldr	r3, [r7, #4]
 800686c:	681b      	ldr	r3, [r3, #0]
 800686e:	6959      	ldr	r1, [r3, #20]
 8006870:	683b      	ldr	r3, [r7, #0]
 8006872:	689b      	ldr	r3, [r3, #8]
 8006874:	2207      	movs	r2, #7
 8006876:	401a      	ands	r2, r3
 8006878:	687b      	ldr	r3, [r7, #4]
 800687a:	681b      	ldr	r3, [r3, #0]
 800687c:	430a      	orrs	r2, r1
 800687e:	615a      	str	r2, [r3, #20]
      /* internal measurement paths enable: If internal channel selected,     */
      /* enable dedicated internal buffers and path.                          */
      /* Note: these internal measurement paths can be disabled using         */
      /*       HAL_ADC_DeInit() or removing the channel from sequencer with   */
      /*       channel configuration parameter "Rank".                        */
      if(ADC_IS_CHANNEL_INTERNAL(sConfig->Channel))
 8006880:	683b      	ldr	r3, [r7, #0]
 8006882:	681b      	ldr	r3, [r3, #0]
 8006884:	2b10      	cmp	r3, #16
 8006886:	d007      	beq.n	8006898 <HAL_ADC_ConfigChannel+0x120>
 8006888:	683b      	ldr	r3, [r7, #0]
 800688a:	681b      	ldr	r3, [r3, #0]
 800688c:	2b11      	cmp	r3, #17
 800688e:	d003      	beq.n	8006898 <HAL_ADC_ConfigChannel+0x120>
 8006890:	683b      	ldr	r3, [r7, #0]
 8006892:	681b      	ldr	r3, [r3, #0]
 8006894:	2b12      	cmp	r3, #18
 8006896:	d163      	bne.n	8006960 <HAL_ADC_ConfigChannel+0x1e8>
      {
        /* If Channel_16 is selected, enable Temp. sensor measurement path. */
        /* If Channel_17 is selected, enable VREFINT measurement path. */
        /* If Channel_18 is selected, enable VBAT measurement path. */
        ADC->CCR |= ADC_CHANNEL_INTERNAL_PATH(sConfig->Channel);
 8006898:	4b38      	ldr	r3, [pc, #224]	; (800697c <HAL_ADC_ConfigChannel+0x204>)
 800689a:	6819      	ldr	r1, [r3, #0]
 800689c:	683b      	ldr	r3, [r7, #0]
 800689e:	681b      	ldr	r3, [r3, #0]
 80068a0:	2b10      	cmp	r3, #16
 80068a2:	d009      	beq.n	80068b8 <HAL_ADC_ConfigChannel+0x140>
 80068a4:	683b      	ldr	r3, [r7, #0]
 80068a6:	681b      	ldr	r3, [r3, #0]
 80068a8:	2b11      	cmp	r3, #17
 80068aa:	d102      	bne.n	80068b2 <HAL_ADC_ConfigChannel+0x13a>
 80068ac:	2380      	movs	r3, #128	; 0x80
 80068ae:	03db      	lsls	r3, r3, #15
 80068b0:	e004      	b.n	80068bc <HAL_ADC_ConfigChannel+0x144>
 80068b2:	2380      	movs	r3, #128	; 0x80
 80068b4:	045b      	lsls	r3, r3, #17
 80068b6:	e001      	b.n	80068bc <HAL_ADC_ConfigChannel+0x144>
 80068b8:	2380      	movs	r3, #128	; 0x80
 80068ba:	041b      	lsls	r3, r3, #16
 80068bc:	4a2f      	ldr	r2, [pc, #188]	; (800697c <HAL_ADC_ConfigChannel+0x204>)
 80068be:	430b      	orrs	r3, r1
 80068c0:	6013      	str	r3, [r2, #0]
        
        /* If Temp. sensor is selected, wait for stabilization delay */
        if (sConfig->Channel == ADC_CHANNEL_TEMPSENSOR)
 80068c2:	683b      	ldr	r3, [r7, #0]
 80068c4:	681b      	ldr	r3, [r3, #0]
 80068c6:	2b10      	cmp	r3, #16
 80068c8:	d14a      	bne.n	8006960 <HAL_ADC_ConfigChannel+0x1e8>
        {
          /* Delay for temperature sensor stabilization time */
          /* Compute number of CPU cycles to wait for */
          wait_loop_index = (ADC_TEMPSENSOR_DELAY_US * (SystemCoreClock / 1000000U));
 80068ca:	4b2d      	ldr	r3, [pc, #180]	; (8006980 <HAL_ADC_ConfigChannel+0x208>)
 80068cc:	681b      	ldr	r3, [r3, #0]
 80068ce:	492d      	ldr	r1, [pc, #180]	; (8006984 <HAL_ADC_ConfigChannel+0x20c>)
 80068d0:	0018      	movs	r0, r3
 80068d2:	f7f9 fc19 	bl	8000108 <__udivsi3>
 80068d6:	0003      	movs	r3, r0
 80068d8:	001a      	movs	r2, r3
 80068da:	0013      	movs	r3, r2
 80068dc:	009b      	lsls	r3, r3, #2
 80068de:	189b      	adds	r3, r3, r2
 80068e0:	005b      	lsls	r3, r3, #1
 80068e2:	60bb      	str	r3, [r7, #8]
          while(wait_loop_index != 0U)
 80068e4:	e002      	b.n	80068ec <HAL_ADC_ConfigChannel+0x174>
          {
            wait_loop_index--;
 80068e6:	68bb      	ldr	r3, [r7, #8]
 80068e8:	3b01      	subs	r3, #1
 80068ea:	60bb      	str	r3, [r7, #8]
          while(wait_loop_index != 0U)
 80068ec:	68bb      	ldr	r3, [r7, #8]
 80068ee:	2b00      	cmp	r3, #0
 80068f0:	d1f9      	bne.n	80068e6 <HAL_ADC_ConfigChannel+0x16e>
 80068f2:	e035      	b.n	8006960 <HAL_ADC_ConfigChannel+0x1e8>
    }
    else
    {
      /* Regular sequence configuration */
      /* Reset the channel selection register from the selected channel */
      hadc->Instance->CHSELR &= ~ADC_CHSELR_CHANNEL(sConfig->Channel);
 80068f4:	687b      	ldr	r3, [r7, #4]
 80068f6:	681b      	ldr	r3, [r3, #0]
 80068f8:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 80068fa:	683b      	ldr	r3, [r7, #0]
 80068fc:	681b      	ldr	r3, [r3, #0]
 80068fe:	2101      	movs	r1, #1
 8006900:	4099      	lsls	r1, r3
 8006902:	000b      	movs	r3, r1
 8006904:	43d9      	mvns	r1, r3
 8006906:	687b      	ldr	r3, [r7, #4]
 8006908:	681b      	ldr	r3, [r3, #0]
 800690a:	400a      	ands	r2, r1
 800690c:	629a      	str	r2, [r3, #40]	; 0x28
      
      /* Management of internal measurement channels: VrefInt/TempSensor/Vbat */
      /* internal measurement paths disable: If internal channel selected,    */
      /* disable dedicated internal buffers and path.                         */
      if(ADC_IS_CHANNEL_INTERNAL(sConfig->Channel))
 800690e:	683b      	ldr	r3, [r7, #0]
 8006910:	681b      	ldr	r3, [r3, #0]
 8006912:	2b10      	cmp	r3, #16
 8006914:	d007      	beq.n	8006926 <HAL_ADC_ConfigChannel+0x1ae>
 8006916:	683b      	ldr	r3, [r7, #0]
 8006918:	681b      	ldr	r3, [r3, #0]
 800691a:	2b11      	cmp	r3, #17
 800691c:	d003      	beq.n	8006926 <HAL_ADC_ConfigChannel+0x1ae>
 800691e:	683b      	ldr	r3, [r7, #0]
 8006920:	681b      	ldr	r3, [r3, #0]
 8006922:	2b12      	cmp	r3, #18
 8006924:	d11c      	bne.n	8006960 <HAL_ADC_ConfigChannel+0x1e8>
      {
        /* If Channel_16 is selected, disable Temp. sensor measurement path. */
        /* If Channel_17 is selected, disable VREFINT measurement path. */
        /* If Channel_18 is selected, disable VBAT measurement path. */
        ADC->CCR &= ~ADC_CHANNEL_INTERNAL_PATH(sConfig->Channel);
 8006926:	4b15      	ldr	r3, [pc, #84]	; (800697c <HAL_ADC_ConfigChannel+0x204>)
 8006928:	6819      	ldr	r1, [r3, #0]
 800692a:	683b      	ldr	r3, [r7, #0]
 800692c:	681b      	ldr	r3, [r3, #0]
 800692e:	2b10      	cmp	r3, #16
 8006930:	d007      	beq.n	8006942 <HAL_ADC_ConfigChannel+0x1ca>
 8006932:	683b      	ldr	r3, [r7, #0]
 8006934:	681b      	ldr	r3, [r3, #0]
 8006936:	2b11      	cmp	r3, #17
 8006938:	d101      	bne.n	800693e <HAL_ADC_ConfigChannel+0x1c6>
 800693a:	4b13      	ldr	r3, [pc, #76]	; (8006988 <HAL_ADC_ConfigChannel+0x210>)
 800693c:	e002      	b.n	8006944 <HAL_ADC_ConfigChannel+0x1cc>
 800693e:	4b13      	ldr	r3, [pc, #76]	; (800698c <HAL_ADC_ConfigChannel+0x214>)
 8006940:	e000      	b.n	8006944 <HAL_ADC_ConfigChannel+0x1cc>
 8006942:	4b13      	ldr	r3, [pc, #76]	; (8006990 <HAL_ADC_ConfigChannel+0x218>)
 8006944:	4a0d      	ldr	r2, [pc, #52]	; (800697c <HAL_ADC_ConfigChannel+0x204>)
 8006946:	400b      	ands	r3, r1
 8006948:	6013      	str	r3, [r2, #0]
 800694a:	e009      	b.n	8006960 <HAL_ADC_ConfigChannel+0x1e8>
  /* channel could be done on neither of the channel configuration structure  */
  /* parameters.                                                              */
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 800694c:	687b      	ldr	r3, [r7, #4]
 800694e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006950:	2220      	movs	r2, #32
 8006952:	431a      	orrs	r2, r3
 8006954:	687b      	ldr	r3, [r7, #4]
 8006956:	639a      	str	r2, [r3, #56]	; 0x38
    
    tmp_hal_status = HAL_ERROR;
 8006958:	230f      	movs	r3, #15
 800695a:	18fb      	adds	r3, r7, r3
 800695c:	2201      	movs	r2, #1
 800695e:	701a      	strb	r2, [r3, #0]
  }
  
  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 8006960:	687b      	ldr	r3, [r7, #4]
 8006962:	2234      	movs	r2, #52	; 0x34
 8006964:	2100      	movs	r1, #0
 8006966:	5499      	strb	r1, [r3, r2]
  
  /* Return function status */
  return tmp_hal_status;
 8006968:	230f      	movs	r3, #15
 800696a:	18fb      	adds	r3, r7, r3
 800696c:	781b      	ldrb	r3, [r3, #0]
}
 800696e:	0018      	movs	r0, r3
 8006970:	46bd      	mov	sp, r7
 8006972:	b004      	add	sp, #16
 8006974:	bd80      	pop	{r7, pc}
 8006976:	46c0      	nop			; (mov r8, r8)
 8006978:	00001001 	.word	0x00001001
 800697c:	40012708 	.word	0x40012708
 8006980:	20000004 	.word	0x20000004
 8006984:	000f4240 	.word	0x000f4240
 8006988:	ffbfffff 	.word	0xffbfffff
 800698c:	feffffff 	.word	0xfeffffff
 8006990:	ff7fffff 	.word	0xff7fffff

08006994 <ADC_Enable>:
  *         "if (hadc->Init.LowPowerAutoPowerOff != ENABLE)".
  * @param  hadc ADC handle
  * @retval HAL status.
  */
static HAL_StatusTypeDef ADC_Enable(ADC_HandleTypeDef* hadc)
{
 8006994:	b580      	push	{r7, lr}
 8006996:	b084      	sub	sp, #16
 8006998:	af00      	add	r7, sp, #0
 800699a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 800699c:	2300      	movs	r3, #0
 800699e:	60fb      	str	r3, [r7, #12]
  __IO uint32_t wait_loop_index = 0U;
 80069a0:	2300      	movs	r3, #0
 80069a2:	60bb      	str	r3, [r7, #8]
  
  /* ADC enable and wait for ADC ready (in case of ADC is disabled or         */
  /* enabling phase not yet completed: flag ADC ready not yet set).           */
  /* Timeout implemented to not be stuck if ADC cannot be enabled (possible   */
  /* causes: ADC clock not running, ...).                                     */
  if (ADC_IS_ENABLE(hadc) == RESET)
 80069a4:	687b      	ldr	r3, [r7, #4]
 80069a6:	681b      	ldr	r3, [r3, #0]
 80069a8:	689b      	ldr	r3, [r3, #8]
 80069aa:	2203      	movs	r2, #3
 80069ac:	4013      	ands	r3, r2
 80069ae:	2b01      	cmp	r3, #1
 80069b0:	d112      	bne.n	80069d8 <ADC_Enable+0x44>
 80069b2:	687b      	ldr	r3, [r7, #4]
 80069b4:	681b      	ldr	r3, [r3, #0]
 80069b6:	681b      	ldr	r3, [r3, #0]
 80069b8:	2201      	movs	r2, #1
 80069ba:	4013      	ands	r3, r2
 80069bc:	2b01      	cmp	r3, #1
 80069be:	d009      	beq.n	80069d4 <ADC_Enable+0x40>
 80069c0:	687b      	ldr	r3, [r7, #4]
 80069c2:	681b      	ldr	r3, [r3, #0]
 80069c4:	68da      	ldr	r2, [r3, #12]
 80069c6:	2380      	movs	r3, #128	; 0x80
 80069c8:	021b      	lsls	r3, r3, #8
 80069ca:	401a      	ands	r2, r3
 80069cc:	2380      	movs	r3, #128	; 0x80
 80069ce:	021b      	lsls	r3, r3, #8
 80069d0:	429a      	cmp	r2, r3
 80069d2:	d101      	bne.n	80069d8 <ADC_Enable+0x44>
 80069d4:	2301      	movs	r3, #1
 80069d6:	e000      	b.n	80069da <ADC_Enable+0x46>
 80069d8:	2300      	movs	r3, #0
 80069da:	2b00      	cmp	r3, #0
 80069dc:	d152      	bne.n	8006a84 <ADC_Enable+0xf0>
  {
    /* Check if conditions to enable the ADC are fulfilled */
    if (ADC_ENABLING_CONDITIONS(hadc) == RESET)
 80069de:	687b      	ldr	r3, [r7, #4]
 80069e0:	681b      	ldr	r3, [r3, #0]
 80069e2:	689b      	ldr	r3, [r3, #8]
 80069e4:	4a2a      	ldr	r2, [pc, #168]	; (8006a90 <ADC_Enable+0xfc>)
 80069e6:	4013      	ands	r3, r2
 80069e8:	d00d      	beq.n	8006a06 <ADC_Enable+0x72>
    {
      /* Update ADC state machine to error */
      SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 80069ea:	687b      	ldr	r3, [r7, #4]
 80069ec:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80069ee:	2210      	movs	r2, #16
 80069f0:	431a      	orrs	r2, r3
 80069f2:	687b      	ldr	r3, [r7, #4]
 80069f4:	639a      	str	r2, [r3, #56]	; 0x38
    
      /* Set ADC error code to ADC IP internal error */
      SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 80069f6:	687b      	ldr	r3, [r7, #4]
 80069f8:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80069fa:	2201      	movs	r2, #1
 80069fc:	431a      	orrs	r2, r3
 80069fe:	687b      	ldr	r3, [r7, #4]
 8006a00:	63da      	str	r2, [r3, #60]	; 0x3c
      
      return HAL_ERROR;
 8006a02:	2301      	movs	r3, #1
 8006a04:	e03f      	b.n	8006a86 <ADC_Enable+0xf2>
    }
    
    /* Enable the ADC peripheral */
    __HAL_ADC_ENABLE(hadc);
 8006a06:	687b      	ldr	r3, [r7, #4]
 8006a08:	681b      	ldr	r3, [r3, #0]
 8006a0a:	689a      	ldr	r2, [r3, #8]
 8006a0c:	687b      	ldr	r3, [r7, #4]
 8006a0e:	681b      	ldr	r3, [r3, #0]
 8006a10:	2101      	movs	r1, #1
 8006a12:	430a      	orrs	r2, r1
 8006a14:	609a      	str	r2, [r3, #8]
    
    /* Delay for ADC stabilization time */
    /* Compute number of CPU cycles to wait for */
    wait_loop_index = (ADC_STAB_DELAY_US * (SystemCoreClock / 1000000U));
 8006a16:	4b1f      	ldr	r3, [pc, #124]	; (8006a94 <ADC_Enable+0x100>)
 8006a18:	681b      	ldr	r3, [r3, #0]
 8006a1a:	491f      	ldr	r1, [pc, #124]	; (8006a98 <ADC_Enable+0x104>)
 8006a1c:	0018      	movs	r0, r3
 8006a1e:	f7f9 fb73 	bl	8000108 <__udivsi3>
 8006a22:	0003      	movs	r3, r0
 8006a24:	60bb      	str	r3, [r7, #8]
    while(wait_loop_index != 0U)
 8006a26:	e002      	b.n	8006a2e <ADC_Enable+0x9a>
    {
      wait_loop_index--;
 8006a28:	68bb      	ldr	r3, [r7, #8]
 8006a2a:	3b01      	subs	r3, #1
 8006a2c:	60bb      	str	r3, [r7, #8]
    while(wait_loop_index != 0U)
 8006a2e:	68bb      	ldr	r3, [r7, #8]
 8006a30:	2b00      	cmp	r3, #0
 8006a32:	d1f9      	bne.n	8006a28 <ADC_Enable+0x94>
    }

    /* Get tick count */
    tickstart = HAL_GetTick();
 8006a34:	f7ff fc98 	bl	8006368 <HAL_GetTick>
 8006a38:	0003      	movs	r3, r0
 8006a3a:	60fb      	str	r3, [r7, #12]
    
    /* Wait for ADC effectively enabled */
    while(__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_RDY) == RESET)
 8006a3c:	e01b      	b.n	8006a76 <ADC_Enable+0xe2>
    {
      if((HAL_GetTick() - tickstart) > ADC_ENABLE_TIMEOUT)
 8006a3e:	f7ff fc93 	bl	8006368 <HAL_GetTick>
 8006a42:	0002      	movs	r2, r0
 8006a44:	68fb      	ldr	r3, [r7, #12]
 8006a46:	1ad3      	subs	r3, r2, r3
 8006a48:	2b02      	cmp	r3, #2
 8006a4a:	d914      	bls.n	8006a76 <ADC_Enable+0xe2>
      {
        /* New check to avoid false timeout detection in case of preemption */
        if(__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_RDY) == RESET)
 8006a4c:	687b      	ldr	r3, [r7, #4]
 8006a4e:	681b      	ldr	r3, [r3, #0]
 8006a50:	681b      	ldr	r3, [r3, #0]
 8006a52:	2201      	movs	r2, #1
 8006a54:	4013      	ands	r3, r2
 8006a56:	2b01      	cmp	r3, #1
 8006a58:	d00d      	beq.n	8006a76 <ADC_Enable+0xe2>
        {
          /* Update ADC state machine to error */
          SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8006a5a:	687b      	ldr	r3, [r7, #4]
 8006a5c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006a5e:	2210      	movs	r2, #16
 8006a60:	431a      	orrs	r2, r3
 8006a62:	687b      	ldr	r3, [r7, #4]
 8006a64:	639a      	str	r2, [r3, #56]	; 0x38

          /* Set ADC error code to ADC IP internal error */
          SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8006a66:	687b      	ldr	r3, [r7, #4]
 8006a68:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8006a6a:	2201      	movs	r2, #1
 8006a6c:	431a      	orrs	r2, r3
 8006a6e:	687b      	ldr	r3, [r7, #4]
 8006a70:	63da      	str	r2, [r3, #60]	; 0x3c

          return HAL_ERROR;
 8006a72:	2301      	movs	r3, #1
 8006a74:	e007      	b.n	8006a86 <ADC_Enable+0xf2>
    while(__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_RDY) == RESET)
 8006a76:	687b      	ldr	r3, [r7, #4]
 8006a78:	681b      	ldr	r3, [r3, #0]
 8006a7a:	681b      	ldr	r3, [r3, #0]
 8006a7c:	2201      	movs	r2, #1
 8006a7e:	4013      	ands	r3, r2
 8006a80:	2b01      	cmp	r3, #1
 8006a82:	d1dc      	bne.n	8006a3e <ADC_Enable+0xaa>
      }
    }
  }
   
  /* Return HAL status */
  return HAL_OK;
 8006a84:	2300      	movs	r3, #0
}
 8006a86:	0018      	movs	r0, r3
 8006a88:	46bd      	mov	sp, r7
 8006a8a:	b004      	add	sp, #16
 8006a8c:	bd80      	pop	{r7, pc}
 8006a8e:	46c0      	nop			; (mov r8, r8)
 8006a90:	80000017 	.word	0x80000017
 8006a94:	20000004 	.word	0x20000004
 8006a98:	000f4240 	.word	0x000f4240

08006a9c <ADC_DMAConvCplt>:
  * @brief  DMA transfer complete callback. 
  * @param  hdma pointer to DMA handle.
  * @retval None
  */
static void ADC_DMAConvCplt(DMA_HandleTypeDef *hdma)
{
 8006a9c:	b580      	push	{r7, lr}
 8006a9e:	b084      	sub	sp, #16
 8006aa0:	af00      	add	r7, sp, #0
 8006aa2:	6078      	str	r0, [r7, #4]
  /* Retrieve ADC handle corresponding to current DMA handle */
  ADC_HandleTypeDef* hadc = ( ADC_HandleTypeDef* )((DMA_HandleTypeDef* )hdma)->Parent;
 8006aa4:	687b      	ldr	r3, [r7, #4]
 8006aa6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006aa8:	60fb      	str	r3, [r7, #12]
  
  /* Update state machine on conversion status if not in error state */
  if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL | HAL_ADC_STATE_ERROR_DMA))
 8006aaa:	68fb      	ldr	r3, [r7, #12]
 8006aac:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006aae:	2250      	movs	r2, #80	; 0x50
 8006ab0:	4013      	ands	r3, r2
 8006ab2:	d140      	bne.n	8006b36 <ADC_DMAConvCplt+0x9a>
  {
    /* Set ADC state */
    SET_BIT(hadc->State, HAL_ADC_STATE_REG_EOC); 
 8006ab4:	68fb      	ldr	r3, [r7, #12]
 8006ab6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006ab8:	2280      	movs	r2, #128	; 0x80
 8006aba:	0092      	lsls	r2, r2, #2
 8006abc:	431a      	orrs	r2, r3
 8006abe:	68fb      	ldr	r3, [r7, #12]
 8006ac0:	639a      	str	r2, [r3, #56]	; 0x38
    
    /* Determine whether any further conversion upcoming on group regular     */
    /* by external trigger, continuous mode or scan sequence on going.        */
    if(ADC_IS_SOFTWARE_START_REGULAR(hadc)        && 
 8006ac2:	68fb      	ldr	r3, [r7, #12]
 8006ac4:	681b      	ldr	r3, [r3, #0]
 8006ac6:	68da      	ldr	r2, [r3, #12]
 8006ac8:	23c0      	movs	r3, #192	; 0xc0
 8006aca:	011b      	lsls	r3, r3, #4
 8006acc:	4013      	ands	r3, r2
 8006ace:	d12d      	bne.n	8006b2c <ADC_DMAConvCplt+0x90>
       (hadc->Init.ContinuousConvMode == DISABLE)   )
 8006ad0:	68fb      	ldr	r3, [r7, #12]
 8006ad2:	7e9b      	ldrb	r3, [r3, #26]
    if(ADC_IS_SOFTWARE_START_REGULAR(hadc)        && 
 8006ad4:	2b00      	cmp	r3, #0
 8006ad6:	d129      	bne.n	8006b2c <ADC_DMAConvCplt+0x90>
    {
      /* If End of Sequence is reached, disable interrupts */
      if( __HAL_ADC_GET_FLAG(hadc, ADC_FLAG_EOS) )
 8006ad8:	68fb      	ldr	r3, [r7, #12]
 8006ada:	681b      	ldr	r3, [r3, #0]
 8006adc:	681b      	ldr	r3, [r3, #0]
 8006ade:	2208      	movs	r2, #8
 8006ae0:	4013      	ands	r3, r2
 8006ae2:	2b08      	cmp	r3, #8
 8006ae4:	d122      	bne.n	8006b2c <ADC_DMAConvCplt+0x90>
      {
        /* Allowed to modify bits ADC_IT_EOC/ADC_IT_EOS only if bit           */
        /* ADSTART==0 (no conversion on going)                                */
        if (ADC_IS_CONVERSION_ONGOING_REGULAR(hadc) == RESET)
 8006ae6:	68fb      	ldr	r3, [r7, #12]
 8006ae8:	681b      	ldr	r3, [r3, #0]
 8006aea:	689b      	ldr	r3, [r3, #8]
 8006aec:	2204      	movs	r2, #4
 8006aee:	4013      	ands	r3, r2
 8006af0:	d110      	bne.n	8006b14 <ADC_DMAConvCplt+0x78>
        {
          /* Disable ADC end of single conversion interrupt on group regular */
          /* Note: Overrun interrupt was enabled with EOC interrupt in        */
          /* HAL_Start_IT(), but is not disabled here because can be used     */
          /* by overrun IRQ process below.                                    */
          __HAL_ADC_DISABLE_IT(hadc, ADC_IT_EOC | ADC_IT_EOS);
 8006af2:	68fb      	ldr	r3, [r7, #12]
 8006af4:	681b      	ldr	r3, [r3, #0]
 8006af6:	685a      	ldr	r2, [r3, #4]
 8006af8:	68fb      	ldr	r3, [r7, #12]
 8006afa:	681b      	ldr	r3, [r3, #0]
 8006afc:	210c      	movs	r1, #12
 8006afe:	438a      	bics	r2, r1
 8006b00:	605a      	str	r2, [r3, #4]
          
          /* Set ADC state */
          ADC_STATE_CLR_SET(hadc->State,
 8006b02:	68fb      	ldr	r3, [r7, #12]
 8006b04:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006b06:	4a11      	ldr	r2, [pc, #68]	; (8006b4c <ADC_DMAConvCplt+0xb0>)
 8006b08:	4013      	ands	r3, r2
 8006b0a:	2201      	movs	r2, #1
 8006b0c:	431a      	orrs	r2, r3
 8006b0e:	68fb      	ldr	r3, [r7, #12]
 8006b10:	639a      	str	r2, [r3, #56]	; 0x38
 8006b12:	e00b      	b.n	8006b2c <ADC_DMAConvCplt+0x90>
                            HAL_ADC_STATE_READY);
        }
        else
        {
          /* Change ADC state to error state */
          SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8006b14:	68fb      	ldr	r3, [r7, #12]
 8006b16:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006b18:	2220      	movs	r2, #32
 8006b1a:	431a      	orrs	r2, r3
 8006b1c:	68fb      	ldr	r3, [r7, #12]
 8006b1e:	639a      	str	r2, [r3, #56]	; 0x38
          
          /* Set ADC error code to ADC IP internal error */
          SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8006b20:	68fb      	ldr	r3, [r7, #12]
 8006b22:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8006b24:	2201      	movs	r2, #1
 8006b26:	431a      	orrs	r2, r3
 8006b28:	68fb      	ldr	r3, [r7, #12]
 8006b2a:	63da      	str	r2, [r3, #60]	; 0x3c

    /* Conversion complete callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->ConvCpltCallback(hadc);
#else
    HAL_ADC_ConvCpltCallback(hadc);
 8006b2c:	68fb      	ldr	r3, [r7, #12]
 8006b2e:	0018      	movs	r0, r3
 8006b30:	f7ff fe0a 	bl	8006748 <HAL_ADC_ConvCpltCallback>
  {
    /* Call DMA error callback */
    hadc->DMA_Handle->XferErrorCallback(hdma);
  }

}
 8006b34:	e005      	b.n	8006b42 <ADC_DMAConvCplt+0xa6>
    hadc->DMA_Handle->XferErrorCallback(hdma);
 8006b36:	68fb      	ldr	r3, [r7, #12]
 8006b38:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006b3a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006b3c:	687a      	ldr	r2, [r7, #4]
 8006b3e:	0010      	movs	r0, r2
 8006b40:	4798      	blx	r3
}
 8006b42:	46c0      	nop			; (mov r8, r8)
 8006b44:	46bd      	mov	sp, r7
 8006b46:	b004      	add	sp, #16
 8006b48:	bd80      	pop	{r7, pc}
 8006b4a:	46c0      	nop			; (mov r8, r8)
 8006b4c:	fffffefe 	.word	0xfffffefe

08006b50 <ADC_DMAHalfConvCplt>:
  * @brief  DMA half transfer complete callback. 
  * @param  hdma pointer to DMA handle.
  * @retval None
  */
static void ADC_DMAHalfConvCplt(DMA_HandleTypeDef *hdma)   
{
 8006b50:	b580      	push	{r7, lr}
 8006b52:	b084      	sub	sp, #16
 8006b54:	af00      	add	r7, sp, #0
 8006b56:	6078      	str	r0, [r7, #4]
  /* Retrieve ADC handle corresponding to current DMA handle */
  ADC_HandleTypeDef* hadc = ( ADC_HandleTypeDef* )((DMA_HandleTypeDef* )hdma)->Parent;
 8006b58:	687b      	ldr	r3, [r7, #4]
 8006b5a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006b5c:	60fb      	str	r3, [r7, #12]
  
  /* Half conversion callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->ConvHalfCpltCallback(hadc);
#else
  HAL_ADC_ConvHalfCpltCallback(hadc); 
 8006b5e:	68fb      	ldr	r3, [r7, #12]
 8006b60:	0018      	movs	r0, r3
 8006b62:	f7ff fdf9 	bl	8006758 <HAL_ADC_ConvHalfCpltCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
}
 8006b66:	46c0      	nop			; (mov r8, r8)
 8006b68:	46bd      	mov	sp, r7
 8006b6a:	b004      	add	sp, #16
 8006b6c:	bd80      	pop	{r7, pc}

08006b6e <ADC_DMAError>:
  * @brief  DMA error callback 
  * @param  hdma pointer to DMA handle.
  * @retval None
  */
static void ADC_DMAError(DMA_HandleTypeDef *hdma)   
{
 8006b6e:	b580      	push	{r7, lr}
 8006b70:	b084      	sub	sp, #16
 8006b72:	af00      	add	r7, sp, #0
 8006b74:	6078      	str	r0, [r7, #4]
  /* Retrieve ADC handle corresponding to current DMA handle */
  ADC_HandleTypeDef* hadc = ( ADC_HandleTypeDef* )((DMA_HandleTypeDef* )hdma)->Parent;
 8006b76:	687b      	ldr	r3, [r7, #4]
 8006b78:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006b7a:	60fb      	str	r3, [r7, #12]
  
  /* Set ADC state */
  SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_DMA);
 8006b7c:	68fb      	ldr	r3, [r7, #12]
 8006b7e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006b80:	2240      	movs	r2, #64	; 0x40
 8006b82:	431a      	orrs	r2, r3
 8006b84:	68fb      	ldr	r3, [r7, #12]
 8006b86:	639a      	str	r2, [r3, #56]	; 0x38
  
  /* Set ADC error code to DMA error */
  SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_DMA);
 8006b88:	68fb      	ldr	r3, [r7, #12]
 8006b8a:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8006b8c:	2204      	movs	r2, #4
 8006b8e:	431a      	orrs	r2, r3
 8006b90:	68fb      	ldr	r3, [r7, #12]
 8006b92:	63da      	str	r2, [r3, #60]	; 0x3c
  
  /* Error callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
  hadc->ErrorCallback(hadc);
#else
  HAL_ADC_ErrorCallback(hadc); 
 8006b94:	68fb      	ldr	r3, [r7, #12]
 8006b96:	0018      	movs	r0, r3
 8006b98:	f7ff fde6 	bl	8006768 <HAL_ADC_ErrorCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
}
 8006b9c:	46c0      	nop			; (mov r8, r8)
 8006b9e:	46bd      	mov	sp, r7
 8006ba0:	b004      	add	sp, #16
 8006ba2:	bd80      	pop	{r7, pc}

08006ba4 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8006ba4:	b580      	push	{r7, lr}
 8006ba6:	b082      	sub	sp, #8
 8006ba8:	af00      	add	r7, sp, #0
 8006baa:	0002      	movs	r2, r0
 8006bac:	1dfb      	adds	r3, r7, #7
 8006bae:	701a      	strb	r2, [r3, #0]
  if ((int32_t)(IRQn) >= 0)
 8006bb0:	1dfb      	adds	r3, r7, #7
 8006bb2:	781b      	ldrb	r3, [r3, #0]
 8006bb4:	2b7f      	cmp	r3, #127	; 0x7f
 8006bb6:	d809      	bhi.n	8006bcc <__NVIC_EnableIRQ+0x28>
  {
    NVIC->ISER[0U] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8006bb8:	1dfb      	adds	r3, r7, #7
 8006bba:	781b      	ldrb	r3, [r3, #0]
 8006bbc:	001a      	movs	r2, r3
 8006bbe:	231f      	movs	r3, #31
 8006bc0:	401a      	ands	r2, r3
 8006bc2:	4b04      	ldr	r3, [pc, #16]	; (8006bd4 <__NVIC_EnableIRQ+0x30>)
 8006bc4:	2101      	movs	r1, #1
 8006bc6:	4091      	lsls	r1, r2
 8006bc8:	000a      	movs	r2, r1
 8006bca:	601a      	str	r2, [r3, #0]
  }
}
 8006bcc:	46c0      	nop			; (mov r8, r8)
 8006bce:	46bd      	mov	sp, r7
 8006bd0:	b002      	add	sp, #8
 8006bd2:	bd80      	pop	{r7, pc}
 8006bd4:	e000e100 	.word	0xe000e100

08006bd8 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8006bd8:	b590      	push	{r4, r7, lr}
 8006bda:	b083      	sub	sp, #12
 8006bdc:	af00      	add	r7, sp, #0
 8006bde:	0002      	movs	r2, r0
 8006be0:	6039      	str	r1, [r7, #0]
 8006be2:	1dfb      	adds	r3, r7, #7
 8006be4:	701a      	strb	r2, [r3, #0]
  if ((int32_t)(IRQn) >= 0)
 8006be6:	1dfb      	adds	r3, r7, #7
 8006be8:	781b      	ldrb	r3, [r3, #0]
 8006bea:	2b7f      	cmp	r3, #127	; 0x7f
 8006bec:	d828      	bhi.n	8006c40 <__NVIC_SetPriority+0x68>
  {
    NVIC->IP[_IP_IDX(IRQn)]  = ((uint32_t)(NVIC->IP[_IP_IDX(IRQn)]  & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 8006bee:	4a2f      	ldr	r2, [pc, #188]	; (8006cac <__NVIC_SetPriority+0xd4>)
 8006bf0:	1dfb      	adds	r3, r7, #7
 8006bf2:	781b      	ldrb	r3, [r3, #0]
 8006bf4:	b25b      	sxtb	r3, r3
 8006bf6:	089b      	lsrs	r3, r3, #2
 8006bf8:	33c0      	adds	r3, #192	; 0xc0
 8006bfa:	009b      	lsls	r3, r3, #2
 8006bfc:	589b      	ldr	r3, [r3, r2]
 8006bfe:	1dfa      	adds	r2, r7, #7
 8006c00:	7812      	ldrb	r2, [r2, #0]
 8006c02:	0011      	movs	r1, r2
 8006c04:	2203      	movs	r2, #3
 8006c06:	400a      	ands	r2, r1
 8006c08:	00d2      	lsls	r2, r2, #3
 8006c0a:	21ff      	movs	r1, #255	; 0xff
 8006c0c:	4091      	lsls	r1, r2
 8006c0e:	000a      	movs	r2, r1
 8006c10:	43d2      	mvns	r2, r2
 8006c12:	401a      	ands	r2, r3
 8006c14:	0011      	movs	r1, r2
       (((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL) << _BIT_SHIFT(IRQn)));
 8006c16:	683b      	ldr	r3, [r7, #0]
 8006c18:	019b      	lsls	r3, r3, #6
 8006c1a:	22ff      	movs	r2, #255	; 0xff
 8006c1c:	401a      	ands	r2, r3
 8006c1e:	1dfb      	adds	r3, r7, #7
 8006c20:	781b      	ldrb	r3, [r3, #0]
 8006c22:	0018      	movs	r0, r3
 8006c24:	2303      	movs	r3, #3
 8006c26:	4003      	ands	r3, r0
 8006c28:	00db      	lsls	r3, r3, #3
 8006c2a:	409a      	lsls	r2, r3
    NVIC->IP[_IP_IDX(IRQn)]  = ((uint32_t)(NVIC->IP[_IP_IDX(IRQn)]  & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 8006c2c:	481f      	ldr	r0, [pc, #124]	; (8006cac <__NVIC_SetPriority+0xd4>)
 8006c2e:	1dfb      	adds	r3, r7, #7
 8006c30:	781b      	ldrb	r3, [r3, #0]
 8006c32:	b25b      	sxtb	r3, r3
 8006c34:	089b      	lsrs	r3, r3, #2
 8006c36:	430a      	orrs	r2, r1
 8006c38:	33c0      	adds	r3, #192	; 0xc0
 8006c3a:	009b      	lsls	r3, r3, #2
 8006c3c:	501a      	str	r2, [r3, r0]
  else
  {
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
       (((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL) << _BIT_SHIFT(IRQn)));
  }
}
 8006c3e:	e031      	b.n	8006ca4 <__NVIC_SetPriority+0xcc>
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 8006c40:	4a1b      	ldr	r2, [pc, #108]	; (8006cb0 <__NVIC_SetPriority+0xd8>)
 8006c42:	1dfb      	adds	r3, r7, #7
 8006c44:	781b      	ldrb	r3, [r3, #0]
 8006c46:	0019      	movs	r1, r3
 8006c48:	230f      	movs	r3, #15
 8006c4a:	400b      	ands	r3, r1
 8006c4c:	3b08      	subs	r3, #8
 8006c4e:	089b      	lsrs	r3, r3, #2
 8006c50:	3306      	adds	r3, #6
 8006c52:	009b      	lsls	r3, r3, #2
 8006c54:	18d3      	adds	r3, r2, r3
 8006c56:	3304      	adds	r3, #4
 8006c58:	681b      	ldr	r3, [r3, #0]
 8006c5a:	1dfa      	adds	r2, r7, #7
 8006c5c:	7812      	ldrb	r2, [r2, #0]
 8006c5e:	0011      	movs	r1, r2
 8006c60:	2203      	movs	r2, #3
 8006c62:	400a      	ands	r2, r1
 8006c64:	00d2      	lsls	r2, r2, #3
 8006c66:	21ff      	movs	r1, #255	; 0xff
 8006c68:	4091      	lsls	r1, r2
 8006c6a:	000a      	movs	r2, r1
 8006c6c:	43d2      	mvns	r2, r2
 8006c6e:	401a      	ands	r2, r3
 8006c70:	0011      	movs	r1, r2
       (((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL) << _BIT_SHIFT(IRQn)));
 8006c72:	683b      	ldr	r3, [r7, #0]
 8006c74:	019b      	lsls	r3, r3, #6
 8006c76:	22ff      	movs	r2, #255	; 0xff
 8006c78:	401a      	ands	r2, r3
 8006c7a:	1dfb      	adds	r3, r7, #7
 8006c7c:	781b      	ldrb	r3, [r3, #0]
 8006c7e:	0018      	movs	r0, r3
 8006c80:	2303      	movs	r3, #3
 8006c82:	4003      	ands	r3, r0
 8006c84:	00db      	lsls	r3, r3, #3
 8006c86:	409a      	lsls	r2, r3
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 8006c88:	4809      	ldr	r0, [pc, #36]	; (8006cb0 <__NVIC_SetPriority+0xd8>)
 8006c8a:	1dfb      	adds	r3, r7, #7
 8006c8c:	781b      	ldrb	r3, [r3, #0]
 8006c8e:	001c      	movs	r4, r3
 8006c90:	230f      	movs	r3, #15
 8006c92:	4023      	ands	r3, r4
 8006c94:	3b08      	subs	r3, #8
 8006c96:	089b      	lsrs	r3, r3, #2
 8006c98:	430a      	orrs	r2, r1
 8006c9a:	3306      	adds	r3, #6
 8006c9c:	009b      	lsls	r3, r3, #2
 8006c9e:	18c3      	adds	r3, r0, r3
 8006ca0:	3304      	adds	r3, #4
 8006ca2:	601a      	str	r2, [r3, #0]
}
 8006ca4:	46c0      	nop			; (mov r8, r8)
 8006ca6:	46bd      	mov	sp, r7
 8006ca8:	b003      	add	sp, #12
 8006caa:	bd90      	pop	{r4, r7, pc}
 8006cac:	e000e100 	.word	0xe000e100
 8006cb0:	e000ed00 	.word	0xe000ed00

08006cb4 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8006cb4:	b580      	push	{r7, lr}
 8006cb6:	b082      	sub	sp, #8
 8006cb8:	af00      	add	r7, sp, #0
 8006cba:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8006cbc:	687b      	ldr	r3, [r7, #4]
 8006cbe:	1e5a      	subs	r2, r3, #1
 8006cc0:	2380      	movs	r3, #128	; 0x80
 8006cc2:	045b      	lsls	r3, r3, #17
 8006cc4:	429a      	cmp	r2, r3
 8006cc6:	d301      	bcc.n	8006ccc <SysTick_Config+0x18>
  {
    return (1UL);                                                   /* Reload value impossible */
 8006cc8:	2301      	movs	r3, #1
 8006cca:	e010      	b.n	8006cee <SysTick_Config+0x3a>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8006ccc:	4b0a      	ldr	r3, [pc, #40]	; (8006cf8 <SysTick_Config+0x44>)
 8006cce:	687a      	ldr	r2, [r7, #4]
 8006cd0:	3a01      	subs	r2, #1
 8006cd2:	605a      	str	r2, [r3, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8006cd4:	2301      	movs	r3, #1
 8006cd6:	425b      	negs	r3, r3
 8006cd8:	2103      	movs	r1, #3
 8006cda:	0018      	movs	r0, r3
 8006cdc:	f7ff ff7c 	bl	8006bd8 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8006ce0:	4b05      	ldr	r3, [pc, #20]	; (8006cf8 <SysTick_Config+0x44>)
 8006ce2:	2200      	movs	r2, #0
 8006ce4:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8006ce6:	4b04      	ldr	r3, [pc, #16]	; (8006cf8 <SysTick_Config+0x44>)
 8006ce8:	2207      	movs	r2, #7
 8006cea:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8006cec:	2300      	movs	r3, #0
}
 8006cee:	0018      	movs	r0, r3
 8006cf0:	46bd      	mov	sp, r7
 8006cf2:	b002      	add	sp, #8
 8006cf4:	bd80      	pop	{r7, pc}
 8006cf6:	46c0      	nop			; (mov r8, r8)
 8006cf8:	e000e010 	.word	0xe000e010

08006cfc <HAL_NVIC_SetPriority>:
  *         with stm32f0xx devices, this parameter is a dummy value and it is ignored, because 
  *         no subpriority supported in Cortex M0 based products.   
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8006cfc:	b580      	push	{r7, lr}
 8006cfe:	b084      	sub	sp, #16
 8006d00:	af00      	add	r7, sp, #0
 8006d02:	60b9      	str	r1, [r7, #8]
 8006d04:	607a      	str	r2, [r7, #4]
 8006d06:	210f      	movs	r1, #15
 8006d08:	187b      	adds	r3, r7, r1
 8006d0a:	1c02      	adds	r2, r0, #0
 8006d0c:	701a      	strb	r2, [r3, #0]
  /* Check the parameters */
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  NVIC_SetPriority(IRQn,PreemptPriority);
 8006d0e:	68ba      	ldr	r2, [r7, #8]
 8006d10:	187b      	adds	r3, r7, r1
 8006d12:	781b      	ldrb	r3, [r3, #0]
 8006d14:	b25b      	sxtb	r3, r3
 8006d16:	0011      	movs	r1, r2
 8006d18:	0018      	movs	r0, r3
 8006d1a:	f7ff ff5d 	bl	8006bd8 <__NVIC_SetPriority>
}
 8006d1e:	46c0      	nop			; (mov r8, r8)
 8006d20:	46bd      	mov	sp, r7
 8006d22:	b004      	add	sp, #16
 8006d24:	bd80      	pop	{r7, pc}

08006d26 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f0xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8006d26:	b580      	push	{r7, lr}
 8006d28:	b082      	sub	sp, #8
 8006d2a:	af00      	add	r7, sp, #0
 8006d2c:	0002      	movs	r2, r0
 8006d2e:	1dfb      	adds	r3, r7, #7
 8006d30:	701a      	strb	r2, [r3, #0]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8006d32:	1dfb      	adds	r3, r7, #7
 8006d34:	781b      	ldrb	r3, [r3, #0]
 8006d36:	b25b      	sxtb	r3, r3
 8006d38:	0018      	movs	r0, r3
 8006d3a:	f7ff ff33 	bl	8006ba4 <__NVIC_EnableIRQ>
}
 8006d3e:	46c0      	nop			; (mov r8, r8)
 8006d40:	46bd      	mov	sp, r7
 8006d42:	b002      	add	sp, #8
 8006d44:	bd80      	pop	{r7, pc}

08006d46 <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8006d46:	b580      	push	{r7, lr}
 8006d48:	b082      	sub	sp, #8
 8006d4a:	af00      	add	r7, sp, #0
 8006d4c:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8006d4e:	687b      	ldr	r3, [r7, #4]
 8006d50:	0018      	movs	r0, r3
 8006d52:	f7ff ffaf 	bl	8006cb4 <SysTick_Config>
 8006d56:	0003      	movs	r3, r0
}
 8006d58:	0018      	movs	r0, r3
 8006d5a:	46bd      	mov	sp, r7
 8006d5c:	b002      	add	sp, #8
 8006d5e:	bd80      	pop	{r7, pc}

08006d60 <HAL_DMA_Init>:
  * @param  hdma Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
 8006d60:	b580      	push	{r7, lr}
 8006d62:	b084      	sub	sp, #16
 8006d64:	af00      	add	r7, sp, #0
 8006d66:	6078      	str	r0, [r7, #4]
  uint32_t tmp = 0U;
 8006d68:	2300      	movs	r3, #0
 8006d6a:	60fb      	str	r3, [r7, #12]

  /* Check the DMA handle allocation */
  if (NULL == hdma)
 8006d6c:	687b      	ldr	r3, [r7, #4]
 8006d6e:	2b00      	cmp	r3, #0
 8006d70:	d101      	bne.n	8006d76 <HAL_DMA_Init+0x16>
  {
    return HAL_ERROR;
 8006d72:	2301      	movs	r3, #1
 8006d74:	e036      	b.n	8006de4 <HAL_DMA_Init+0x84>
  assert_param(IS_DMA_MEMORY_DATA_SIZE(hdma->Init.MemDataAlignment));
  assert_param(IS_DMA_MODE(hdma->Init.Mode));
  assert_param(IS_DMA_PRIORITY(hdma->Init.Priority));

  /* Change DMA peripheral state */
  hdma->State = HAL_DMA_STATE_BUSY;
 8006d76:	687b      	ldr	r3, [r7, #4]
 8006d78:	2221      	movs	r2, #33	; 0x21
 8006d7a:	2102      	movs	r1, #2
 8006d7c:	5499      	strb	r1, [r3, r2]

  /* Get the CR register value */
  tmp = hdma->Instance->CCR;
 8006d7e:	687b      	ldr	r3, [r7, #4]
 8006d80:	681b      	ldr	r3, [r3, #0]
 8006d82:	681b      	ldr	r3, [r3, #0]
 8006d84:	60fb      	str	r3, [r7, #12]

  /* Clear PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR bits */
  tmp &= ((uint32_t)~(DMA_CCR_PL    | DMA_CCR_MSIZE  | DMA_CCR_PSIZE  | \
 8006d86:	68fb      	ldr	r3, [r7, #12]
 8006d88:	4a18      	ldr	r2, [pc, #96]	; (8006dec <HAL_DMA_Init+0x8c>)
 8006d8a:	4013      	ands	r3, r2
 8006d8c:	60fb      	str	r3, [r7, #12]
                      DMA_CCR_MINC  | DMA_CCR_PINC   | DMA_CCR_CIRC   | \
                      DMA_CCR_DIR));

  /* Prepare the DMA Channel configuration */
  tmp |=  hdma->Init.Direction        |
 8006d8e:	687b      	ldr	r3, [r7, #4]
 8006d90:	685a      	ldr	r2, [r3, #4]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8006d92:	687b      	ldr	r3, [r7, #4]
 8006d94:	689b      	ldr	r3, [r3, #8]
  tmp |=  hdma->Init.Direction        |
 8006d96:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8006d98:	687b      	ldr	r3, [r7, #4]
 8006d9a:	68db      	ldr	r3, [r3, #12]
 8006d9c:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8006d9e:	687b      	ldr	r3, [r7, #4]
 8006da0:	691b      	ldr	r3, [r3, #16]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8006da2:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8006da4:	687b      	ldr	r3, [r7, #4]
 8006da6:	695b      	ldr	r3, [r3, #20]
 8006da8:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8006daa:	687b      	ldr	r3, [r7, #4]
 8006dac:	699b      	ldr	r3, [r3, #24]
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8006dae:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8006db0:	687b      	ldr	r3, [r7, #4]
 8006db2:	69db      	ldr	r3, [r3, #28]
 8006db4:	4313      	orrs	r3, r2
  tmp |=  hdma->Init.Direction        |
 8006db6:	68fa      	ldr	r2, [r7, #12]
 8006db8:	4313      	orrs	r3, r2
 8006dba:	60fb      	str	r3, [r7, #12]

  /* Write to DMA Channel CR register */
  hdma->Instance->CCR = tmp;
 8006dbc:	687b      	ldr	r3, [r7, #4]
 8006dbe:	681b      	ldr	r3, [r3, #0]
 8006dc0:	68fa      	ldr	r2, [r7, #12]
 8006dc2:	601a      	str	r2, [r3, #0]

  /* Initialize DmaBaseAddress and ChannelIndex parameters used
     by HAL_DMA_IRQHandler() and HAL_DMA_PollForTransfer() */
  DMA_CalcBaseAndBitshift(hdma);
 8006dc4:	687b      	ldr	r3, [r7, #4]
 8006dc6:	0018      	movs	r0, r3
 8006dc8:	f000 f98c 	bl	80070e4 <DMA_CalcBaseAndBitshift>

  /* Initialise the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8006dcc:	687b      	ldr	r3, [r7, #4]
 8006dce:	2200      	movs	r2, #0
 8006dd0:	639a      	str	r2, [r3, #56]	; 0x38

  /* Initialize the DMA state*/
  hdma->State = HAL_DMA_STATE_READY;
 8006dd2:	687b      	ldr	r3, [r7, #4]
 8006dd4:	2221      	movs	r2, #33	; 0x21
 8006dd6:	2101      	movs	r1, #1
 8006dd8:	5499      	strb	r1, [r3, r2]

  /* Allocate lock resource and initialize it */
  hdma->Lock = HAL_UNLOCKED;
 8006dda:	687b      	ldr	r3, [r7, #4]
 8006ddc:	2220      	movs	r2, #32
 8006dde:	2100      	movs	r1, #0
 8006de0:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 8006de2:	2300      	movs	r3, #0
}
 8006de4:	0018      	movs	r0, r3
 8006de6:	46bd      	mov	sp, r7
 8006de8:	b004      	add	sp, #16
 8006dea:	bd80      	pop	{r7, pc}
 8006dec:	ffffc00f 	.word	0xffffc00f

08006df0 <HAL_DMA_Start_IT>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Start_IT(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8006df0:	b580      	push	{r7, lr}
 8006df2:	b086      	sub	sp, #24
 8006df4:	af00      	add	r7, sp, #0
 8006df6:	60f8      	str	r0, [r7, #12]
 8006df8:	60b9      	str	r1, [r7, #8]
 8006dfa:	607a      	str	r2, [r7, #4]
 8006dfc:	603b      	str	r3, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8006dfe:	2317      	movs	r3, #23
 8006e00:	18fb      	adds	r3, r7, r3
 8006e02:	2200      	movs	r2, #0
 8006e04:	701a      	strb	r2, [r3, #0]

  /* Check the parameters */
  assert_param(IS_DMA_BUFFER_SIZE(DataLength));

  /* Process locked */
  __HAL_LOCK(hdma);
 8006e06:	68fb      	ldr	r3, [r7, #12]
 8006e08:	2220      	movs	r2, #32
 8006e0a:	5c9b      	ldrb	r3, [r3, r2]
 8006e0c:	2b01      	cmp	r3, #1
 8006e0e:	d101      	bne.n	8006e14 <HAL_DMA_Start_IT+0x24>
 8006e10:	2302      	movs	r3, #2
 8006e12:	e04f      	b.n	8006eb4 <HAL_DMA_Start_IT+0xc4>
 8006e14:	68fb      	ldr	r3, [r7, #12]
 8006e16:	2220      	movs	r2, #32
 8006e18:	2101      	movs	r1, #1
 8006e1a:	5499      	strb	r1, [r3, r2]

  if (HAL_DMA_STATE_READY == hdma->State)
 8006e1c:	68fb      	ldr	r3, [r7, #12]
 8006e1e:	2221      	movs	r2, #33	; 0x21
 8006e20:	5c9b      	ldrb	r3, [r3, r2]
 8006e22:	b2db      	uxtb	r3, r3
 8006e24:	2b01      	cmp	r3, #1
 8006e26:	d13a      	bne.n	8006e9e <HAL_DMA_Start_IT+0xae>
  {
    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 8006e28:	68fb      	ldr	r3, [r7, #12]
 8006e2a:	2221      	movs	r2, #33	; 0x21
 8006e2c:	2102      	movs	r1, #2
 8006e2e:	5499      	strb	r1, [r3, r2]

    hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8006e30:	68fb      	ldr	r3, [r7, #12]
 8006e32:	2200      	movs	r2, #0
 8006e34:	639a      	str	r2, [r3, #56]	; 0x38

    /* Disable the peripheral */
    hdma->Instance->CCR &= ~DMA_CCR_EN;
 8006e36:	68fb      	ldr	r3, [r7, #12]
 8006e38:	681b      	ldr	r3, [r3, #0]
 8006e3a:	681a      	ldr	r2, [r3, #0]
 8006e3c:	68fb      	ldr	r3, [r7, #12]
 8006e3e:	681b      	ldr	r3, [r3, #0]
 8006e40:	2101      	movs	r1, #1
 8006e42:	438a      	bics	r2, r1
 8006e44:	601a      	str	r2, [r3, #0]

    /* Configure the source, destination address and the data length */
    DMA_SetConfig(hdma, SrcAddress, DstAddress, DataLength);
 8006e46:	683b      	ldr	r3, [r7, #0]
 8006e48:	687a      	ldr	r2, [r7, #4]
 8006e4a:	68b9      	ldr	r1, [r7, #8]
 8006e4c:	68f8      	ldr	r0, [r7, #12]
 8006e4e:	f000 f91c 	bl	800708a <DMA_SetConfig>

    /* Enable the transfer complete, & transfer error interrupts */
    /* Half transfer interrupt is optional: enable it only if associated callback is available */
    if (NULL != hdma->XferHalfCpltCallback)
 8006e52:	68fb      	ldr	r3, [r7, #12]
 8006e54:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006e56:	2b00      	cmp	r3, #0
 8006e58:	d008      	beq.n	8006e6c <HAL_DMA_Start_IT+0x7c>
    {
      hdma->Instance->CCR |= (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE);
 8006e5a:	68fb      	ldr	r3, [r7, #12]
 8006e5c:	681b      	ldr	r3, [r3, #0]
 8006e5e:	681a      	ldr	r2, [r3, #0]
 8006e60:	68fb      	ldr	r3, [r7, #12]
 8006e62:	681b      	ldr	r3, [r3, #0]
 8006e64:	210e      	movs	r1, #14
 8006e66:	430a      	orrs	r2, r1
 8006e68:	601a      	str	r2, [r3, #0]
 8006e6a:	e00f      	b.n	8006e8c <HAL_DMA_Start_IT+0x9c>
    }
    else
    {
      hdma->Instance->CCR |= (DMA_IT_TC | DMA_IT_TE);
 8006e6c:	68fb      	ldr	r3, [r7, #12]
 8006e6e:	681b      	ldr	r3, [r3, #0]
 8006e70:	681a      	ldr	r2, [r3, #0]
 8006e72:	68fb      	ldr	r3, [r7, #12]
 8006e74:	681b      	ldr	r3, [r3, #0]
 8006e76:	210a      	movs	r1, #10
 8006e78:	430a      	orrs	r2, r1
 8006e7a:	601a      	str	r2, [r3, #0]
      hdma->Instance->CCR &= ~DMA_IT_HT;
 8006e7c:	68fb      	ldr	r3, [r7, #12]
 8006e7e:	681b      	ldr	r3, [r3, #0]
 8006e80:	681a      	ldr	r2, [r3, #0]
 8006e82:	68fb      	ldr	r3, [r7, #12]
 8006e84:	681b      	ldr	r3, [r3, #0]
 8006e86:	2104      	movs	r1, #4
 8006e88:	438a      	bics	r2, r1
 8006e8a:	601a      	str	r2, [r3, #0]
    }

    /* Enable the Peripheral */
    hdma->Instance->CCR |= DMA_CCR_EN;
 8006e8c:	68fb      	ldr	r3, [r7, #12]
 8006e8e:	681b      	ldr	r3, [r3, #0]
 8006e90:	681a      	ldr	r2, [r3, #0]
 8006e92:	68fb      	ldr	r3, [r7, #12]
 8006e94:	681b      	ldr	r3, [r3, #0]
 8006e96:	2101      	movs	r1, #1
 8006e98:	430a      	orrs	r2, r1
 8006e9a:	601a      	str	r2, [r3, #0]
 8006e9c:	e007      	b.n	8006eae <HAL_DMA_Start_IT+0xbe>
  }
  else
  {
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8006e9e:	68fb      	ldr	r3, [r7, #12]
 8006ea0:	2220      	movs	r2, #32
 8006ea2:	2100      	movs	r1, #0
 8006ea4:	5499      	strb	r1, [r3, r2]

    /* Remain BUSY */
    status = HAL_BUSY;
 8006ea6:	2317      	movs	r3, #23
 8006ea8:	18fb      	adds	r3, r7, r3
 8006eaa:	2202      	movs	r2, #2
 8006eac:	701a      	strb	r2, [r3, #0]
  }

  return status;
 8006eae:	2317      	movs	r3, #23
 8006eb0:	18fb      	adds	r3, r7, r3
 8006eb2:	781b      	ldrb	r3, [r3, #0]
}
 8006eb4:	0018      	movs	r0, r3
 8006eb6:	46bd      	mov	sp, r7
 8006eb8:	b006      	add	sp, #24
 8006eba:	bd80      	pop	{r7, pc}

08006ebc <HAL_DMA_Abort_IT>:
  * @param  hdma  pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 8006ebc:	b580      	push	{r7, lr}
 8006ebe:	b084      	sub	sp, #16
 8006ec0:	af00      	add	r7, sp, #0
 8006ec2:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8006ec4:	210f      	movs	r1, #15
 8006ec6:	187b      	adds	r3, r7, r1
 8006ec8:	2200      	movs	r2, #0
 8006eca:	701a      	strb	r2, [r3, #0]

  if (HAL_DMA_STATE_BUSY != hdma->State)
 8006ecc:	687b      	ldr	r3, [r7, #4]
 8006ece:	2221      	movs	r2, #33	; 0x21
 8006ed0:	5c9b      	ldrb	r3, [r3, r2]
 8006ed2:	b2db      	uxtb	r3, r3
 8006ed4:	2b02      	cmp	r3, #2
 8006ed6:	d006      	beq.n	8006ee6 <HAL_DMA_Abort_IT+0x2a>
  {
    /* no transfer ongoing */
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8006ed8:	687b      	ldr	r3, [r7, #4]
 8006eda:	2204      	movs	r2, #4
 8006edc:	639a      	str	r2, [r3, #56]	; 0x38

    status = HAL_ERROR;
 8006ede:	187b      	adds	r3, r7, r1
 8006ee0:	2201      	movs	r2, #1
 8006ee2:	701a      	strb	r2, [r3, #0]
 8006ee4:	e028      	b.n	8006f38 <HAL_DMA_Abort_IT+0x7c>
  }
  else
  {

    /* Disable DMA IT */
    hdma->Instance->CCR &= ~(DMA_IT_TC | DMA_IT_HT | DMA_IT_TE);
 8006ee6:	687b      	ldr	r3, [r7, #4]
 8006ee8:	681b      	ldr	r3, [r3, #0]
 8006eea:	681a      	ldr	r2, [r3, #0]
 8006eec:	687b      	ldr	r3, [r7, #4]
 8006eee:	681b      	ldr	r3, [r3, #0]
 8006ef0:	210e      	movs	r1, #14
 8006ef2:	438a      	bics	r2, r1
 8006ef4:	601a      	str	r2, [r3, #0]

    /* Disable the channel */
    hdma->Instance->CCR &= ~DMA_CCR_EN;
 8006ef6:	687b      	ldr	r3, [r7, #4]
 8006ef8:	681b      	ldr	r3, [r3, #0]
 8006efa:	681a      	ldr	r2, [r3, #0]
 8006efc:	687b      	ldr	r3, [r7, #4]
 8006efe:	681b      	ldr	r3, [r3, #0]
 8006f00:	2101      	movs	r1, #1
 8006f02:	438a      	bics	r2, r1
 8006f04:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = DMA_FLAG_GL1 << hdma->ChannelIndex;
 8006f06:	687b      	ldr	r3, [r7, #4]
 8006f08:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8006f0a:	687b      	ldr	r3, [r7, #4]
 8006f0c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8006f0e:	2101      	movs	r1, #1
 8006f10:	4091      	lsls	r1, r2
 8006f12:	000a      	movs	r2, r1
 8006f14:	605a      	str	r2, [r3, #4]

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 8006f16:	687b      	ldr	r3, [r7, #4]
 8006f18:	2221      	movs	r2, #33	; 0x21
 8006f1a:	2101      	movs	r1, #1
 8006f1c:	5499      	strb	r1, [r3, r2]

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8006f1e:	687b      	ldr	r3, [r7, #4]
 8006f20:	2220      	movs	r2, #32
 8006f22:	2100      	movs	r1, #0
 8006f24:	5499      	strb	r1, [r3, r2]

    /* Call User Abort callback */
    if (hdma->XferAbortCallback != NULL)
 8006f26:	687b      	ldr	r3, [r7, #4]
 8006f28:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8006f2a:	2b00      	cmp	r3, #0
 8006f2c:	d004      	beq.n	8006f38 <HAL_DMA_Abort_IT+0x7c>
    {
      hdma->XferAbortCallback(hdma);
 8006f2e:	687b      	ldr	r3, [r7, #4]
 8006f30:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8006f32:	687a      	ldr	r2, [r7, #4]
 8006f34:	0010      	movs	r0, r2
 8006f36:	4798      	blx	r3
    }
  }
  return status;
 8006f38:	230f      	movs	r3, #15
 8006f3a:	18fb      	adds	r3, r7, r3
 8006f3c:	781b      	ldrb	r3, [r3, #0]
}
 8006f3e:	0018      	movs	r0, r3
 8006f40:	46bd      	mov	sp, r7
 8006f42:	b004      	add	sp, #16
 8006f44:	bd80      	pop	{r7, pc}

08006f46 <HAL_DMA_IRQHandler>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
  * @retval None
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
 8006f46:	b580      	push	{r7, lr}
 8006f48:	b084      	sub	sp, #16
 8006f4a:	af00      	add	r7, sp, #0
 8006f4c:	6078      	str	r0, [r7, #4]
  uint32_t flag_it = hdma->DmaBaseAddress->ISR;
 8006f4e:	687b      	ldr	r3, [r7, #4]
 8006f50:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8006f52:	681b      	ldr	r3, [r3, #0]
 8006f54:	60fb      	str	r3, [r7, #12]
  uint32_t source_it = hdma->Instance->CCR;
 8006f56:	687b      	ldr	r3, [r7, #4]
 8006f58:	681b      	ldr	r3, [r3, #0]
 8006f5a:	681b      	ldr	r3, [r3, #0]
 8006f5c:	60bb      	str	r3, [r7, #8]

  /* Half Transfer Complete Interrupt management ******************************/
  if ((RESET != (flag_it & (DMA_FLAG_HT1 << hdma->ChannelIndex))) && (RESET != (source_it & DMA_IT_HT)))
 8006f5e:	687b      	ldr	r3, [r7, #4]
 8006f60:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006f62:	2204      	movs	r2, #4
 8006f64:	409a      	lsls	r2, r3
 8006f66:	0013      	movs	r3, r2
 8006f68:	68fa      	ldr	r2, [r7, #12]
 8006f6a:	4013      	ands	r3, r2
 8006f6c:	d024      	beq.n	8006fb8 <HAL_DMA_IRQHandler+0x72>
 8006f6e:	68bb      	ldr	r3, [r7, #8]
 8006f70:	2204      	movs	r2, #4
 8006f72:	4013      	ands	r3, r2
 8006f74:	d020      	beq.n	8006fb8 <HAL_DMA_IRQHandler+0x72>
  {
    /* Disable the half transfer interrupt if the DMA mode is not CIRCULAR */
    if ((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 8006f76:	687b      	ldr	r3, [r7, #4]
 8006f78:	681b      	ldr	r3, [r3, #0]
 8006f7a:	681b      	ldr	r3, [r3, #0]
 8006f7c:	2220      	movs	r2, #32
 8006f7e:	4013      	ands	r3, r2
 8006f80:	d107      	bne.n	8006f92 <HAL_DMA_IRQHandler+0x4c>
    {
      /* Disable the half transfer interrupt */
      hdma->Instance->CCR &= ~DMA_IT_HT;
 8006f82:	687b      	ldr	r3, [r7, #4]
 8006f84:	681b      	ldr	r3, [r3, #0]
 8006f86:	681a      	ldr	r2, [r3, #0]
 8006f88:	687b      	ldr	r3, [r7, #4]
 8006f8a:	681b      	ldr	r3, [r3, #0]
 8006f8c:	2104      	movs	r1, #4
 8006f8e:	438a      	bics	r2, r1
 8006f90:	601a      	str	r2, [r3, #0]
    }

    /* Clear the half transfer complete flag */
    hdma->DmaBaseAddress->IFCR = DMA_FLAG_HT1 << hdma->ChannelIndex;
 8006f92:	687b      	ldr	r3, [r7, #4]
 8006f94:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8006f96:	687b      	ldr	r3, [r7, #4]
 8006f98:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8006f9a:	2104      	movs	r1, #4
 8006f9c:	4091      	lsls	r1, r2
 8006f9e:	000a      	movs	r2, r1
 8006fa0:	605a      	str	r2, [r3, #4]

    /* DMA peripheral state is not updated in Half Transfer */
    /* State is updated only in Transfer Complete case */

    if (hdma->XferHalfCpltCallback != NULL)
 8006fa2:	687b      	ldr	r3, [r7, #4]
 8006fa4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006fa6:	2b00      	cmp	r3, #0
 8006fa8:	d100      	bne.n	8006fac <HAL_DMA_IRQHandler+0x66>
 8006faa:	e06a      	b.n	8007082 <HAL_DMA_IRQHandler+0x13c>
    {
      /* Half transfer callback */
      hdma->XferHalfCpltCallback(hdma);
 8006fac:	687b      	ldr	r3, [r7, #4]
 8006fae:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006fb0:	687a      	ldr	r2, [r7, #4]
 8006fb2:	0010      	movs	r0, r2
 8006fb4:	4798      	blx	r3
    if (hdma->XferHalfCpltCallback != NULL)
 8006fb6:	e064      	b.n	8007082 <HAL_DMA_IRQHandler+0x13c>
    }
  }

  /* Transfer Complete Interrupt management ***********************************/
  else if ((RESET != (flag_it & (DMA_FLAG_TC1 << hdma->ChannelIndex))) && (RESET != (source_it & DMA_IT_TC)))
 8006fb8:	687b      	ldr	r3, [r7, #4]
 8006fba:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006fbc:	2202      	movs	r2, #2
 8006fbe:	409a      	lsls	r2, r3
 8006fc0:	0013      	movs	r3, r2
 8006fc2:	68fa      	ldr	r2, [r7, #12]
 8006fc4:	4013      	ands	r3, r2
 8006fc6:	d02b      	beq.n	8007020 <HAL_DMA_IRQHandler+0xda>
 8006fc8:	68bb      	ldr	r3, [r7, #8]
 8006fca:	2202      	movs	r2, #2
 8006fcc:	4013      	ands	r3, r2
 8006fce:	d027      	beq.n	8007020 <HAL_DMA_IRQHandler+0xda>
  {
    if ((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 8006fd0:	687b      	ldr	r3, [r7, #4]
 8006fd2:	681b      	ldr	r3, [r3, #0]
 8006fd4:	681b      	ldr	r3, [r3, #0]
 8006fd6:	2220      	movs	r2, #32
 8006fd8:	4013      	ands	r3, r2
 8006fda:	d10b      	bne.n	8006ff4 <HAL_DMA_IRQHandler+0xae>
    {
      /* Disable the transfer complete  & transfer error interrupts */
      /* if the DMA mode is not CIRCULAR */
      hdma->Instance->CCR &= ~(DMA_IT_TC | DMA_IT_TE);
 8006fdc:	687b      	ldr	r3, [r7, #4]
 8006fde:	681b      	ldr	r3, [r3, #0]
 8006fe0:	681a      	ldr	r2, [r3, #0]
 8006fe2:	687b      	ldr	r3, [r7, #4]
 8006fe4:	681b      	ldr	r3, [r3, #0]
 8006fe6:	210a      	movs	r1, #10
 8006fe8:	438a      	bics	r2, r1
 8006fea:	601a      	str	r2, [r3, #0]

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 8006fec:	687b      	ldr	r3, [r7, #4]
 8006fee:	2221      	movs	r2, #33	; 0x21
 8006ff0:	2101      	movs	r1, #1
 8006ff2:	5499      	strb	r1, [r3, r2]
    }

    /* Clear the transfer complete flag */
    hdma->DmaBaseAddress->IFCR = DMA_FLAG_TC1 << hdma->ChannelIndex;
 8006ff4:	687b      	ldr	r3, [r7, #4]
 8006ff6:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8006ff8:	687b      	ldr	r3, [r7, #4]
 8006ffa:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8006ffc:	2102      	movs	r1, #2
 8006ffe:	4091      	lsls	r1, r2
 8007000:	000a      	movs	r2, r1
 8007002:	605a      	str	r2, [r3, #4]

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8007004:	687b      	ldr	r3, [r7, #4]
 8007006:	2220      	movs	r2, #32
 8007008:	2100      	movs	r1, #0
 800700a:	5499      	strb	r1, [r3, r2]

    if (hdma->XferCpltCallback != NULL)
 800700c:	687b      	ldr	r3, [r7, #4]
 800700e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8007010:	2b00      	cmp	r3, #0
 8007012:	d036      	beq.n	8007082 <HAL_DMA_IRQHandler+0x13c>
    {
      /* Transfer complete callback */
      hdma->XferCpltCallback(hdma);
 8007014:	687b      	ldr	r3, [r7, #4]
 8007016:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8007018:	687a      	ldr	r2, [r7, #4]
 800701a:	0010      	movs	r0, r2
 800701c:	4798      	blx	r3
    if (hdma->XferCpltCallback != NULL)
 800701e:	e030      	b.n	8007082 <HAL_DMA_IRQHandler+0x13c>
    }
  }

  /* Transfer Error Interrupt management ***************************************/
  else if ((RESET != (flag_it & (DMA_FLAG_TE1 << hdma->ChannelIndex))) && (RESET != (source_it & DMA_IT_TE)))
 8007020:	687b      	ldr	r3, [r7, #4]
 8007022:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007024:	2208      	movs	r2, #8
 8007026:	409a      	lsls	r2, r3
 8007028:	0013      	movs	r3, r2
 800702a:	68fa      	ldr	r2, [r7, #12]
 800702c:	4013      	ands	r3, r2
 800702e:	d028      	beq.n	8007082 <HAL_DMA_IRQHandler+0x13c>
 8007030:	68bb      	ldr	r3, [r7, #8]
 8007032:	2208      	movs	r2, #8
 8007034:	4013      	ands	r3, r2
 8007036:	d024      	beq.n	8007082 <HAL_DMA_IRQHandler+0x13c>
  {
    /* When a DMA transfer error occurs */
    /* A hardware clear of its EN bits is performed */
    /* Then, disable all DMA interrupts */
    hdma->Instance->CCR &= ~(DMA_IT_TC | DMA_IT_HT | DMA_IT_TE);
 8007038:	687b      	ldr	r3, [r7, #4]
 800703a:	681b      	ldr	r3, [r3, #0]
 800703c:	681a      	ldr	r2, [r3, #0]
 800703e:	687b      	ldr	r3, [r7, #4]
 8007040:	681b      	ldr	r3, [r3, #0]
 8007042:	210e      	movs	r1, #14
 8007044:	438a      	bics	r2, r1
 8007046:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = DMA_FLAG_GL1 << hdma->ChannelIndex;
 8007048:	687b      	ldr	r3, [r7, #4]
 800704a:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 800704c:	687b      	ldr	r3, [r7, #4]
 800704e:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8007050:	2101      	movs	r1, #1
 8007052:	4091      	lsls	r1, r2
 8007054:	000a      	movs	r2, r1
 8007056:	605a      	str	r2, [r3, #4]

    /* Update error code */
    hdma->ErrorCode = HAL_DMA_ERROR_TE;
 8007058:	687b      	ldr	r3, [r7, #4]
 800705a:	2201      	movs	r2, #1
 800705c:	639a      	str	r2, [r3, #56]	; 0x38

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 800705e:	687b      	ldr	r3, [r7, #4]
 8007060:	2221      	movs	r2, #33	; 0x21
 8007062:	2101      	movs	r1, #1
 8007064:	5499      	strb	r1, [r3, r2]

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8007066:	687b      	ldr	r3, [r7, #4]
 8007068:	2220      	movs	r2, #32
 800706a:	2100      	movs	r1, #0
 800706c:	5499      	strb	r1, [r3, r2]

    if (hdma->XferErrorCallback != NULL)
 800706e:	687b      	ldr	r3, [r7, #4]
 8007070:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8007072:	2b00      	cmp	r3, #0
 8007074:	d005      	beq.n	8007082 <HAL_DMA_IRQHandler+0x13c>
    {
      /* Transfer error callback */
      hdma->XferErrorCallback(hdma);
 8007076:	687b      	ldr	r3, [r7, #4]
 8007078:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800707a:	687a      	ldr	r2, [r7, #4]
 800707c:	0010      	movs	r0, r2
 800707e:	4798      	blx	r3
    }
  }
}
 8007080:	e7ff      	b.n	8007082 <HAL_DMA_IRQHandler+0x13c>
 8007082:	46c0      	nop			; (mov r8, r8)
 8007084:	46bd      	mov	sp, r7
 8007086:	b004      	add	sp, #16
 8007088:	bd80      	pop	{r7, pc}

0800708a <DMA_SetConfig>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
static void DMA_SetConfig(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 800708a:	b580      	push	{r7, lr}
 800708c:	b084      	sub	sp, #16
 800708e:	af00      	add	r7, sp, #0
 8007090:	60f8      	str	r0, [r7, #12]
 8007092:	60b9      	str	r1, [r7, #8]
 8007094:	607a      	str	r2, [r7, #4]
 8007096:	603b      	str	r3, [r7, #0]
  /* Clear all flags */
  hdma->DmaBaseAddress->IFCR  = (DMA_FLAG_GL1 << hdma->ChannelIndex);
 8007098:	68fb      	ldr	r3, [r7, #12]
 800709a:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 800709c:	68fb      	ldr	r3, [r7, #12]
 800709e:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80070a0:	2101      	movs	r1, #1
 80070a2:	4091      	lsls	r1, r2
 80070a4:	000a      	movs	r2, r1
 80070a6:	605a      	str	r2, [r3, #4]

  /* Configure DMA Channel data length */
  hdma->Instance->CNDTR = DataLength;
 80070a8:	68fb      	ldr	r3, [r7, #12]
 80070aa:	681b      	ldr	r3, [r3, #0]
 80070ac:	683a      	ldr	r2, [r7, #0]
 80070ae:	605a      	str	r2, [r3, #4]

  /* Memory to Peripheral */
  if ((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 80070b0:	68fb      	ldr	r3, [r7, #12]
 80070b2:	685b      	ldr	r3, [r3, #4]
 80070b4:	2b10      	cmp	r3, #16
 80070b6:	d108      	bne.n	80070ca <DMA_SetConfig+0x40>
  {
    /* Configure DMA Channel destination address */
    hdma->Instance->CPAR = DstAddress;
 80070b8:	68fb      	ldr	r3, [r7, #12]
 80070ba:	681b      	ldr	r3, [r3, #0]
 80070bc:	687a      	ldr	r2, [r7, #4]
 80070be:	609a      	str	r2, [r3, #8]

    /* Configure DMA Channel source address */
    hdma->Instance->CMAR = SrcAddress;
 80070c0:	68fb      	ldr	r3, [r7, #12]
 80070c2:	681b      	ldr	r3, [r3, #0]
 80070c4:	68ba      	ldr	r2, [r7, #8]
 80070c6:	60da      	str	r2, [r3, #12]
    hdma->Instance->CPAR = SrcAddress;

    /* Configure DMA Channel destination address */
    hdma->Instance->CMAR = DstAddress;
  }
}
 80070c8:	e007      	b.n	80070da <DMA_SetConfig+0x50>
    hdma->Instance->CPAR = SrcAddress;
 80070ca:	68fb      	ldr	r3, [r7, #12]
 80070cc:	681b      	ldr	r3, [r3, #0]
 80070ce:	68ba      	ldr	r2, [r7, #8]
 80070d0:	609a      	str	r2, [r3, #8]
    hdma->Instance->CMAR = DstAddress;
 80070d2:	68fb      	ldr	r3, [r7, #12]
 80070d4:	681b      	ldr	r3, [r3, #0]
 80070d6:	687a      	ldr	r2, [r7, #4]
 80070d8:	60da      	str	r2, [r3, #12]
}
 80070da:	46c0      	nop			; (mov r8, r8)
 80070dc:	46bd      	mov	sp, r7
 80070de:	b004      	add	sp, #16
 80070e0:	bd80      	pop	{r7, pc}
	...

080070e4 <DMA_CalcBaseAndBitshift>:
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream.
  * @retval None
  */
static void DMA_CalcBaseAndBitshift(DMA_HandleTypeDef *hdma)
{
 80070e4:	b580      	push	{r7, lr}
 80070e6:	b082      	sub	sp, #8
 80070e8:	af00      	add	r7, sp, #0
 80070ea:	6078      	str	r0, [r7, #4]
    hdma->DmaBaseAddress = DMA2;
  }
#else
  /* calculation of the channel index */
  /* DMA1 */
  hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA1_Channel1) / ((uint32_t)DMA1_Channel2 - (uint32_t)DMA1_Channel1)) << 2U;
 80070ec:	687b      	ldr	r3, [r7, #4]
 80070ee:	681b      	ldr	r3, [r3, #0]
 80070f0:	4a08      	ldr	r2, [pc, #32]	; (8007114 <DMA_CalcBaseAndBitshift+0x30>)
 80070f2:	4694      	mov	ip, r2
 80070f4:	4463      	add	r3, ip
 80070f6:	2114      	movs	r1, #20
 80070f8:	0018      	movs	r0, r3
 80070fa:	f7f9 f805 	bl	8000108 <__udivsi3>
 80070fe:	0003      	movs	r3, r0
 8007100:	009a      	lsls	r2, r3, #2
 8007102:	687b      	ldr	r3, [r7, #4]
 8007104:	641a      	str	r2, [r3, #64]	; 0x40
  hdma->DmaBaseAddress = DMA1;
 8007106:	687b      	ldr	r3, [r7, #4]
 8007108:	4a03      	ldr	r2, [pc, #12]	; (8007118 <DMA_CalcBaseAndBitshift+0x34>)
 800710a:	63da      	str	r2, [r3, #60]	; 0x3c
#endif
}
 800710c:	46c0      	nop			; (mov r8, r8)
 800710e:	46bd      	mov	sp, r7
 8007110:	b002      	add	sp, #8
 8007112:	bd80      	pop	{r7, pc}
 8007114:	bffdfff8 	.word	0xbffdfff8
 8007118:	40020000 	.word	0x40020000

0800711c <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 800711c:	b580      	push	{r7, lr}
 800711e:	b086      	sub	sp, #24
 8007120:	af00      	add	r7, sp, #0
 8007122:	6078      	str	r0, [r7, #4]
 8007124:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 8007126:	2300      	movs	r3, #0
 8007128:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 800712a:	e155      	b.n	80073d8 <HAL_GPIO_Init+0x2bc>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1uL << position);
 800712c:	683b      	ldr	r3, [r7, #0]
 800712e:	681b      	ldr	r3, [r3, #0]
 8007130:	2101      	movs	r1, #1
 8007132:	697a      	ldr	r2, [r7, #20]
 8007134:	4091      	lsls	r1, r2
 8007136:	000a      	movs	r2, r1
 8007138:	4013      	ands	r3, r2
 800713a:	60fb      	str	r3, [r7, #12]

    if (iocurrent != 0x00u)
 800713c:	68fb      	ldr	r3, [r7, #12]
 800713e:	2b00      	cmp	r3, #0
 8007140:	d100      	bne.n	8007144 <HAL_GPIO_Init+0x28>
 8007142:	e146      	b.n	80073d2 <HAL_GPIO_Init+0x2b6>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) ||
 8007144:	683b      	ldr	r3, [r7, #0]
 8007146:	685b      	ldr	r3, [r3, #4]
 8007148:	2203      	movs	r2, #3
 800714a:	4013      	ands	r3, r2
 800714c:	2b01      	cmp	r3, #1
 800714e:	d005      	beq.n	800715c <HAL_GPIO_Init+0x40>
         ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 8007150:	683b      	ldr	r3, [r7, #0]
 8007152:	685b      	ldr	r3, [r3, #4]
 8007154:	2203      	movs	r2, #3
 8007156:	4013      	ands	r3, r2
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) ||
 8007158:	2b02      	cmp	r3, #2
 800715a:	d130      	bne.n	80071be <HAL_GPIO_Init+0xa2>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 800715c:	687b      	ldr	r3, [r7, #4]
 800715e:	689b      	ldr	r3, [r3, #8]
 8007160:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2u));
 8007162:	697b      	ldr	r3, [r7, #20]
 8007164:	005b      	lsls	r3, r3, #1
 8007166:	2203      	movs	r2, #3
 8007168:	409a      	lsls	r2, r3
 800716a:	0013      	movs	r3, r2
 800716c:	43da      	mvns	r2, r3
 800716e:	693b      	ldr	r3, [r7, #16]
 8007170:	4013      	ands	r3, r2
 8007172:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2u));
 8007174:	683b      	ldr	r3, [r7, #0]
 8007176:	68da      	ldr	r2, [r3, #12]
 8007178:	697b      	ldr	r3, [r7, #20]
 800717a:	005b      	lsls	r3, r3, #1
 800717c:	409a      	lsls	r2, r3
 800717e:	0013      	movs	r3, r2
 8007180:	693a      	ldr	r2, [r7, #16]
 8007182:	4313      	orrs	r3, r2
 8007184:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 8007186:	687b      	ldr	r3, [r7, #4]
 8007188:	693a      	ldr	r2, [r7, #16]
 800718a:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 800718c:	687b      	ldr	r3, [r7, #4]
 800718e:	685b      	ldr	r3, [r3, #4]
 8007190:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8007192:	2201      	movs	r2, #1
 8007194:	697b      	ldr	r3, [r7, #20]
 8007196:	409a      	lsls	r2, r3
 8007198:	0013      	movs	r3, r2
 800719a:	43da      	mvns	r2, r3
 800719c:	693b      	ldr	r3, [r7, #16]
 800719e:	4013      	ands	r3, r2
 80071a0:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 80071a2:	683b      	ldr	r3, [r7, #0]
 80071a4:	685b      	ldr	r3, [r3, #4]
 80071a6:	091b      	lsrs	r3, r3, #4
 80071a8:	2201      	movs	r2, #1
 80071aa:	401a      	ands	r2, r3
 80071ac:	697b      	ldr	r3, [r7, #20]
 80071ae:	409a      	lsls	r2, r3
 80071b0:	0013      	movs	r3, r2
 80071b2:	693a      	ldr	r2, [r7, #16]
 80071b4:	4313      	orrs	r3, r2
 80071b6:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 80071b8:	687b      	ldr	r3, [r7, #4]
 80071ba:	693a      	ldr	r2, [r7, #16]
 80071bc:	605a      	str	r2, [r3, #4]
      }
      
      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 80071be:	683b      	ldr	r3, [r7, #0]
 80071c0:	685b      	ldr	r3, [r3, #4]
 80071c2:	2203      	movs	r2, #3
 80071c4:	4013      	ands	r3, r2
 80071c6:	2b03      	cmp	r3, #3
 80071c8:	d017      	beq.n	80071fa <HAL_GPIO_Init+0xde>
      {
        /* Check the Pull parameter */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 80071ca:	687b      	ldr	r3, [r7, #4]
 80071cc:	68db      	ldr	r3, [r3, #12]
 80071ce:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2u));
 80071d0:	697b      	ldr	r3, [r7, #20]
 80071d2:	005b      	lsls	r3, r3, #1
 80071d4:	2203      	movs	r2, #3
 80071d6:	409a      	lsls	r2, r3
 80071d8:	0013      	movs	r3, r2
 80071da:	43da      	mvns	r2, r3
 80071dc:	693b      	ldr	r3, [r7, #16]
 80071de:	4013      	ands	r3, r2
 80071e0:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Pull) << (position * 2u));
 80071e2:	683b      	ldr	r3, [r7, #0]
 80071e4:	689a      	ldr	r2, [r3, #8]
 80071e6:	697b      	ldr	r3, [r7, #20]
 80071e8:	005b      	lsls	r3, r3, #1
 80071ea:	409a      	lsls	r2, r3
 80071ec:	0013      	movs	r3, r2
 80071ee:	693a      	ldr	r2, [r7, #16]
 80071f0:	4313      	orrs	r3, r2
 80071f2:	613b      	str	r3, [r7, #16]
        GPIOx->PUPDR = temp;
 80071f4:	687b      	ldr	r3, [r7, #4]
 80071f6:	693a      	ldr	r2, [r7, #16]
 80071f8:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 80071fa:	683b      	ldr	r3, [r7, #0]
 80071fc:	685b      	ldr	r3, [r3, #4]
 80071fe:	2203      	movs	r2, #3
 8007200:	4013      	ands	r3, r2
 8007202:	2b02      	cmp	r3, #2
 8007204:	d123      	bne.n	800724e <HAL_GPIO_Init+0x132>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3u];
 8007206:	697b      	ldr	r3, [r7, #20]
 8007208:	08da      	lsrs	r2, r3, #3
 800720a:	687b      	ldr	r3, [r7, #4]
 800720c:	3208      	adds	r2, #8
 800720e:	0092      	lsls	r2, r2, #2
 8007210:	58d3      	ldr	r3, [r2, r3]
 8007212:	613b      	str	r3, [r7, #16]
        temp &= ~(0xFu << ((position & 0x07u) * 4u));
 8007214:	697b      	ldr	r3, [r7, #20]
 8007216:	2207      	movs	r2, #7
 8007218:	4013      	ands	r3, r2
 800721a:	009b      	lsls	r3, r3, #2
 800721c:	220f      	movs	r2, #15
 800721e:	409a      	lsls	r2, r3
 8007220:	0013      	movs	r3, r2
 8007222:	43da      	mvns	r2, r3
 8007224:	693b      	ldr	r3, [r7, #16]
 8007226:	4013      	ands	r3, r2
 8007228:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07u) * 4u));
 800722a:	683b      	ldr	r3, [r7, #0]
 800722c:	691a      	ldr	r2, [r3, #16]
 800722e:	697b      	ldr	r3, [r7, #20]
 8007230:	2107      	movs	r1, #7
 8007232:	400b      	ands	r3, r1
 8007234:	009b      	lsls	r3, r3, #2
 8007236:	409a      	lsls	r2, r3
 8007238:	0013      	movs	r3, r2
 800723a:	693a      	ldr	r2, [r7, #16]
 800723c:	4313      	orrs	r3, r2
 800723e:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3u] = temp;
 8007240:	697b      	ldr	r3, [r7, #20]
 8007242:	08da      	lsrs	r2, r3, #3
 8007244:	687b      	ldr	r3, [r7, #4]
 8007246:	3208      	adds	r2, #8
 8007248:	0092      	lsls	r2, r2, #2
 800724a:	6939      	ldr	r1, [r7, #16]
 800724c:	50d1      	str	r1, [r2, r3]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 800724e:	687b      	ldr	r3, [r7, #4]
 8007250:	681b      	ldr	r3, [r3, #0]
 8007252:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2u));
 8007254:	697b      	ldr	r3, [r7, #20]
 8007256:	005b      	lsls	r3, r3, #1
 8007258:	2203      	movs	r2, #3
 800725a:	409a      	lsls	r2, r3
 800725c:	0013      	movs	r3, r2
 800725e:	43da      	mvns	r2, r3
 8007260:	693b      	ldr	r3, [r7, #16]
 8007262:	4013      	ands	r3, r2
 8007264:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2u));
 8007266:	683b      	ldr	r3, [r7, #0]
 8007268:	685b      	ldr	r3, [r3, #4]
 800726a:	2203      	movs	r2, #3
 800726c:	401a      	ands	r2, r3
 800726e:	697b      	ldr	r3, [r7, #20]
 8007270:	005b      	lsls	r3, r3, #1
 8007272:	409a      	lsls	r2, r3
 8007274:	0013      	movs	r3, r2
 8007276:	693a      	ldr	r2, [r7, #16]
 8007278:	4313      	orrs	r3, r2
 800727a:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 800727c:	687b      	ldr	r3, [r7, #4]
 800727e:	693a      	ldr	r2, [r7, #16]
 8007280:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00u)
 8007282:	683b      	ldr	r3, [r7, #0]
 8007284:	685a      	ldr	r2, [r3, #4]
 8007286:	23c0      	movs	r3, #192	; 0xc0
 8007288:	029b      	lsls	r3, r3, #10
 800728a:	4013      	ands	r3, r2
 800728c:	d100      	bne.n	8007290 <HAL_GPIO_Init+0x174>
 800728e:	e0a0      	b.n	80073d2 <HAL_GPIO_Init+0x2b6>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8007290:	4b57      	ldr	r3, [pc, #348]	; (80073f0 <HAL_GPIO_Init+0x2d4>)
 8007292:	699a      	ldr	r2, [r3, #24]
 8007294:	4b56      	ldr	r3, [pc, #344]	; (80073f0 <HAL_GPIO_Init+0x2d4>)
 8007296:	2101      	movs	r1, #1
 8007298:	430a      	orrs	r2, r1
 800729a:	619a      	str	r2, [r3, #24]
 800729c:	4b54      	ldr	r3, [pc, #336]	; (80073f0 <HAL_GPIO_Init+0x2d4>)
 800729e:	699b      	ldr	r3, [r3, #24]
 80072a0:	2201      	movs	r2, #1
 80072a2:	4013      	ands	r3, r2
 80072a4:	60bb      	str	r3, [r7, #8]
 80072a6:	68bb      	ldr	r3, [r7, #8]

        temp = SYSCFG->EXTICR[position >> 2u];
 80072a8:	4a52      	ldr	r2, [pc, #328]	; (80073f4 <HAL_GPIO_Init+0x2d8>)
 80072aa:	697b      	ldr	r3, [r7, #20]
 80072ac:	089b      	lsrs	r3, r3, #2
 80072ae:	3302      	adds	r3, #2
 80072b0:	009b      	lsls	r3, r3, #2
 80072b2:	589b      	ldr	r3, [r3, r2]
 80072b4:	613b      	str	r3, [r7, #16]
        temp &= ~(0x0FuL << (4u * (position & 0x03u)));
 80072b6:	697b      	ldr	r3, [r7, #20]
 80072b8:	2203      	movs	r2, #3
 80072ba:	4013      	ands	r3, r2
 80072bc:	009b      	lsls	r3, r3, #2
 80072be:	220f      	movs	r2, #15
 80072c0:	409a      	lsls	r2, r3
 80072c2:	0013      	movs	r3, r2
 80072c4:	43da      	mvns	r2, r3
 80072c6:	693b      	ldr	r3, [r7, #16]
 80072c8:	4013      	ands	r3, r2
 80072ca:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4u * (position & 0x03u)));
 80072cc:	687a      	ldr	r2, [r7, #4]
 80072ce:	2390      	movs	r3, #144	; 0x90
 80072d0:	05db      	lsls	r3, r3, #23
 80072d2:	429a      	cmp	r2, r3
 80072d4:	d019      	beq.n	800730a <HAL_GPIO_Init+0x1ee>
 80072d6:	687b      	ldr	r3, [r7, #4]
 80072d8:	4a47      	ldr	r2, [pc, #284]	; (80073f8 <HAL_GPIO_Init+0x2dc>)
 80072da:	4293      	cmp	r3, r2
 80072dc:	d013      	beq.n	8007306 <HAL_GPIO_Init+0x1ea>
 80072de:	687b      	ldr	r3, [r7, #4]
 80072e0:	4a46      	ldr	r2, [pc, #280]	; (80073fc <HAL_GPIO_Init+0x2e0>)
 80072e2:	4293      	cmp	r3, r2
 80072e4:	d00d      	beq.n	8007302 <HAL_GPIO_Init+0x1e6>
 80072e6:	687b      	ldr	r3, [r7, #4]
 80072e8:	4a45      	ldr	r2, [pc, #276]	; (8007400 <HAL_GPIO_Init+0x2e4>)
 80072ea:	4293      	cmp	r3, r2
 80072ec:	d007      	beq.n	80072fe <HAL_GPIO_Init+0x1e2>
 80072ee:	687b      	ldr	r3, [r7, #4]
 80072f0:	4a44      	ldr	r2, [pc, #272]	; (8007404 <HAL_GPIO_Init+0x2e8>)
 80072f2:	4293      	cmp	r3, r2
 80072f4:	d101      	bne.n	80072fa <HAL_GPIO_Init+0x1de>
 80072f6:	2304      	movs	r3, #4
 80072f8:	e008      	b.n	800730c <HAL_GPIO_Init+0x1f0>
 80072fa:	2305      	movs	r3, #5
 80072fc:	e006      	b.n	800730c <HAL_GPIO_Init+0x1f0>
 80072fe:	2303      	movs	r3, #3
 8007300:	e004      	b.n	800730c <HAL_GPIO_Init+0x1f0>
 8007302:	2302      	movs	r3, #2
 8007304:	e002      	b.n	800730c <HAL_GPIO_Init+0x1f0>
 8007306:	2301      	movs	r3, #1
 8007308:	e000      	b.n	800730c <HAL_GPIO_Init+0x1f0>
 800730a:	2300      	movs	r3, #0
 800730c:	697a      	ldr	r2, [r7, #20]
 800730e:	2103      	movs	r1, #3
 8007310:	400a      	ands	r2, r1
 8007312:	0092      	lsls	r2, r2, #2
 8007314:	4093      	lsls	r3, r2
 8007316:	693a      	ldr	r2, [r7, #16]
 8007318:	4313      	orrs	r3, r2
 800731a:	613b      	str	r3, [r7, #16]
        SYSCFG->EXTICR[position >> 2u] = temp;
 800731c:	4935      	ldr	r1, [pc, #212]	; (80073f4 <HAL_GPIO_Init+0x2d8>)
 800731e:	697b      	ldr	r3, [r7, #20]
 8007320:	089b      	lsrs	r3, r3, #2
 8007322:	3302      	adds	r3, #2
 8007324:	009b      	lsls	r3, r3, #2
 8007326:	693a      	ldr	r2, [r7, #16]
 8007328:	505a      	str	r2, [r3, r1]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 800732a:	4b37      	ldr	r3, [pc, #220]	; (8007408 <HAL_GPIO_Init+0x2ec>)
 800732c:	689b      	ldr	r3, [r3, #8]
 800732e:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8007330:	68fb      	ldr	r3, [r7, #12]
 8007332:	43da      	mvns	r2, r3
 8007334:	693b      	ldr	r3, [r7, #16]
 8007336:	4013      	ands	r3, r2
 8007338:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00u)
 800733a:	683b      	ldr	r3, [r7, #0]
 800733c:	685a      	ldr	r2, [r3, #4]
 800733e:	2380      	movs	r3, #128	; 0x80
 8007340:	035b      	lsls	r3, r3, #13
 8007342:	4013      	ands	r3, r2
 8007344:	d003      	beq.n	800734e <HAL_GPIO_Init+0x232>
        {
          temp |= iocurrent;
 8007346:	693a      	ldr	r2, [r7, #16]
 8007348:	68fb      	ldr	r3, [r7, #12]
 800734a:	4313      	orrs	r3, r2
 800734c:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR = temp;
 800734e:	4b2e      	ldr	r3, [pc, #184]	; (8007408 <HAL_GPIO_Init+0x2ec>)
 8007350:	693a      	ldr	r2, [r7, #16]
 8007352:	609a      	str	r2, [r3, #8]

        temp = EXTI->FTSR;
 8007354:	4b2c      	ldr	r3, [pc, #176]	; (8007408 <HAL_GPIO_Init+0x2ec>)
 8007356:	68db      	ldr	r3, [r3, #12]
 8007358:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 800735a:	68fb      	ldr	r3, [r7, #12]
 800735c:	43da      	mvns	r2, r3
 800735e:	693b      	ldr	r3, [r7, #16]
 8007360:	4013      	ands	r3, r2
 8007362:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00u)
 8007364:	683b      	ldr	r3, [r7, #0]
 8007366:	685a      	ldr	r2, [r3, #4]
 8007368:	2380      	movs	r3, #128	; 0x80
 800736a:	039b      	lsls	r3, r3, #14
 800736c:	4013      	ands	r3, r2
 800736e:	d003      	beq.n	8007378 <HAL_GPIO_Init+0x25c>
        {
          temp |= iocurrent;
 8007370:	693a      	ldr	r2, [r7, #16]
 8007372:	68fb      	ldr	r3, [r7, #12]
 8007374:	4313      	orrs	r3, r2
 8007376:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR = temp;
 8007378:	4b23      	ldr	r3, [pc, #140]	; (8007408 <HAL_GPIO_Init+0x2ec>)
 800737a:	693a      	ldr	r2, [r7, #16]
 800737c:	60da      	str	r2, [r3, #12]

        /* Clear EXTI line configuration */
        temp = EXTI->EMR;
 800737e:	4b22      	ldr	r3, [pc, #136]	; (8007408 <HAL_GPIO_Init+0x2ec>)
 8007380:	685b      	ldr	r3, [r3, #4]
 8007382:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8007384:	68fb      	ldr	r3, [r7, #12]
 8007386:	43da      	mvns	r2, r3
 8007388:	693b      	ldr	r3, [r7, #16]
 800738a:	4013      	ands	r3, r2
 800738c:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00u)
 800738e:	683b      	ldr	r3, [r7, #0]
 8007390:	685a      	ldr	r2, [r3, #4]
 8007392:	2380      	movs	r3, #128	; 0x80
 8007394:	029b      	lsls	r3, r3, #10
 8007396:	4013      	ands	r3, r2
 8007398:	d003      	beq.n	80073a2 <HAL_GPIO_Init+0x286>
        {
          temp |= iocurrent;
 800739a:	693a      	ldr	r2, [r7, #16]
 800739c:	68fb      	ldr	r3, [r7, #12]
 800739e:	4313      	orrs	r3, r2
 80073a0:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR = temp;
 80073a2:	4b19      	ldr	r3, [pc, #100]	; (8007408 <HAL_GPIO_Init+0x2ec>)
 80073a4:	693a      	ldr	r2, [r7, #16]
 80073a6:	605a      	str	r2, [r3, #4]

        temp = EXTI->IMR;
 80073a8:	4b17      	ldr	r3, [pc, #92]	; (8007408 <HAL_GPIO_Init+0x2ec>)
 80073aa:	681b      	ldr	r3, [r3, #0]
 80073ac:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 80073ae:	68fb      	ldr	r3, [r7, #12]
 80073b0:	43da      	mvns	r2, r3
 80073b2:	693b      	ldr	r3, [r7, #16]
 80073b4:	4013      	ands	r3, r2
 80073b6:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00u)
 80073b8:	683b      	ldr	r3, [r7, #0]
 80073ba:	685a      	ldr	r2, [r3, #4]
 80073bc:	2380      	movs	r3, #128	; 0x80
 80073be:	025b      	lsls	r3, r3, #9
 80073c0:	4013      	ands	r3, r2
 80073c2:	d003      	beq.n	80073cc <HAL_GPIO_Init+0x2b0>
        {
          temp |= iocurrent;
 80073c4:	693a      	ldr	r2, [r7, #16]
 80073c6:	68fb      	ldr	r3, [r7, #12]
 80073c8:	4313      	orrs	r3, r2
 80073ca:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR = temp;
 80073cc:	4b0e      	ldr	r3, [pc, #56]	; (8007408 <HAL_GPIO_Init+0x2ec>)
 80073ce:	693a      	ldr	r2, [r7, #16]
 80073d0:	601a      	str	r2, [r3, #0]
      }
    }

    position++;
 80073d2:	697b      	ldr	r3, [r7, #20]
 80073d4:	3301      	adds	r3, #1
 80073d6:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 80073d8:	683b      	ldr	r3, [r7, #0]
 80073da:	681a      	ldr	r2, [r3, #0]
 80073dc:	697b      	ldr	r3, [r7, #20]
 80073de:	40da      	lsrs	r2, r3
 80073e0:	1e13      	subs	r3, r2, #0
 80073e2:	d000      	beq.n	80073e6 <HAL_GPIO_Init+0x2ca>
 80073e4:	e6a2      	b.n	800712c <HAL_GPIO_Init+0x10>
  } 
}
 80073e6:	46c0      	nop			; (mov r8, r8)
 80073e8:	46c0      	nop			; (mov r8, r8)
 80073ea:	46bd      	mov	sp, r7
 80073ec:	b006      	add	sp, #24
 80073ee:	bd80      	pop	{r7, pc}
 80073f0:	40021000 	.word	0x40021000
 80073f4:	40010000 	.word	0x40010000
 80073f8:	48000400 	.word	0x48000400
 80073fc:	48000800 	.word	0x48000800
 8007400:	48000c00 	.word	0x48000c00
 8007404:	48001000 	.word	0x48001000
 8007408:	40010400 	.word	0x40010400

0800740c <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 800740c:	b580      	push	{r7, lr}
 800740e:	b082      	sub	sp, #8
 8007410:	af00      	add	r7, sp, #0
 8007412:	6078      	str	r0, [r7, #4]
 8007414:	0008      	movs	r0, r1
 8007416:	0011      	movs	r1, r2
 8007418:	1cbb      	adds	r3, r7, #2
 800741a:	1c02      	adds	r2, r0, #0
 800741c:	801a      	strh	r2, [r3, #0]
 800741e:	1c7b      	adds	r3, r7, #1
 8007420:	1c0a      	adds	r2, r1, #0
 8007422:	701a      	strb	r2, [r3, #0]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 8007424:	1c7b      	adds	r3, r7, #1
 8007426:	781b      	ldrb	r3, [r3, #0]
 8007428:	2b00      	cmp	r3, #0
 800742a:	d004      	beq.n	8007436 <HAL_GPIO_WritePin+0x2a>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 800742c:	1cbb      	adds	r3, r7, #2
 800742e:	881a      	ldrh	r2, [r3, #0]
 8007430:	687b      	ldr	r3, [r7, #4]
 8007432:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BRR = (uint32_t)GPIO_Pin;
  }
}
 8007434:	e003      	b.n	800743e <HAL_GPIO_WritePin+0x32>
    GPIOx->BRR = (uint32_t)GPIO_Pin;
 8007436:	1cbb      	adds	r3, r7, #2
 8007438:	881a      	ldrh	r2, [r3, #0]
 800743a:	687b      	ldr	r3, [r7, #4]
 800743c:	629a      	str	r2, [r3, #40]	; 0x28
}
 800743e:	46c0      	nop			; (mov r8, r8)
 8007440:	46bd      	mov	sp, r7
 8007442:	b002      	add	sp, #8
 8007444:	bd80      	pop	{r7, pc}

08007446 <HAL_GPIO_TogglePin>:
  * @param  GPIOx where x can be (A..F) to select the GPIO peripheral for STM32F0 family
  * @param  GPIO_Pin specifies the pin to be toggled.
  * @retval None
  */
void HAL_GPIO_TogglePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 8007446:	b580      	push	{r7, lr}
 8007448:	b084      	sub	sp, #16
 800744a:	af00      	add	r7, sp, #0
 800744c:	6078      	str	r0, [r7, #4]
 800744e:	000a      	movs	r2, r1
 8007450:	1cbb      	adds	r3, r7, #2
 8007452:	801a      	strh	r2, [r3, #0]

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  /* get current Output Data Register value */
  odr = GPIOx->ODR;
 8007454:	687b      	ldr	r3, [r7, #4]
 8007456:	695b      	ldr	r3, [r3, #20]
 8007458:	60fb      	str	r3, [r7, #12]

  /* Set selected pins that were at low level, and reset ones that were high */
  GPIOx->BSRR = ((odr & GPIO_Pin) << GPIO_NUMBER) | (~odr & GPIO_Pin);
 800745a:	1cbb      	adds	r3, r7, #2
 800745c:	881b      	ldrh	r3, [r3, #0]
 800745e:	68fa      	ldr	r2, [r7, #12]
 8007460:	4013      	ands	r3, r2
 8007462:	041a      	lsls	r2, r3, #16
 8007464:	68fb      	ldr	r3, [r7, #12]
 8007466:	43db      	mvns	r3, r3
 8007468:	1cb9      	adds	r1, r7, #2
 800746a:	8809      	ldrh	r1, [r1, #0]
 800746c:	400b      	ands	r3, r1
 800746e:	431a      	orrs	r2, r3
 8007470:	687b      	ldr	r3, [r7, #4]
 8007472:	619a      	str	r2, [r3, #24]
}
 8007474:	46c0      	nop			; (mov r8, r8)
 8007476:	46bd      	mov	sp, r7
 8007478:	b004      	add	sp, #16
 800747a:	bd80      	pop	{r7, pc}

0800747c <HAL_GPIO_EXTI_IRQHandler>:
  * @brief  Handle EXTI interrupt request.
  * @param  GPIO_Pin Specifies the port pin connected to corresponding EXTI line.
  * @retval None
  */
void HAL_GPIO_EXTI_IRQHandler(uint16_t GPIO_Pin)
{
 800747c:	b580      	push	{r7, lr}
 800747e:	b082      	sub	sp, #8
 8007480:	af00      	add	r7, sp, #0
 8007482:	0002      	movs	r2, r0
 8007484:	1dbb      	adds	r3, r7, #6
 8007486:	801a      	strh	r2, [r3, #0]
  /* EXTI line interrupt detected */
  if(__HAL_GPIO_EXTI_GET_IT(GPIO_Pin) != 0x00u)
 8007488:	4b09      	ldr	r3, [pc, #36]	; (80074b0 <HAL_GPIO_EXTI_IRQHandler+0x34>)
 800748a:	695b      	ldr	r3, [r3, #20]
 800748c:	1dba      	adds	r2, r7, #6
 800748e:	8812      	ldrh	r2, [r2, #0]
 8007490:	4013      	ands	r3, r2
 8007492:	d008      	beq.n	80074a6 <HAL_GPIO_EXTI_IRQHandler+0x2a>
  { 
    __HAL_GPIO_EXTI_CLEAR_IT(GPIO_Pin);
 8007494:	4b06      	ldr	r3, [pc, #24]	; (80074b0 <HAL_GPIO_EXTI_IRQHandler+0x34>)
 8007496:	1dba      	adds	r2, r7, #6
 8007498:	8812      	ldrh	r2, [r2, #0]
 800749a:	615a      	str	r2, [r3, #20]
    HAL_GPIO_EXTI_Callback(GPIO_Pin);
 800749c:	1dbb      	adds	r3, r7, #6
 800749e:	881b      	ldrh	r3, [r3, #0]
 80074a0:	0018      	movs	r0, r3
 80074a2:	f7fe fe41 	bl	8006128 <HAL_GPIO_EXTI_Callback>
  }
}
 80074a6:	46c0      	nop			; (mov r8, r8)
 80074a8:	46bd      	mov	sp, r7
 80074aa:	b002      	add	sp, #8
 80074ac:	bd80      	pop	{r7, pc}
 80074ae:	46c0      	nop			; (mov r8, r8)
 80074b0:	40010400 	.word	0x40010400

080074b4 <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 80074b4:	b580      	push	{r7, lr}
 80074b6:	b082      	sub	sp, #8
 80074b8:	af00      	add	r7, sp, #0
 80074ba:	6078      	str	r0, [r7, #4]
  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 80074bc:	687b      	ldr	r3, [r7, #4]
 80074be:	2b00      	cmp	r3, #0
 80074c0:	d101      	bne.n	80074c6 <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 80074c2:	2301      	movs	r3, #1
 80074c4:	e082      	b.n	80075cc <HAL_I2C_Init+0x118>
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_OWN_ADDRESS2_MASK(hi2c->Init.OwnAddress2Masks));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 80074c6:	687b      	ldr	r3, [r7, #4]
 80074c8:	2241      	movs	r2, #65	; 0x41
 80074ca:	5c9b      	ldrb	r3, [r3, r2]
 80074cc:	b2db      	uxtb	r3, r3
 80074ce:	2b00      	cmp	r3, #0
 80074d0:	d107      	bne.n	80074e2 <HAL_I2C_Init+0x2e>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 80074d2:	687b      	ldr	r3, [r7, #4]
 80074d4:	2240      	movs	r2, #64	; 0x40
 80074d6:	2100      	movs	r1, #0
 80074d8:	5499      	strb	r1, [r3, r2]

    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    HAL_I2C_MspInit(hi2c);
 80074da:	687b      	ldr	r3, [r7, #4]
 80074dc:	0018      	movs	r0, r3
 80074de:	f7fe f9bf 	bl	8005860 <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 80074e2:	687b      	ldr	r3, [r7, #4]
 80074e4:	2241      	movs	r2, #65	; 0x41
 80074e6:	2124      	movs	r1, #36	; 0x24
 80074e8:	5499      	strb	r1, [r3, r2]

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 80074ea:	687b      	ldr	r3, [r7, #4]
 80074ec:	681b      	ldr	r3, [r3, #0]
 80074ee:	681a      	ldr	r2, [r3, #0]
 80074f0:	687b      	ldr	r3, [r7, #4]
 80074f2:	681b      	ldr	r3, [r3, #0]
 80074f4:	2101      	movs	r1, #1
 80074f6:	438a      	bics	r2, r1
 80074f8:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx TIMINGR Configuration ------------------*/
  /* Configure I2Cx: Frequency range */
  hi2c->Instance->TIMINGR = hi2c->Init.Timing & TIMING_CLEAR_MASK;
 80074fa:	687b      	ldr	r3, [r7, #4]
 80074fc:	685a      	ldr	r2, [r3, #4]
 80074fe:	687b      	ldr	r3, [r7, #4]
 8007500:	681b      	ldr	r3, [r3, #0]
 8007502:	4934      	ldr	r1, [pc, #208]	; (80075d4 <HAL_I2C_Init+0x120>)
 8007504:	400a      	ands	r2, r1
 8007506:	611a      	str	r2, [r3, #16]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Disable Own Address1 before set the Own Address1 configuration */
  hi2c->Instance->OAR1 &= ~I2C_OAR1_OA1EN;
 8007508:	687b      	ldr	r3, [r7, #4]
 800750a:	681b      	ldr	r3, [r3, #0]
 800750c:	689a      	ldr	r2, [r3, #8]
 800750e:	687b      	ldr	r3, [r7, #4]
 8007510:	681b      	ldr	r3, [r3, #0]
 8007512:	4931      	ldr	r1, [pc, #196]	; (80075d8 <HAL_I2C_Init+0x124>)
 8007514:	400a      	ands	r2, r1
 8007516:	609a      	str	r2, [r3, #8]

  /* Configure I2Cx: Own Address1 and ack own address1 mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 8007518:	687b      	ldr	r3, [r7, #4]
 800751a:	68db      	ldr	r3, [r3, #12]
 800751c:	2b01      	cmp	r3, #1
 800751e:	d108      	bne.n	8007532 <HAL_I2C_Init+0x7e>
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | hi2c->Init.OwnAddress1);
 8007520:	687b      	ldr	r3, [r7, #4]
 8007522:	689a      	ldr	r2, [r3, #8]
 8007524:	687b      	ldr	r3, [r7, #4]
 8007526:	681b      	ldr	r3, [r3, #0]
 8007528:	2180      	movs	r1, #128	; 0x80
 800752a:	0209      	lsls	r1, r1, #8
 800752c:	430a      	orrs	r2, r1
 800752e:	609a      	str	r2, [r3, #8]
 8007530:	e007      	b.n	8007542 <HAL_I2C_Init+0x8e>
  }
  else /* I2C_ADDRESSINGMODE_10BIT */
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | I2C_OAR1_OA1MODE | hi2c->Init.OwnAddress1);
 8007532:	687b      	ldr	r3, [r7, #4]
 8007534:	689a      	ldr	r2, [r3, #8]
 8007536:	687b      	ldr	r3, [r7, #4]
 8007538:	681b      	ldr	r3, [r3, #0]
 800753a:	2184      	movs	r1, #132	; 0x84
 800753c:	0209      	lsls	r1, r1, #8
 800753e:	430a      	orrs	r2, r1
 8007540:	609a      	str	r2, [r3, #8]
  }

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Addressing Master mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_10BIT)
 8007542:	687b      	ldr	r3, [r7, #4]
 8007544:	68db      	ldr	r3, [r3, #12]
 8007546:	2b02      	cmp	r3, #2
 8007548:	d104      	bne.n	8007554 <HAL_I2C_Init+0xa0>
  {
    hi2c->Instance->CR2 = (I2C_CR2_ADD10);
 800754a:	687b      	ldr	r3, [r7, #4]
 800754c:	681b      	ldr	r3, [r3, #0]
 800754e:	2280      	movs	r2, #128	; 0x80
 8007550:	0112      	lsls	r2, r2, #4
 8007552:	605a      	str	r2, [r3, #4]
  }
  /* Enable the AUTOEND by default, and enable NACK (should be disable only during Slave process */
  hi2c->Instance->CR2 |= (I2C_CR2_AUTOEND | I2C_CR2_NACK);
 8007554:	687b      	ldr	r3, [r7, #4]
 8007556:	681b      	ldr	r3, [r3, #0]
 8007558:	685a      	ldr	r2, [r3, #4]
 800755a:	687b      	ldr	r3, [r7, #4]
 800755c:	681b      	ldr	r3, [r3, #0]
 800755e:	491f      	ldr	r1, [pc, #124]	; (80075dc <HAL_I2C_Init+0x128>)
 8007560:	430a      	orrs	r2, r1
 8007562:	605a      	str	r2, [r3, #4]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Disable Own Address2 before set the Own Address2 configuration */
  hi2c->Instance->OAR2 &= ~I2C_DUALADDRESS_ENABLE;
 8007564:	687b      	ldr	r3, [r7, #4]
 8007566:	681b      	ldr	r3, [r3, #0]
 8007568:	68da      	ldr	r2, [r3, #12]
 800756a:	687b      	ldr	r3, [r7, #4]
 800756c:	681b      	ldr	r3, [r3, #0]
 800756e:	491a      	ldr	r1, [pc, #104]	; (80075d8 <HAL_I2C_Init+0x124>)
 8007570:	400a      	ands	r2, r1
 8007572:	60da      	str	r2, [r3, #12]

  /* Configure I2Cx: Dual mode and Own Address2 */
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | \
 8007574:	687b      	ldr	r3, [r7, #4]
 8007576:	691a      	ldr	r2, [r3, #16]
 8007578:	687b      	ldr	r3, [r7, #4]
 800757a:	695b      	ldr	r3, [r3, #20]
 800757c:	431a      	orrs	r2, r3
 800757e:	0011      	movs	r1, r2
                          (hi2c->Init.OwnAddress2Masks << 8));
 8007580:	687b      	ldr	r3, [r7, #4]
 8007582:	699b      	ldr	r3, [r3, #24]
 8007584:	021a      	lsls	r2, r3, #8
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | \
 8007586:	687b      	ldr	r3, [r7, #4]
 8007588:	681b      	ldr	r3, [r3, #0]
 800758a:	430a      	orrs	r2, r1
 800758c:	60da      	str	r2, [r3, #12]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  hi2c->Instance->CR1 = (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode);
 800758e:	687b      	ldr	r3, [r7, #4]
 8007590:	69d9      	ldr	r1, [r3, #28]
 8007592:	687b      	ldr	r3, [r7, #4]
 8007594:	6a1a      	ldr	r2, [r3, #32]
 8007596:	687b      	ldr	r3, [r7, #4]
 8007598:	681b      	ldr	r3, [r3, #0]
 800759a:	430a      	orrs	r2, r1
 800759c:	601a      	str	r2, [r3, #0]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 800759e:	687b      	ldr	r3, [r7, #4]
 80075a0:	681b      	ldr	r3, [r3, #0]
 80075a2:	681a      	ldr	r2, [r3, #0]
 80075a4:	687b      	ldr	r3, [r7, #4]
 80075a6:	681b      	ldr	r3, [r3, #0]
 80075a8:	2101      	movs	r1, #1
 80075aa:	430a      	orrs	r2, r1
 80075ac:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 80075ae:	687b      	ldr	r3, [r7, #4]
 80075b0:	2200      	movs	r2, #0
 80075b2:	645a      	str	r2, [r3, #68]	; 0x44
  hi2c->State = HAL_I2C_STATE_READY;
 80075b4:	687b      	ldr	r3, [r7, #4]
 80075b6:	2241      	movs	r2, #65	; 0x41
 80075b8:	2120      	movs	r1, #32
 80075ba:	5499      	strb	r1, [r3, r2]
  hi2c->PreviousState = I2C_STATE_NONE;
 80075bc:	687b      	ldr	r3, [r7, #4]
 80075be:	2200      	movs	r2, #0
 80075c0:	631a      	str	r2, [r3, #48]	; 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 80075c2:	687b      	ldr	r3, [r7, #4]
 80075c4:	2242      	movs	r2, #66	; 0x42
 80075c6:	2100      	movs	r1, #0
 80075c8:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 80075ca:	2300      	movs	r3, #0
}
 80075cc:	0018      	movs	r0, r3
 80075ce:	46bd      	mov	sp, r7
 80075d0:	b002      	add	sp, #8
 80075d2:	bd80      	pop	{r7, pc}
 80075d4:	f0ffffff 	.word	0xf0ffffff
 80075d8:	ffff7fff 	.word	0xffff7fff
 80075dc:	02008000 	.word	0x02008000

080075e0 <HAL_I2C_Master_Transmit>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Master_Transmit(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t *pData,
                                          uint16_t Size, uint32_t Timeout)
{
 80075e0:	b590      	push	{r4, r7, lr}
 80075e2:	b089      	sub	sp, #36	; 0x24
 80075e4:	af02      	add	r7, sp, #8
 80075e6:	60f8      	str	r0, [r7, #12]
 80075e8:	0008      	movs	r0, r1
 80075ea:	607a      	str	r2, [r7, #4]
 80075ec:	0019      	movs	r1, r3
 80075ee:	230a      	movs	r3, #10
 80075f0:	18fb      	adds	r3, r7, r3
 80075f2:	1c02      	adds	r2, r0, #0
 80075f4:	801a      	strh	r2, [r3, #0]
 80075f6:	2308      	movs	r3, #8
 80075f8:	18fb      	adds	r3, r7, r3
 80075fa:	1c0a      	adds	r2, r1, #0
 80075fc:	801a      	strh	r2, [r3, #0]
  uint32_t tickstart;

  if (hi2c->State == HAL_I2C_STATE_READY)
 80075fe:	68fb      	ldr	r3, [r7, #12]
 8007600:	2241      	movs	r2, #65	; 0x41
 8007602:	5c9b      	ldrb	r3, [r3, r2]
 8007604:	b2db      	uxtb	r3, r3
 8007606:	2b20      	cmp	r3, #32
 8007608:	d000      	beq.n	800760c <HAL_I2C_Master_Transmit+0x2c>
 800760a:	e0e7      	b.n	80077dc <HAL_I2C_Master_Transmit+0x1fc>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 800760c:	68fb      	ldr	r3, [r7, #12]
 800760e:	2240      	movs	r2, #64	; 0x40
 8007610:	5c9b      	ldrb	r3, [r3, r2]
 8007612:	2b01      	cmp	r3, #1
 8007614:	d101      	bne.n	800761a <HAL_I2C_Master_Transmit+0x3a>
 8007616:	2302      	movs	r3, #2
 8007618:	e0e1      	b.n	80077de <HAL_I2C_Master_Transmit+0x1fe>
 800761a:	68fb      	ldr	r3, [r7, #12]
 800761c:	2240      	movs	r2, #64	; 0x40
 800761e:	2101      	movs	r1, #1
 8007620:	5499      	strb	r1, [r3, r2]

    /* Init tickstart for timeout management*/
    tickstart = HAL_GetTick();
 8007622:	f7fe fea1 	bl	8006368 <HAL_GetTick>
 8007626:	0003      	movs	r3, r0
 8007628:	617b      	str	r3, [r7, #20]

    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY, tickstart) != HAL_OK)
 800762a:	2380      	movs	r3, #128	; 0x80
 800762c:	0219      	lsls	r1, r3, #8
 800762e:	68f8      	ldr	r0, [r7, #12]
 8007630:	697b      	ldr	r3, [r7, #20]
 8007632:	9300      	str	r3, [sp, #0]
 8007634:	2319      	movs	r3, #25
 8007636:	2201      	movs	r2, #1
 8007638:	f000 fb96 	bl	8007d68 <I2C_WaitOnFlagUntilTimeout>
 800763c:	1e03      	subs	r3, r0, #0
 800763e:	d001      	beq.n	8007644 <HAL_I2C_Master_Transmit+0x64>
    {
      return HAL_ERROR;
 8007640:	2301      	movs	r3, #1
 8007642:	e0cc      	b.n	80077de <HAL_I2C_Master_Transmit+0x1fe>
    }

    hi2c->State     = HAL_I2C_STATE_BUSY_TX;
 8007644:	68fb      	ldr	r3, [r7, #12]
 8007646:	2241      	movs	r2, #65	; 0x41
 8007648:	2121      	movs	r1, #33	; 0x21
 800764a:	5499      	strb	r1, [r3, r2]
    hi2c->Mode      = HAL_I2C_MODE_MASTER;
 800764c:	68fb      	ldr	r3, [r7, #12]
 800764e:	2242      	movs	r2, #66	; 0x42
 8007650:	2110      	movs	r1, #16
 8007652:	5499      	strb	r1, [r3, r2]
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8007654:	68fb      	ldr	r3, [r7, #12]
 8007656:	2200      	movs	r2, #0
 8007658:	645a      	str	r2, [r3, #68]	; 0x44

    /* Prepare transfer parameters */
    hi2c->pBuffPtr  = pData;
 800765a:	68fb      	ldr	r3, [r7, #12]
 800765c:	687a      	ldr	r2, [r7, #4]
 800765e:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount = Size;
 8007660:	68fb      	ldr	r3, [r7, #12]
 8007662:	2208      	movs	r2, #8
 8007664:	18ba      	adds	r2, r7, r2
 8007666:	8812      	ldrh	r2, [r2, #0]
 8007668:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferISR   = NULL;
 800766a:	68fb      	ldr	r3, [r7, #12]
 800766c:	2200      	movs	r2, #0
 800766e:	635a      	str	r2, [r3, #52]	; 0x34

    /* Send Slave Address */
    /* Set NBYTES to write and reload if hi2c->XferCount > MAX_NBYTE_SIZE and generate RESTART */
    if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8007670:	68fb      	ldr	r3, [r7, #12]
 8007672:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8007674:	b29b      	uxth	r3, r3
 8007676:	2bff      	cmp	r3, #255	; 0xff
 8007678:	d911      	bls.n	800769e <HAL_I2C_Master_Transmit+0xbe>
    {
      hi2c->XferSize = MAX_NBYTE_SIZE;
 800767a:	68fb      	ldr	r3, [r7, #12]
 800767c:	22ff      	movs	r2, #255	; 0xff
 800767e:	851a      	strh	r2, [r3, #40]	; 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE,
 8007680:	68fb      	ldr	r3, [r7, #12]
 8007682:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8007684:	b2da      	uxtb	r2, r3
 8007686:	2380      	movs	r3, #128	; 0x80
 8007688:	045c      	lsls	r4, r3, #17
 800768a:	230a      	movs	r3, #10
 800768c:	18fb      	adds	r3, r7, r3
 800768e:	8819      	ldrh	r1, [r3, #0]
 8007690:	68f8      	ldr	r0, [r7, #12]
 8007692:	4b55      	ldr	r3, [pc, #340]	; (80077e8 <HAL_I2C_Master_Transmit+0x208>)
 8007694:	9300      	str	r3, [sp, #0]
 8007696:	0023      	movs	r3, r4
 8007698:	f000 fdc0 	bl	800821c <I2C_TransferConfig>
 800769c:	e075      	b.n	800778a <HAL_I2C_Master_Transmit+0x1aa>
                         I2C_GENERATE_START_WRITE);
    }
    else
    {
      hi2c->XferSize = hi2c->XferCount;
 800769e:	68fb      	ldr	r3, [r7, #12]
 80076a0:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80076a2:	b29a      	uxth	r2, r3
 80076a4:	68fb      	ldr	r3, [r7, #12]
 80076a6:	851a      	strh	r2, [r3, #40]	; 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE,
 80076a8:	68fb      	ldr	r3, [r7, #12]
 80076aa:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80076ac:	b2da      	uxtb	r2, r3
 80076ae:	2380      	movs	r3, #128	; 0x80
 80076b0:	049c      	lsls	r4, r3, #18
 80076b2:	230a      	movs	r3, #10
 80076b4:	18fb      	adds	r3, r7, r3
 80076b6:	8819      	ldrh	r1, [r3, #0]
 80076b8:	68f8      	ldr	r0, [r7, #12]
 80076ba:	4b4b      	ldr	r3, [pc, #300]	; (80077e8 <HAL_I2C_Master_Transmit+0x208>)
 80076bc:	9300      	str	r3, [sp, #0]
 80076be:	0023      	movs	r3, r4
 80076c0:	f000 fdac 	bl	800821c <I2C_TransferConfig>
                         I2C_GENERATE_START_WRITE);
    }

    while (hi2c->XferCount > 0U)
 80076c4:	e061      	b.n	800778a <HAL_I2C_Master_Transmit+0x1aa>
    {
      /* Wait until TXIS flag is set */
      if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 80076c6:	697a      	ldr	r2, [r7, #20]
 80076c8:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 80076ca:	68fb      	ldr	r3, [r7, #12]
 80076cc:	0018      	movs	r0, r3
 80076ce:	f000 fb99 	bl	8007e04 <I2C_WaitOnTXISFlagUntilTimeout>
 80076d2:	1e03      	subs	r3, r0, #0
 80076d4:	d001      	beq.n	80076da <HAL_I2C_Master_Transmit+0xfa>
      {
        return HAL_ERROR;
 80076d6:	2301      	movs	r3, #1
 80076d8:	e081      	b.n	80077de <HAL_I2C_Master_Transmit+0x1fe>
      }
      /* Write data to TXDR */
      hi2c->Instance->TXDR = *hi2c->pBuffPtr;
 80076da:	68fb      	ldr	r3, [r7, #12]
 80076dc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80076de:	781a      	ldrb	r2, [r3, #0]
 80076e0:	68fb      	ldr	r3, [r7, #12]
 80076e2:	681b      	ldr	r3, [r3, #0]
 80076e4:	629a      	str	r2, [r3, #40]	; 0x28

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 80076e6:	68fb      	ldr	r3, [r7, #12]
 80076e8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80076ea:	1c5a      	adds	r2, r3, #1
 80076ec:	68fb      	ldr	r3, [r7, #12]
 80076ee:	625a      	str	r2, [r3, #36]	; 0x24

      hi2c->XferCount--;
 80076f0:	68fb      	ldr	r3, [r7, #12]
 80076f2:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80076f4:	b29b      	uxth	r3, r3
 80076f6:	3b01      	subs	r3, #1
 80076f8:	b29a      	uxth	r2, r3
 80076fa:	68fb      	ldr	r3, [r7, #12]
 80076fc:	855a      	strh	r2, [r3, #42]	; 0x2a
      hi2c->XferSize--;
 80076fe:	68fb      	ldr	r3, [r7, #12]
 8007700:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8007702:	3b01      	subs	r3, #1
 8007704:	b29a      	uxth	r2, r3
 8007706:	68fb      	ldr	r3, [r7, #12]
 8007708:	851a      	strh	r2, [r3, #40]	; 0x28

      if ((hi2c->XferCount != 0U) && (hi2c->XferSize == 0U))
 800770a:	68fb      	ldr	r3, [r7, #12]
 800770c:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800770e:	b29b      	uxth	r3, r3
 8007710:	2b00      	cmp	r3, #0
 8007712:	d03a      	beq.n	800778a <HAL_I2C_Master_Transmit+0x1aa>
 8007714:	68fb      	ldr	r3, [r7, #12]
 8007716:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8007718:	2b00      	cmp	r3, #0
 800771a:	d136      	bne.n	800778a <HAL_I2C_Master_Transmit+0x1aa>
      {
        /* Wait until TCR flag is set */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TCR, RESET, Timeout, tickstart) != HAL_OK)
 800771c:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800771e:	68f8      	ldr	r0, [r7, #12]
 8007720:	697b      	ldr	r3, [r7, #20]
 8007722:	9300      	str	r3, [sp, #0]
 8007724:	0013      	movs	r3, r2
 8007726:	2200      	movs	r2, #0
 8007728:	2180      	movs	r1, #128	; 0x80
 800772a:	f000 fb1d 	bl	8007d68 <I2C_WaitOnFlagUntilTimeout>
 800772e:	1e03      	subs	r3, r0, #0
 8007730:	d001      	beq.n	8007736 <HAL_I2C_Master_Transmit+0x156>
        {
          return HAL_ERROR;
 8007732:	2301      	movs	r3, #1
 8007734:	e053      	b.n	80077de <HAL_I2C_Master_Transmit+0x1fe>
        }

        if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8007736:	68fb      	ldr	r3, [r7, #12]
 8007738:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800773a:	b29b      	uxth	r3, r3
 800773c:	2bff      	cmp	r3, #255	; 0xff
 800773e:	d911      	bls.n	8007764 <HAL_I2C_Master_Transmit+0x184>
        {
          hi2c->XferSize = MAX_NBYTE_SIZE;
 8007740:	68fb      	ldr	r3, [r7, #12]
 8007742:	22ff      	movs	r2, #255	; 0xff
 8007744:	851a      	strh	r2, [r3, #40]	; 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE,
 8007746:	68fb      	ldr	r3, [r7, #12]
 8007748:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800774a:	b2da      	uxtb	r2, r3
 800774c:	2380      	movs	r3, #128	; 0x80
 800774e:	045c      	lsls	r4, r3, #17
 8007750:	230a      	movs	r3, #10
 8007752:	18fb      	adds	r3, r7, r3
 8007754:	8819      	ldrh	r1, [r3, #0]
 8007756:	68f8      	ldr	r0, [r7, #12]
 8007758:	2300      	movs	r3, #0
 800775a:	9300      	str	r3, [sp, #0]
 800775c:	0023      	movs	r3, r4
 800775e:	f000 fd5d 	bl	800821c <I2C_TransferConfig>
 8007762:	e012      	b.n	800778a <HAL_I2C_Master_Transmit+0x1aa>
                             I2C_NO_STARTSTOP);
        }
        else
        {
          hi2c->XferSize = hi2c->XferCount;
 8007764:	68fb      	ldr	r3, [r7, #12]
 8007766:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8007768:	b29a      	uxth	r2, r3
 800776a:	68fb      	ldr	r3, [r7, #12]
 800776c:	851a      	strh	r2, [r3, #40]	; 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE,
 800776e:	68fb      	ldr	r3, [r7, #12]
 8007770:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8007772:	b2da      	uxtb	r2, r3
 8007774:	2380      	movs	r3, #128	; 0x80
 8007776:	049c      	lsls	r4, r3, #18
 8007778:	230a      	movs	r3, #10
 800777a:	18fb      	adds	r3, r7, r3
 800777c:	8819      	ldrh	r1, [r3, #0]
 800777e:	68f8      	ldr	r0, [r7, #12]
 8007780:	2300      	movs	r3, #0
 8007782:	9300      	str	r3, [sp, #0]
 8007784:	0023      	movs	r3, r4
 8007786:	f000 fd49 	bl	800821c <I2C_TransferConfig>
    while (hi2c->XferCount > 0U)
 800778a:	68fb      	ldr	r3, [r7, #12]
 800778c:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800778e:	b29b      	uxth	r3, r3
 8007790:	2b00      	cmp	r3, #0
 8007792:	d198      	bne.n	80076c6 <HAL_I2C_Master_Transmit+0xe6>
      }
    }

    /* No need to Check TC flag, with AUTOEND mode the stop is automatically generated */
    /* Wait until STOPF flag is set */
    if (I2C_WaitOnSTOPFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8007794:	697a      	ldr	r2, [r7, #20]
 8007796:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8007798:	68fb      	ldr	r3, [r7, #12]
 800779a:	0018      	movs	r0, r3
 800779c:	f000 fb78 	bl	8007e90 <I2C_WaitOnSTOPFlagUntilTimeout>
 80077a0:	1e03      	subs	r3, r0, #0
 80077a2:	d001      	beq.n	80077a8 <HAL_I2C_Master_Transmit+0x1c8>
    {
      return HAL_ERROR;
 80077a4:	2301      	movs	r3, #1
 80077a6:	e01a      	b.n	80077de <HAL_I2C_Master_Transmit+0x1fe>
    }

    /* Clear STOP Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 80077a8:	68fb      	ldr	r3, [r7, #12]
 80077aa:	681b      	ldr	r3, [r3, #0]
 80077ac:	2220      	movs	r2, #32
 80077ae:	61da      	str	r2, [r3, #28]

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 80077b0:	68fb      	ldr	r3, [r7, #12]
 80077b2:	681b      	ldr	r3, [r3, #0]
 80077b4:	685a      	ldr	r2, [r3, #4]
 80077b6:	68fb      	ldr	r3, [r7, #12]
 80077b8:	681b      	ldr	r3, [r3, #0]
 80077ba:	490c      	ldr	r1, [pc, #48]	; (80077ec <HAL_I2C_Master_Transmit+0x20c>)
 80077bc:	400a      	ands	r2, r1
 80077be:	605a      	str	r2, [r3, #4]

    hi2c->State = HAL_I2C_STATE_READY;
 80077c0:	68fb      	ldr	r3, [r7, #12]
 80077c2:	2241      	movs	r2, #65	; 0x41
 80077c4:	2120      	movs	r1, #32
 80077c6:	5499      	strb	r1, [r3, r2]
    hi2c->Mode  = HAL_I2C_MODE_NONE;
 80077c8:	68fb      	ldr	r3, [r7, #12]
 80077ca:	2242      	movs	r2, #66	; 0x42
 80077cc:	2100      	movs	r1, #0
 80077ce:	5499      	strb	r1, [r3, r2]

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 80077d0:	68fb      	ldr	r3, [r7, #12]
 80077d2:	2240      	movs	r2, #64	; 0x40
 80077d4:	2100      	movs	r1, #0
 80077d6:	5499      	strb	r1, [r3, r2]

    return HAL_OK;
 80077d8:	2300      	movs	r3, #0
 80077da:	e000      	b.n	80077de <HAL_I2C_Master_Transmit+0x1fe>
  }
  else
  {
    return HAL_BUSY;
 80077dc:	2302      	movs	r3, #2
  }
}
 80077de:	0018      	movs	r0, r3
 80077e0:	46bd      	mov	sp, r7
 80077e2:	b007      	add	sp, #28
 80077e4:	bd90      	pop	{r4, r7, pc}
 80077e6:	46c0      	nop			; (mov r8, r8)
 80077e8:	80002000 	.word	0x80002000
 80077ec:	fe00e800 	.word	0xfe00e800

080077f0 <HAL_I2C_Master_Receive>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Master_Receive(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t *pData,
                                         uint16_t Size, uint32_t Timeout)
{
 80077f0:	b590      	push	{r4, r7, lr}
 80077f2:	b089      	sub	sp, #36	; 0x24
 80077f4:	af02      	add	r7, sp, #8
 80077f6:	60f8      	str	r0, [r7, #12]
 80077f8:	0008      	movs	r0, r1
 80077fa:	607a      	str	r2, [r7, #4]
 80077fc:	0019      	movs	r1, r3
 80077fe:	230a      	movs	r3, #10
 8007800:	18fb      	adds	r3, r7, r3
 8007802:	1c02      	adds	r2, r0, #0
 8007804:	801a      	strh	r2, [r3, #0]
 8007806:	2308      	movs	r3, #8
 8007808:	18fb      	adds	r3, r7, r3
 800780a:	1c0a      	adds	r2, r1, #0
 800780c:	801a      	strh	r2, [r3, #0]
  uint32_t tickstart;

  if (hi2c->State == HAL_I2C_STATE_READY)
 800780e:	68fb      	ldr	r3, [r7, #12]
 8007810:	2241      	movs	r2, #65	; 0x41
 8007812:	5c9b      	ldrb	r3, [r3, r2]
 8007814:	b2db      	uxtb	r3, r3
 8007816:	2b20      	cmp	r3, #32
 8007818:	d000      	beq.n	800781c <HAL_I2C_Master_Receive+0x2c>
 800781a:	e0e8      	b.n	80079ee <HAL_I2C_Master_Receive+0x1fe>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 800781c:	68fb      	ldr	r3, [r7, #12]
 800781e:	2240      	movs	r2, #64	; 0x40
 8007820:	5c9b      	ldrb	r3, [r3, r2]
 8007822:	2b01      	cmp	r3, #1
 8007824:	d101      	bne.n	800782a <HAL_I2C_Master_Receive+0x3a>
 8007826:	2302      	movs	r3, #2
 8007828:	e0e2      	b.n	80079f0 <HAL_I2C_Master_Receive+0x200>
 800782a:	68fb      	ldr	r3, [r7, #12]
 800782c:	2240      	movs	r2, #64	; 0x40
 800782e:	2101      	movs	r1, #1
 8007830:	5499      	strb	r1, [r3, r2]

    /* Init tickstart for timeout management*/
    tickstart = HAL_GetTick();
 8007832:	f7fe fd99 	bl	8006368 <HAL_GetTick>
 8007836:	0003      	movs	r3, r0
 8007838:	617b      	str	r3, [r7, #20]

    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY, tickstart) != HAL_OK)
 800783a:	2380      	movs	r3, #128	; 0x80
 800783c:	0219      	lsls	r1, r3, #8
 800783e:	68f8      	ldr	r0, [r7, #12]
 8007840:	697b      	ldr	r3, [r7, #20]
 8007842:	9300      	str	r3, [sp, #0]
 8007844:	2319      	movs	r3, #25
 8007846:	2201      	movs	r2, #1
 8007848:	f000 fa8e 	bl	8007d68 <I2C_WaitOnFlagUntilTimeout>
 800784c:	1e03      	subs	r3, r0, #0
 800784e:	d001      	beq.n	8007854 <HAL_I2C_Master_Receive+0x64>
    {
      return HAL_ERROR;
 8007850:	2301      	movs	r3, #1
 8007852:	e0cd      	b.n	80079f0 <HAL_I2C_Master_Receive+0x200>
    }

    hi2c->State     = HAL_I2C_STATE_BUSY_RX;
 8007854:	68fb      	ldr	r3, [r7, #12]
 8007856:	2241      	movs	r2, #65	; 0x41
 8007858:	2122      	movs	r1, #34	; 0x22
 800785a:	5499      	strb	r1, [r3, r2]
    hi2c->Mode      = HAL_I2C_MODE_MASTER;
 800785c:	68fb      	ldr	r3, [r7, #12]
 800785e:	2242      	movs	r2, #66	; 0x42
 8007860:	2110      	movs	r1, #16
 8007862:	5499      	strb	r1, [r3, r2]
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8007864:	68fb      	ldr	r3, [r7, #12]
 8007866:	2200      	movs	r2, #0
 8007868:	645a      	str	r2, [r3, #68]	; 0x44

    /* Prepare transfer parameters */
    hi2c->pBuffPtr  = pData;
 800786a:	68fb      	ldr	r3, [r7, #12]
 800786c:	687a      	ldr	r2, [r7, #4]
 800786e:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount = Size;
 8007870:	68fb      	ldr	r3, [r7, #12]
 8007872:	2208      	movs	r2, #8
 8007874:	18ba      	adds	r2, r7, r2
 8007876:	8812      	ldrh	r2, [r2, #0]
 8007878:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferISR   = NULL;
 800787a:	68fb      	ldr	r3, [r7, #12]
 800787c:	2200      	movs	r2, #0
 800787e:	635a      	str	r2, [r3, #52]	; 0x34

    /* Send Slave Address */
    /* Set NBYTES to write and reload if hi2c->XferCount > MAX_NBYTE_SIZE and generate RESTART */
    if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8007880:	68fb      	ldr	r3, [r7, #12]
 8007882:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8007884:	b29b      	uxth	r3, r3
 8007886:	2bff      	cmp	r3, #255	; 0xff
 8007888:	d911      	bls.n	80078ae <HAL_I2C_Master_Receive+0xbe>
    {
      hi2c->XferSize = MAX_NBYTE_SIZE;
 800788a:	68fb      	ldr	r3, [r7, #12]
 800788c:	22ff      	movs	r2, #255	; 0xff
 800788e:	851a      	strh	r2, [r3, #40]	; 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE,
 8007890:	68fb      	ldr	r3, [r7, #12]
 8007892:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8007894:	b2da      	uxtb	r2, r3
 8007896:	2380      	movs	r3, #128	; 0x80
 8007898:	045c      	lsls	r4, r3, #17
 800789a:	230a      	movs	r3, #10
 800789c:	18fb      	adds	r3, r7, r3
 800789e:	8819      	ldrh	r1, [r3, #0]
 80078a0:	68f8      	ldr	r0, [r7, #12]
 80078a2:	4b55      	ldr	r3, [pc, #340]	; (80079f8 <HAL_I2C_Master_Receive+0x208>)
 80078a4:	9300      	str	r3, [sp, #0]
 80078a6:	0023      	movs	r3, r4
 80078a8:	f000 fcb8 	bl	800821c <I2C_TransferConfig>
 80078ac:	e076      	b.n	800799c <HAL_I2C_Master_Receive+0x1ac>
                         I2C_GENERATE_START_READ);
    }
    else
    {
      hi2c->XferSize = hi2c->XferCount;
 80078ae:	68fb      	ldr	r3, [r7, #12]
 80078b0:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80078b2:	b29a      	uxth	r2, r3
 80078b4:	68fb      	ldr	r3, [r7, #12]
 80078b6:	851a      	strh	r2, [r3, #40]	; 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE,
 80078b8:	68fb      	ldr	r3, [r7, #12]
 80078ba:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80078bc:	b2da      	uxtb	r2, r3
 80078be:	2380      	movs	r3, #128	; 0x80
 80078c0:	049c      	lsls	r4, r3, #18
 80078c2:	230a      	movs	r3, #10
 80078c4:	18fb      	adds	r3, r7, r3
 80078c6:	8819      	ldrh	r1, [r3, #0]
 80078c8:	68f8      	ldr	r0, [r7, #12]
 80078ca:	4b4b      	ldr	r3, [pc, #300]	; (80079f8 <HAL_I2C_Master_Receive+0x208>)
 80078cc:	9300      	str	r3, [sp, #0]
 80078ce:	0023      	movs	r3, r4
 80078d0:	f000 fca4 	bl	800821c <I2C_TransferConfig>
                         I2C_GENERATE_START_READ);
    }

    while (hi2c->XferCount > 0U)
 80078d4:	e062      	b.n	800799c <HAL_I2C_Master_Receive+0x1ac>
    {
      /* Wait until RXNE flag is set */
      if (I2C_WaitOnRXNEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 80078d6:	697a      	ldr	r2, [r7, #20]
 80078d8:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 80078da:	68fb      	ldr	r3, [r7, #12]
 80078dc:	0018      	movs	r0, r3
 80078de:	f000 fb1b 	bl	8007f18 <I2C_WaitOnRXNEFlagUntilTimeout>
 80078e2:	1e03      	subs	r3, r0, #0
 80078e4:	d001      	beq.n	80078ea <HAL_I2C_Master_Receive+0xfa>
      {
        return HAL_ERROR;
 80078e6:	2301      	movs	r3, #1
 80078e8:	e082      	b.n	80079f0 <HAL_I2C_Master_Receive+0x200>
      }

      /* Read data from RXDR */
      *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->RXDR;
 80078ea:	68fb      	ldr	r3, [r7, #12]
 80078ec:	681b      	ldr	r3, [r3, #0]
 80078ee:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 80078f0:	68fb      	ldr	r3, [r7, #12]
 80078f2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80078f4:	b2d2      	uxtb	r2, r2
 80078f6:	701a      	strb	r2, [r3, #0]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 80078f8:	68fb      	ldr	r3, [r7, #12]
 80078fa:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80078fc:	1c5a      	adds	r2, r3, #1
 80078fe:	68fb      	ldr	r3, [r7, #12]
 8007900:	625a      	str	r2, [r3, #36]	; 0x24

      hi2c->XferSize--;
 8007902:	68fb      	ldr	r3, [r7, #12]
 8007904:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8007906:	3b01      	subs	r3, #1
 8007908:	b29a      	uxth	r2, r3
 800790a:	68fb      	ldr	r3, [r7, #12]
 800790c:	851a      	strh	r2, [r3, #40]	; 0x28
      hi2c->XferCount--;
 800790e:	68fb      	ldr	r3, [r7, #12]
 8007910:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8007912:	b29b      	uxth	r3, r3
 8007914:	3b01      	subs	r3, #1
 8007916:	b29a      	uxth	r2, r3
 8007918:	68fb      	ldr	r3, [r7, #12]
 800791a:	855a      	strh	r2, [r3, #42]	; 0x2a

      if ((hi2c->XferCount != 0U) && (hi2c->XferSize == 0U))
 800791c:	68fb      	ldr	r3, [r7, #12]
 800791e:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8007920:	b29b      	uxth	r3, r3
 8007922:	2b00      	cmp	r3, #0
 8007924:	d03a      	beq.n	800799c <HAL_I2C_Master_Receive+0x1ac>
 8007926:	68fb      	ldr	r3, [r7, #12]
 8007928:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800792a:	2b00      	cmp	r3, #0
 800792c:	d136      	bne.n	800799c <HAL_I2C_Master_Receive+0x1ac>
      {
        /* Wait until TCR flag is set */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TCR, RESET, Timeout, tickstart) != HAL_OK)
 800792e:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8007930:	68f8      	ldr	r0, [r7, #12]
 8007932:	697b      	ldr	r3, [r7, #20]
 8007934:	9300      	str	r3, [sp, #0]
 8007936:	0013      	movs	r3, r2
 8007938:	2200      	movs	r2, #0
 800793a:	2180      	movs	r1, #128	; 0x80
 800793c:	f000 fa14 	bl	8007d68 <I2C_WaitOnFlagUntilTimeout>
 8007940:	1e03      	subs	r3, r0, #0
 8007942:	d001      	beq.n	8007948 <HAL_I2C_Master_Receive+0x158>
        {
          return HAL_ERROR;
 8007944:	2301      	movs	r3, #1
 8007946:	e053      	b.n	80079f0 <HAL_I2C_Master_Receive+0x200>
        }

        if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8007948:	68fb      	ldr	r3, [r7, #12]
 800794a:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800794c:	b29b      	uxth	r3, r3
 800794e:	2bff      	cmp	r3, #255	; 0xff
 8007950:	d911      	bls.n	8007976 <HAL_I2C_Master_Receive+0x186>
        {
          hi2c->XferSize = MAX_NBYTE_SIZE;
 8007952:	68fb      	ldr	r3, [r7, #12]
 8007954:	22ff      	movs	r2, #255	; 0xff
 8007956:	851a      	strh	r2, [r3, #40]	; 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE,
 8007958:	68fb      	ldr	r3, [r7, #12]
 800795a:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800795c:	b2da      	uxtb	r2, r3
 800795e:	2380      	movs	r3, #128	; 0x80
 8007960:	045c      	lsls	r4, r3, #17
 8007962:	230a      	movs	r3, #10
 8007964:	18fb      	adds	r3, r7, r3
 8007966:	8819      	ldrh	r1, [r3, #0]
 8007968:	68f8      	ldr	r0, [r7, #12]
 800796a:	2300      	movs	r3, #0
 800796c:	9300      	str	r3, [sp, #0]
 800796e:	0023      	movs	r3, r4
 8007970:	f000 fc54 	bl	800821c <I2C_TransferConfig>
 8007974:	e012      	b.n	800799c <HAL_I2C_Master_Receive+0x1ac>
                             I2C_NO_STARTSTOP);
        }
        else
        {
          hi2c->XferSize = hi2c->XferCount;
 8007976:	68fb      	ldr	r3, [r7, #12]
 8007978:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800797a:	b29a      	uxth	r2, r3
 800797c:	68fb      	ldr	r3, [r7, #12]
 800797e:	851a      	strh	r2, [r3, #40]	; 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE,
 8007980:	68fb      	ldr	r3, [r7, #12]
 8007982:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8007984:	b2da      	uxtb	r2, r3
 8007986:	2380      	movs	r3, #128	; 0x80
 8007988:	049c      	lsls	r4, r3, #18
 800798a:	230a      	movs	r3, #10
 800798c:	18fb      	adds	r3, r7, r3
 800798e:	8819      	ldrh	r1, [r3, #0]
 8007990:	68f8      	ldr	r0, [r7, #12]
 8007992:	2300      	movs	r3, #0
 8007994:	9300      	str	r3, [sp, #0]
 8007996:	0023      	movs	r3, r4
 8007998:	f000 fc40 	bl	800821c <I2C_TransferConfig>
    while (hi2c->XferCount > 0U)
 800799c:	68fb      	ldr	r3, [r7, #12]
 800799e:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80079a0:	b29b      	uxth	r3, r3
 80079a2:	2b00      	cmp	r3, #0
 80079a4:	d197      	bne.n	80078d6 <HAL_I2C_Master_Receive+0xe6>
      }
    }

    /* No need to Check TC flag, with AUTOEND mode the stop is automatically generated */
    /* Wait until STOPF flag is set */
    if (I2C_WaitOnSTOPFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 80079a6:	697a      	ldr	r2, [r7, #20]
 80079a8:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 80079aa:	68fb      	ldr	r3, [r7, #12]
 80079ac:	0018      	movs	r0, r3
 80079ae:	f000 fa6f 	bl	8007e90 <I2C_WaitOnSTOPFlagUntilTimeout>
 80079b2:	1e03      	subs	r3, r0, #0
 80079b4:	d001      	beq.n	80079ba <HAL_I2C_Master_Receive+0x1ca>
    {
      return HAL_ERROR;
 80079b6:	2301      	movs	r3, #1
 80079b8:	e01a      	b.n	80079f0 <HAL_I2C_Master_Receive+0x200>
    }

    /* Clear STOP Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 80079ba:	68fb      	ldr	r3, [r7, #12]
 80079bc:	681b      	ldr	r3, [r3, #0]
 80079be:	2220      	movs	r2, #32
 80079c0:	61da      	str	r2, [r3, #28]

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 80079c2:	68fb      	ldr	r3, [r7, #12]
 80079c4:	681b      	ldr	r3, [r3, #0]
 80079c6:	685a      	ldr	r2, [r3, #4]
 80079c8:	68fb      	ldr	r3, [r7, #12]
 80079ca:	681b      	ldr	r3, [r3, #0]
 80079cc:	490b      	ldr	r1, [pc, #44]	; (80079fc <HAL_I2C_Master_Receive+0x20c>)
 80079ce:	400a      	ands	r2, r1
 80079d0:	605a      	str	r2, [r3, #4]

    hi2c->State = HAL_I2C_STATE_READY;
 80079d2:	68fb      	ldr	r3, [r7, #12]
 80079d4:	2241      	movs	r2, #65	; 0x41
 80079d6:	2120      	movs	r1, #32
 80079d8:	5499      	strb	r1, [r3, r2]
    hi2c->Mode  = HAL_I2C_MODE_NONE;
 80079da:	68fb      	ldr	r3, [r7, #12]
 80079dc:	2242      	movs	r2, #66	; 0x42
 80079de:	2100      	movs	r1, #0
 80079e0:	5499      	strb	r1, [r3, r2]

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 80079e2:	68fb      	ldr	r3, [r7, #12]
 80079e4:	2240      	movs	r2, #64	; 0x40
 80079e6:	2100      	movs	r1, #0
 80079e8:	5499      	strb	r1, [r3, r2]

    return HAL_OK;
 80079ea:	2300      	movs	r3, #0
 80079ec:	e000      	b.n	80079f0 <HAL_I2C_Master_Receive+0x200>
  }
  else
  {
    return HAL_BUSY;
 80079ee:	2302      	movs	r3, #2
  }
}
 80079f0:	0018      	movs	r0, r3
 80079f2:	46bd      	mov	sp, r7
 80079f4:	b007      	add	sp, #28
 80079f6:	bd90      	pop	{r4, r7, pc}
 80079f8:	80002400 	.word	0x80002400
 80079fc:	fe00e800 	.word	0xfe00e800

08007a00 <HAL_I2C_Mem_Write>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Mem_Write(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress,
                                    uint16_t MemAddSize, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8007a00:	b590      	push	{r4, r7, lr}
 8007a02:	b089      	sub	sp, #36	; 0x24
 8007a04:	af02      	add	r7, sp, #8
 8007a06:	60f8      	str	r0, [r7, #12]
 8007a08:	000c      	movs	r4, r1
 8007a0a:	0010      	movs	r0, r2
 8007a0c:	0019      	movs	r1, r3
 8007a0e:	230a      	movs	r3, #10
 8007a10:	18fb      	adds	r3, r7, r3
 8007a12:	1c22      	adds	r2, r4, #0
 8007a14:	801a      	strh	r2, [r3, #0]
 8007a16:	2308      	movs	r3, #8
 8007a18:	18fb      	adds	r3, r7, r3
 8007a1a:	1c02      	adds	r2, r0, #0
 8007a1c:	801a      	strh	r2, [r3, #0]
 8007a1e:	1dbb      	adds	r3, r7, #6
 8007a20:	1c0a      	adds	r2, r1, #0
 8007a22:	801a      	strh	r2, [r3, #0]
  uint32_t tickstart;

  /* Check the parameters */
  assert_param(IS_I2C_MEMADD_SIZE(MemAddSize));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8007a24:	68fb      	ldr	r3, [r7, #12]
 8007a26:	2241      	movs	r2, #65	; 0x41
 8007a28:	5c9b      	ldrb	r3, [r3, r2]
 8007a2a:	b2db      	uxtb	r3, r3
 8007a2c:	2b20      	cmp	r3, #32
 8007a2e:	d000      	beq.n	8007a32 <HAL_I2C_Mem_Write+0x32>
 8007a30:	e10c      	b.n	8007c4c <HAL_I2C_Mem_Write+0x24c>
  {
    if ((pData == NULL) || (Size == 0U))
 8007a32:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007a34:	2b00      	cmp	r3, #0
 8007a36:	d004      	beq.n	8007a42 <HAL_I2C_Mem_Write+0x42>
 8007a38:	232c      	movs	r3, #44	; 0x2c
 8007a3a:	18fb      	adds	r3, r7, r3
 8007a3c:	881b      	ldrh	r3, [r3, #0]
 8007a3e:	2b00      	cmp	r3, #0
 8007a40:	d105      	bne.n	8007a4e <HAL_I2C_Mem_Write+0x4e>
    {
      hi2c->ErrorCode = HAL_I2C_ERROR_INVALID_PARAM;
 8007a42:	68fb      	ldr	r3, [r7, #12]
 8007a44:	2280      	movs	r2, #128	; 0x80
 8007a46:	0092      	lsls	r2, r2, #2
 8007a48:	645a      	str	r2, [r3, #68]	; 0x44
      return  HAL_ERROR;
 8007a4a:	2301      	movs	r3, #1
 8007a4c:	e0ff      	b.n	8007c4e <HAL_I2C_Mem_Write+0x24e>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 8007a4e:	68fb      	ldr	r3, [r7, #12]
 8007a50:	2240      	movs	r2, #64	; 0x40
 8007a52:	5c9b      	ldrb	r3, [r3, r2]
 8007a54:	2b01      	cmp	r3, #1
 8007a56:	d101      	bne.n	8007a5c <HAL_I2C_Mem_Write+0x5c>
 8007a58:	2302      	movs	r3, #2
 8007a5a:	e0f8      	b.n	8007c4e <HAL_I2C_Mem_Write+0x24e>
 8007a5c:	68fb      	ldr	r3, [r7, #12]
 8007a5e:	2240      	movs	r2, #64	; 0x40
 8007a60:	2101      	movs	r1, #1
 8007a62:	5499      	strb	r1, [r3, r2]

    /* Init tickstart for timeout management*/
    tickstart = HAL_GetTick();
 8007a64:	f7fe fc80 	bl	8006368 <HAL_GetTick>
 8007a68:	0003      	movs	r3, r0
 8007a6a:	617b      	str	r3, [r7, #20]

    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY, tickstart) != HAL_OK)
 8007a6c:	2380      	movs	r3, #128	; 0x80
 8007a6e:	0219      	lsls	r1, r3, #8
 8007a70:	68f8      	ldr	r0, [r7, #12]
 8007a72:	697b      	ldr	r3, [r7, #20]
 8007a74:	9300      	str	r3, [sp, #0]
 8007a76:	2319      	movs	r3, #25
 8007a78:	2201      	movs	r2, #1
 8007a7a:	f000 f975 	bl	8007d68 <I2C_WaitOnFlagUntilTimeout>
 8007a7e:	1e03      	subs	r3, r0, #0
 8007a80:	d001      	beq.n	8007a86 <HAL_I2C_Mem_Write+0x86>
    {
      return HAL_ERROR;
 8007a82:	2301      	movs	r3, #1
 8007a84:	e0e3      	b.n	8007c4e <HAL_I2C_Mem_Write+0x24e>
    }

    hi2c->State     = HAL_I2C_STATE_BUSY_TX;
 8007a86:	68fb      	ldr	r3, [r7, #12]
 8007a88:	2241      	movs	r2, #65	; 0x41
 8007a8a:	2121      	movs	r1, #33	; 0x21
 8007a8c:	5499      	strb	r1, [r3, r2]
    hi2c->Mode      = HAL_I2C_MODE_MEM;
 8007a8e:	68fb      	ldr	r3, [r7, #12]
 8007a90:	2242      	movs	r2, #66	; 0x42
 8007a92:	2140      	movs	r1, #64	; 0x40
 8007a94:	5499      	strb	r1, [r3, r2]
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8007a96:	68fb      	ldr	r3, [r7, #12]
 8007a98:	2200      	movs	r2, #0
 8007a9a:	645a      	str	r2, [r3, #68]	; 0x44

    /* Prepare transfer parameters */
    hi2c->pBuffPtr  = pData;
 8007a9c:	68fb      	ldr	r3, [r7, #12]
 8007a9e:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8007aa0:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount = Size;
 8007aa2:	68fb      	ldr	r3, [r7, #12]
 8007aa4:	222c      	movs	r2, #44	; 0x2c
 8007aa6:	18ba      	adds	r2, r7, r2
 8007aa8:	8812      	ldrh	r2, [r2, #0]
 8007aaa:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferISR   = NULL;
 8007aac:	68fb      	ldr	r3, [r7, #12]
 8007aae:	2200      	movs	r2, #0
 8007ab0:	635a      	str	r2, [r3, #52]	; 0x34

    /* Send Slave Address and Memory Address */
    if (I2C_RequestMemoryWrite(hi2c, DevAddress, MemAddress, MemAddSize, Timeout, tickstart) != HAL_OK)
 8007ab2:	1dbb      	adds	r3, r7, #6
 8007ab4:	881c      	ldrh	r4, [r3, #0]
 8007ab6:	2308      	movs	r3, #8
 8007ab8:	18fb      	adds	r3, r7, r3
 8007aba:	881a      	ldrh	r2, [r3, #0]
 8007abc:	230a      	movs	r3, #10
 8007abe:	18fb      	adds	r3, r7, r3
 8007ac0:	8819      	ldrh	r1, [r3, #0]
 8007ac2:	68f8      	ldr	r0, [r7, #12]
 8007ac4:	697b      	ldr	r3, [r7, #20]
 8007ac6:	9301      	str	r3, [sp, #4]
 8007ac8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007aca:	9300      	str	r3, [sp, #0]
 8007acc:	0023      	movs	r3, r4
 8007ace:	f000 f8c5 	bl	8007c5c <I2C_RequestMemoryWrite>
 8007ad2:	1e03      	subs	r3, r0, #0
 8007ad4:	d005      	beq.n	8007ae2 <HAL_I2C_Mem_Write+0xe2>
    {
      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8007ad6:	68fb      	ldr	r3, [r7, #12]
 8007ad8:	2240      	movs	r2, #64	; 0x40
 8007ada:	2100      	movs	r1, #0
 8007adc:	5499      	strb	r1, [r3, r2]
      return HAL_ERROR;
 8007ade:	2301      	movs	r3, #1
 8007ae0:	e0b5      	b.n	8007c4e <HAL_I2C_Mem_Write+0x24e>
    }

    /* Set NBYTES to write and reload if hi2c->XferCount > MAX_NBYTE_SIZE */
    if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8007ae2:	68fb      	ldr	r3, [r7, #12]
 8007ae4:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8007ae6:	b29b      	uxth	r3, r3
 8007ae8:	2bff      	cmp	r3, #255	; 0xff
 8007aea:	d911      	bls.n	8007b10 <HAL_I2C_Mem_Write+0x110>
    {
      hi2c->XferSize = MAX_NBYTE_SIZE;
 8007aec:	68fb      	ldr	r3, [r7, #12]
 8007aee:	22ff      	movs	r2, #255	; 0xff
 8007af0:	851a      	strh	r2, [r3, #40]	; 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE, I2C_NO_STARTSTOP);
 8007af2:	68fb      	ldr	r3, [r7, #12]
 8007af4:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8007af6:	b2da      	uxtb	r2, r3
 8007af8:	2380      	movs	r3, #128	; 0x80
 8007afa:	045c      	lsls	r4, r3, #17
 8007afc:	230a      	movs	r3, #10
 8007afe:	18fb      	adds	r3, r7, r3
 8007b00:	8819      	ldrh	r1, [r3, #0]
 8007b02:	68f8      	ldr	r0, [r7, #12]
 8007b04:	2300      	movs	r3, #0
 8007b06:	9300      	str	r3, [sp, #0]
 8007b08:	0023      	movs	r3, r4
 8007b0a:	f000 fb87 	bl	800821c <I2C_TransferConfig>
 8007b0e:	e012      	b.n	8007b36 <HAL_I2C_Mem_Write+0x136>
    }
    else
    {
      hi2c->XferSize = hi2c->XferCount;
 8007b10:	68fb      	ldr	r3, [r7, #12]
 8007b12:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8007b14:	b29a      	uxth	r2, r3
 8007b16:	68fb      	ldr	r3, [r7, #12]
 8007b18:	851a      	strh	r2, [r3, #40]	; 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE, I2C_NO_STARTSTOP);
 8007b1a:	68fb      	ldr	r3, [r7, #12]
 8007b1c:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8007b1e:	b2da      	uxtb	r2, r3
 8007b20:	2380      	movs	r3, #128	; 0x80
 8007b22:	049c      	lsls	r4, r3, #18
 8007b24:	230a      	movs	r3, #10
 8007b26:	18fb      	adds	r3, r7, r3
 8007b28:	8819      	ldrh	r1, [r3, #0]
 8007b2a:	68f8      	ldr	r0, [r7, #12]
 8007b2c:	2300      	movs	r3, #0
 8007b2e:	9300      	str	r3, [sp, #0]
 8007b30:	0023      	movs	r3, r4
 8007b32:	f000 fb73 	bl	800821c <I2C_TransferConfig>
    }

    do
    {
      /* Wait until TXIS flag is set */
      if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8007b36:	697a      	ldr	r2, [r7, #20]
 8007b38:	6b39      	ldr	r1, [r7, #48]	; 0x30
 8007b3a:	68fb      	ldr	r3, [r7, #12]
 8007b3c:	0018      	movs	r0, r3
 8007b3e:	f000 f961 	bl	8007e04 <I2C_WaitOnTXISFlagUntilTimeout>
 8007b42:	1e03      	subs	r3, r0, #0
 8007b44:	d001      	beq.n	8007b4a <HAL_I2C_Mem_Write+0x14a>
      {
        return HAL_ERROR;
 8007b46:	2301      	movs	r3, #1
 8007b48:	e081      	b.n	8007c4e <HAL_I2C_Mem_Write+0x24e>
      }

      /* Write data to TXDR */
      hi2c->Instance->TXDR = *hi2c->pBuffPtr;
 8007b4a:	68fb      	ldr	r3, [r7, #12]
 8007b4c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007b4e:	781a      	ldrb	r2, [r3, #0]
 8007b50:	68fb      	ldr	r3, [r7, #12]
 8007b52:	681b      	ldr	r3, [r3, #0]
 8007b54:	629a      	str	r2, [r3, #40]	; 0x28

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8007b56:	68fb      	ldr	r3, [r7, #12]
 8007b58:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007b5a:	1c5a      	adds	r2, r3, #1
 8007b5c:	68fb      	ldr	r3, [r7, #12]
 8007b5e:	625a      	str	r2, [r3, #36]	; 0x24

      hi2c->XferCount--;
 8007b60:	68fb      	ldr	r3, [r7, #12]
 8007b62:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8007b64:	b29b      	uxth	r3, r3
 8007b66:	3b01      	subs	r3, #1
 8007b68:	b29a      	uxth	r2, r3
 8007b6a:	68fb      	ldr	r3, [r7, #12]
 8007b6c:	855a      	strh	r2, [r3, #42]	; 0x2a
      hi2c->XferSize--;
 8007b6e:	68fb      	ldr	r3, [r7, #12]
 8007b70:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8007b72:	3b01      	subs	r3, #1
 8007b74:	b29a      	uxth	r2, r3
 8007b76:	68fb      	ldr	r3, [r7, #12]
 8007b78:	851a      	strh	r2, [r3, #40]	; 0x28

      if ((hi2c->XferCount != 0U) && (hi2c->XferSize == 0U))
 8007b7a:	68fb      	ldr	r3, [r7, #12]
 8007b7c:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8007b7e:	b29b      	uxth	r3, r3
 8007b80:	2b00      	cmp	r3, #0
 8007b82:	d03a      	beq.n	8007bfa <HAL_I2C_Mem_Write+0x1fa>
 8007b84:	68fb      	ldr	r3, [r7, #12]
 8007b86:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8007b88:	2b00      	cmp	r3, #0
 8007b8a:	d136      	bne.n	8007bfa <HAL_I2C_Mem_Write+0x1fa>
      {
        /* Wait until TCR flag is set */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TCR, RESET, Timeout, tickstart) != HAL_OK)
 8007b8c:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8007b8e:	68f8      	ldr	r0, [r7, #12]
 8007b90:	697b      	ldr	r3, [r7, #20]
 8007b92:	9300      	str	r3, [sp, #0]
 8007b94:	0013      	movs	r3, r2
 8007b96:	2200      	movs	r2, #0
 8007b98:	2180      	movs	r1, #128	; 0x80
 8007b9a:	f000 f8e5 	bl	8007d68 <I2C_WaitOnFlagUntilTimeout>
 8007b9e:	1e03      	subs	r3, r0, #0
 8007ba0:	d001      	beq.n	8007ba6 <HAL_I2C_Mem_Write+0x1a6>
        {
          return HAL_ERROR;
 8007ba2:	2301      	movs	r3, #1
 8007ba4:	e053      	b.n	8007c4e <HAL_I2C_Mem_Write+0x24e>
        }

        if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8007ba6:	68fb      	ldr	r3, [r7, #12]
 8007ba8:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8007baa:	b29b      	uxth	r3, r3
 8007bac:	2bff      	cmp	r3, #255	; 0xff
 8007bae:	d911      	bls.n	8007bd4 <HAL_I2C_Mem_Write+0x1d4>
        {
          hi2c->XferSize = MAX_NBYTE_SIZE;
 8007bb0:	68fb      	ldr	r3, [r7, #12]
 8007bb2:	22ff      	movs	r2, #255	; 0xff
 8007bb4:	851a      	strh	r2, [r3, #40]	; 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE,
 8007bb6:	68fb      	ldr	r3, [r7, #12]
 8007bb8:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8007bba:	b2da      	uxtb	r2, r3
 8007bbc:	2380      	movs	r3, #128	; 0x80
 8007bbe:	045c      	lsls	r4, r3, #17
 8007bc0:	230a      	movs	r3, #10
 8007bc2:	18fb      	adds	r3, r7, r3
 8007bc4:	8819      	ldrh	r1, [r3, #0]
 8007bc6:	68f8      	ldr	r0, [r7, #12]
 8007bc8:	2300      	movs	r3, #0
 8007bca:	9300      	str	r3, [sp, #0]
 8007bcc:	0023      	movs	r3, r4
 8007bce:	f000 fb25 	bl	800821c <I2C_TransferConfig>
 8007bd2:	e012      	b.n	8007bfa <HAL_I2C_Mem_Write+0x1fa>
                             I2C_NO_STARTSTOP);
        }
        else
        {
          hi2c->XferSize = hi2c->XferCount;
 8007bd4:	68fb      	ldr	r3, [r7, #12]
 8007bd6:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8007bd8:	b29a      	uxth	r2, r3
 8007bda:	68fb      	ldr	r3, [r7, #12]
 8007bdc:	851a      	strh	r2, [r3, #40]	; 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE,
 8007bde:	68fb      	ldr	r3, [r7, #12]
 8007be0:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8007be2:	b2da      	uxtb	r2, r3
 8007be4:	2380      	movs	r3, #128	; 0x80
 8007be6:	049c      	lsls	r4, r3, #18
 8007be8:	230a      	movs	r3, #10
 8007bea:	18fb      	adds	r3, r7, r3
 8007bec:	8819      	ldrh	r1, [r3, #0]
 8007bee:	68f8      	ldr	r0, [r7, #12]
 8007bf0:	2300      	movs	r3, #0
 8007bf2:	9300      	str	r3, [sp, #0]
 8007bf4:	0023      	movs	r3, r4
 8007bf6:	f000 fb11 	bl	800821c <I2C_TransferConfig>
                             I2C_NO_STARTSTOP);
        }
      }

    } while (hi2c->XferCount > 0U);
 8007bfa:	68fb      	ldr	r3, [r7, #12]
 8007bfc:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8007bfe:	b29b      	uxth	r3, r3
 8007c00:	2b00      	cmp	r3, #0
 8007c02:	d198      	bne.n	8007b36 <HAL_I2C_Mem_Write+0x136>

    /* No need to Check TC flag, with AUTOEND mode the stop is automatically generated */
    /* Wait until STOPF flag is reset */
    if (I2C_WaitOnSTOPFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8007c04:	697a      	ldr	r2, [r7, #20]
 8007c06:	6b39      	ldr	r1, [r7, #48]	; 0x30
 8007c08:	68fb      	ldr	r3, [r7, #12]
 8007c0a:	0018      	movs	r0, r3
 8007c0c:	f000 f940 	bl	8007e90 <I2C_WaitOnSTOPFlagUntilTimeout>
 8007c10:	1e03      	subs	r3, r0, #0
 8007c12:	d001      	beq.n	8007c18 <HAL_I2C_Mem_Write+0x218>
    {
      return HAL_ERROR;
 8007c14:	2301      	movs	r3, #1
 8007c16:	e01a      	b.n	8007c4e <HAL_I2C_Mem_Write+0x24e>
    }

    /* Clear STOP Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8007c18:	68fb      	ldr	r3, [r7, #12]
 8007c1a:	681b      	ldr	r3, [r3, #0]
 8007c1c:	2220      	movs	r2, #32
 8007c1e:	61da      	str	r2, [r3, #28]

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 8007c20:	68fb      	ldr	r3, [r7, #12]
 8007c22:	681b      	ldr	r3, [r3, #0]
 8007c24:	685a      	ldr	r2, [r3, #4]
 8007c26:	68fb      	ldr	r3, [r7, #12]
 8007c28:	681b      	ldr	r3, [r3, #0]
 8007c2a:	490b      	ldr	r1, [pc, #44]	; (8007c58 <HAL_I2C_Mem_Write+0x258>)
 8007c2c:	400a      	ands	r2, r1
 8007c2e:	605a      	str	r2, [r3, #4]

    hi2c->State = HAL_I2C_STATE_READY;
 8007c30:	68fb      	ldr	r3, [r7, #12]
 8007c32:	2241      	movs	r2, #65	; 0x41
 8007c34:	2120      	movs	r1, #32
 8007c36:	5499      	strb	r1, [r3, r2]
    hi2c->Mode  = HAL_I2C_MODE_NONE;
 8007c38:	68fb      	ldr	r3, [r7, #12]
 8007c3a:	2242      	movs	r2, #66	; 0x42
 8007c3c:	2100      	movs	r1, #0
 8007c3e:	5499      	strb	r1, [r3, r2]

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8007c40:	68fb      	ldr	r3, [r7, #12]
 8007c42:	2240      	movs	r2, #64	; 0x40
 8007c44:	2100      	movs	r1, #0
 8007c46:	5499      	strb	r1, [r3, r2]

    return HAL_OK;
 8007c48:	2300      	movs	r3, #0
 8007c4a:	e000      	b.n	8007c4e <HAL_I2C_Mem_Write+0x24e>
  }
  else
  {
    return HAL_BUSY;
 8007c4c:	2302      	movs	r3, #2
  }
}
 8007c4e:	0018      	movs	r0, r3
 8007c50:	46bd      	mov	sp, r7
 8007c52:	b007      	add	sp, #28
 8007c54:	bd90      	pop	{r4, r7, pc}
 8007c56:	46c0      	nop			; (mov r8, r8)
 8007c58:	fe00e800 	.word	0xfe00e800

08007c5c <I2C_RequestMemoryWrite>:
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_RequestMemoryWrite(I2C_HandleTypeDef *hi2c, uint16_t DevAddress,
                                                uint16_t MemAddress, uint16_t MemAddSize, uint32_t Timeout,
                                                uint32_t Tickstart)
{
 8007c5c:	b5b0      	push	{r4, r5, r7, lr}
 8007c5e:	b086      	sub	sp, #24
 8007c60:	af02      	add	r7, sp, #8
 8007c62:	60f8      	str	r0, [r7, #12]
 8007c64:	000c      	movs	r4, r1
 8007c66:	0010      	movs	r0, r2
 8007c68:	0019      	movs	r1, r3
 8007c6a:	250a      	movs	r5, #10
 8007c6c:	197b      	adds	r3, r7, r5
 8007c6e:	1c22      	adds	r2, r4, #0
 8007c70:	801a      	strh	r2, [r3, #0]
 8007c72:	2308      	movs	r3, #8
 8007c74:	18fb      	adds	r3, r7, r3
 8007c76:	1c02      	adds	r2, r0, #0
 8007c78:	801a      	strh	r2, [r3, #0]
 8007c7a:	1dbb      	adds	r3, r7, #6
 8007c7c:	1c0a      	adds	r2, r1, #0
 8007c7e:	801a      	strh	r2, [r3, #0]
  I2C_TransferConfig(hi2c, DevAddress, (uint8_t)MemAddSize, I2C_RELOAD_MODE, I2C_GENERATE_START_WRITE);
 8007c80:	1dbb      	adds	r3, r7, #6
 8007c82:	881b      	ldrh	r3, [r3, #0]
 8007c84:	b2da      	uxtb	r2, r3
 8007c86:	2380      	movs	r3, #128	; 0x80
 8007c88:	045c      	lsls	r4, r3, #17
 8007c8a:	197b      	adds	r3, r7, r5
 8007c8c:	8819      	ldrh	r1, [r3, #0]
 8007c8e:	68f8      	ldr	r0, [r7, #12]
 8007c90:	4b23      	ldr	r3, [pc, #140]	; (8007d20 <I2C_RequestMemoryWrite+0xc4>)
 8007c92:	9300      	str	r3, [sp, #0]
 8007c94:	0023      	movs	r3, r4
 8007c96:	f000 fac1 	bl	800821c <I2C_TransferConfig>

  /* Wait until TXIS flag is set */
  if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8007c9a:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8007c9c:	6a39      	ldr	r1, [r7, #32]
 8007c9e:	68fb      	ldr	r3, [r7, #12]
 8007ca0:	0018      	movs	r0, r3
 8007ca2:	f000 f8af 	bl	8007e04 <I2C_WaitOnTXISFlagUntilTimeout>
 8007ca6:	1e03      	subs	r3, r0, #0
 8007ca8:	d001      	beq.n	8007cae <I2C_RequestMemoryWrite+0x52>
  {
    return HAL_ERROR;
 8007caa:	2301      	movs	r3, #1
 8007cac:	e033      	b.n	8007d16 <I2C_RequestMemoryWrite+0xba>
  }

  /* If Memory address size is 8Bit */
  if (MemAddSize == I2C_MEMADD_SIZE_8BIT)
 8007cae:	1dbb      	adds	r3, r7, #6
 8007cb0:	881b      	ldrh	r3, [r3, #0]
 8007cb2:	2b01      	cmp	r3, #1
 8007cb4:	d107      	bne.n	8007cc6 <I2C_RequestMemoryWrite+0x6a>
  {
    /* Send Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_LSB(MemAddress);
 8007cb6:	2308      	movs	r3, #8
 8007cb8:	18fb      	adds	r3, r7, r3
 8007cba:	881b      	ldrh	r3, [r3, #0]
 8007cbc:	b2da      	uxtb	r2, r3
 8007cbe:	68fb      	ldr	r3, [r7, #12]
 8007cc0:	681b      	ldr	r3, [r3, #0]
 8007cc2:	629a      	str	r2, [r3, #40]	; 0x28
 8007cc4:	e019      	b.n	8007cfa <I2C_RequestMemoryWrite+0x9e>
  }
  /* If Memory address size is 16Bit */
  else
  {
    /* Send MSB of Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_MSB(MemAddress);
 8007cc6:	2308      	movs	r3, #8
 8007cc8:	18fb      	adds	r3, r7, r3
 8007cca:	881b      	ldrh	r3, [r3, #0]
 8007ccc:	0a1b      	lsrs	r3, r3, #8
 8007cce:	b29b      	uxth	r3, r3
 8007cd0:	b2da      	uxtb	r2, r3
 8007cd2:	68fb      	ldr	r3, [r7, #12]
 8007cd4:	681b      	ldr	r3, [r3, #0]
 8007cd6:	629a      	str	r2, [r3, #40]	; 0x28

    /* Wait until TXIS flag is set */
    if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8007cd8:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8007cda:	6a39      	ldr	r1, [r7, #32]
 8007cdc:	68fb      	ldr	r3, [r7, #12]
 8007cde:	0018      	movs	r0, r3
 8007ce0:	f000 f890 	bl	8007e04 <I2C_WaitOnTXISFlagUntilTimeout>
 8007ce4:	1e03      	subs	r3, r0, #0
 8007ce6:	d001      	beq.n	8007cec <I2C_RequestMemoryWrite+0x90>
    {
      return HAL_ERROR;
 8007ce8:	2301      	movs	r3, #1
 8007cea:	e014      	b.n	8007d16 <I2C_RequestMemoryWrite+0xba>
    }

    /* Send LSB of Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_LSB(MemAddress);
 8007cec:	2308      	movs	r3, #8
 8007cee:	18fb      	adds	r3, r7, r3
 8007cf0:	881b      	ldrh	r3, [r3, #0]
 8007cf2:	b2da      	uxtb	r2, r3
 8007cf4:	68fb      	ldr	r3, [r7, #12]
 8007cf6:	681b      	ldr	r3, [r3, #0]
 8007cf8:	629a      	str	r2, [r3, #40]	; 0x28
  }

  /* Wait until TCR flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TCR, RESET, Timeout, Tickstart) != HAL_OK)
 8007cfa:	6a3a      	ldr	r2, [r7, #32]
 8007cfc:	68f8      	ldr	r0, [r7, #12]
 8007cfe:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007d00:	9300      	str	r3, [sp, #0]
 8007d02:	0013      	movs	r3, r2
 8007d04:	2200      	movs	r2, #0
 8007d06:	2180      	movs	r1, #128	; 0x80
 8007d08:	f000 f82e 	bl	8007d68 <I2C_WaitOnFlagUntilTimeout>
 8007d0c:	1e03      	subs	r3, r0, #0
 8007d0e:	d001      	beq.n	8007d14 <I2C_RequestMemoryWrite+0xb8>
  {
    return HAL_ERROR;
 8007d10:	2301      	movs	r3, #1
 8007d12:	e000      	b.n	8007d16 <I2C_RequestMemoryWrite+0xba>
  }

  return HAL_OK;
 8007d14:	2300      	movs	r3, #0
}
 8007d16:	0018      	movs	r0, r3
 8007d18:	46bd      	mov	sp, r7
 8007d1a:	b004      	add	sp, #16
 8007d1c:	bdb0      	pop	{r4, r5, r7, pc}
 8007d1e:	46c0      	nop			; (mov r8, r8)
 8007d20:	80002000 	.word	0x80002000

08007d24 <I2C_Flush_TXDR>:
  * @brief  I2C Tx data register flush process.
  * @param  hi2c I2C handle.
  * @retval None
  */
static void I2C_Flush_TXDR(I2C_HandleTypeDef *hi2c)
{
 8007d24:	b580      	push	{r7, lr}
 8007d26:	b082      	sub	sp, #8
 8007d28:	af00      	add	r7, sp, #0
 8007d2a:	6078      	str	r0, [r7, #4]
  /* If a pending TXIS flag is set */
  /* Write a dummy data in TXDR to clear it */
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) != RESET)
 8007d2c:	687b      	ldr	r3, [r7, #4]
 8007d2e:	681b      	ldr	r3, [r3, #0]
 8007d30:	699b      	ldr	r3, [r3, #24]
 8007d32:	2202      	movs	r2, #2
 8007d34:	4013      	ands	r3, r2
 8007d36:	2b02      	cmp	r3, #2
 8007d38:	d103      	bne.n	8007d42 <I2C_Flush_TXDR+0x1e>
  {
    hi2c->Instance->TXDR = 0x00U;
 8007d3a:	687b      	ldr	r3, [r7, #4]
 8007d3c:	681b      	ldr	r3, [r3, #0]
 8007d3e:	2200      	movs	r2, #0
 8007d40:	629a      	str	r2, [r3, #40]	; 0x28
  }

  /* Flush TX register if not empty */
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 8007d42:	687b      	ldr	r3, [r7, #4]
 8007d44:	681b      	ldr	r3, [r3, #0]
 8007d46:	699b      	ldr	r3, [r3, #24]
 8007d48:	2201      	movs	r2, #1
 8007d4a:	4013      	ands	r3, r2
 8007d4c:	2b01      	cmp	r3, #1
 8007d4e:	d007      	beq.n	8007d60 <I2C_Flush_TXDR+0x3c>
  {
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_TXE);
 8007d50:	687b      	ldr	r3, [r7, #4]
 8007d52:	681b      	ldr	r3, [r3, #0]
 8007d54:	699a      	ldr	r2, [r3, #24]
 8007d56:	687b      	ldr	r3, [r7, #4]
 8007d58:	681b      	ldr	r3, [r3, #0]
 8007d5a:	2101      	movs	r1, #1
 8007d5c:	430a      	orrs	r2, r1
 8007d5e:	619a      	str	r2, [r3, #24]
  }
}
 8007d60:	46c0      	nop			; (mov r8, r8)
 8007d62:	46bd      	mov	sp, r7
 8007d64:	b002      	add	sp, #8
 8007d66:	bd80      	pop	{r7, pc}

08007d68 <I2C_WaitOnFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, FlagStatus Status,
                                                    uint32_t Timeout, uint32_t Tickstart)
{
 8007d68:	b580      	push	{r7, lr}
 8007d6a:	b084      	sub	sp, #16
 8007d6c:	af00      	add	r7, sp, #0
 8007d6e:	60f8      	str	r0, [r7, #12]
 8007d70:	60b9      	str	r1, [r7, #8]
 8007d72:	603b      	str	r3, [r7, #0]
 8007d74:	1dfb      	adds	r3, r7, #7
 8007d76:	701a      	strb	r2, [r3, #0]
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8007d78:	e030      	b.n	8007ddc <I2C_WaitOnFlagUntilTimeout+0x74>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8007d7a:	683b      	ldr	r3, [r7, #0]
 8007d7c:	3301      	adds	r3, #1
 8007d7e:	d02d      	beq.n	8007ddc <I2C_WaitOnFlagUntilTimeout+0x74>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8007d80:	f7fe faf2 	bl	8006368 <HAL_GetTick>
 8007d84:	0002      	movs	r2, r0
 8007d86:	69bb      	ldr	r3, [r7, #24]
 8007d88:	1ad3      	subs	r3, r2, r3
 8007d8a:	683a      	ldr	r2, [r7, #0]
 8007d8c:	429a      	cmp	r2, r3
 8007d8e:	d302      	bcc.n	8007d96 <I2C_WaitOnFlagUntilTimeout+0x2e>
 8007d90:	683b      	ldr	r3, [r7, #0]
 8007d92:	2b00      	cmp	r3, #0
 8007d94:	d122      	bne.n	8007ddc <I2C_WaitOnFlagUntilTimeout+0x74>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, Flag) == Status))
 8007d96:	68fb      	ldr	r3, [r7, #12]
 8007d98:	681b      	ldr	r3, [r3, #0]
 8007d9a:	699b      	ldr	r3, [r3, #24]
 8007d9c:	68ba      	ldr	r2, [r7, #8]
 8007d9e:	4013      	ands	r3, r2
 8007da0:	68ba      	ldr	r2, [r7, #8]
 8007da2:	1ad3      	subs	r3, r2, r3
 8007da4:	425a      	negs	r2, r3
 8007da6:	4153      	adcs	r3, r2
 8007da8:	b2db      	uxtb	r3, r3
 8007daa:	001a      	movs	r2, r3
 8007dac:	1dfb      	adds	r3, r7, #7
 8007dae:	781b      	ldrb	r3, [r3, #0]
 8007db0:	429a      	cmp	r2, r3
 8007db2:	d113      	bne.n	8007ddc <I2C_WaitOnFlagUntilTimeout+0x74>
        {
          hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8007db4:	68fb      	ldr	r3, [r7, #12]
 8007db6:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8007db8:	2220      	movs	r2, #32
 8007dba:	431a      	orrs	r2, r3
 8007dbc:	68fb      	ldr	r3, [r7, #12]
 8007dbe:	645a      	str	r2, [r3, #68]	; 0x44
          hi2c->State = HAL_I2C_STATE_READY;
 8007dc0:	68fb      	ldr	r3, [r7, #12]
 8007dc2:	2241      	movs	r2, #65	; 0x41
 8007dc4:	2120      	movs	r1, #32
 8007dc6:	5499      	strb	r1, [r3, r2]
          hi2c->Mode = HAL_I2C_MODE_NONE;
 8007dc8:	68fb      	ldr	r3, [r7, #12]
 8007dca:	2242      	movs	r2, #66	; 0x42
 8007dcc:	2100      	movs	r1, #0
 8007dce:	5499      	strb	r1, [r3, r2]

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 8007dd0:	68fb      	ldr	r3, [r7, #12]
 8007dd2:	2240      	movs	r2, #64	; 0x40
 8007dd4:	2100      	movs	r1, #0
 8007dd6:	5499      	strb	r1, [r3, r2]
          return HAL_ERROR;
 8007dd8:	2301      	movs	r3, #1
 8007dda:	e00f      	b.n	8007dfc <I2C_WaitOnFlagUntilTimeout+0x94>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8007ddc:	68fb      	ldr	r3, [r7, #12]
 8007dde:	681b      	ldr	r3, [r3, #0]
 8007de0:	699b      	ldr	r3, [r3, #24]
 8007de2:	68ba      	ldr	r2, [r7, #8]
 8007de4:	4013      	ands	r3, r2
 8007de6:	68ba      	ldr	r2, [r7, #8]
 8007de8:	1ad3      	subs	r3, r2, r3
 8007dea:	425a      	negs	r2, r3
 8007dec:	4153      	adcs	r3, r2
 8007dee:	b2db      	uxtb	r3, r3
 8007df0:	001a      	movs	r2, r3
 8007df2:	1dfb      	adds	r3, r7, #7
 8007df4:	781b      	ldrb	r3, [r3, #0]
 8007df6:	429a      	cmp	r2, r3
 8007df8:	d0bf      	beq.n	8007d7a <I2C_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 8007dfa:	2300      	movs	r3, #0
}
 8007dfc:	0018      	movs	r0, r3
 8007dfe:	46bd      	mov	sp, r7
 8007e00:	b004      	add	sp, #16
 8007e02:	bd80      	pop	{r7, pc}

08007e04 <I2C_WaitOnTXISFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnTXISFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout,
                                                        uint32_t Tickstart)
{
 8007e04:	b580      	push	{r7, lr}
 8007e06:	b084      	sub	sp, #16
 8007e08:	af00      	add	r7, sp, #0
 8007e0a:	60f8      	str	r0, [r7, #12]
 8007e0c:	60b9      	str	r1, [r7, #8]
 8007e0e:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) == RESET)
 8007e10:	e032      	b.n	8007e78 <I2C_WaitOnTXISFlagUntilTimeout+0x74>
  {
    /* Check if an error is detected */
    if (I2C_IsErrorOccurred(hi2c, Timeout, Tickstart) != HAL_OK)
 8007e12:	687a      	ldr	r2, [r7, #4]
 8007e14:	68b9      	ldr	r1, [r7, #8]
 8007e16:	68fb      	ldr	r3, [r7, #12]
 8007e18:	0018      	movs	r0, r3
 8007e1a:	f000 f8ff 	bl	800801c <I2C_IsErrorOccurred>
 8007e1e:	1e03      	subs	r3, r0, #0
 8007e20:	d001      	beq.n	8007e26 <I2C_WaitOnTXISFlagUntilTimeout+0x22>
    {
      return HAL_ERROR;
 8007e22:	2301      	movs	r3, #1
 8007e24:	e030      	b.n	8007e88 <I2C_WaitOnTXISFlagUntilTimeout+0x84>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8007e26:	68bb      	ldr	r3, [r7, #8]
 8007e28:	3301      	adds	r3, #1
 8007e2a:	d025      	beq.n	8007e78 <I2C_WaitOnTXISFlagUntilTimeout+0x74>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8007e2c:	f7fe fa9c 	bl	8006368 <HAL_GetTick>
 8007e30:	0002      	movs	r2, r0
 8007e32:	687b      	ldr	r3, [r7, #4]
 8007e34:	1ad3      	subs	r3, r2, r3
 8007e36:	68ba      	ldr	r2, [r7, #8]
 8007e38:	429a      	cmp	r2, r3
 8007e3a:	d302      	bcc.n	8007e42 <I2C_WaitOnTXISFlagUntilTimeout+0x3e>
 8007e3c:	68bb      	ldr	r3, [r7, #8]
 8007e3e:	2b00      	cmp	r3, #0
 8007e40:	d11a      	bne.n	8007e78 <I2C_WaitOnTXISFlagUntilTimeout+0x74>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) == RESET))
 8007e42:	68fb      	ldr	r3, [r7, #12]
 8007e44:	681b      	ldr	r3, [r3, #0]
 8007e46:	699b      	ldr	r3, [r3, #24]
 8007e48:	2202      	movs	r2, #2
 8007e4a:	4013      	ands	r3, r2
 8007e4c:	2b02      	cmp	r3, #2
 8007e4e:	d013      	beq.n	8007e78 <I2C_WaitOnTXISFlagUntilTimeout+0x74>
        {
          hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8007e50:	68fb      	ldr	r3, [r7, #12]
 8007e52:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8007e54:	2220      	movs	r2, #32
 8007e56:	431a      	orrs	r2, r3
 8007e58:	68fb      	ldr	r3, [r7, #12]
 8007e5a:	645a      	str	r2, [r3, #68]	; 0x44
          hi2c->State = HAL_I2C_STATE_READY;
 8007e5c:	68fb      	ldr	r3, [r7, #12]
 8007e5e:	2241      	movs	r2, #65	; 0x41
 8007e60:	2120      	movs	r1, #32
 8007e62:	5499      	strb	r1, [r3, r2]
          hi2c->Mode = HAL_I2C_MODE_NONE;
 8007e64:	68fb      	ldr	r3, [r7, #12]
 8007e66:	2242      	movs	r2, #66	; 0x42
 8007e68:	2100      	movs	r1, #0
 8007e6a:	5499      	strb	r1, [r3, r2]

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 8007e6c:	68fb      	ldr	r3, [r7, #12]
 8007e6e:	2240      	movs	r2, #64	; 0x40
 8007e70:	2100      	movs	r1, #0
 8007e72:	5499      	strb	r1, [r3, r2]

          return HAL_ERROR;
 8007e74:	2301      	movs	r3, #1
 8007e76:	e007      	b.n	8007e88 <I2C_WaitOnTXISFlagUntilTimeout+0x84>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) == RESET)
 8007e78:	68fb      	ldr	r3, [r7, #12]
 8007e7a:	681b      	ldr	r3, [r3, #0]
 8007e7c:	699b      	ldr	r3, [r3, #24]
 8007e7e:	2202      	movs	r2, #2
 8007e80:	4013      	ands	r3, r2
 8007e82:	2b02      	cmp	r3, #2
 8007e84:	d1c5      	bne.n	8007e12 <I2C_WaitOnTXISFlagUntilTimeout+0xe>
        }
      }
    }
  }
  return HAL_OK;
 8007e86:	2300      	movs	r3, #0
}
 8007e88:	0018      	movs	r0, r3
 8007e8a:	46bd      	mov	sp, r7
 8007e8c:	b004      	add	sp, #16
 8007e8e:	bd80      	pop	{r7, pc}

08007e90 <I2C_WaitOnSTOPFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnSTOPFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout,
                                                        uint32_t Tickstart)
{
 8007e90:	b580      	push	{r7, lr}
 8007e92:	b084      	sub	sp, #16
 8007e94:	af00      	add	r7, sp, #0
 8007e96:	60f8      	str	r0, [r7, #12]
 8007e98:	60b9      	str	r1, [r7, #8]
 8007e9a:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 8007e9c:	e02f      	b.n	8007efe <I2C_WaitOnSTOPFlagUntilTimeout+0x6e>
  {
    /* Check if an error is detected */
    if (I2C_IsErrorOccurred(hi2c, Timeout, Tickstart) != HAL_OK)
 8007e9e:	687a      	ldr	r2, [r7, #4]
 8007ea0:	68b9      	ldr	r1, [r7, #8]
 8007ea2:	68fb      	ldr	r3, [r7, #12]
 8007ea4:	0018      	movs	r0, r3
 8007ea6:	f000 f8b9 	bl	800801c <I2C_IsErrorOccurred>
 8007eaa:	1e03      	subs	r3, r0, #0
 8007eac:	d001      	beq.n	8007eb2 <I2C_WaitOnSTOPFlagUntilTimeout+0x22>
    {
      return HAL_ERROR;
 8007eae:	2301      	movs	r3, #1
 8007eb0:	e02d      	b.n	8007f0e <I2C_WaitOnSTOPFlagUntilTimeout+0x7e>
    }

    /* Check for the Timeout */
    if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8007eb2:	f7fe fa59 	bl	8006368 <HAL_GetTick>
 8007eb6:	0002      	movs	r2, r0
 8007eb8:	687b      	ldr	r3, [r7, #4]
 8007eba:	1ad3      	subs	r3, r2, r3
 8007ebc:	68ba      	ldr	r2, [r7, #8]
 8007ebe:	429a      	cmp	r2, r3
 8007ec0:	d302      	bcc.n	8007ec8 <I2C_WaitOnSTOPFlagUntilTimeout+0x38>
 8007ec2:	68bb      	ldr	r3, [r7, #8]
 8007ec4:	2b00      	cmp	r3, #0
 8007ec6:	d11a      	bne.n	8007efe <I2C_WaitOnSTOPFlagUntilTimeout+0x6e>
    {
      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET))
 8007ec8:	68fb      	ldr	r3, [r7, #12]
 8007eca:	681b      	ldr	r3, [r3, #0]
 8007ecc:	699b      	ldr	r3, [r3, #24]
 8007ece:	2220      	movs	r2, #32
 8007ed0:	4013      	ands	r3, r2
 8007ed2:	2b20      	cmp	r3, #32
 8007ed4:	d013      	beq.n	8007efe <I2C_WaitOnSTOPFlagUntilTimeout+0x6e>
      {
        hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8007ed6:	68fb      	ldr	r3, [r7, #12]
 8007ed8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8007eda:	2220      	movs	r2, #32
 8007edc:	431a      	orrs	r2, r3
 8007ede:	68fb      	ldr	r3, [r7, #12]
 8007ee0:	645a      	str	r2, [r3, #68]	; 0x44
        hi2c->State = HAL_I2C_STATE_READY;
 8007ee2:	68fb      	ldr	r3, [r7, #12]
 8007ee4:	2241      	movs	r2, #65	; 0x41
 8007ee6:	2120      	movs	r1, #32
 8007ee8:	5499      	strb	r1, [r3, r2]
        hi2c->Mode = HAL_I2C_MODE_NONE;
 8007eea:	68fb      	ldr	r3, [r7, #12]
 8007eec:	2242      	movs	r2, #66	; 0x42
 8007eee:	2100      	movs	r1, #0
 8007ef0:	5499      	strb	r1, [r3, r2]

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8007ef2:	68fb      	ldr	r3, [r7, #12]
 8007ef4:	2240      	movs	r2, #64	; 0x40
 8007ef6:	2100      	movs	r1, #0
 8007ef8:	5499      	strb	r1, [r3, r2]

        return HAL_ERROR;
 8007efa:	2301      	movs	r3, #1
 8007efc:	e007      	b.n	8007f0e <I2C_WaitOnSTOPFlagUntilTimeout+0x7e>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 8007efe:	68fb      	ldr	r3, [r7, #12]
 8007f00:	681b      	ldr	r3, [r3, #0]
 8007f02:	699b      	ldr	r3, [r3, #24]
 8007f04:	2220      	movs	r2, #32
 8007f06:	4013      	ands	r3, r2
 8007f08:	2b20      	cmp	r3, #32
 8007f0a:	d1c8      	bne.n	8007e9e <I2C_WaitOnSTOPFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 8007f0c:	2300      	movs	r3, #0
}
 8007f0e:	0018      	movs	r0, r3
 8007f10:	46bd      	mov	sp, r7
 8007f12:	b004      	add	sp, #16
 8007f14:	bd80      	pop	{r7, pc}
	...

08007f18 <I2C_WaitOnRXNEFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnRXNEFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout,
                                                        uint32_t Tickstart)
{
 8007f18:	b580      	push	{r7, lr}
 8007f1a:	b084      	sub	sp, #16
 8007f1c:	af00      	add	r7, sp, #0
 8007f1e:	60f8      	str	r0, [r7, #12]
 8007f20:	60b9      	str	r1, [r7, #8]
 8007f22:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET)
 8007f24:	e06b      	b.n	8007ffe <I2C_WaitOnRXNEFlagUntilTimeout+0xe6>
  {
    /* Check if an error is detected */
    if (I2C_IsErrorOccurred(hi2c, Timeout, Tickstart) != HAL_OK)
 8007f26:	687a      	ldr	r2, [r7, #4]
 8007f28:	68b9      	ldr	r1, [r7, #8]
 8007f2a:	68fb      	ldr	r3, [r7, #12]
 8007f2c:	0018      	movs	r0, r3
 8007f2e:	f000 f875 	bl	800801c <I2C_IsErrorOccurred>
 8007f32:	1e03      	subs	r3, r0, #0
 8007f34:	d001      	beq.n	8007f3a <I2C_WaitOnRXNEFlagUntilTimeout+0x22>
    {
      return HAL_ERROR;
 8007f36:	2301      	movs	r3, #1
 8007f38:	e069      	b.n	800800e <I2C_WaitOnRXNEFlagUntilTimeout+0xf6>
    }

    /* Check if a STOPF is detected */
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == SET)
 8007f3a:	68fb      	ldr	r3, [r7, #12]
 8007f3c:	681b      	ldr	r3, [r3, #0]
 8007f3e:	699b      	ldr	r3, [r3, #24]
 8007f40:	2220      	movs	r2, #32
 8007f42:	4013      	ands	r3, r2
 8007f44:	2b20      	cmp	r3, #32
 8007f46:	d138      	bne.n	8007fba <I2C_WaitOnRXNEFlagUntilTimeout+0xa2>
    {
      /* Check if an RXNE is pending */
      /* Store Last receive data if any */
      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == SET) && (hi2c->XferSize > 0U))
 8007f48:	68fb      	ldr	r3, [r7, #12]
 8007f4a:	681b      	ldr	r3, [r3, #0]
 8007f4c:	699b      	ldr	r3, [r3, #24]
 8007f4e:	2204      	movs	r2, #4
 8007f50:	4013      	ands	r3, r2
 8007f52:	2b04      	cmp	r3, #4
 8007f54:	d105      	bne.n	8007f62 <I2C_WaitOnRXNEFlagUntilTimeout+0x4a>
 8007f56:	68fb      	ldr	r3, [r7, #12]
 8007f58:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8007f5a:	2b00      	cmp	r3, #0
 8007f5c:	d001      	beq.n	8007f62 <I2C_WaitOnRXNEFlagUntilTimeout+0x4a>
      {
        /* Return HAL_OK */
        /* The Reading of data from RXDR will be done in caller function */
        return HAL_OK;
 8007f5e:	2300      	movs	r3, #0
 8007f60:	e055      	b.n	800800e <I2C_WaitOnRXNEFlagUntilTimeout+0xf6>
      }
      else
      {
        if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 8007f62:	68fb      	ldr	r3, [r7, #12]
 8007f64:	681b      	ldr	r3, [r3, #0]
 8007f66:	699b      	ldr	r3, [r3, #24]
 8007f68:	2210      	movs	r2, #16
 8007f6a:	4013      	ands	r3, r2
 8007f6c:	2b10      	cmp	r3, #16
 8007f6e:	d107      	bne.n	8007f80 <I2C_WaitOnRXNEFlagUntilTimeout+0x68>
        {
          __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8007f70:	68fb      	ldr	r3, [r7, #12]
 8007f72:	681b      	ldr	r3, [r3, #0]
 8007f74:	2210      	movs	r2, #16
 8007f76:	61da      	str	r2, [r3, #28]
          hi2c->ErrorCode = HAL_I2C_ERROR_AF;
 8007f78:	68fb      	ldr	r3, [r7, #12]
 8007f7a:	2204      	movs	r2, #4
 8007f7c:	645a      	str	r2, [r3, #68]	; 0x44
 8007f7e:	e002      	b.n	8007f86 <I2C_WaitOnRXNEFlagUntilTimeout+0x6e>
        }
        else
        {
          hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8007f80:	68fb      	ldr	r3, [r7, #12]
 8007f82:	2200      	movs	r2, #0
 8007f84:	645a      	str	r2, [r3, #68]	; 0x44
        }

        /* Clear STOP Flag */
        __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8007f86:	68fb      	ldr	r3, [r7, #12]
 8007f88:	681b      	ldr	r3, [r3, #0]
 8007f8a:	2220      	movs	r2, #32
 8007f8c:	61da      	str	r2, [r3, #28]

        /* Clear Configuration Register 2 */
        I2C_RESET_CR2(hi2c);
 8007f8e:	68fb      	ldr	r3, [r7, #12]
 8007f90:	681b      	ldr	r3, [r3, #0]
 8007f92:	685a      	ldr	r2, [r3, #4]
 8007f94:	68fb      	ldr	r3, [r7, #12]
 8007f96:	681b      	ldr	r3, [r3, #0]
 8007f98:	491f      	ldr	r1, [pc, #124]	; (8008018 <I2C_WaitOnRXNEFlagUntilTimeout+0x100>)
 8007f9a:	400a      	ands	r2, r1
 8007f9c:	605a      	str	r2, [r3, #4]

        hi2c->State = HAL_I2C_STATE_READY;
 8007f9e:	68fb      	ldr	r3, [r7, #12]
 8007fa0:	2241      	movs	r2, #65	; 0x41
 8007fa2:	2120      	movs	r1, #32
 8007fa4:	5499      	strb	r1, [r3, r2]
        hi2c->Mode = HAL_I2C_MODE_NONE;
 8007fa6:	68fb      	ldr	r3, [r7, #12]
 8007fa8:	2242      	movs	r2, #66	; 0x42
 8007faa:	2100      	movs	r1, #0
 8007fac:	5499      	strb	r1, [r3, r2]

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8007fae:	68fb      	ldr	r3, [r7, #12]
 8007fb0:	2240      	movs	r2, #64	; 0x40
 8007fb2:	2100      	movs	r1, #0
 8007fb4:	5499      	strb	r1, [r3, r2]

        return HAL_ERROR;
 8007fb6:	2301      	movs	r3, #1
 8007fb8:	e029      	b.n	800800e <I2C_WaitOnRXNEFlagUntilTimeout+0xf6>
      }
    }

    /* Check for the Timeout */
    if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8007fba:	f7fe f9d5 	bl	8006368 <HAL_GetTick>
 8007fbe:	0002      	movs	r2, r0
 8007fc0:	687b      	ldr	r3, [r7, #4]
 8007fc2:	1ad3      	subs	r3, r2, r3
 8007fc4:	68ba      	ldr	r2, [r7, #8]
 8007fc6:	429a      	cmp	r2, r3
 8007fc8:	d302      	bcc.n	8007fd0 <I2C_WaitOnRXNEFlagUntilTimeout+0xb8>
 8007fca:	68bb      	ldr	r3, [r7, #8]
 8007fcc:	2b00      	cmp	r3, #0
 8007fce:	d116      	bne.n	8007ffe <I2C_WaitOnRXNEFlagUntilTimeout+0xe6>
    {
      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET))
 8007fd0:	68fb      	ldr	r3, [r7, #12]
 8007fd2:	681b      	ldr	r3, [r3, #0]
 8007fd4:	699b      	ldr	r3, [r3, #24]
 8007fd6:	2204      	movs	r2, #4
 8007fd8:	4013      	ands	r3, r2
 8007fda:	2b04      	cmp	r3, #4
 8007fdc:	d00f      	beq.n	8007ffe <I2C_WaitOnRXNEFlagUntilTimeout+0xe6>
      {
        hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8007fde:	68fb      	ldr	r3, [r7, #12]
 8007fe0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8007fe2:	2220      	movs	r2, #32
 8007fe4:	431a      	orrs	r2, r3
 8007fe6:	68fb      	ldr	r3, [r7, #12]
 8007fe8:	645a      	str	r2, [r3, #68]	; 0x44
        hi2c->State = HAL_I2C_STATE_READY;
 8007fea:	68fb      	ldr	r3, [r7, #12]
 8007fec:	2241      	movs	r2, #65	; 0x41
 8007fee:	2120      	movs	r1, #32
 8007ff0:	5499      	strb	r1, [r3, r2]

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8007ff2:	68fb      	ldr	r3, [r7, #12]
 8007ff4:	2240      	movs	r2, #64	; 0x40
 8007ff6:	2100      	movs	r1, #0
 8007ff8:	5499      	strb	r1, [r3, r2]

        return HAL_ERROR;
 8007ffa:	2301      	movs	r3, #1
 8007ffc:	e007      	b.n	800800e <I2C_WaitOnRXNEFlagUntilTimeout+0xf6>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET)
 8007ffe:	68fb      	ldr	r3, [r7, #12]
 8008000:	681b      	ldr	r3, [r3, #0]
 8008002:	699b      	ldr	r3, [r3, #24]
 8008004:	2204      	movs	r2, #4
 8008006:	4013      	ands	r3, r2
 8008008:	2b04      	cmp	r3, #4
 800800a:	d18c      	bne.n	8007f26 <I2C_WaitOnRXNEFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 800800c:	2300      	movs	r3, #0
}
 800800e:	0018      	movs	r0, r3
 8008010:	46bd      	mov	sp, r7
 8008012:	b004      	add	sp, #16
 8008014:	bd80      	pop	{r7, pc}
 8008016:	46c0      	nop			; (mov r8, r8)
 8008018:	fe00e800 	.word	0xfe00e800

0800801c <I2C_IsErrorOccurred>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_IsErrorOccurred(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 800801c:	b590      	push	{r4, r7, lr}
 800801e:	b08b      	sub	sp, #44	; 0x2c
 8008020:	af00      	add	r7, sp, #0
 8008022:	60f8      	str	r0, [r7, #12]
 8008024:	60b9      	str	r1, [r7, #8]
 8008026:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8008028:	2327      	movs	r3, #39	; 0x27
 800802a:	18fb      	adds	r3, r7, r3
 800802c:	2200      	movs	r2, #0
 800802e:	701a      	strb	r2, [r3, #0]
  uint32_t itflag   = hi2c->Instance->ISR;
 8008030:	68fb      	ldr	r3, [r7, #12]
 8008032:	681b      	ldr	r3, [r3, #0]
 8008034:	699b      	ldr	r3, [r3, #24]
 8008036:	61bb      	str	r3, [r7, #24]
  uint32_t error_code = 0;
 8008038:	2300      	movs	r3, #0
 800803a:	623b      	str	r3, [r7, #32]
  uint32_t tickstart = Tickstart;
 800803c:	687b      	ldr	r3, [r7, #4]
 800803e:	61fb      	str	r3, [r7, #28]
  uint32_t tmp1;
  HAL_I2C_ModeTypeDef tmp2;

  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_AF))
 8008040:	69bb      	ldr	r3, [r7, #24]
 8008042:	2210      	movs	r2, #16
 8008044:	4013      	ands	r3, r2
 8008046:	d100      	bne.n	800804a <I2C_IsErrorOccurred+0x2e>
 8008048:	e082      	b.n	8008150 <I2C_IsErrorOccurred+0x134>
  {
    /* Clear NACKF Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 800804a:	68fb      	ldr	r3, [r7, #12]
 800804c:	681b      	ldr	r3, [r3, #0]
 800804e:	2210      	movs	r2, #16
 8008050:	61da      	str	r2, [r3, #28]

    /* Wait until STOP Flag is set or timeout occurred */
    /* AutoEnd should be initiate after AF */
    while ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET) && (status == HAL_OK))
 8008052:	e060      	b.n	8008116 <I2C_IsErrorOccurred+0xfa>
 8008054:	2427      	movs	r4, #39	; 0x27
 8008056:	193b      	adds	r3, r7, r4
 8008058:	193a      	adds	r2, r7, r4
 800805a:	7812      	ldrb	r2, [r2, #0]
 800805c:	701a      	strb	r2, [r3, #0]
    {
      /* Check for the Timeout */
      if (Timeout != HAL_MAX_DELAY)
 800805e:	68bb      	ldr	r3, [r7, #8]
 8008060:	3301      	adds	r3, #1
 8008062:	d058      	beq.n	8008116 <I2C_IsErrorOccurred+0xfa>
      {
        if (((HAL_GetTick() - tickstart) > Timeout) || (Timeout == 0U))
 8008064:	f7fe f980 	bl	8006368 <HAL_GetTick>
 8008068:	0002      	movs	r2, r0
 800806a:	69fb      	ldr	r3, [r7, #28]
 800806c:	1ad3      	subs	r3, r2, r3
 800806e:	68ba      	ldr	r2, [r7, #8]
 8008070:	429a      	cmp	r2, r3
 8008072:	d306      	bcc.n	8008082 <I2C_IsErrorOccurred+0x66>
 8008074:	193b      	adds	r3, r7, r4
 8008076:	193a      	adds	r2, r7, r4
 8008078:	7812      	ldrb	r2, [r2, #0]
 800807a:	701a      	strb	r2, [r3, #0]
 800807c:	68bb      	ldr	r3, [r7, #8]
 800807e:	2b00      	cmp	r3, #0
 8008080:	d149      	bne.n	8008116 <I2C_IsErrorOccurred+0xfa>
        {
          tmp1 = (uint32_t)(hi2c->Instance->CR2 & I2C_CR2_STOP);
 8008082:	68fb      	ldr	r3, [r7, #12]
 8008084:	681b      	ldr	r3, [r3, #0]
 8008086:	685a      	ldr	r2, [r3, #4]
 8008088:	2380      	movs	r3, #128	; 0x80
 800808a:	01db      	lsls	r3, r3, #7
 800808c:	4013      	ands	r3, r2
 800808e:	617b      	str	r3, [r7, #20]
          tmp2 = hi2c->Mode;
 8008090:	2013      	movs	r0, #19
 8008092:	183b      	adds	r3, r7, r0
 8008094:	68fa      	ldr	r2, [r7, #12]
 8008096:	2142      	movs	r1, #66	; 0x42
 8008098:	5c52      	ldrb	r2, [r2, r1]
 800809a:	701a      	strb	r2, [r3, #0]

          /* In case of I2C still busy, try to regenerate a STOP manually */
          if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BUSY) != RESET) && \
 800809c:	68fb      	ldr	r3, [r7, #12]
 800809e:	681b      	ldr	r3, [r3, #0]
 80080a0:	699a      	ldr	r2, [r3, #24]
 80080a2:	2380      	movs	r3, #128	; 0x80
 80080a4:	021b      	lsls	r3, r3, #8
 80080a6:	401a      	ands	r2, r3
 80080a8:	2380      	movs	r3, #128	; 0x80
 80080aa:	021b      	lsls	r3, r3, #8
 80080ac:	429a      	cmp	r2, r3
 80080ae:	d126      	bne.n	80080fe <I2C_IsErrorOccurred+0xe2>
 80080b0:	697a      	ldr	r2, [r7, #20]
 80080b2:	2380      	movs	r3, #128	; 0x80
 80080b4:	01db      	lsls	r3, r3, #7
 80080b6:	429a      	cmp	r2, r3
 80080b8:	d021      	beq.n	80080fe <I2C_IsErrorOccurred+0xe2>
              (tmp1 != I2C_CR2_STOP) && \
 80080ba:	183b      	adds	r3, r7, r0
 80080bc:	781b      	ldrb	r3, [r3, #0]
 80080be:	2b20      	cmp	r3, #32
 80080c0:	d01d      	beq.n	80080fe <I2C_IsErrorOccurred+0xe2>
              (tmp2 != HAL_I2C_MODE_SLAVE))
          {
            /* Generate Stop */
            hi2c->Instance->CR2 |= I2C_CR2_STOP;
 80080c2:	68fb      	ldr	r3, [r7, #12]
 80080c4:	681b      	ldr	r3, [r3, #0]
 80080c6:	685a      	ldr	r2, [r3, #4]
 80080c8:	68fb      	ldr	r3, [r7, #12]
 80080ca:	681b      	ldr	r3, [r3, #0]
 80080cc:	2180      	movs	r1, #128	; 0x80
 80080ce:	01c9      	lsls	r1, r1, #7
 80080d0:	430a      	orrs	r2, r1
 80080d2:	605a      	str	r2, [r3, #4]

            /* Update Tick with new reference */
            tickstart = HAL_GetTick();
 80080d4:	f7fe f948 	bl	8006368 <HAL_GetTick>
 80080d8:	0003      	movs	r3, r0
 80080da:	61fb      	str	r3, [r7, #28]
          }

          while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 80080dc:	e00f      	b.n	80080fe <I2C_IsErrorOccurred+0xe2>
          {
            /* Check for the Timeout */
            if ((HAL_GetTick() - tickstart) > I2C_TIMEOUT_STOPF)
 80080de:	f7fe f943 	bl	8006368 <HAL_GetTick>
 80080e2:	0002      	movs	r2, r0
 80080e4:	69fb      	ldr	r3, [r7, #28]
 80080e6:	1ad3      	subs	r3, r2, r3
 80080e8:	2b19      	cmp	r3, #25
 80080ea:	d908      	bls.n	80080fe <I2C_IsErrorOccurred+0xe2>
            {
              error_code |= HAL_I2C_ERROR_TIMEOUT;
 80080ec:	6a3b      	ldr	r3, [r7, #32]
 80080ee:	2220      	movs	r2, #32
 80080f0:	4313      	orrs	r3, r2
 80080f2:	623b      	str	r3, [r7, #32]

              status = HAL_ERROR;
 80080f4:	2327      	movs	r3, #39	; 0x27
 80080f6:	18fb      	adds	r3, r7, r3
 80080f8:	2201      	movs	r2, #1
 80080fa:	701a      	strb	r2, [r3, #0]

              break;
 80080fc:	e00b      	b.n	8008116 <I2C_IsErrorOccurred+0xfa>
          while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 80080fe:	68fb      	ldr	r3, [r7, #12]
 8008100:	681b      	ldr	r3, [r3, #0]
 8008102:	699b      	ldr	r3, [r3, #24]
 8008104:	2220      	movs	r2, #32
 8008106:	4013      	ands	r3, r2
 8008108:	2127      	movs	r1, #39	; 0x27
 800810a:	187a      	adds	r2, r7, r1
 800810c:	1879      	adds	r1, r7, r1
 800810e:	7809      	ldrb	r1, [r1, #0]
 8008110:	7011      	strb	r1, [r2, #0]
 8008112:	2b20      	cmp	r3, #32
 8008114:	d1e3      	bne.n	80080de <I2C_IsErrorOccurred+0xc2>
    while ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET) && (status == HAL_OK))
 8008116:	68fb      	ldr	r3, [r7, #12]
 8008118:	681b      	ldr	r3, [r3, #0]
 800811a:	699b      	ldr	r3, [r3, #24]
 800811c:	2220      	movs	r2, #32
 800811e:	4013      	ands	r3, r2
 8008120:	2b20      	cmp	r3, #32
 8008122:	d004      	beq.n	800812e <I2C_IsErrorOccurred+0x112>
 8008124:	2327      	movs	r3, #39	; 0x27
 8008126:	18fb      	adds	r3, r7, r3
 8008128:	781b      	ldrb	r3, [r3, #0]
 800812a:	2b00      	cmp	r3, #0
 800812c:	d092      	beq.n	8008054 <I2C_IsErrorOccurred+0x38>
        }
      }
    }

    /* In case STOP Flag is detected, clear it */
    if (status == HAL_OK)
 800812e:	2327      	movs	r3, #39	; 0x27
 8008130:	18fb      	adds	r3, r7, r3
 8008132:	781b      	ldrb	r3, [r3, #0]
 8008134:	2b00      	cmp	r3, #0
 8008136:	d103      	bne.n	8008140 <I2C_IsErrorOccurred+0x124>
    {
      /* Clear STOP Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8008138:	68fb      	ldr	r3, [r7, #12]
 800813a:	681b      	ldr	r3, [r3, #0]
 800813c:	2220      	movs	r2, #32
 800813e:	61da      	str	r2, [r3, #28]
    }

    error_code |= HAL_I2C_ERROR_AF;
 8008140:	6a3b      	ldr	r3, [r7, #32]
 8008142:	2204      	movs	r2, #4
 8008144:	4313      	orrs	r3, r2
 8008146:	623b      	str	r3, [r7, #32]

    status = HAL_ERROR;
 8008148:	2327      	movs	r3, #39	; 0x27
 800814a:	18fb      	adds	r3, r7, r3
 800814c:	2201      	movs	r2, #1
 800814e:	701a      	strb	r2, [r3, #0]
  }

  /* Refresh Content of Status register */
  itflag = hi2c->Instance->ISR;
 8008150:	68fb      	ldr	r3, [r7, #12]
 8008152:	681b      	ldr	r3, [r3, #0]
 8008154:	699b      	ldr	r3, [r3, #24]
 8008156:	61bb      	str	r3, [r7, #24]

  /* Then verify if an additional errors occurs */
  /* Check if a Bus error occurred */
  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_BERR))
 8008158:	69ba      	ldr	r2, [r7, #24]
 800815a:	2380      	movs	r3, #128	; 0x80
 800815c:	005b      	lsls	r3, r3, #1
 800815e:	4013      	ands	r3, r2
 8008160:	d00c      	beq.n	800817c <I2C_IsErrorOccurred+0x160>
  {
    error_code |= HAL_I2C_ERROR_BERR;
 8008162:	6a3b      	ldr	r3, [r7, #32]
 8008164:	2201      	movs	r2, #1
 8008166:	4313      	orrs	r3, r2
 8008168:	623b      	str	r3, [r7, #32]

    /* Clear BERR flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_BERR);
 800816a:	68fb      	ldr	r3, [r7, #12]
 800816c:	681b      	ldr	r3, [r3, #0]
 800816e:	2280      	movs	r2, #128	; 0x80
 8008170:	0052      	lsls	r2, r2, #1
 8008172:	61da      	str	r2, [r3, #28]

    status = HAL_ERROR;
 8008174:	2327      	movs	r3, #39	; 0x27
 8008176:	18fb      	adds	r3, r7, r3
 8008178:	2201      	movs	r2, #1
 800817a:	701a      	strb	r2, [r3, #0]
  }

  /* Check if an Over-Run/Under-Run error occurred */
  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_OVR))
 800817c:	69ba      	ldr	r2, [r7, #24]
 800817e:	2380      	movs	r3, #128	; 0x80
 8008180:	00db      	lsls	r3, r3, #3
 8008182:	4013      	ands	r3, r2
 8008184:	d00c      	beq.n	80081a0 <I2C_IsErrorOccurred+0x184>
  {
    error_code |= HAL_I2C_ERROR_OVR;
 8008186:	6a3b      	ldr	r3, [r7, #32]
 8008188:	2208      	movs	r2, #8
 800818a:	4313      	orrs	r3, r2
 800818c:	623b      	str	r3, [r7, #32]

    /* Clear OVR flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_OVR);
 800818e:	68fb      	ldr	r3, [r7, #12]
 8008190:	681b      	ldr	r3, [r3, #0]
 8008192:	2280      	movs	r2, #128	; 0x80
 8008194:	00d2      	lsls	r2, r2, #3
 8008196:	61da      	str	r2, [r3, #28]

    status = HAL_ERROR;
 8008198:	2327      	movs	r3, #39	; 0x27
 800819a:	18fb      	adds	r3, r7, r3
 800819c:	2201      	movs	r2, #1
 800819e:	701a      	strb	r2, [r3, #0]
  }

  /* Check if an Arbitration Loss error occurred */
  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_ARLO))
 80081a0:	69ba      	ldr	r2, [r7, #24]
 80081a2:	2380      	movs	r3, #128	; 0x80
 80081a4:	009b      	lsls	r3, r3, #2
 80081a6:	4013      	ands	r3, r2
 80081a8:	d00c      	beq.n	80081c4 <I2C_IsErrorOccurred+0x1a8>
  {
    error_code |= HAL_I2C_ERROR_ARLO;
 80081aa:	6a3b      	ldr	r3, [r7, #32]
 80081ac:	2202      	movs	r2, #2
 80081ae:	4313      	orrs	r3, r2
 80081b0:	623b      	str	r3, [r7, #32]

    /* Clear ARLO flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_ARLO);
 80081b2:	68fb      	ldr	r3, [r7, #12]
 80081b4:	681b      	ldr	r3, [r3, #0]
 80081b6:	2280      	movs	r2, #128	; 0x80
 80081b8:	0092      	lsls	r2, r2, #2
 80081ba:	61da      	str	r2, [r3, #28]

    status = HAL_ERROR;
 80081bc:	2327      	movs	r3, #39	; 0x27
 80081be:	18fb      	adds	r3, r7, r3
 80081c0:	2201      	movs	r2, #1
 80081c2:	701a      	strb	r2, [r3, #0]
  }

  if (status != HAL_OK)
 80081c4:	2327      	movs	r3, #39	; 0x27
 80081c6:	18fb      	adds	r3, r7, r3
 80081c8:	781b      	ldrb	r3, [r3, #0]
 80081ca:	2b00      	cmp	r3, #0
 80081cc:	d01d      	beq.n	800820a <I2C_IsErrorOccurred+0x1ee>
  {
    /* Flush TX register */
    I2C_Flush_TXDR(hi2c);
 80081ce:	68fb      	ldr	r3, [r7, #12]
 80081d0:	0018      	movs	r0, r3
 80081d2:	f7ff fda7 	bl	8007d24 <I2C_Flush_TXDR>

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 80081d6:	68fb      	ldr	r3, [r7, #12]
 80081d8:	681b      	ldr	r3, [r3, #0]
 80081da:	685a      	ldr	r2, [r3, #4]
 80081dc:	68fb      	ldr	r3, [r7, #12]
 80081de:	681b      	ldr	r3, [r3, #0]
 80081e0:	490d      	ldr	r1, [pc, #52]	; (8008218 <I2C_IsErrorOccurred+0x1fc>)
 80081e2:	400a      	ands	r2, r1
 80081e4:	605a      	str	r2, [r3, #4]

    hi2c->ErrorCode |= error_code;
 80081e6:	68fb      	ldr	r3, [r7, #12]
 80081e8:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 80081ea:	6a3b      	ldr	r3, [r7, #32]
 80081ec:	431a      	orrs	r2, r3
 80081ee:	68fb      	ldr	r3, [r7, #12]
 80081f0:	645a      	str	r2, [r3, #68]	; 0x44
    hi2c->State = HAL_I2C_STATE_READY;
 80081f2:	68fb      	ldr	r3, [r7, #12]
 80081f4:	2241      	movs	r2, #65	; 0x41
 80081f6:	2120      	movs	r1, #32
 80081f8:	5499      	strb	r1, [r3, r2]
    hi2c->Mode = HAL_I2C_MODE_NONE;
 80081fa:	68fb      	ldr	r3, [r7, #12]
 80081fc:	2242      	movs	r2, #66	; 0x42
 80081fe:	2100      	movs	r1, #0
 8008200:	5499      	strb	r1, [r3, r2]

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8008202:	68fb      	ldr	r3, [r7, #12]
 8008204:	2240      	movs	r2, #64	; 0x40
 8008206:	2100      	movs	r1, #0
 8008208:	5499      	strb	r1, [r3, r2]
  }

  return status;
 800820a:	2327      	movs	r3, #39	; 0x27
 800820c:	18fb      	adds	r3, r7, r3
 800820e:	781b      	ldrb	r3, [r3, #0]
}
 8008210:	0018      	movs	r0, r3
 8008212:	46bd      	mov	sp, r7
 8008214:	b00b      	add	sp, #44	; 0x2c
 8008216:	bd90      	pop	{r4, r7, pc}
 8008218:	fe00e800 	.word	0xfe00e800

0800821c <I2C_TransferConfig>:
  *     @arg @ref I2C_GENERATE_START_WRITE Generate Restart for write request.
  * @retval None
  */
static void I2C_TransferConfig(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t Size, uint32_t Mode,
                               uint32_t Request)
{
 800821c:	b590      	push	{r4, r7, lr}
 800821e:	b087      	sub	sp, #28
 8008220:	af00      	add	r7, sp, #0
 8008222:	60f8      	str	r0, [r7, #12]
 8008224:	0008      	movs	r0, r1
 8008226:	0011      	movs	r1, r2
 8008228:	607b      	str	r3, [r7, #4]
 800822a:	240a      	movs	r4, #10
 800822c:	193b      	adds	r3, r7, r4
 800822e:	1c02      	adds	r2, r0, #0
 8008230:	801a      	strh	r2, [r3, #0]
 8008232:	2009      	movs	r0, #9
 8008234:	183b      	adds	r3, r7, r0
 8008236:	1c0a      	adds	r2, r1, #0
 8008238:	701a      	strb	r2, [r3, #0]
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_TRANSFER_MODE(Mode));
  assert_param(IS_TRANSFER_REQUEST(Request));

  /* Declaration of tmp to prevent undefined behavior of volatile usage */
  uint32_t tmp = ((uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) | \
 800823a:	193b      	adds	r3, r7, r4
 800823c:	881b      	ldrh	r3, [r3, #0]
 800823e:	059b      	lsls	r3, r3, #22
 8008240:	0d9a      	lsrs	r2, r3, #22
                             (((uint32_t)Size << I2C_CR2_NBYTES_Pos) & I2C_CR2_NBYTES) | \
 8008242:	183b      	adds	r3, r7, r0
 8008244:	781b      	ldrb	r3, [r3, #0]
 8008246:	0419      	lsls	r1, r3, #16
 8008248:	23ff      	movs	r3, #255	; 0xff
 800824a:	041b      	lsls	r3, r3, #16
 800824c:	400b      	ands	r3, r1
  uint32_t tmp = ((uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) | \
 800824e:	431a      	orrs	r2, r3
                             (((uint32_t)Size << I2C_CR2_NBYTES_Pos) & I2C_CR2_NBYTES) | \
 8008250:	687b      	ldr	r3, [r7, #4]
 8008252:	431a      	orrs	r2, r3
  uint32_t tmp = ((uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) | \
 8008254:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008256:	4313      	orrs	r3, r2
 8008258:	005b      	lsls	r3, r3, #1
 800825a:	085b      	lsrs	r3, r3, #1
 800825c:	617b      	str	r3, [r7, #20]
                             (uint32_t)Mode | (uint32_t)Request) & (~0x80000000U));

  /* update CR2 register */
  MODIFY_REG(hi2c->Instance->CR2, \
 800825e:	68fb      	ldr	r3, [r7, #12]
 8008260:	681b      	ldr	r3, [r3, #0]
 8008262:	685b      	ldr	r3, [r3, #4]
 8008264:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8008266:	0d51      	lsrs	r1, r2, #21
 8008268:	2280      	movs	r2, #128	; 0x80
 800826a:	00d2      	lsls	r2, r2, #3
 800826c:	400a      	ands	r2, r1
 800826e:	4907      	ldr	r1, [pc, #28]	; (800828c <I2C_TransferConfig+0x70>)
 8008270:	430a      	orrs	r2, r1
 8008272:	43d2      	mvns	r2, r2
 8008274:	401a      	ands	r2, r3
 8008276:	0011      	movs	r1, r2
 8008278:	68fb      	ldr	r3, [r7, #12]
 800827a:	681b      	ldr	r3, [r3, #0]
 800827c:	697a      	ldr	r2, [r7, #20]
 800827e:	430a      	orrs	r2, r1
 8008280:	605a      	str	r2, [r3, #4]
             ((I2C_CR2_SADD | I2C_CR2_NBYTES | I2C_CR2_RELOAD | I2C_CR2_AUTOEND | \
               (I2C_CR2_RD_WRN & (uint32_t)(Request >> (31U - I2C_CR2_RD_WRN_Pos))) | \
               I2C_CR2_START | I2C_CR2_STOP)), tmp);
}
 8008282:	46c0      	nop			; (mov r8, r8)
 8008284:	46bd      	mov	sp, r7
 8008286:	b007      	add	sp, #28
 8008288:	bd90      	pop	{r4, r7, pc}
 800828a:	46c0      	nop			; (mov r8, r8)
 800828c:	03ff63ff 	.word	0x03ff63ff

08008290 <HAL_I2CEx_ConfigAnalogFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  AnalogFilter New state of the Analog filter.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigAnalogFilter(I2C_HandleTypeDef *hi2c, uint32_t AnalogFilter)
{
 8008290:	b580      	push	{r7, lr}
 8008292:	b082      	sub	sp, #8
 8008294:	af00      	add	r7, sp, #0
 8008296:	6078      	str	r0, [r7, #4]
 8008298:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_ANALOG_FILTER(AnalogFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 800829a:	687b      	ldr	r3, [r7, #4]
 800829c:	2241      	movs	r2, #65	; 0x41
 800829e:	5c9b      	ldrb	r3, [r3, r2]
 80082a0:	b2db      	uxtb	r3, r3
 80082a2:	2b20      	cmp	r3, #32
 80082a4:	d138      	bne.n	8008318 <HAL_I2CEx_ConfigAnalogFilter+0x88>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 80082a6:	687b      	ldr	r3, [r7, #4]
 80082a8:	2240      	movs	r2, #64	; 0x40
 80082aa:	5c9b      	ldrb	r3, [r3, r2]
 80082ac:	2b01      	cmp	r3, #1
 80082ae:	d101      	bne.n	80082b4 <HAL_I2CEx_ConfigAnalogFilter+0x24>
 80082b0:	2302      	movs	r3, #2
 80082b2:	e032      	b.n	800831a <HAL_I2CEx_ConfigAnalogFilter+0x8a>
 80082b4:	687b      	ldr	r3, [r7, #4]
 80082b6:	2240      	movs	r2, #64	; 0x40
 80082b8:	2101      	movs	r1, #1
 80082ba:	5499      	strb	r1, [r3, r2]

    hi2c->State = HAL_I2C_STATE_BUSY;
 80082bc:	687b      	ldr	r3, [r7, #4]
 80082be:	2241      	movs	r2, #65	; 0x41
 80082c0:	2124      	movs	r1, #36	; 0x24
 80082c2:	5499      	strb	r1, [r3, r2]

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 80082c4:	687b      	ldr	r3, [r7, #4]
 80082c6:	681b      	ldr	r3, [r3, #0]
 80082c8:	681a      	ldr	r2, [r3, #0]
 80082ca:	687b      	ldr	r3, [r7, #4]
 80082cc:	681b      	ldr	r3, [r3, #0]
 80082ce:	2101      	movs	r1, #1
 80082d0:	438a      	bics	r2, r1
 80082d2:	601a      	str	r2, [r3, #0]

    /* Reset I2Cx ANOFF bit */
    hi2c->Instance->CR1 &= ~(I2C_CR1_ANFOFF);
 80082d4:	687b      	ldr	r3, [r7, #4]
 80082d6:	681b      	ldr	r3, [r3, #0]
 80082d8:	681a      	ldr	r2, [r3, #0]
 80082da:	687b      	ldr	r3, [r7, #4]
 80082dc:	681b      	ldr	r3, [r3, #0]
 80082de:	4911      	ldr	r1, [pc, #68]	; (8008324 <HAL_I2CEx_ConfigAnalogFilter+0x94>)
 80082e0:	400a      	ands	r2, r1
 80082e2:	601a      	str	r2, [r3, #0]

    /* Set analog filter bit*/
    hi2c->Instance->CR1 |= AnalogFilter;
 80082e4:	687b      	ldr	r3, [r7, #4]
 80082e6:	681b      	ldr	r3, [r3, #0]
 80082e8:	6819      	ldr	r1, [r3, #0]
 80082ea:	687b      	ldr	r3, [r7, #4]
 80082ec:	681b      	ldr	r3, [r3, #0]
 80082ee:	683a      	ldr	r2, [r7, #0]
 80082f0:	430a      	orrs	r2, r1
 80082f2:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 80082f4:	687b      	ldr	r3, [r7, #4]
 80082f6:	681b      	ldr	r3, [r3, #0]
 80082f8:	681a      	ldr	r2, [r3, #0]
 80082fa:	687b      	ldr	r3, [r7, #4]
 80082fc:	681b      	ldr	r3, [r3, #0]
 80082fe:	2101      	movs	r1, #1
 8008300:	430a      	orrs	r2, r1
 8008302:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8008304:	687b      	ldr	r3, [r7, #4]
 8008306:	2241      	movs	r2, #65	; 0x41
 8008308:	2120      	movs	r1, #32
 800830a:	5499      	strb	r1, [r3, r2]

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 800830c:	687b      	ldr	r3, [r7, #4]
 800830e:	2240      	movs	r2, #64	; 0x40
 8008310:	2100      	movs	r1, #0
 8008312:	5499      	strb	r1, [r3, r2]

    return HAL_OK;
 8008314:	2300      	movs	r3, #0
 8008316:	e000      	b.n	800831a <HAL_I2CEx_ConfigAnalogFilter+0x8a>
  }
  else
  {
    return HAL_BUSY;
 8008318:	2302      	movs	r3, #2
  }
}
 800831a:	0018      	movs	r0, r3
 800831c:	46bd      	mov	sp, r7
 800831e:	b002      	add	sp, #8
 8008320:	bd80      	pop	{r7, pc}
 8008322:	46c0      	nop			; (mov r8, r8)
 8008324:	ffffefff 	.word	0xffffefff

08008328 <HAL_I2CEx_ConfigDigitalFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  DigitalFilter Coefficient of digital noise filter between Min_Data=0x00 and Max_Data=0x0F.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigDigitalFilter(I2C_HandleTypeDef *hi2c, uint32_t DigitalFilter)
{
 8008328:	b580      	push	{r7, lr}
 800832a:	b084      	sub	sp, #16
 800832c:	af00      	add	r7, sp, #0
 800832e:	6078      	str	r0, [r7, #4]
 8008330:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_DIGITAL_FILTER(DigitalFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8008332:	687b      	ldr	r3, [r7, #4]
 8008334:	2241      	movs	r2, #65	; 0x41
 8008336:	5c9b      	ldrb	r3, [r3, r2]
 8008338:	b2db      	uxtb	r3, r3
 800833a:	2b20      	cmp	r3, #32
 800833c:	d139      	bne.n	80083b2 <HAL_I2CEx_ConfigDigitalFilter+0x8a>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 800833e:	687b      	ldr	r3, [r7, #4]
 8008340:	2240      	movs	r2, #64	; 0x40
 8008342:	5c9b      	ldrb	r3, [r3, r2]
 8008344:	2b01      	cmp	r3, #1
 8008346:	d101      	bne.n	800834c <HAL_I2CEx_ConfigDigitalFilter+0x24>
 8008348:	2302      	movs	r3, #2
 800834a:	e033      	b.n	80083b4 <HAL_I2CEx_ConfigDigitalFilter+0x8c>
 800834c:	687b      	ldr	r3, [r7, #4]
 800834e:	2240      	movs	r2, #64	; 0x40
 8008350:	2101      	movs	r1, #1
 8008352:	5499      	strb	r1, [r3, r2]

    hi2c->State = HAL_I2C_STATE_BUSY;
 8008354:	687b      	ldr	r3, [r7, #4]
 8008356:	2241      	movs	r2, #65	; 0x41
 8008358:	2124      	movs	r1, #36	; 0x24
 800835a:	5499      	strb	r1, [r3, r2]

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 800835c:	687b      	ldr	r3, [r7, #4]
 800835e:	681b      	ldr	r3, [r3, #0]
 8008360:	681a      	ldr	r2, [r3, #0]
 8008362:	687b      	ldr	r3, [r7, #4]
 8008364:	681b      	ldr	r3, [r3, #0]
 8008366:	2101      	movs	r1, #1
 8008368:	438a      	bics	r2, r1
 800836a:	601a      	str	r2, [r3, #0]

    /* Get the old register value */
    tmpreg = hi2c->Instance->CR1;
 800836c:	687b      	ldr	r3, [r7, #4]
 800836e:	681b      	ldr	r3, [r3, #0]
 8008370:	681b      	ldr	r3, [r3, #0]
 8008372:	60fb      	str	r3, [r7, #12]

    /* Reset I2Cx DNF bits [11:8] */
    tmpreg &= ~(I2C_CR1_DNF);
 8008374:	68fb      	ldr	r3, [r7, #12]
 8008376:	4a11      	ldr	r2, [pc, #68]	; (80083bc <HAL_I2CEx_ConfigDigitalFilter+0x94>)
 8008378:	4013      	ands	r3, r2
 800837a:	60fb      	str	r3, [r7, #12]

    /* Set I2Cx DNF coefficient */
    tmpreg |= DigitalFilter << 8U;
 800837c:	683b      	ldr	r3, [r7, #0]
 800837e:	021b      	lsls	r3, r3, #8
 8008380:	68fa      	ldr	r2, [r7, #12]
 8008382:	4313      	orrs	r3, r2
 8008384:	60fb      	str	r3, [r7, #12]

    /* Store the new register value */
    hi2c->Instance->CR1 = tmpreg;
 8008386:	687b      	ldr	r3, [r7, #4]
 8008388:	681b      	ldr	r3, [r3, #0]
 800838a:	68fa      	ldr	r2, [r7, #12]
 800838c:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 800838e:	687b      	ldr	r3, [r7, #4]
 8008390:	681b      	ldr	r3, [r3, #0]
 8008392:	681a      	ldr	r2, [r3, #0]
 8008394:	687b      	ldr	r3, [r7, #4]
 8008396:	681b      	ldr	r3, [r3, #0]
 8008398:	2101      	movs	r1, #1
 800839a:	430a      	orrs	r2, r1
 800839c:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 800839e:	687b      	ldr	r3, [r7, #4]
 80083a0:	2241      	movs	r2, #65	; 0x41
 80083a2:	2120      	movs	r1, #32
 80083a4:	5499      	strb	r1, [r3, r2]

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 80083a6:	687b      	ldr	r3, [r7, #4]
 80083a8:	2240      	movs	r2, #64	; 0x40
 80083aa:	2100      	movs	r1, #0
 80083ac:	5499      	strb	r1, [r3, r2]

    return HAL_OK;
 80083ae:	2300      	movs	r3, #0
 80083b0:	e000      	b.n	80083b4 <HAL_I2CEx_ConfigDigitalFilter+0x8c>
  }
  else
  {
    return HAL_BUSY;
 80083b2:	2302      	movs	r3, #2
  }
}
 80083b4:	0018      	movs	r0, r3
 80083b6:	46bd      	mov	sp, r7
 80083b8:	b004      	add	sp, #16
 80083ba:	bd80      	pop	{r7, pc}
 80083bc:	fffff0ff 	.word	0xfffff0ff

080083c0 <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 80083c0:	b580      	push	{r7, lr}
 80083c2:	b088      	sub	sp, #32
 80083c4:	af00      	add	r7, sp, #0
 80083c6:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;
  uint32_t pll_config2;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 80083c8:	687b      	ldr	r3, [r7, #4]
 80083ca:	2b00      	cmp	r3, #0
 80083cc:	d102      	bne.n	80083d4 <HAL_RCC_OscConfig+0x14>
  {
    return HAL_ERROR;
 80083ce:	2301      	movs	r3, #1
 80083d0:	f000 fb76 	bl	8008ac0 <HAL_RCC_OscConfig+0x700>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 80083d4:	687b      	ldr	r3, [r7, #4]
 80083d6:	681b      	ldr	r3, [r3, #0]
 80083d8:	2201      	movs	r2, #1
 80083da:	4013      	ands	r3, r2
 80083dc:	d100      	bne.n	80083e0 <HAL_RCC_OscConfig+0x20>
 80083de:	e08e      	b.n	80084fe <HAL_RCC_OscConfig+0x13e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE) 
 80083e0:	4bc5      	ldr	r3, [pc, #788]	; (80086f8 <HAL_RCC_OscConfig+0x338>)
 80083e2:	685b      	ldr	r3, [r3, #4]
 80083e4:	220c      	movs	r2, #12
 80083e6:	4013      	ands	r3, r2
 80083e8:	2b04      	cmp	r3, #4
 80083ea:	d00e      	beq.n	800840a <HAL_RCC_OscConfig+0x4a>
       || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSE)))
 80083ec:	4bc2      	ldr	r3, [pc, #776]	; (80086f8 <HAL_RCC_OscConfig+0x338>)
 80083ee:	685b      	ldr	r3, [r3, #4]
 80083f0:	220c      	movs	r2, #12
 80083f2:	4013      	ands	r3, r2
 80083f4:	2b08      	cmp	r3, #8
 80083f6:	d117      	bne.n	8008428 <HAL_RCC_OscConfig+0x68>
 80083f8:	4bbf      	ldr	r3, [pc, #764]	; (80086f8 <HAL_RCC_OscConfig+0x338>)
 80083fa:	685a      	ldr	r2, [r3, #4]
 80083fc:	23c0      	movs	r3, #192	; 0xc0
 80083fe:	025b      	lsls	r3, r3, #9
 8008400:	401a      	ands	r2, r3
 8008402:	2380      	movs	r3, #128	; 0x80
 8008404:	025b      	lsls	r3, r3, #9
 8008406:	429a      	cmp	r2, r3
 8008408:	d10e      	bne.n	8008428 <HAL_RCC_OscConfig+0x68>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 800840a:	4bbb      	ldr	r3, [pc, #748]	; (80086f8 <HAL_RCC_OscConfig+0x338>)
 800840c:	681a      	ldr	r2, [r3, #0]
 800840e:	2380      	movs	r3, #128	; 0x80
 8008410:	029b      	lsls	r3, r3, #10
 8008412:	4013      	ands	r3, r2
 8008414:	d100      	bne.n	8008418 <HAL_RCC_OscConfig+0x58>
 8008416:	e071      	b.n	80084fc <HAL_RCC_OscConfig+0x13c>
 8008418:	687b      	ldr	r3, [r7, #4]
 800841a:	685b      	ldr	r3, [r3, #4]
 800841c:	2b00      	cmp	r3, #0
 800841e:	d000      	beq.n	8008422 <HAL_RCC_OscConfig+0x62>
 8008420:	e06c      	b.n	80084fc <HAL_RCC_OscConfig+0x13c>
      {
        return HAL_ERROR;
 8008422:	2301      	movs	r3, #1
 8008424:	f000 fb4c 	bl	8008ac0 <HAL_RCC_OscConfig+0x700>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8008428:	687b      	ldr	r3, [r7, #4]
 800842a:	685b      	ldr	r3, [r3, #4]
 800842c:	2b01      	cmp	r3, #1
 800842e:	d107      	bne.n	8008440 <HAL_RCC_OscConfig+0x80>
 8008430:	4bb1      	ldr	r3, [pc, #708]	; (80086f8 <HAL_RCC_OscConfig+0x338>)
 8008432:	681a      	ldr	r2, [r3, #0]
 8008434:	4bb0      	ldr	r3, [pc, #704]	; (80086f8 <HAL_RCC_OscConfig+0x338>)
 8008436:	2180      	movs	r1, #128	; 0x80
 8008438:	0249      	lsls	r1, r1, #9
 800843a:	430a      	orrs	r2, r1
 800843c:	601a      	str	r2, [r3, #0]
 800843e:	e02f      	b.n	80084a0 <HAL_RCC_OscConfig+0xe0>
 8008440:	687b      	ldr	r3, [r7, #4]
 8008442:	685b      	ldr	r3, [r3, #4]
 8008444:	2b00      	cmp	r3, #0
 8008446:	d10c      	bne.n	8008462 <HAL_RCC_OscConfig+0xa2>
 8008448:	4bab      	ldr	r3, [pc, #684]	; (80086f8 <HAL_RCC_OscConfig+0x338>)
 800844a:	681a      	ldr	r2, [r3, #0]
 800844c:	4baa      	ldr	r3, [pc, #680]	; (80086f8 <HAL_RCC_OscConfig+0x338>)
 800844e:	49ab      	ldr	r1, [pc, #684]	; (80086fc <HAL_RCC_OscConfig+0x33c>)
 8008450:	400a      	ands	r2, r1
 8008452:	601a      	str	r2, [r3, #0]
 8008454:	4ba8      	ldr	r3, [pc, #672]	; (80086f8 <HAL_RCC_OscConfig+0x338>)
 8008456:	681a      	ldr	r2, [r3, #0]
 8008458:	4ba7      	ldr	r3, [pc, #668]	; (80086f8 <HAL_RCC_OscConfig+0x338>)
 800845a:	49a9      	ldr	r1, [pc, #676]	; (8008700 <HAL_RCC_OscConfig+0x340>)
 800845c:	400a      	ands	r2, r1
 800845e:	601a      	str	r2, [r3, #0]
 8008460:	e01e      	b.n	80084a0 <HAL_RCC_OscConfig+0xe0>
 8008462:	687b      	ldr	r3, [r7, #4]
 8008464:	685b      	ldr	r3, [r3, #4]
 8008466:	2b05      	cmp	r3, #5
 8008468:	d10e      	bne.n	8008488 <HAL_RCC_OscConfig+0xc8>
 800846a:	4ba3      	ldr	r3, [pc, #652]	; (80086f8 <HAL_RCC_OscConfig+0x338>)
 800846c:	681a      	ldr	r2, [r3, #0]
 800846e:	4ba2      	ldr	r3, [pc, #648]	; (80086f8 <HAL_RCC_OscConfig+0x338>)
 8008470:	2180      	movs	r1, #128	; 0x80
 8008472:	02c9      	lsls	r1, r1, #11
 8008474:	430a      	orrs	r2, r1
 8008476:	601a      	str	r2, [r3, #0]
 8008478:	4b9f      	ldr	r3, [pc, #636]	; (80086f8 <HAL_RCC_OscConfig+0x338>)
 800847a:	681a      	ldr	r2, [r3, #0]
 800847c:	4b9e      	ldr	r3, [pc, #632]	; (80086f8 <HAL_RCC_OscConfig+0x338>)
 800847e:	2180      	movs	r1, #128	; 0x80
 8008480:	0249      	lsls	r1, r1, #9
 8008482:	430a      	orrs	r2, r1
 8008484:	601a      	str	r2, [r3, #0]
 8008486:	e00b      	b.n	80084a0 <HAL_RCC_OscConfig+0xe0>
 8008488:	4b9b      	ldr	r3, [pc, #620]	; (80086f8 <HAL_RCC_OscConfig+0x338>)
 800848a:	681a      	ldr	r2, [r3, #0]
 800848c:	4b9a      	ldr	r3, [pc, #616]	; (80086f8 <HAL_RCC_OscConfig+0x338>)
 800848e:	499b      	ldr	r1, [pc, #620]	; (80086fc <HAL_RCC_OscConfig+0x33c>)
 8008490:	400a      	ands	r2, r1
 8008492:	601a      	str	r2, [r3, #0]
 8008494:	4b98      	ldr	r3, [pc, #608]	; (80086f8 <HAL_RCC_OscConfig+0x338>)
 8008496:	681a      	ldr	r2, [r3, #0]
 8008498:	4b97      	ldr	r3, [pc, #604]	; (80086f8 <HAL_RCC_OscConfig+0x338>)
 800849a:	4999      	ldr	r1, [pc, #612]	; (8008700 <HAL_RCC_OscConfig+0x340>)
 800849c:	400a      	ands	r2, r1
 800849e:	601a      	str	r2, [r3, #0]
      

       /* Check the HSE State */
      if(RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 80084a0:	687b      	ldr	r3, [r7, #4]
 80084a2:	685b      	ldr	r3, [r3, #4]
 80084a4:	2b00      	cmp	r3, #0
 80084a6:	d014      	beq.n	80084d2 <HAL_RCC_OscConfig+0x112>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80084a8:	f7fd ff5e 	bl	8006368 <HAL_GetTick>
 80084ac:	0003      	movs	r3, r0
 80084ae:	61bb      	str	r3, [r7, #24]
        
        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80084b0:	e008      	b.n	80084c4 <HAL_RCC_OscConfig+0x104>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 80084b2:	f7fd ff59 	bl	8006368 <HAL_GetTick>
 80084b6:	0002      	movs	r2, r0
 80084b8:	69bb      	ldr	r3, [r7, #24]
 80084ba:	1ad3      	subs	r3, r2, r3
 80084bc:	2b64      	cmp	r3, #100	; 0x64
 80084be:	d901      	bls.n	80084c4 <HAL_RCC_OscConfig+0x104>
          {
            return HAL_TIMEOUT;
 80084c0:	2303      	movs	r3, #3
 80084c2:	e2fd      	b.n	8008ac0 <HAL_RCC_OscConfig+0x700>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80084c4:	4b8c      	ldr	r3, [pc, #560]	; (80086f8 <HAL_RCC_OscConfig+0x338>)
 80084c6:	681a      	ldr	r2, [r3, #0]
 80084c8:	2380      	movs	r3, #128	; 0x80
 80084ca:	029b      	lsls	r3, r3, #10
 80084cc:	4013      	ands	r3, r2
 80084ce:	d0f0      	beq.n	80084b2 <HAL_RCC_OscConfig+0xf2>
 80084d0:	e015      	b.n	80084fe <HAL_RCC_OscConfig+0x13e>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80084d2:	f7fd ff49 	bl	8006368 <HAL_GetTick>
 80084d6:	0003      	movs	r3, r0
 80084d8:	61bb      	str	r3, [r7, #24]
        
        /* Wait till HSE is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80084da:	e008      	b.n	80084ee <HAL_RCC_OscConfig+0x12e>
        {
           if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 80084dc:	f7fd ff44 	bl	8006368 <HAL_GetTick>
 80084e0:	0002      	movs	r2, r0
 80084e2:	69bb      	ldr	r3, [r7, #24]
 80084e4:	1ad3      	subs	r3, r2, r3
 80084e6:	2b64      	cmp	r3, #100	; 0x64
 80084e8:	d901      	bls.n	80084ee <HAL_RCC_OscConfig+0x12e>
          {
            return HAL_TIMEOUT;
 80084ea:	2303      	movs	r3, #3
 80084ec:	e2e8      	b.n	8008ac0 <HAL_RCC_OscConfig+0x700>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80084ee:	4b82      	ldr	r3, [pc, #520]	; (80086f8 <HAL_RCC_OscConfig+0x338>)
 80084f0:	681a      	ldr	r2, [r3, #0]
 80084f2:	2380      	movs	r3, #128	; 0x80
 80084f4:	029b      	lsls	r3, r3, #10
 80084f6:	4013      	ands	r3, r2
 80084f8:	d1f0      	bne.n	80084dc <HAL_RCC_OscConfig+0x11c>
 80084fa:	e000      	b.n	80084fe <HAL_RCC_OscConfig+0x13e>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80084fc:	46c0      	nop			; (mov r8, r8)
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 80084fe:	687b      	ldr	r3, [r7, #4]
 8008500:	681b      	ldr	r3, [r3, #0]
 8008502:	2202      	movs	r2, #2
 8008504:	4013      	ands	r3, r2
 8008506:	d100      	bne.n	800850a <HAL_RCC_OscConfig+0x14a>
 8008508:	e06c      	b.n	80085e4 <HAL_RCC_OscConfig+0x224>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));
    
    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */ 
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI) 
 800850a:	4b7b      	ldr	r3, [pc, #492]	; (80086f8 <HAL_RCC_OscConfig+0x338>)
 800850c:	685b      	ldr	r3, [r3, #4]
 800850e:	220c      	movs	r2, #12
 8008510:	4013      	ands	r3, r2
 8008512:	d00e      	beq.n	8008532 <HAL_RCC_OscConfig+0x172>
       || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI)))
 8008514:	4b78      	ldr	r3, [pc, #480]	; (80086f8 <HAL_RCC_OscConfig+0x338>)
 8008516:	685b      	ldr	r3, [r3, #4]
 8008518:	220c      	movs	r2, #12
 800851a:	4013      	ands	r3, r2
 800851c:	2b08      	cmp	r3, #8
 800851e:	d11f      	bne.n	8008560 <HAL_RCC_OscConfig+0x1a0>
 8008520:	4b75      	ldr	r3, [pc, #468]	; (80086f8 <HAL_RCC_OscConfig+0x338>)
 8008522:	685a      	ldr	r2, [r3, #4]
 8008524:	23c0      	movs	r3, #192	; 0xc0
 8008526:	025b      	lsls	r3, r3, #9
 8008528:	401a      	ands	r2, r3
 800852a:	2380      	movs	r3, #128	; 0x80
 800852c:	021b      	lsls	r3, r3, #8
 800852e:	429a      	cmp	r2, r3
 8008530:	d116      	bne.n	8008560 <HAL_RCC_OscConfig+0x1a0>
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8008532:	4b71      	ldr	r3, [pc, #452]	; (80086f8 <HAL_RCC_OscConfig+0x338>)
 8008534:	681b      	ldr	r3, [r3, #0]
 8008536:	2202      	movs	r2, #2
 8008538:	4013      	ands	r3, r2
 800853a:	d005      	beq.n	8008548 <HAL_RCC_OscConfig+0x188>
 800853c:	687b      	ldr	r3, [r7, #4]
 800853e:	68db      	ldr	r3, [r3, #12]
 8008540:	2b01      	cmp	r3, #1
 8008542:	d001      	beq.n	8008548 <HAL_RCC_OscConfig+0x188>
      {
        return HAL_ERROR;
 8008544:	2301      	movs	r3, #1
 8008546:	e2bb      	b.n	8008ac0 <HAL_RCC_OscConfig+0x700>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8008548:	4b6b      	ldr	r3, [pc, #428]	; (80086f8 <HAL_RCC_OscConfig+0x338>)
 800854a:	681b      	ldr	r3, [r3, #0]
 800854c:	22f8      	movs	r2, #248	; 0xf8
 800854e:	4393      	bics	r3, r2
 8008550:	0019      	movs	r1, r3
 8008552:	687b      	ldr	r3, [r7, #4]
 8008554:	691b      	ldr	r3, [r3, #16]
 8008556:	00da      	lsls	r2, r3, #3
 8008558:	4b67      	ldr	r3, [pc, #412]	; (80086f8 <HAL_RCC_OscConfig+0x338>)
 800855a:	430a      	orrs	r2, r1
 800855c:	601a      	str	r2, [r3, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 800855e:	e041      	b.n	80085e4 <HAL_RCC_OscConfig+0x224>
      }
    }
    else
    {
      /* Check the HSI State */
      if(RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8008560:	687b      	ldr	r3, [r7, #4]
 8008562:	68db      	ldr	r3, [r3, #12]
 8008564:	2b00      	cmp	r3, #0
 8008566:	d024      	beq.n	80085b2 <HAL_RCC_OscConfig+0x1f2>
      {
       /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8008568:	4b63      	ldr	r3, [pc, #396]	; (80086f8 <HAL_RCC_OscConfig+0x338>)
 800856a:	681a      	ldr	r2, [r3, #0]
 800856c:	4b62      	ldr	r3, [pc, #392]	; (80086f8 <HAL_RCC_OscConfig+0x338>)
 800856e:	2101      	movs	r1, #1
 8008570:	430a      	orrs	r2, r1
 8008572:	601a      	str	r2, [r3, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8008574:	f7fd fef8 	bl	8006368 <HAL_GetTick>
 8008578:	0003      	movs	r3, r0
 800857a:	61bb      	str	r3, [r7, #24]
        
        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800857c:	e008      	b.n	8008590 <HAL_RCC_OscConfig+0x1d0>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 800857e:	f7fd fef3 	bl	8006368 <HAL_GetTick>
 8008582:	0002      	movs	r2, r0
 8008584:	69bb      	ldr	r3, [r7, #24]
 8008586:	1ad3      	subs	r3, r2, r3
 8008588:	2b02      	cmp	r3, #2
 800858a:	d901      	bls.n	8008590 <HAL_RCC_OscConfig+0x1d0>
          {
            return HAL_TIMEOUT;
 800858c:	2303      	movs	r3, #3
 800858e:	e297      	b.n	8008ac0 <HAL_RCC_OscConfig+0x700>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8008590:	4b59      	ldr	r3, [pc, #356]	; (80086f8 <HAL_RCC_OscConfig+0x338>)
 8008592:	681b      	ldr	r3, [r3, #0]
 8008594:	2202      	movs	r2, #2
 8008596:	4013      	ands	r3, r2
 8008598:	d0f1      	beq.n	800857e <HAL_RCC_OscConfig+0x1be>
          }
        }
                
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800859a:	4b57      	ldr	r3, [pc, #348]	; (80086f8 <HAL_RCC_OscConfig+0x338>)
 800859c:	681b      	ldr	r3, [r3, #0]
 800859e:	22f8      	movs	r2, #248	; 0xf8
 80085a0:	4393      	bics	r3, r2
 80085a2:	0019      	movs	r1, r3
 80085a4:	687b      	ldr	r3, [r7, #4]
 80085a6:	691b      	ldr	r3, [r3, #16]
 80085a8:	00da      	lsls	r2, r3, #3
 80085aa:	4b53      	ldr	r3, [pc, #332]	; (80086f8 <HAL_RCC_OscConfig+0x338>)
 80085ac:	430a      	orrs	r2, r1
 80085ae:	601a      	str	r2, [r3, #0]
 80085b0:	e018      	b.n	80085e4 <HAL_RCC_OscConfig+0x224>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 80085b2:	4b51      	ldr	r3, [pc, #324]	; (80086f8 <HAL_RCC_OscConfig+0x338>)
 80085b4:	681a      	ldr	r2, [r3, #0]
 80085b6:	4b50      	ldr	r3, [pc, #320]	; (80086f8 <HAL_RCC_OscConfig+0x338>)
 80085b8:	2101      	movs	r1, #1
 80085ba:	438a      	bics	r2, r1
 80085bc:	601a      	str	r2, [r3, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80085be:	f7fd fed3 	bl	8006368 <HAL_GetTick>
 80085c2:	0003      	movs	r3, r0
 80085c4:	61bb      	str	r3, [r7, #24]
        
        /* Wait till HSI is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80085c6:	e008      	b.n	80085da <HAL_RCC_OscConfig+0x21a>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 80085c8:	f7fd fece 	bl	8006368 <HAL_GetTick>
 80085cc:	0002      	movs	r2, r0
 80085ce:	69bb      	ldr	r3, [r7, #24]
 80085d0:	1ad3      	subs	r3, r2, r3
 80085d2:	2b02      	cmp	r3, #2
 80085d4:	d901      	bls.n	80085da <HAL_RCC_OscConfig+0x21a>
          {
            return HAL_TIMEOUT;
 80085d6:	2303      	movs	r3, #3
 80085d8:	e272      	b.n	8008ac0 <HAL_RCC_OscConfig+0x700>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80085da:	4b47      	ldr	r3, [pc, #284]	; (80086f8 <HAL_RCC_OscConfig+0x338>)
 80085dc:	681b      	ldr	r3, [r3, #0]
 80085de:	2202      	movs	r2, #2
 80085e0:	4013      	ands	r3, r2
 80085e2:	d1f1      	bne.n	80085c8 <HAL_RCC_OscConfig+0x208>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 80085e4:	687b      	ldr	r3, [r7, #4]
 80085e6:	681b      	ldr	r3, [r3, #0]
 80085e8:	2208      	movs	r2, #8
 80085ea:	4013      	ands	r3, r2
 80085ec:	d036      	beq.n	800865c <HAL_RCC_OscConfig+0x29c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));
    
    /* Check the LSI State */
    if(RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 80085ee:	687b      	ldr	r3, [r7, #4]
 80085f0:	69db      	ldr	r3, [r3, #28]
 80085f2:	2b00      	cmp	r3, #0
 80085f4:	d019      	beq.n	800862a <HAL_RCC_OscConfig+0x26a>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 80085f6:	4b40      	ldr	r3, [pc, #256]	; (80086f8 <HAL_RCC_OscConfig+0x338>)
 80085f8:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 80085fa:	4b3f      	ldr	r3, [pc, #252]	; (80086f8 <HAL_RCC_OscConfig+0x338>)
 80085fc:	2101      	movs	r1, #1
 80085fe:	430a      	orrs	r2, r1
 8008600:	625a      	str	r2, [r3, #36]	; 0x24
      
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8008602:	f7fd feb1 	bl	8006368 <HAL_GetTick>
 8008606:	0003      	movs	r3, r0
 8008608:	61bb      	str	r3, [r7, #24]
      
      /* Wait till LSI is ready */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 800860a:	e008      	b.n	800861e <HAL_RCC_OscConfig+0x25e>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 800860c:	f7fd feac 	bl	8006368 <HAL_GetTick>
 8008610:	0002      	movs	r2, r0
 8008612:	69bb      	ldr	r3, [r7, #24]
 8008614:	1ad3      	subs	r3, r2, r3
 8008616:	2b02      	cmp	r3, #2
 8008618:	d901      	bls.n	800861e <HAL_RCC_OscConfig+0x25e>
        {
          return HAL_TIMEOUT;
 800861a:	2303      	movs	r3, #3
 800861c:	e250      	b.n	8008ac0 <HAL_RCC_OscConfig+0x700>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 800861e:	4b36      	ldr	r3, [pc, #216]	; (80086f8 <HAL_RCC_OscConfig+0x338>)
 8008620:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008622:	2202      	movs	r2, #2
 8008624:	4013      	ands	r3, r2
 8008626:	d0f1      	beq.n	800860c <HAL_RCC_OscConfig+0x24c>
 8008628:	e018      	b.n	800865c <HAL_RCC_OscConfig+0x29c>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 800862a:	4b33      	ldr	r3, [pc, #204]	; (80086f8 <HAL_RCC_OscConfig+0x338>)
 800862c:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 800862e:	4b32      	ldr	r3, [pc, #200]	; (80086f8 <HAL_RCC_OscConfig+0x338>)
 8008630:	2101      	movs	r1, #1
 8008632:	438a      	bics	r2, r1
 8008634:	625a      	str	r2, [r3, #36]	; 0x24
      
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8008636:	f7fd fe97 	bl	8006368 <HAL_GetTick>
 800863a:	0003      	movs	r3, r0
 800863c:	61bb      	str	r3, [r7, #24]
      
      /* Wait till LSI is disabled */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 800863e:	e008      	b.n	8008652 <HAL_RCC_OscConfig+0x292>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8008640:	f7fd fe92 	bl	8006368 <HAL_GetTick>
 8008644:	0002      	movs	r2, r0
 8008646:	69bb      	ldr	r3, [r7, #24]
 8008648:	1ad3      	subs	r3, r2, r3
 800864a:	2b02      	cmp	r3, #2
 800864c:	d901      	bls.n	8008652 <HAL_RCC_OscConfig+0x292>
        {
          return HAL_TIMEOUT;
 800864e:	2303      	movs	r3, #3
 8008650:	e236      	b.n	8008ac0 <HAL_RCC_OscConfig+0x700>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8008652:	4b29      	ldr	r3, [pc, #164]	; (80086f8 <HAL_RCC_OscConfig+0x338>)
 8008654:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008656:	2202      	movs	r2, #2
 8008658:	4013      	ands	r3, r2
 800865a:	d1f1      	bne.n	8008640 <HAL_RCC_OscConfig+0x280>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 800865c:	687b      	ldr	r3, [r7, #4]
 800865e:	681b      	ldr	r3, [r3, #0]
 8008660:	2204      	movs	r2, #4
 8008662:	4013      	ands	r3, r2
 8008664:	d100      	bne.n	8008668 <HAL_RCC_OscConfig+0x2a8>
 8008666:	e0b5      	b.n	80087d4 <HAL_RCC_OscConfig+0x414>
  {
    FlagStatus       pwrclkchanged = RESET;
 8008668:	201f      	movs	r0, #31
 800866a:	183b      	adds	r3, r7, r0
 800866c:	2200      	movs	r2, #0
 800866e:	701a      	strb	r2, [r3, #0]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8008670:	4b21      	ldr	r3, [pc, #132]	; (80086f8 <HAL_RCC_OscConfig+0x338>)
 8008672:	69da      	ldr	r2, [r3, #28]
 8008674:	2380      	movs	r3, #128	; 0x80
 8008676:	055b      	lsls	r3, r3, #21
 8008678:	4013      	ands	r3, r2
 800867a:	d110      	bne.n	800869e <HAL_RCC_OscConfig+0x2de>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 800867c:	4b1e      	ldr	r3, [pc, #120]	; (80086f8 <HAL_RCC_OscConfig+0x338>)
 800867e:	69da      	ldr	r2, [r3, #28]
 8008680:	4b1d      	ldr	r3, [pc, #116]	; (80086f8 <HAL_RCC_OscConfig+0x338>)
 8008682:	2180      	movs	r1, #128	; 0x80
 8008684:	0549      	lsls	r1, r1, #21
 8008686:	430a      	orrs	r2, r1
 8008688:	61da      	str	r2, [r3, #28]
 800868a:	4b1b      	ldr	r3, [pc, #108]	; (80086f8 <HAL_RCC_OscConfig+0x338>)
 800868c:	69da      	ldr	r2, [r3, #28]
 800868e:	2380      	movs	r3, #128	; 0x80
 8008690:	055b      	lsls	r3, r3, #21
 8008692:	4013      	ands	r3, r2
 8008694:	60fb      	str	r3, [r7, #12]
 8008696:	68fb      	ldr	r3, [r7, #12]
      pwrclkchanged = SET;
 8008698:	183b      	adds	r3, r7, r0
 800869a:	2201      	movs	r2, #1
 800869c:	701a      	strb	r2, [r3, #0]
    }
    
    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800869e:	4b19      	ldr	r3, [pc, #100]	; (8008704 <HAL_RCC_OscConfig+0x344>)
 80086a0:	681a      	ldr	r2, [r3, #0]
 80086a2:	2380      	movs	r3, #128	; 0x80
 80086a4:	005b      	lsls	r3, r3, #1
 80086a6:	4013      	ands	r3, r2
 80086a8:	d11a      	bne.n	80086e0 <HAL_RCC_OscConfig+0x320>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 80086aa:	4b16      	ldr	r3, [pc, #88]	; (8008704 <HAL_RCC_OscConfig+0x344>)
 80086ac:	681a      	ldr	r2, [r3, #0]
 80086ae:	4b15      	ldr	r3, [pc, #84]	; (8008704 <HAL_RCC_OscConfig+0x344>)
 80086b0:	2180      	movs	r1, #128	; 0x80
 80086b2:	0049      	lsls	r1, r1, #1
 80086b4:	430a      	orrs	r2, r1
 80086b6:	601a      	str	r2, [r3, #0]
      
      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 80086b8:	f7fd fe56 	bl	8006368 <HAL_GetTick>
 80086bc:	0003      	movs	r3, r0
 80086be:	61bb      	str	r3, [r7, #24]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80086c0:	e008      	b.n	80086d4 <HAL_RCC_OscConfig+0x314>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80086c2:	f7fd fe51 	bl	8006368 <HAL_GetTick>
 80086c6:	0002      	movs	r2, r0
 80086c8:	69bb      	ldr	r3, [r7, #24]
 80086ca:	1ad3      	subs	r3, r2, r3
 80086cc:	2b64      	cmp	r3, #100	; 0x64
 80086ce:	d901      	bls.n	80086d4 <HAL_RCC_OscConfig+0x314>
        {
          return HAL_TIMEOUT;
 80086d0:	2303      	movs	r3, #3
 80086d2:	e1f5      	b.n	8008ac0 <HAL_RCC_OscConfig+0x700>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80086d4:	4b0b      	ldr	r3, [pc, #44]	; (8008704 <HAL_RCC_OscConfig+0x344>)
 80086d6:	681a      	ldr	r2, [r3, #0]
 80086d8:	2380      	movs	r3, #128	; 0x80
 80086da:	005b      	lsls	r3, r3, #1
 80086dc:	4013      	ands	r3, r2
 80086de:	d0f0      	beq.n	80086c2 <HAL_RCC_OscConfig+0x302>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 80086e0:	687b      	ldr	r3, [r7, #4]
 80086e2:	689b      	ldr	r3, [r3, #8]
 80086e4:	2b01      	cmp	r3, #1
 80086e6:	d10f      	bne.n	8008708 <HAL_RCC_OscConfig+0x348>
 80086e8:	4b03      	ldr	r3, [pc, #12]	; (80086f8 <HAL_RCC_OscConfig+0x338>)
 80086ea:	6a1a      	ldr	r2, [r3, #32]
 80086ec:	4b02      	ldr	r3, [pc, #8]	; (80086f8 <HAL_RCC_OscConfig+0x338>)
 80086ee:	2101      	movs	r1, #1
 80086f0:	430a      	orrs	r2, r1
 80086f2:	621a      	str	r2, [r3, #32]
 80086f4:	e036      	b.n	8008764 <HAL_RCC_OscConfig+0x3a4>
 80086f6:	46c0      	nop			; (mov r8, r8)
 80086f8:	40021000 	.word	0x40021000
 80086fc:	fffeffff 	.word	0xfffeffff
 8008700:	fffbffff 	.word	0xfffbffff
 8008704:	40007000 	.word	0x40007000
 8008708:	687b      	ldr	r3, [r7, #4]
 800870a:	689b      	ldr	r3, [r3, #8]
 800870c:	2b00      	cmp	r3, #0
 800870e:	d10c      	bne.n	800872a <HAL_RCC_OscConfig+0x36a>
 8008710:	4bca      	ldr	r3, [pc, #808]	; (8008a3c <HAL_RCC_OscConfig+0x67c>)
 8008712:	6a1a      	ldr	r2, [r3, #32]
 8008714:	4bc9      	ldr	r3, [pc, #804]	; (8008a3c <HAL_RCC_OscConfig+0x67c>)
 8008716:	2101      	movs	r1, #1
 8008718:	438a      	bics	r2, r1
 800871a:	621a      	str	r2, [r3, #32]
 800871c:	4bc7      	ldr	r3, [pc, #796]	; (8008a3c <HAL_RCC_OscConfig+0x67c>)
 800871e:	6a1a      	ldr	r2, [r3, #32]
 8008720:	4bc6      	ldr	r3, [pc, #792]	; (8008a3c <HAL_RCC_OscConfig+0x67c>)
 8008722:	2104      	movs	r1, #4
 8008724:	438a      	bics	r2, r1
 8008726:	621a      	str	r2, [r3, #32]
 8008728:	e01c      	b.n	8008764 <HAL_RCC_OscConfig+0x3a4>
 800872a:	687b      	ldr	r3, [r7, #4]
 800872c:	689b      	ldr	r3, [r3, #8]
 800872e:	2b05      	cmp	r3, #5
 8008730:	d10c      	bne.n	800874c <HAL_RCC_OscConfig+0x38c>
 8008732:	4bc2      	ldr	r3, [pc, #776]	; (8008a3c <HAL_RCC_OscConfig+0x67c>)
 8008734:	6a1a      	ldr	r2, [r3, #32]
 8008736:	4bc1      	ldr	r3, [pc, #772]	; (8008a3c <HAL_RCC_OscConfig+0x67c>)
 8008738:	2104      	movs	r1, #4
 800873a:	430a      	orrs	r2, r1
 800873c:	621a      	str	r2, [r3, #32]
 800873e:	4bbf      	ldr	r3, [pc, #764]	; (8008a3c <HAL_RCC_OscConfig+0x67c>)
 8008740:	6a1a      	ldr	r2, [r3, #32]
 8008742:	4bbe      	ldr	r3, [pc, #760]	; (8008a3c <HAL_RCC_OscConfig+0x67c>)
 8008744:	2101      	movs	r1, #1
 8008746:	430a      	orrs	r2, r1
 8008748:	621a      	str	r2, [r3, #32]
 800874a:	e00b      	b.n	8008764 <HAL_RCC_OscConfig+0x3a4>
 800874c:	4bbb      	ldr	r3, [pc, #748]	; (8008a3c <HAL_RCC_OscConfig+0x67c>)
 800874e:	6a1a      	ldr	r2, [r3, #32]
 8008750:	4bba      	ldr	r3, [pc, #744]	; (8008a3c <HAL_RCC_OscConfig+0x67c>)
 8008752:	2101      	movs	r1, #1
 8008754:	438a      	bics	r2, r1
 8008756:	621a      	str	r2, [r3, #32]
 8008758:	4bb8      	ldr	r3, [pc, #736]	; (8008a3c <HAL_RCC_OscConfig+0x67c>)
 800875a:	6a1a      	ldr	r2, [r3, #32]
 800875c:	4bb7      	ldr	r3, [pc, #732]	; (8008a3c <HAL_RCC_OscConfig+0x67c>)
 800875e:	2104      	movs	r1, #4
 8008760:	438a      	bics	r2, r1
 8008762:	621a      	str	r2, [r3, #32]
    /* Check the LSE State */
    if(RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8008764:	687b      	ldr	r3, [r7, #4]
 8008766:	689b      	ldr	r3, [r3, #8]
 8008768:	2b00      	cmp	r3, #0
 800876a:	d014      	beq.n	8008796 <HAL_RCC_OscConfig+0x3d6>
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 800876c:	f7fd fdfc 	bl	8006368 <HAL_GetTick>
 8008770:	0003      	movs	r3, r0
 8008772:	61bb      	str	r3, [r7, #24]
      
      /* Wait till LSE is ready */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8008774:	e009      	b.n	800878a <HAL_RCC_OscConfig+0x3ca>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8008776:	f7fd fdf7 	bl	8006368 <HAL_GetTick>
 800877a:	0002      	movs	r2, r0
 800877c:	69bb      	ldr	r3, [r7, #24]
 800877e:	1ad3      	subs	r3, r2, r3
 8008780:	4aaf      	ldr	r2, [pc, #700]	; (8008a40 <HAL_RCC_OscConfig+0x680>)
 8008782:	4293      	cmp	r3, r2
 8008784:	d901      	bls.n	800878a <HAL_RCC_OscConfig+0x3ca>
        {
          return HAL_TIMEOUT;
 8008786:	2303      	movs	r3, #3
 8008788:	e19a      	b.n	8008ac0 <HAL_RCC_OscConfig+0x700>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800878a:	4bac      	ldr	r3, [pc, #688]	; (8008a3c <HAL_RCC_OscConfig+0x67c>)
 800878c:	6a1b      	ldr	r3, [r3, #32]
 800878e:	2202      	movs	r2, #2
 8008790:	4013      	ands	r3, r2
 8008792:	d0f0      	beq.n	8008776 <HAL_RCC_OscConfig+0x3b6>
 8008794:	e013      	b.n	80087be <HAL_RCC_OscConfig+0x3fe>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8008796:	f7fd fde7 	bl	8006368 <HAL_GetTick>
 800879a:	0003      	movs	r3, r0
 800879c:	61bb      	str	r3, [r7, #24]
      
      /* Wait till LSE is disabled */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 800879e:	e009      	b.n	80087b4 <HAL_RCC_OscConfig+0x3f4>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 80087a0:	f7fd fde2 	bl	8006368 <HAL_GetTick>
 80087a4:	0002      	movs	r2, r0
 80087a6:	69bb      	ldr	r3, [r7, #24]
 80087a8:	1ad3      	subs	r3, r2, r3
 80087aa:	4aa5      	ldr	r2, [pc, #660]	; (8008a40 <HAL_RCC_OscConfig+0x680>)
 80087ac:	4293      	cmp	r3, r2
 80087ae:	d901      	bls.n	80087b4 <HAL_RCC_OscConfig+0x3f4>
        {
          return HAL_TIMEOUT;
 80087b0:	2303      	movs	r3, #3
 80087b2:	e185      	b.n	8008ac0 <HAL_RCC_OscConfig+0x700>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80087b4:	4ba1      	ldr	r3, [pc, #644]	; (8008a3c <HAL_RCC_OscConfig+0x67c>)
 80087b6:	6a1b      	ldr	r3, [r3, #32]
 80087b8:	2202      	movs	r2, #2
 80087ba:	4013      	ands	r3, r2
 80087bc:	d1f0      	bne.n	80087a0 <HAL_RCC_OscConfig+0x3e0>
        }
      }
    }

    /* Require to disable power clock if necessary */
    if(pwrclkchanged == SET)
 80087be:	231f      	movs	r3, #31
 80087c0:	18fb      	adds	r3, r7, r3
 80087c2:	781b      	ldrb	r3, [r3, #0]
 80087c4:	2b01      	cmp	r3, #1
 80087c6:	d105      	bne.n	80087d4 <HAL_RCC_OscConfig+0x414>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 80087c8:	4b9c      	ldr	r3, [pc, #624]	; (8008a3c <HAL_RCC_OscConfig+0x67c>)
 80087ca:	69da      	ldr	r2, [r3, #28]
 80087cc:	4b9b      	ldr	r3, [pc, #620]	; (8008a3c <HAL_RCC_OscConfig+0x67c>)
 80087ce:	499d      	ldr	r1, [pc, #628]	; (8008a44 <HAL_RCC_OscConfig+0x684>)
 80087d0:	400a      	ands	r2, r1
 80087d2:	61da      	str	r2, [r3, #28]
    }
  }

  /*----------------------------- HSI14 Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI14) == RCC_OSCILLATORTYPE_HSI14)
 80087d4:	687b      	ldr	r3, [r7, #4]
 80087d6:	681b      	ldr	r3, [r3, #0]
 80087d8:	2210      	movs	r2, #16
 80087da:	4013      	ands	r3, r2
 80087dc:	d063      	beq.n	80088a6 <HAL_RCC_OscConfig+0x4e6>
    /* Check the parameters */
    assert_param(IS_RCC_HSI14(RCC_OscInitStruct->HSI14State));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSI14CalibrationValue));

    /* Check the HSI14 State */
    if(RCC_OscInitStruct->HSI14State == RCC_HSI14_ON)
 80087de:	687b      	ldr	r3, [r7, #4]
 80087e0:	695b      	ldr	r3, [r3, #20]
 80087e2:	2b01      	cmp	r3, #1
 80087e4:	d12a      	bne.n	800883c <HAL_RCC_OscConfig+0x47c>
    {
      /* Disable ADC control of the Internal High Speed oscillator HSI14 */
      __HAL_RCC_HSI14ADC_DISABLE();
 80087e6:	4b95      	ldr	r3, [pc, #596]	; (8008a3c <HAL_RCC_OscConfig+0x67c>)
 80087e8:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 80087ea:	4b94      	ldr	r3, [pc, #592]	; (8008a3c <HAL_RCC_OscConfig+0x67c>)
 80087ec:	2104      	movs	r1, #4
 80087ee:	430a      	orrs	r2, r1
 80087f0:	635a      	str	r2, [r3, #52]	; 0x34

      /* Enable the Internal High Speed oscillator (HSI). */
      __HAL_RCC_HSI14_ENABLE();
 80087f2:	4b92      	ldr	r3, [pc, #584]	; (8008a3c <HAL_RCC_OscConfig+0x67c>)
 80087f4:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 80087f6:	4b91      	ldr	r3, [pc, #580]	; (8008a3c <HAL_RCC_OscConfig+0x67c>)
 80087f8:	2101      	movs	r1, #1
 80087fa:	430a      	orrs	r2, r1
 80087fc:	635a      	str	r2, [r3, #52]	; 0x34

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80087fe:	f7fd fdb3 	bl	8006368 <HAL_GetTick>
 8008802:	0003      	movs	r3, r0
 8008804:	61bb      	str	r3, [r7, #24]
      
      /* Wait till HSI is ready */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI14RDY) == RESET)
 8008806:	e008      	b.n	800881a <HAL_RCC_OscConfig+0x45a>
      {
        if((HAL_GetTick() - tickstart) > HSI14_TIMEOUT_VALUE)
 8008808:	f7fd fdae 	bl	8006368 <HAL_GetTick>
 800880c:	0002      	movs	r2, r0
 800880e:	69bb      	ldr	r3, [r7, #24]
 8008810:	1ad3      	subs	r3, r2, r3
 8008812:	2b02      	cmp	r3, #2
 8008814:	d901      	bls.n	800881a <HAL_RCC_OscConfig+0x45a>
        {
          return HAL_TIMEOUT;
 8008816:	2303      	movs	r3, #3
 8008818:	e152      	b.n	8008ac0 <HAL_RCC_OscConfig+0x700>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI14RDY) == RESET)
 800881a:	4b88      	ldr	r3, [pc, #544]	; (8008a3c <HAL_RCC_OscConfig+0x67c>)
 800881c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800881e:	2202      	movs	r2, #2
 8008820:	4013      	ands	r3, r2
 8008822:	d0f1      	beq.n	8008808 <HAL_RCC_OscConfig+0x448>
        }      
      } 

      /* Adjusts the Internal High Speed oscillator 14Mhz (HSI14) calibration value. */
      __HAL_RCC_HSI14_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSI14CalibrationValue);
 8008824:	4b85      	ldr	r3, [pc, #532]	; (8008a3c <HAL_RCC_OscConfig+0x67c>)
 8008826:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8008828:	22f8      	movs	r2, #248	; 0xf8
 800882a:	4393      	bics	r3, r2
 800882c:	0019      	movs	r1, r3
 800882e:	687b      	ldr	r3, [r7, #4]
 8008830:	699b      	ldr	r3, [r3, #24]
 8008832:	00da      	lsls	r2, r3, #3
 8008834:	4b81      	ldr	r3, [pc, #516]	; (8008a3c <HAL_RCC_OscConfig+0x67c>)
 8008836:	430a      	orrs	r2, r1
 8008838:	635a      	str	r2, [r3, #52]	; 0x34
 800883a:	e034      	b.n	80088a6 <HAL_RCC_OscConfig+0x4e6>
    }
    else if(RCC_OscInitStruct->HSI14State == RCC_HSI14_ADC_CONTROL)
 800883c:	687b      	ldr	r3, [r7, #4]
 800883e:	695b      	ldr	r3, [r3, #20]
 8008840:	3305      	adds	r3, #5
 8008842:	d111      	bne.n	8008868 <HAL_RCC_OscConfig+0x4a8>
    {
      /* Enable ADC control of the Internal High Speed oscillator HSI14 */
      __HAL_RCC_HSI14ADC_ENABLE();
 8008844:	4b7d      	ldr	r3, [pc, #500]	; (8008a3c <HAL_RCC_OscConfig+0x67c>)
 8008846:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8008848:	4b7c      	ldr	r3, [pc, #496]	; (8008a3c <HAL_RCC_OscConfig+0x67c>)
 800884a:	2104      	movs	r1, #4
 800884c:	438a      	bics	r2, r1
 800884e:	635a      	str	r2, [r3, #52]	; 0x34

      /* Adjusts the Internal High Speed oscillator 14Mhz (HSI14) calibration value. */
      __HAL_RCC_HSI14_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSI14CalibrationValue);
 8008850:	4b7a      	ldr	r3, [pc, #488]	; (8008a3c <HAL_RCC_OscConfig+0x67c>)
 8008852:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8008854:	22f8      	movs	r2, #248	; 0xf8
 8008856:	4393      	bics	r3, r2
 8008858:	0019      	movs	r1, r3
 800885a:	687b      	ldr	r3, [r7, #4]
 800885c:	699b      	ldr	r3, [r3, #24]
 800885e:	00da      	lsls	r2, r3, #3
 8008860:	4b76      	ldr	r3, [pc, #472]	; (8008a3c <HAL_RCC_OscConfig+0x67c>)
 8008862:	430a      	orrs	r2, r1
 8008864:	635a      	str	r2, [r3, #52]	; 0x34
 8008866:	e01e      	b.n	80088a6 <HAL_RCC_OscConfig+0x4e6>
    }
    else
    {
      /* Disable ADC control of the Internal High Speed oscillator HSI14 */
      __HAL_RCC_HSI14ADC_DISABLE();
 8008868:	4b74      	ldr	r3, [pc, #464]	; (8008a3c <HAL_RCC_OscConfig+0x67c>)
 800886a:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 800886c:	4b73      	ldr	r3, [pc, #460]	; (8008a3c <HAL_RCC_OscConfig+0x67c>)
 800886e:	2104      	movs	r1, #4
 8008870:	430a      	orrs	r2, r1
 8008872:	635a      	str	r2, [r3, #52]	; 0x34

      /* Disable the Internal High Speed oscillator (HSI). */
      __HAL_RCC_HSI14_DISABLE();
 8008874:	4b71      	ldr	r3, [pc, #452]	; (8008a3c <HAL_RCC_OscConfig+0x67c>)
 8008876:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8008878:	4b70      	ldr	r3, [pc, #448]	; (8008a3c <HAL_RCC_OscConfig+0x67c>)
 800887a:	2101      	movs	r1, #1
 800887c:	438a      	bics	r2, r1
 800887e:	635a      	str	r2, [r3, #52]	; 0x34

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8008880:	f7fd fd72 	bl	8006368 <HAL_GetTick>
 8008884:	0003      	movs	r3, r0
 8008886:	61bb      	str	r3, [r7, #24]
      
      /* Wait till HSI is ready */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI14RDY) != RESET)
 8008888:	e008      	b.n	800889c <HAL_RCC_OscConfig+0x4dc>
      {
        if((HAL_GetTick() - tickstart) > HSI14_TIMEOUT_VALUE)
 800888a:	f7fd fd6d 	bl	8006368 <HAL_GetTick>
 800888e:	0002      	movs	r2, r0
 8008890:	69bb      	ldr	r3, [r7, #24]
 8008892:	1ad3      	subs	r3, r2, r3
 8008894:	2b02      	cmp	r3, #2
 8008896:	d901      	bls.n	800889c <HAL_RCC_OscConfig+0x4dc>
        {
          return HAL_TIMEOUT;
 8008898:	2303      	movs	r3, #3
 800889a:	e111      	b.n	8008ac0 <HAL_RCC_OscConfig+0x700>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI14RDY) != RESET)
 800889c:	4b67      	ldr	r3, [pc, #412]	; (8008a3c <HAL_RCC_OscConfig+0x67c>)
 800889e:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80088a0:	2202      	movs	r2, #2
 80088a2:	4013      	ands	r3, r2
 80088a4:	d1f1      	bne.n	800888a <HAL_RCC_OscConfig+0x4ca>
    }
  }

#if defined(RCC_HSI48_SUPPORT)
  /*----------------------------- HSI48 Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI48) == RCC_OSCILLATORTYPE_HSI48)
 80088a6:	687b      	ldr	r3, [r7, #4]
 80088a8:	681b      	ldr	r3, [r3, #0]
 80088aa:	2220      	movs	r2, #32
 80088ac:	4013      	ands	r3, r2
 80088ae:	d05c      	beq.n	800896a <HAL_RCC_OscConfig+0x5aa>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSI48(RCC_OscInitStruct->HSI48State));

    /* When the HSI48 is used as system clock it is not allowed to be disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI48) ||
 80088b0:	4b62      	ldr	r3, [pc, #392]	; (8008a3c <HAL_RCC_OscConfig+0x67c>)
 80088b2:	685b      	ldr	r3, [r3, #4]
 80088b4:	220c      	movs	r2, #12
 80088b6:	4013      	ands	r3, r2
 80088b8:	2b0c      	cmp	r3, #12
 80088ba:	d00e      	beq.n	80088da <HAL_RCC_OscConfig+0x51a>
       ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI48)))
 80088bc:	4b5f      	ldr	r3, [pc, #380]	; (8008a3c <HAL_RCC_OscConfig+0x67c>)
 80088be:	685b      	ldr	r3, [r3, #4]
 80088c0:	220c      	movs	r2, #12
 80088c2:	4013      	ands	r3, r2
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI48) ||
 80088c4:	2b08      	cmp	r3, #8
 80088c6:	d114      	bne.n	80088f2 <HAL_RCC_OscConfig+0x532>
       ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI48)))
 80088c8:	4b5c      	ldr	r3, [pc, #368]	; (8008a3c <HAL_RCC_OscConfig+0x67c>)
 80088ca:	685a      	ldr	r2, [r3, #4]
 80088cc:	23c0      	movs	r3, #192	; 0xc0
 80088ce:	025b      	lsls	r3, r3, #9
 80088d0:	401a      	ands	r2, r3
 80088d2:	23c0      	movs	r3, #192	; 0xc0
 80088d4:	025b      	lsls	r3, r3, #9
 80088d6:	429a      	cmp	r2, r3
 80088d8:	d10b      	bne.n	80088f2 <HAL_RCC_OscConfig+0x532>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) != RESET) && (RCC_OscInitStruct->HSI48State != RCC_HSI48_ON))
 80088da:	4b58      	ldr	r3, [pc, #352]	; (8008a3c <HAL_RCC_OscConfig+0x67c>)
 80088dc:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 80088de:	2380      	movs	r3, #128	; 0x80
 80088e0:	029b      	lsls	r3, r3, #10
 80088e2:	4013      	ands	r3, r2
 80088e4:	d040      	beq.n	8008968 <HAL_RCC_OscConfig+0x5a8>
 80088e6:	687b      	ldr	r3, [r7, #4]
 80088e8:	6a1b      	ldr	r3, [r3, #32]
 80088ea:	2b01      	cmp	r3, #1
 80088ec:	d03c      	beq.n	8008968 <HAL_RCC_OscConfig+0x5a8>
      {
        return HAL_ERROR;
 80088ee:	2301      	movs	r3, #1
 80088f0:	e0e6      	b.n	8008ac0 <HAL_RCC_OscConfig+0x700>
      }
    }
    else
    {
      /* Check the HSI48 State */
      if(RCC_OscInitStruct->HSI48State != RCC_HSI48_OFF)
 80088f2:	687b      	ldr	r3, [r7, #4]
 80088f4:	6a1b      	ldr	r3, [r3, #32]
 80088f6:	2b00      	cmp	r3, #0
 80088f8:	d01b      	beq.n	8008932 <HAL_RCC_OscConfig+0x572>
      {
        /* Enable the Internal High Speed oscillator (HSI48). */
        __HAL_RCC_HSI48_ENABLE();
 80088fa:	4b50      	ldr	r3, [pc, #320]	; (8008a3c <HAL_RCC_OscConfig+0x67c>)
 80088fc:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 80088fe:	4b4f      	ldr	r3, [pc, #316]	; (8008a3c <HAL_RCC_OscConfig+0x67c>)
 8008900:	2180      	movs	r1, #128	; 0x80
 8008902:	0249      	lsls	r1, r1, #9
 8008904:	430a      	orrs	r2, r1
 8008906:	635a      	str	r2, [r3, #52]	; 0x34

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8008908:	f7fd fd2e 	bl	8006368 <HAL_GetTick>
 800890c:	0003      	movs	r3, r0
 800890e:	61bb      	str	r3, [r7, #24]
      
        /* Wait till HSI48 is ready */  
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) == RESET)
 8008910:	e008      	b.n	8008924 <HAL_RCC_OscConfig+0x564>
        {
          if((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 8008912:	f7fd fd29 	bl	8006368 <HAL_GetTick>
 8008916:	0002      	movs	r2, r0
 8008918:	69bb      	ldr	r3, [r7, #24]
 800891a:	1ad3      	subs	r3, r2, r3
 800891c:	2b02      	cmp	r3, #2
 800891e:	d901      	bls.n	8008924 <HAL_RCC_OscConfig+0x564>
          {
            return HAL_TIMEOUT;
 8008920:	2303      	movs	r3, #3
 8008922:	e0cd      	b.n	8008ac0 <HAL_RCC_OscConfig+0x700>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) == RESET)
 8008924:	4b45      	ldr	r3, [pc, #276]	; (8008a3c <HAL_RCC_OscConfig+0x67c>)
 8008926:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8008928:	2380      	movs	r3, #128	; 0x80
 800892a:	029b      	lsls	r3, r3, #10
 800892c:	4013      	ands	r3, r2
 800892e:	d0f0      	beq.n	8008912 <HAL_RCC_OscConfig+0x552>
 8008930:	e01b      	b.n	800896a <HAL_RCC_OscConfig+0x5aa>
        } 
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI48). */
        __HAL_RCC_HSI48_DISABLE();
 8008932:	4b42      	ldr	r3, [pc, #264]	; (8008a3c <HAL_RCC_OscConfig+0x67c>)
 8008934:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8008936:	4b41      	ldr	r3, [pc, #260]	; (8008a3c <HAL_RCC_OscConfig+0x67c>)
 8008938:	4943      	ldr	r1, [pc, #268]	; (8008a48 <HAL_RCC_OscConfig+0x688>)
 800893a:	400a      	ands	r2, r1
 800893c:	635a      	str	r2, [r3, #52]	; 0x34

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800893e:	f7fd fd13 	bl	8006368 <HAL_GetTick>
 8008942:	0003      	movs	r3, r0
 8008944:	61bb      	str	r3, [r7, #24]
      
        /* Wait till HSI48 is ready */  
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) != RESET)
 8008946:	e008      	b.n	800895a <HAL_RCC_OscConfig+0x59a>
        {
          if((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 8008948:	f7fd fd0e 	bl	8006368 <HAL_GetTick>
 800894c:	0002      	movs	r2, r0
 800894e:	69bb      	ldr	r3, [r7, #24]
 8008950:	1ad3      	subs	r3, r2, r3
 8008952:	2b02      	cmp	r3, #2
 8008954:	d901      	bls.n	800895a <HAL_RCC_OscConfig+0x59a>
          {
            return HAL_TIMEOUT;
 8008956:	2303      	movs	r3, #3
 8008958:	e0b2      	b.n	8008ac0 <HAL_RCC_OscConfig+0x700>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) != RESET)
 800895a:	4b38      	ldr	r3, [pc, #224]	; (8008a3c <HAL_RCC_OscConfig+0x67c>)
 800895c:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 800895e:	2380      	movs	r3, #128	; 0x80
 8008960:	029b      	lsls	r3, r3, #10
 8008962:	4013      	ands	r3, r2
 8008964:	d1f0      	bne.n	8008948 <HAL_RCC_OscConfig+0x588>
 8008966:	e000      	b.n	800896a <HAL_RCC_OscConfig+0x5aa>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) != RESET) && (RCC_OscInitStruct->HSI48State != RCC_HSI48_ON))
 8008968:	46c0      	nop			; (mov r8, r8)
#endif /* RCC_HSI48_SUPPORT */
       
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 800896a:	687b      	ldr	r3, [r7, #4]
 800896c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800896e:	2b00      	cmp	r3, #0
 8008970:	d100      	bne.n	8008974 <HAL_RCC_OscConfig+0x5b4>
 8008972:	e0a4      	b.n	8008abe <HAL_RCC_OscConfig+0x6fe>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8008974:	4b31      	ldr	r3, [pc, #196]	; (8008a3c <HAL_RCC_OscConfig+0x67c>)
 8008976:	685b      	ldr	r3, [r3, #4]
 8008978:	220c      	movs	r2, #12
 800897a:	4013      	ands	r3, r2
 800897c:	2b08      	cmp	r3, #8
 800897e:	d100      	bne.n	8008982 <HAL_RCC_OscConfig+0x5c2>
 8008980:	e078      	b.n	8008a74 <HAL_RCC_OscConfig+0x6b4>
    { 
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8008982:	687b      	ldr	r3, [r7, #4]
 8008984:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008986:	2b02      	cmp	r3, #2
 8008988:	d14c      	bne.n	8008a24 <HAL_RCC_OscConfig+0x664>
        assert_param(IS_RCC_PLLSOURCE(RCC_OscInitStruct->PLL.PLLSource));
        assert_param(IS_RCC_PLL_MUL(RCC_OscInitStruct->PLL.PLLMUL));
        assert_param(IS_RCC_PREDIV(RCC_OscInitStruct->PLL.PREDIV));
  
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800898a:	4b2c      	ldr	r3, [pc, #176]	; (8008a3c <HAL_RCC_OscConfig+0x67c>)
 800898c:	681a      	ldr	r2, [r3, #0]
 800898e:	4b2b      	ldr	r3, [pc, #172]	; (8008a3c <HAL_RCC_OscConfig+0x67c>)
 8008990:	492e      	ldr	r1, [pc, #184]	; (8008a4c <HAL_RCC_OscConfig+0x68c>)
 8008992:	400a      	ands	r2, r1
 8008994:	601a      	str	r2, [r3, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8008996:	f7fd fce7 	bl	8006368 <HAL_GetTick>
 800899a:	0003      	movs	r3, r0
 800899c:	61bb      	str	r3, [r7, #24]
        
        /* Wait till PLL is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 800899e:	e008      	b.n	80089b2 <HAL_RCC_OscConfig+0x5f2>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80089a0:	f7fd fce2 	bl	8006368 <HAL_GetTick>
 80089a4:	0002      	movs	r2, r0
 80089a6:	69bb      	ldr	r3, [r7, #24]
 80089a8:	1ad3      	subs	r3, r2, r3
 80089aa:	2b02      	cmp	r3, #2
 80089ac:	d901      	bls.n	80089b2 <HAL_RCC_OscConfig+0x5f2>
          {
            return HAL_TIMEOUT;
 80089ae:	2303      	movs	r3, #3
 80089b0:	e086      	b.n	8008ac0 <HAL_RCC_OscConfig+0x700>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 80089b2:	4b22      	ldr	r3, [pc, #136]	; (8008a3c <HAL_RCC_OscConfig+0x67c>)
 80089b4:	681a      	ldr	r2, [r3, #0]
 80089b6:	2380      	movs	r3, #128	; 0x80
 80089b8:	049b      	lsls	r3, r3, #18
 80089ba:	4013      	ands	r3, r2
 80089bc:	d1f0      	bne.n	80089a0 <HAL_RCC_OscConfig+0x5e0>
          }
        }

        /* Configure the main PLL clock source, predivider and multiplication factor. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 80089be:	4b1f      	ldr	r3, [pc, #124]	; (8008a3c <HAL_RCC_OscConfig+0x67c>)
 80089c0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80089c2:	220f      	movs	r2, #15
 80089c4:	4393      	bics	r3, r2
 80089c6:	0019      	movs	r1, r3
 80089c8:	687b      	ldr	r3, [r7, #4]
 80089ca:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 80089cc:	4b1b      	ldr	r3, [pc, #108]	; (8008a3c <HAL_RCC_OscConfig+0x67c>)
 80089ce:	430a      	orrs	r2, r1
 80089d0:	62da      	str	r2, [r3, #44]	; 0x2c
 80089d2:	4b1a      	ldr	r3, [pc, #104]	; (8008a3c <HAL_RCC_OscConfig+0x67c>)
 80089d4:	685b      	ldr	r3, [r3, #4]
 80089d6:	4a1e      	ldr	r2, [pc, #120]	; (8008a50 <HAL_RCC_OscConfig+0x690>)
 80089d8:	4013      	ands	r3, r2
 80089da:	0019      	movs	r1, r3
 80089dc:	687b      	ldr	r3, [r7, #4]
 80089de:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80089e0:	687b      	ldr	r3, [r7, #4]
 80089e2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80089e4:	431a      	orrs	r2, r3
 80089e6:	4b15      	ldr	r3, [pc, #84]	; (8008a3c <HAL_RCC_OscConfig+0x67c>)
 80089e8:	430a      	orrs	r2, r1
 80089ea:	605a      	str	r2, [r3, #4]
                             RCC_OscInitStruct->PLL.PREDIV,
                             RCC_OscInitStruct->PLL.PLLMUL);
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 80089ec:	4b13      	ldr	r3, [pc, #76]	; (8008a3c <HAL_RCC_OscConfig+0x67c>)
 80089ee:	681a      	ldr	r2, [r3, #0]
 80089f0:	4b12      	ldr	r3, [pc, #72]	; (8008a3c <HAL_RCC_OscConfig+0x67c>)
 80089f2:	2180      	movs	r1, #128	; 0x80
 80089f4:	0449      	lsls	r1, r1, #17
 80089f6:	430a      	orrs	r2, r1
 80089f8:	601a      	str	r2, [r3, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80089fa:	f7fd fcb5 	bl	8006368 <HAL_GetTick>
 80089fe:	0003      	movs	r3, r0
 8008a00:	61bb      	str	r3, [r7, #24]
        
        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8008a02:	e008      	b.n	8008a16 <HAL_RCC_OscConfig+0x656>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8008a04:	f7fd fcb0 	bl	8006368 <HAL_GetTick>
 8008a08:	0002      	movs	r2, r0
 8008a0a:	69bb      	ldr	r3, [r7, #24]
 8008a0c:	1ad3      	subs	r3, r2, r3
 8008a0e:	2b02      	cmp	r3, #2
 8008a10:	d901      	bls.n	8008a16 <HAL_RCC_OscConfig+0x656>
          {
            return HAL_TIMEOUT;
 8008a12:	2303      	movs	r3, #3
 8008a14:	e054      	b.n	8008ac0 <HAL_RCC_OscConfig+0x700>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8008a16:	4b09      	ldr	r3, [pc, #36]	; (8008a3c <HAL_RCC_OscConfig+0x67c>)
 8008a18:	681a      	ldr	r2, [r3, #0]
 8008a1a:	2380      	movs	r3, #128	; 0x80
 8008a1c:	049b      	lsls	r3, r3, #18
 8008a1e:	4013      	ands	r3, r2
 8008a20:	d0f0      	beq.n	8008a04 <HAL_RCC_OscConfig+0x644>
 8008a22:	e04c      	b.n	8008abe <HAL_RCC_OscConfig+0x6fe>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8008a24:	4b05      	ldr	r3, [pc, #20]	; (8008a3c <HAL_RCC_OscConfig+0x67c>)
 8008a26:	681a      	ldr	r2, [r3, #0]
 8008a28:	4b04      	ldr	r3, [pc, #16]	; (8008a3c <HAL_RCC_OscConfig+0x67c>)
 8008a2a:	4908      	ldr	r1, [pc, #32]	; (8008a4c <HAL_RCC_OscConfig+0x68c>)
 8008a2c:	400a      	ands	r2, r1
 8008a2e:	601a      	str	r2, [r3, #0]
 
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8008a30:	f7fd fc9a 	bl	8006368 <HAL_GetTick>
 8008a34:	0003      	movs	r3, r0
 8008a36:	61bb      	str	r3, [r7, #24]
        
        /* Wait till PLL is disabled */  
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8008a38:	e015      	b.n	8008a66 <HAL_RCC_OscConfig+0x6a6>
 8008a3a:	46c0      	nop			; (mov r8, r8)
 8008a3c:	40021000 	.word	0x40021000
 8008a40:	00001388 	.word	0x00001388
 8008a44:	efffffff 	.word	0xefffffff
 8008a48:	fffeffff 	.word	0xfffeffff
 8008a4c:	feffffff 	.word	0xfeffffff
 8008a50:	ffc27fff 	.word	0xffc27fff
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8008a54:	f7fd fc88 	bl	8006368 <HAL_GetTick>
 8008a58:	0002      	movs	r2, r0
 8008a5a:	69bb      	ldr	r3, [r7, #24]
 8008a5c:	1ad3      	subs	r3, r2, r3
 8008a5e:	2b02      	cmp	r3, #2
 8008a60:	d901      	bls.n	8008a66 <HAL_RCC_OscConfig+0x6a6>
          {
            return HAL_TIMEOUT;
 8008a62:	2303      	movs	r3, #3
 8008a64:	e02c      	b.n	8008ac0 <HAL_RCC_OscConfig+0x700>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8008a66:	4b18      	ldr	r3, [pc, #96]	; (8008ac8 <HAL_RCC_OscConfig+0x708>)
 8008a68:	681a      	ldr	r2, [r3, #0]
 8008a6a:	2380      	movs	r3, #128	; 0x80
 8008a6c:	049b      	lsls	r3, r3, #18
 8008a6e:	4013      	ands	r3, r2
 8008a70:	d1f0      	bne.n	8008a54 <HAL_RCC_OscConfig+0x694>
 8008a72:	e024      	b.n	8008abe <HAL_RCC_OscConfig+0x6fe>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8008a74:	687b      	ldr	r3, [r7, #4]
 8008a76:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008a78:	2b01      	cmp	r3, #1
 8008a7a:	d101      	bne.n	8008a80 <HAL_RCC_OscConfig+0x6c0>
      {
        return HAL_ERROR;
 8008a7c:	2301      	movs	r3, #1
 8008a7e:	e01f      	b.n	8008ac0 <HAL_RCC_OscConfig+0x700>
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config  = RCC->CFGR;
 8008a80:	4b11      	ldr	r3, [pc, #68]	; (8008ac8 <HAL_RCC_OscConfig+0x708>)
 8008a82:	685b      	ldr	r3, [r3, #4]
 8008a84:	617b      	str	r3, [r7, #20]
        pll_config2 = RCC->CFGR2;
 8008a86:	4b10      	ldr	r3, [pc, #64]	; (8008ac8 <HAL_RCC_OscConfig+0x708>)
 8008a88:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8008a8a:	613b      	str	r3, [r7, #16]
        if((READ_BIT(pll_config,  RCC_CFGR_PLLSRC)  != RCC_OscInitStruct->PLL.PLLSource) ||
 8008a8c:	697a      	ldr	r2, [r7, #20]
 8008a8e:	23c0      	movs	r3, #192	; 0xc0
 8008a90:	025b      	lsls	r3, r3, #9
 8008a92:	401a      	ands	r2, r3
 8008a94:	687b      	ldr	r3, [r7, #4]
 8008a96:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8008a98:	429a      	cmp	r2, r3
 8008a9a:	d10e      	bne.n	8008aba <HAL_RCC_OscConfig+0x6fa>
           (READ_BIT(pll_config2, RCC_CFGR2_PREDIV) != RCC_OscInitStruct->PLL.PREDIV)    ||
 8008a9c:	693b      	ldr	r3, [r7, #16]
 8008a9e:	220f      	movs	r2, #15
 8008aa0:	401a      	ands	r2, r3
 8008aa2:	687b      	ldr	r3, [r7, #4]
 8008aa4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
        if((READ_BIT(pll_config,  RCC_CFGR_PLLSRC)  != RCC_OscInitStruct->PLL.PLLSource) ||
 8008aa6:	429a      	cmp	r2, r3
 8008aa8:	d107      	bne.n	8008aba <HAL_RCC_OscConfig+0x6fa>
           (READ_BIT(pll_config,  RCC_CFGR_PLLMUL)  != RCC_OscInitStruct->PLL.PLLMUL))
 8008aaa:	697a      	ldr	r2, [r7, #20]
 8008aac:	23f0      	movs	r3, #240	; 0xf0
 8008aae:	039b      	lsls	r3, r3, #14
 8008ab0:	401a      	ands	r2, r3
 8008ab2:	687b      	ldr	r3, [r7, #4]
 8008ab4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
           (READ_BIT(pll_config2, RCC_CFGR2_PREDIV) != RCC_OscInitStruct->PLL.PREDIV)    ||
 8008ab6:	429a      	cmp	r2, r3
 8008ab8:	d001      	beq.n	8008abe <HAL_RCC_OscConfig+0x6fe>
        {
          return HAL_ERROR;
 8008aba:	2301      	movs	r3, #1
 8008abc:	e000      	b.n	8008ac0 <HAL_RCC_OscConfig+0x700>
        }
      }
    }
  }

  return HAL_OK;
 8008abe:	2300      	movs	r3, #0
}
 8008ac0:	0018      	movs	r0, r3
 8008ac2:	46bd      	mov	sp, r7
 8008ac4:	b008      	add	sp, #32
 8008ac6:	bd80      	pop	{r7, pc}
 8008ac8:	40021000 	.word	0x40021000

08008acc <HAL_RCC_ClockConfig>:
  *         You can use @ref HAL_RCC_GetClockConfig() function to know which clock is
  *         currently used as system clock source.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8008acc:	b580      	push	{r7, lr}
 8008ace:	b084      	sub	sp, #16
 8008ad0:	af00      	add	r7, sp, #0
 8008ad2:	6078      	str	r0, [r7, #4]
 8008ad4:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 8008ad6:	687b      	ldr	r3, [r7, #4]
 8008ad8:	2b00      	cmp	r3, #0
 8008ada:	d101      	bne.n	8008ae0 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8008adc:	2301      	movs	r3, #1
 8008ade:	e0bf      	b.n	8008c60 <HAL_RCC_ClockConfig+0x194>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY) 
  must be correctly programmed according to the frequency of the CPU clock 
    (HCLK) of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8008ae0:	4b61      	ldr	r3, [pc, #388]	; (8008c68 <HAL_RCC_ClockConfig+0x19c>)
 8008ae2:	681b      	ldr	r3, [r3, #0]
 8008ae4:	2201      	movs	r2, #1
 8008ae6:	4013      	ands	r3, r2
 8008ae8:	683a      	ldr	r2, [r7, #0]
 8008aea:	429a      	cmp	r2, r3
 8008aec:	d911      	bls.n	8008b12 <HAL_RCC_ClockConfig+0x46>
  {    
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8008aee:	4b5e      	ldr	r3, [pc, #376]	; (8008c68 <HAL_RCC_ClockConfig+0x19c>)
 8008af0:	681b      	ldr	r3, [r3, #0]
 8008af2:	2201      	movs	r2, #1
 8008af4:	4393      	bics	r3, r2
 8008af6:	0019      	movs	r1, r3
 8008af8:	4b5b      	ldr	r3, [pc, #364]	; (8008c68 <HAL_RCC_ClockConfig+0x19c>)
 8008afa:	683a      	ldr	r2, [r7, #0]
 8008afc:	430a      	orrs	r2, r1
 8008afe:	601a      	str	r2, [r3, #0]
    
    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8008b00:	4b59      	ldr	r3, [pc, #356]	; (8008c68 <HAL_RCC_ClockConfig+0x19c>)
 8008b02:	681b      	ldr	r3, [r3, #0]
 8008b04:	2201      	movs	r2, #1
 8008b06:	4013      	ands	r3, r2
 8008b08:	683a      	ldr	r2, [r7, #0]
 8008b0a:	429a      	cmp	r2, r3
 8008b0c:	d001      	beq.n	8008b12 <HAL_RCC_ClockConfig+0x46>
    {
      return HAL_ERROR;
 8008b0e:	2301      	movs	r3, #1
 8008b10:	e0a6      	b.n	8008c60 <HAL_RCC_ClockConfig+0x194>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8008b12:	687b      	ldr	r3, [r7, #4]
 8008b14:	681b      	ldr	r3, [r3, #0]
 8008b16:	2202      	movs	r2, #2
 8008b18:	4013      	ands	r3, r2
 8008b1a:	d015      	beq.n	8008b48 <HAL_RCC_ClockConfig+0x7c>
  {
    /* Set the highest APB divider in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8008b1c:	687b      	ldr	r3, [r7, #4]
 8008b1e:	681b      	ldr	r3, [r3, #0]
 8008b20:	2204      	movs	r2, #4
 8008b22:	4013      	ands	r3, r2
 8008b24:	d006      	beq.n	8008b34 <HAL_RCC_ClockConfig+0x68>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE, RCC_HCLK_DIV16);
 8008b26:	4b51      	ldr	r3, [pc, #324]	; (8008c6c <HAL_RCC_ClockConfig+0x1a0>)
 8008b28:	685a      	ldr	r2, [r3, #4]
 8008b2a:	4b50      	ldr	r3, [pc, #320]	; (8008c6c <HAL_RCC_ClockConfig+0x1a0>)
 8008b2c:	21e0      	movs	r1, #224	; 0xe0
 8008b2e:	00c9      	lsls	r1, r1, #3
 8008b30:	430a      	orrs	r2, r1
 8008b32:	605a      	str	r2, [r3, #4]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8008b34:	4b4d      	ldr	r3, [pc, #308]	; (8008c6c <HAL_RCC_ClockConfig+0x1a0>)
 8008b36:	685b      	ldr	r3, [r3, #4]
 8008b38:	22f0      	movs	r2, #240	; 0xf0
 8008b3a:	4393      	bics	r3, r2
 8008b3c:	0019      	movs	r1, r3
 8008b3e:	687b      	ldr	r3, [r7, #4]
 8008b40:	689a      	ldr	r2, [r3, #8]
 8008b42:	4b4a      	ldr	r3, [pc, #296]	; (8008c6c <HAL_RCC_ClockConfig+0x1a0>)
 8008b44:	430a      	orrs	r2, r1
 8008b46:	605a      	str	r2, [r3, #4]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/ 
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8008b48:	687b      	ldr	r3, [r7, #4]
 8008b4a:	681b      	ldr	r3, [r3, #0]
 8008b4c:	2201      	movs	r2, #1
 8008b4e:	4013      	ands	r3, r2
 8008b50:	d04c      	beq.n	8008bec <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));
    
    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8008b52:	687b      	ldr	r3, [r7, #4]
 8008b54:	685b      	ldr	r3, [r3, #4]
 8008b56:	2b01      	cmp	r3, #1
 8008b58:	d107      	bne.n	8008b6a <HAL_RCC_ClockConfig+0x9e>
    {
      /* Check the HSE ready flag */  
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8008b5a:	4b44      	ldr	r3, [pc, #272]	; (8008c6c <HAL_RCC_ClockConfig+0x1a0>)
 8008b5c:	681a      	ldr	r2, [r3, #0]
 8008b5e:	2380      	movs	r3, #128	; 0x80
 8008b60:	029b      	lsls	r3, r3, #10
 8008b62:	4013      	ands	r3, r2
 8008b64:	d120      	bne.n	8008ba8 <HAL_RCC_ClockConfig+0xdc>
      {
        return HAL_ERROR;
 8008b66:	2301      	movs	r3, #1
 8008b68:	e07a      	b.n	8008c60 <HAL_RCC_ClockConfig+0x194>
      }
    }
    /* PLL is selected as System Clock Source */
    else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8008b6a:	687b      	ldr	r3, [r7, #4]
 8008b6c:	685b      	ldr	r3, [r3, #4]
 8008b6e:	2b02      	cmp	r3, #2
 8008b70:	d107      	bne.n	8008b82 <HAL_RCC_ClockConfig+0xb6>
    {
      /* Check the PLL ready flag */  
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8008b72:	4b3e      	ldr	r3, [pc, #248]	; (8008c6c <HAL_RCC_ClockConfig+0x1a0>)
 8008b74:	681a      	ldr	r2, [r3, #0]
 8008b76:	2380      	movs	r3, #128	; 0x80
 8008b78:	049b      	lsls	r3, r3, #18
 8008b7a:	4013      	ands	r3, r2
 8008b7c:	d114      	bne.n	8008ba8 <HAL_RCC_ClockConfig+0xdc>
      {
        return HAL_ERROR;
 8008b7e:	2301      	movs	r3, #1
 8008b80:	e06e      	b.n	8008c60 <HAL_RCC_ClockConfig+0x194>
      }
    }
#if defined(RCC_CFGR_SWS_HSI48)
    /* HSI48 is selected as System Clock Source */
    else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSI48)
 8008b82:	687b      	ldr	r3, [r7, #4]
 8008b84:	685b      	ldr	r3, [r3, #4]
 8008b86:	2b03      	cmp	r3, #3
 8008b88:	d107      	bne.n	8008b9a <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the HSI48 ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) == RESET)
 8008b8a:	4b38      	ldr	r3, [pc, #224]	; (8008c6c <HAL_RCC_ClockConfig+0x1a0>)
 8008b8c:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8008b8e:	2380      	movs	r3, #128	; 0x80
 8008b90:	029b      	lsls	r3, r3, #10
 8008b92:	4013      	ands	r3, r2
 8008b94:	d108      	bne.n	8008ba8 <HAL_RCC_ClockConfig+0xdc>
      {
        return HAL_ERROR;
 8008b96:	2301      	movs	r3, #1
 8008b98:	e062      	b.n	8008c60 <HAL_RCC_ClockConfig+0x194>
#endif /* RCC_CFGR_SWS_HSI48 */
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */  
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8008b9a:	4b34      	ldr	r3, [pc, #208]	; (8008c6c <HAL_RCC_ClockConfig+0x1a0>)
 8008b9c:	681b      	ldr	r3, [r3, #0]
 8008b9e:	2202      	movs	r2, #2
 8008ba0:	4013      	ands	r3, r2
 8008ba2:	d101      	bne.n	8008ba8 <HAL_RCC_ClockConfig+0xdc>
      {
        return HAL_ERROR;
 8008ba4:	2301      	movs	r3, #1
 8008ba6:	e05b      	b.n	8008c60 <HAL_RCC_ClockConfig+0x194>
      }
    }
    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8008ba8:	4b30      	ldr	r3, [pc, #192]	; (8008c6c <HAL_RCC_ClockConfig+0x1a0>)
 8008baa:	685b      	ldr	r3, [r3, #4]
 8008bac:	2203      	movs	r2, #3
 8008bae:	4393      	bics	r3, r2
 8008bb0:	0019      	movs	r1, r3
 8008bb2:	687b      	ldr	r3, [r7, #4]
 8008bb4:	685a      	ldr	r2, [r3, #4]
 8008bb6:	4b2d      	ldr	r3, [pc, #180]	; (8008c6c <HAL_RCC_ClockConfig+0x1a0>)
 8008bb8:	430a      	orrs	r2, r1
 8008bba:	605a      	str	r2, [r3, #4]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8008bbc:	f7fd fbd4 	bl	8006368 <HAL_GetTick>
 8008bc0:	0003      	movs	r3, r0
 8008bc2:	60fb      	str	r3, [r7, #12]
    
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8008bc4:	e009      	b.n	8008bda <HAL_RCC_ClockConfig+0x10e>
    {
      if((HAL_GetTick() - tickstart ) > CLOCKSWITCH_TIMEOUT_VALUE)
 8008bc6:	f7fd fbcf 	bl	8006368 <HAL_GetTick>
 8008bca:	0002      	movs	r2, r0
 8008bcc:	68fb      	ldr	r3, [r7, #12]
 8008bce:	1ad3      	subs	r3, r2, r3
 8008bd0:	4a27      	ldr	r2, [pc, #156]	; (8008c70 <HAL_RCC_ClockConfig+0x1a4>)
 8008bd2:	4293      	cmp	r3, r2
 8008bd4:	d901      	bls.n	8008bda <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 8008bd6:	2303      	movs	r3, #3
 8008bd8:	e042      	b.n	8008c60 <HAL_RCC_ClockConfig+0x194>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8008bda:	4b24      	ldr	r3, [pc, #144]	; (8008c6c <HAL_RCC_ClockConfig+0x1a0>)
 8008bdc:	685b      	ldr	r3, [r3, #4]
 8008bde:	220c      	movs	r2, #12
 8008be0:	401a      	ands	r2, r3
 8008be2:	687b      	ldr	r3, [r7, #4]
 8008be4:	685b      	ldr	r3, [r3, #4]
 8008be6:	009b      	lsls	r3, r3, #2
 8008be8:	429a      	cmp	r2, r3
 8008bea:	d1ec      	bne.n	8008bc6 <HAL_RCC_ClockConfig+0xfa>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8008bec:	4b1e      	ldr	r3, [pc, #120]	; (8008c68 <HAL_RCC_ClockConfig+0x19c>)
 8008bee:	681b      	ldr	r3, [r3, #0]
 8008bf0:	2201      	movs	r2, #1
 8008bf2:	4013      	ands	r3, r2
 8008bf4:	683a      	ldr	r2, [r7, #0]
 8008bf6:	429a      	cmp	r2, r3
 8008bf8:	d211      	bcs.n	8008c1e <HAL_RCC_ClockConfig+0x152>
  {    
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8008bfa:	4b1b      	ldr	r3, [pc, #108]	; (8008c68 <HAL_RCC_ClockConfig+0x19c>)
 8008bfc:	681b      	ldr	r3, [r3, #0]
 8008bfe:	2201      	movs	r2, #1
 8008c00:	4393      	bics	r3, r2
 8008c02:	0019      	movs	r1, r3
 8008c04:	4b18      	ldr	r3, [pc, #96]	; (8008c68 <HAL_RCC_ClockConfig+0x19c>)
 8008c06:	683a      	ldr	r2, [r7, #0]
 8008c08:	430a      	orrs	r2, r1
 8008c0a:	601a      	str	r2, [r3, #0]
    
    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8008c0c:	4b16      	ldr	r3, [pc, #88]	; (8008c68 <HAL_RCC_ClockConfig+0x19c>)
 8008c0e:	681b      	ldr	r3, [r3, #0]
 8008c10:	2201      	movs	r2, #1
 8008c12:	4013      	ands	r3, r2
 8008c14:	683a      	ldr	r2, [r7, #0]
 8008c16:	429a      	cmp	r2, r3
 8008c18:	d001      	beq.n	8008c1e <HAL_RCC_ClockConfig+0x152>
    {
      return HAL_ERROR;
 8008c1a:	2301      	movs	r3, #1
 8008c1c:	e020      	b.n	8008c60 <HAL_RCC_ClockConfig+0x194>
    }
  }    

  /*-------------------------- PCLK1 Configuration ---------------------------*/ 
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8008c1e:	687b      	ldr	r3, [r7, #4]
 8008c20:	681b      	ldr	r3, [r3, #0]
 8008c22:	2204      	movs	r2, #4
 8008c24:	4013      	ands	r3, r2
 8008c26:	d009      	beq.n	8008c3c <HAL_RCC_ClockConfig+0x170>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE, RCC_ClkInitStruct->APB1CLKDivider);
 8008c28:	4b10      	ldr	r3, [pc, #64]	; (8008c6c <HAL_RCC_ClockConfig+0x1a0>)
 8008c2a:	685b      	ldr	r3, [r3, #4]
 8008c2c:	4a11      	ldr	r2, [pc, #68]	; (8008c74 <HAL_RCC_ClockConfig+0x1a8>)
 8008c2e:	4013      	ands	r3, r2
 8008c30:	0019      	movs	r1, r3
 8008c32:	687b      	ldr	r3, [r7, #4]
 8008c34:	68da      	ldr	r2, [r3, #12]
 8008c36:	4b0d      	ldr	r3, [pc, #52]	; (8008c6c <HAL_RCC_ClockConfig+0x1a0>)
 8008c38:	430a      	orrs	r2, r1
 8008c3a:	605a      	str	r2, [r3, #4]
  }
  
  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_BITNUMBER];
 8008c3c:	f000 f820 	bl	8008c80 <HAL_RCC_GetSysClockFreq>
 8008c40:	0001      	movs	r1, r0
 8008c42:	4b0a      	ldr	r3, [pc, #40]	; (8008c6c <HAL_RCC_ClockConfig+0x1a0>)
 8008c44:	685b      	ldr	r3, [r3, #4]
 8008c46:	091b      	lsrs	r3, r3, #4
 8008c48:	220f      	movs	r2, #15
 8008c4a:	4013      	ands	r3, r2
 8008c4c:	4a0a      	ldr	r2, [pc, #40]	; (8008c78 <HAL_RCC_ClockConfig+0x1ac>)
 8008c4e:	5cd3      	ldrb	r3, [r2, r3]
 8008c50:	000a      	movs	r2, r1
 8008c52:	40da      	lsrs	r2, r3
 8008c54:	4b09      	ldr	r3, [pc, #36]	; (8008c7c <HAL_RCC_ClockConfig+0x1b0>)
 8008c56:	601a      	str	r2, [r3, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick (TICK_INT_PRIORITY);
 8008c58:	2003      	movs	r0, #3
 8008c5a:	f7fd fb3f 	bl	80062dc <HAL_InitTick>
  
  return HAL_OK;
 8008c5e:	2300      	movs	r3, #0
}
 8008c60:	0018      	movs	r0, r3
 8008c62:	46bd      	mov	sp, r7
 8008c64:	b004      	add	sp, #16
 8008c66:	bd80      	pop	{r7, pc}
 8008c68:	40022000 	.word	0x40022000
 8008c6c:	40021000 	.word	0x40021000
 8008c70:	00001388 	.word	0x00001388
 8008c74:	fffff8ff 	.word	0xfffff8ff
 8008c78:	0800b060 	.word	0x0800b060
 8008c7c:	20000004 	.word	0x20000004

08008c80 <HAL_RCC_GetSysClockFreq>:
  *         right SYSCLK value. Otherwise, any configuration based on this function will be incorrect.
  *         
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8008c80:	b580      	push	{r7, lr}
 8008c82:	b086      	sub	sp, #24
 8008c84:	af00      	add	r7, sp, #0
  static const uint8_t aPLLMULFactorTable[16U] = { 2U,  3U,  4U,  5U,  6U,  7U,  8U,  9U,
                                                   10U, 11U, 12U, 13U, 14U, 15U, 16U, 16U};
  static const uint8_t aPredivFactorTable[16U] = { 1U, 2U,  3U,  4U,  5U,  6U,  7U,  8U,
                                                   9U,10U, 11U, 12U, 13U, 14U, 15U, 16U};

  uint32_t tmpreg = 0U, prediv = 0U, pllclk = 0U, pllmul = 0U;
 8008c86:	2300      	movs	r3, #0
 8008c88:	60fb      	str	r3, [r7, #12]
 8008c8a:	2300      	movs	r3, #0
 8008c8c:	60bb      	str	r3, [r7, #8]
 8008c8e:	2300      	movs	r3, #0
 8008c90:	617b      	str	r3, [r7, #20]
 8008c92:	2300      	movs	r3, #0
 8008c94:	607b      	str	r3, [r7, #4]
  uint32_t sysclockfreq = 0U;
 8008c96:	2300      	movs	r3, #0
 8008c98:	613b      	str	r3, [r7, #16]
  
  tmpreg = RCC->CFGR;
 8008c9a:	4b2d      	ldr	r3, [pc, #180]	; (8008d50 <HAL_RCC_GetSysClockFreq+0xd0>)
 8008c9c:	685b      	ldr	r3, [r3, #4]
 8008c9e:	60fb      	str	r3, [r7, #12]
  
  /* Get SYSCLK source -------------------------------------------------------*/
  switch (tmpreg & RCC_CFGR_SWS)
 8008ca0:	68fb      	ldr	r3, [r7, #12]
 8008ca2:	220c      	movs	r2, #12
 8008ca4:	4013      	ands	r3, r2
 8008ca6:	2b0c      	cmp	r3, #12
 8008ca8:	d046      	beq.n	8008d38 <HAL_RCC_GetSysClockFreq+0xb8>
 8008caa:	d848      	bhi.n	8008d3e <HAL_RCC_GetSysClockFreq+0xbe>
 8008cac:	2b04      	cmp	r3, #4
 8008cae:	d002      	beq.n	8008cb6 <HAL_RCC_GetSysClockFreq+0x36>
 8008cb0:	2b08      	cmp	r3, #8
 8008cb2:	d003      	beq.n	8008cbc <HAL_RCC_GetSysClockFreq+0x3c>
 8008cb4:	e043      	b.n	8008d3e <HAL_RCC_GetSysClockFreq+0xbe>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock */
    {
      sysclockfreq = HSE_VALUE;
 8008cb6:	4b27      	ldr	r3, [pc, #156]	; (8008d54 <HAL_RCC_GetSysClockFreq+0xd4>)
 8008cb8:	613b      	str	r3, [r7, #16]
      break;
 8008cba:	e043      	b.n	8008d44 <HAL_RCC_GetSysClockFreq+0xc4>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock */
    {
      pllmul = aPLLMULFactorTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMUL) >> RCC_CFGR_PLLMUL_BITNUMBER];
 8008cbc:	68fb      	ldr	r3, [r7, #12]
 8008cbe:	0c9b      	lsrs	r3, r3, #18
 8008cc0:	220f      	movs	r2, #15
 8008cc2:	4013      	ands	r3, r2
 8008cc4:	4a24      	ldr	r2, [pc, #144]	; (8008d58 <HAL_RCC_GetSysClockFreq+0xd8>)
 8008cc6:	5cd3      	ldrb	r3, [r2, r3]
 8008cc8:	607b      	str	r3, [r7, #4]
      prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR2 & RCC_CFGR2_PREDIV) >> RCC_CFGR2_PREDIV_BITNUMBER];
 8008cca:	4b21      	ldr	r3, [pc, #132]	; (8008d50 <HAL_RCC_GetSysClockFreq+0xd0>)
 8008ccc:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8008cce:	220f      	movs	r2, #15
 8008cd0:	4013      	ands	r3, r2
 8008cd2:	4a22      	ldr	r2, [pc, #136]	; (8008d5c <HAL_RCC_GetSysClockFreq+0xdc>)
 8008cd4:	5cd3      	ldrb	r3, [r2, r3]
 8008cd6:	60bb      	str	r3, [r7, #8]
      if ((tmpreg & RCC_CFGR_PLLSRC) == RCC_PLLSOURCE_HSE)
 8008cd8:	68fa      	ldr	r2, [r7, #12]
 8008cda:	23c0      	movs	r3, #192	; 0xc0
 8008cdc:	025b      	lsls	r3, r3, #9
 8008cde:	401a      	ands	r2, r3
 8008ce0:	2380      	movs	r3, #128	; 0x80
 8008ce2:	025b      	lsls	r3, r3, #9
 8008ce4:	429a      	cmp	r2, r3
 8008ce6:	d109      	bne.n	8008cfc <HAL_RCC_GetSysClockFreq+0x7c>
      {
        /* HSE used as PLL clock source : PLLCLK = HSE/PREDIV * PLLMUL */
        pllclk = (uint32_t)((uint64_t) HSE_VALUE / (uint64_t) (prediv)) * ((uint64_t) pllmul);
 8008ce8:	68b9      	ldr	r1, [r7, #8]
 8008cea:	481a      	ldr	r0, [pc, #104]	; (8008d54 <HAL_RCC_GetSysClockFreq+0xd4>)
 8008cec:	f7f7 fa0c 	bl	8000108 <__udivsi3>
 8008cf0:	0003      	movs	r3, r0
 8008cf2:	001a      	movs	r2, r3
 8008cf4:	687b      	ldr	r3, [r7, #4]
 8008cf6:	4353      	muls	r3, r2
 8008cf8:	617b      	str	r3, [r7, #20]
 8008cfa:	e01a      	b.n	8008d32 <HAL_RCC_GetSysClockFreq+0xb2>
      }
#if defined(RCC_CFGR_PLLSRC_HSI48_PREDIV)
      else if ((tmpreg & RCC_CFGR_PLLSRC) == RCC_PLLSOURCE_HSI48)
 8008cfc:	68fa      	ldr	r2, [r7, #12]
 8008cfe:	23c0      	movs	r3, #192	; 0xc0
 8008d00:	025b      	lsls	r3, r3, #9
 8008d02:	401a      	ands	r2, r3
 8008d04:	23c0      	movs	r3, #192	; 0xc0
 8008d06:	025b      	lsls	r3, r3, #9
 8008d08:	429a      	cmp	r2, r3
 8008d0a:	d109      	bne.n	8008d20 <HAL_RCC_GetSysClockFreq+0xa0>
      {
        /* HSI48 used as PLL clock source : PLLCLK = HSI48/PREDIV * PLLMUL */
        pllclk = (uint32_t)((uint64_t) HSI48_VALUE / (uint64_t) (prediv)) * ((uint64_t) pllmul);
 8008d0c:	68b9      	ldr	r1, [r7, #8]
 8008d0e:	4814      	ldr	r0, [pc, #80]	; (8008d60 <HAL_RCC_GetSysClockFreq+0xe0>)
 8008d10:	f7f7 f9fa 	bl	8000108 <__udivsi3>
 8008d14:	0003      	movs	r3, r0
 8008d16:	001a      	movs	r2, r3
 8008d18:	687b      	ldr	r3, [r7, #4]
 8008d1a:	4353      	muls	r3, r2
 8008d1c:	617b      	str	r3, [r7, #20]
 8008d1e:	e008      	b.n	8008d32 <HAL_RCC_GetSysClockFreq+0xb2>
#endif /* RCC_CFGR_PLLSRC_HSI48_PREDIV */
      else
      {
#if  (defined(STM32F042x6) || defined(STM32F048xx) || defined(STM32F070x6) || defined(STM32F071xB) || defined(STM32F072xB) || defined(STM32F078xx) || defined(STM32F070xB) || defined(STM32F091xC) || defined(STM32F098xx) || defined(STM32F030xC))
        /* HSI used as PLL clock source : PLLCLK = HSI/PREDIV * PLLMUL */
        pllclk = (uint32_t)((uint64_t) HSI_VALUE / (uint64_t) (prediv)) * ((uint64_t) pllmul);
 8008d20:	68b9      	ldr	r1, [r7, #8]
 8008d22:	4810      	ldr	r0, [pc, #64]	; (8008d64 <HAL_RCC_GetSysClockFreq+0xe4>)
 8008d24:	f7f7 f9f0 	bl	8000108 <__udivsi3>
 8008d28:	0003      	movs	r3, r0
 8008d2a:	001a      	movs	r2, r3
 8008d2c:	687b      	ldr	r3, [r7, #4]
 8008d2e:	4353      	muls	r3, r2
 8008d30:	617b      	str	r3, [r7, #20]
#else
        /* HSI used as PLL clock source : PLLCLK = HSI/2 * PLLMUL */
        pllclk = (uint32_t)((uint64_t) (HSI_VALUE >> 1U) * ((uint64_t) pllmul));
#endif
      }
      sysclockfreq = pllclk;
 8008d32:	697b      	ldr	r3, [r7, #20]
 8008d34:	613b      	str	r3, [r7, #16]
      break;
 8008d36:	e005      	b.n	8008d44 <HAL_RCC_GetSysClockFreq+0xc4>
    }
#if defined(RCC_CFGR_SWS_HSI48)
    case RCC_SYSCLKSOURCE_STATUS_HSI48:    /* HSI48 used as system clock source */
    {
      sysclockfreq = HSI48_VALUE;
 8008d38:	4b09      	ldr	r3, [pc, #36]	; (8008d60 <HAL_RCC_GetSysClockFreq+0xe0>)
 8008d3a:	613b      	str	r3, [r7, #16]
      break;
 8008d3c:	e002      	b.n	8008d44 <HAL_RCC_GetSysClockFreq+0xc4>
    }
#endif /* RCC_CFGR_SWS_HSI48 */
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    default: /* HSI used as system clock */
    {
      sysclockfreq = HSI_VALUE;
 8008d3e:	4b09      	ldr	r3, [pc, #36]	; (8008d64 <HAL_RCC_GetSysClockFreq+0xe4>)
 8008d40:	613b      	str	r3, [r7, #16]
      break;
 8008d42:	46c0      	nop			; (mov r8, r8)
    }
  }
  return sysclockfreq;
 8008d44:	693b      	ldr	r3, [r7, #16]
}
 8008d46:	0018      	movs	r0, r3
 8008d48:	46bd      	mov	sp, r7
 8008d4a:	b006      	add	sp, #24
 8008d4c:	bd80      	pop	{r7, pc}
 8008d4e:	46c0      	nop			; (mov r8, r8)
 8008d50:	40021000 	.word	0x40021000
 8008d54:	017d7840 	.word	0x017d7840
 8008d58:	0800b078 	.word	0x0800b078
 8008d5c:	0800b088 	.word	0x0800b088
 8008d60:	02dc6c00 	.word	0x02dc6c00
 8008d64:	007a1200 	.word	0x007a1200

08008d68 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency 
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8008d68:	b580      	push	{r7, lr}
 8008d6a:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8008d6c:	4b02      	ldr	r3, [pc, #8]	; (8008d78 <HAL_RCC_GetHCLKFreq+0x10>)
 8008d6e:	681b      	ldr	r3, [r3, #0]
}
 8008d70:	0018      	movs	r0, r3
 8008d72:	46bd      	mov	sp, r7
 8008d74:	bd80      	pop	{r7, pc}
 8008d76:	46c0      	nop			; (mov r8, r8)
 8008d78:	20000004 	.word	0x20000004

08008d7c <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8008d7c:	b580      	push	{r7, lr}
 8008d7e:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE) >> RCC_CFGR_PPRE_BITNUMBER]);
 8008d80:	f7ff fff2 	bl	8008d68 <HAL_RCC_GetHCLKFreq>
 8008d84:	0001      	movs	r1, r0
 8008d86:	4b06      	ldr	r3, [pc, #24]	; (8008da0 <HAL_RCC_GetPCLK1Freq+0x24>)
 8008d88:	685b      	ldr	r3, [r3, #4]
 8008d8a:	0a1b      	lsrs	r3, r3, #8
 8008d8c:	2207      	movs	r2, #7
 8008d8e:	4013      	ands	r3, r2
 8008d90:	4a04      	ldr	r2, [pc, #16]	; (8008da4 <HAL_RCC_GetPCLK1Freq+0x28>)
 8008d92:	5cd3      	ldrb	r3, [r2, r3]
 8008d94:	40d9      	lsrs	r1, r3
 8008d96:	000b      	movs	r3, r1
}    
 8008d98:	0018      	movs	r0, r3
 8008d9a:	46bd      	mov	sp, r7
 8008d9c:	bd80      	pop	{r7, pc}
 8008d9e:	46c0      	nop			; (mov r8, r8)
 8008da0:	40021000 	.word	0x40021000
 8008da4:	0800b070 	.word	0x0800b070

08008da8 <HAL_RCCEx_PeriphCLKConfig>:
  *         the backup registers) and RCC_BDCR register are set to their reset values.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8008da8:	b580      	push	{r7, lr}
 8008daa:	b086      	sub	sp, #24
 8008dac:	af00      	add	r7, sp, #0
 8008dae:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 8008db0:	2300      	movs	r3, #0
 8008db2:	613b      	str	r3, [r7, #16]
  uint32_t temp_reg = 0U;
 8008db4:	2300      	movs	r3, #0
 8008db6:	60fb      	str	r3, [r7, #12]

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));
  
  /*---------------------------- RTC configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == (RCC_PERIPHCLK_RTC))
 8008db8:	687b      	ldr	r3, [r7, #4]
 8008dba:	681a      	ldr	r2, [r3, #0]
 8008dbc:	2380      	movs	r3, #128	; 0x80
 8008dbe:	025b      	lsls	r3, r3, #9
 8008dc0:	4013      	ands	r3, r2
 8008dc2:	d100      	bne.n	8008dc6 <HAL_RCCEx_PeriphCLKConfig+0x1e>
 8008dc4:	e08e      	b.n	8008ee4 <HAL_RCCEx_PeriphCLKConfig+0x13c>
  {
    /* check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));
    
    FlagStatus       pwrclkchanged = RESET;
 8008dc6:	2017      	movs	r0, #23
 8008dc8:	183b      	adds	r3, r7, r0
 8008dca:	2200      	movs	r2, #0
 8008dcc:	701a      	strb	r2, [r3, #0]

    /* As soon as function is called to change RTC clock source, activation of the 
       power domain is done. */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8008dce:	4b6e      	ldr	r3, [pc, #440]	; (8008f88 <HAL_RCCEx_PeriphCLKConfig+0x1e0>)
 8008dd0:	69da      	ldr	r2, [r3, #28]
 8008dd2:	2380      	movs	r3, #128	; 0x80
 8008dd4:	055b      	lsls	r3, r3, #21
 8008dd6:	4013      	ands	r3, r2
 8008dd8:	d110      	bne.n	8008dfc <HAL_RCCEx_PeriphCLKConfig+0x54>
    {
    __HAL_RCC_PWR_CLK_ENABLE();
 8008dda:	4b6b      	ldr	r3, [pc, #428]	; (8008f88 <HAL_RCCEx_PeriphCLKConfig+0x1e0>)
 8008ddc:	69da      	ldr	r2, [r3, #28]
 8008dde:	4b6a      	ldr	r3, [pc, #424]	; (8008f88 <HAL_RCCEx_PeriphCLKConfig+0x1e0>)
 8008de0:	2180      	movs	r1, #128	; 0x80
 8008de2:	0549      	lsls	r1, r1, #21
 8008de4:	430a      	orrs	r2, r1
 8008de6:	61da      	str	r2, [r3, #28]
 8008de8:	4b67      	ldr	r3, [pc, #412]	; (8008f88 <HAL_RCCEx_PeriphCLKConfig+0x1e0>)
 8008dea:	69da      	ldr	r2, [r3, #28]
 8008dec:	2380      	movs	r3, #128	; 0x80
 8008dee:	055b      	lsls	r3, r3, #21
 8008df0:	4013      	ands	r3, r2
 8008df2:	60bb      	str	r3, [r7, #8]
 8008df4:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8008df6:	183b      	adds	r3, r7, r0
 8008df8:	2201      	movs	r2, #1
 8008dfa:	701a      	strb	r2, [r3, #0]
    }
    
    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8008dfc:	4b63      	ldr	r3, [pc, #396]	; (8008f8c <HAL_RCCEx_PeriphCLKConfig+0x1e4>)
 8008dfe:	681a      	ldr	r2, [r3, #0]
 8008e00:	2380      	movs	r3, #128	; 0x80
 8008e02:	005b      	lsls	r3, r3, #1
 8008e04:	4013      	ands	r3, r2
 8008e06:	d11a      	bne.n	8008e3e <HAL_RCCEx_PeriphCLKConfig+0x96>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8008e08:	4b60      	ldr	r3, [pc, #384]	; (8008f8c <HAL_RCCEx_PeriphCLKConfig+0x1e4>)
 8008e0a:	681a      	ldr	r2, [r3, #0]
 8008e0c:	4b5f      	ldr	r3, [pc, #380]	; (8008f8c <HAL_RCCEx_PeriphCLKConfig+0x1e4>)
 8008e0e:	2180      	movs	r1, #128	; 0x80
 8008e10:	0049      	lsls	r1, r1, #1
 8008e12:	430a      	orrs	r2, r1
 8008e14:	601a      	str	r2, [r3, #0]
      
      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8008e16:	f7fd faa7 	bl	8006368 <HAL_GetTick>
 8008e1a:	0003      	movs	r3, r0
 8008e1c:	613b      	str	r3, [r7, #16]
      
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8008e1e:	e008      	b.n	8008e32 <HAL_RCCEx_PeriphCLKConfig+0x8a>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8008e20:	f7fd faa2 	bl	8006368 <HAL_GetTick>
 8008e24:	0002      	movs	r2, r0
 8008e26:	693b      	ldr	r3, [r7, #16]
 8008e28:	1ad3      	subs	r3, r2, r3
 8008e2a:	2b64      	cmp	r3, #100	; 0x64
 8008e2c:	d901      	bls.n	8008e32 <HAL_RCCEx_PeriphCLKConfig+0x8a>
        {
          return HAL_TIMEOUT;
 8008e2e:	2303      	movs	r3, #3
 8008e30:	e0a6      	b.n	8008f80 <HAL_RCCEx_PeriphCLKConfig+0x1d8>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8008e32:	4b56      	ldr	r3, [pc, #344]	; (8008f8c <HAL_RCCEx_PeriphCLKConfig+0x1e4>)
 8008e34:	681a      	ldr	r2, [r3, #0]
 8008e36:	2380      	movs	r3, #128	; 0x80
 8008e38:	005b      	lsls	r3, r3, #1
 8008e3a:	4013      	ands	r3, r2
 8008e3c:	d0f0      	beq.n	8008e20 <HAL_RCCEx_PeriphCLKConfig+0x78>
        }
      }
    }
    
    /* Reset the Backup domain only if the RTC Clock source selection is modified from reset value */ 
    temp_reg = (RCC->BDCR & RCC_BDCR_RTCSEL);
 8008e3e:	4b52      	ldr	r3, [pc, #328]	; (8008f88 <HAL_RCCEx_PeriphCLKConfig+0x1e0>)
 8008e40:	6a1a      	ldr	r2, [r3, #32]
 8008e42:	23c0      	movs	r3, #192	; 0xc0
 8008e44:	009b      	lsls	r3, r3, #2
 8008e46:	4013      	ands	r3, r2
 8008e48:	60fb      	str	r3, [r7, #12]
    if((temp_reg != 0x00000000U) && (temp_reg != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL)))
 8008e4a:	68fb      	ldr	r3, [r7, #12]
 8008e4c:	2b00      	cmp	r3, #0
 8008e4e:	d034      	beq.n	8008eba <HAL_RCCEx_PeriphCLKConfig+0x112>
 8008e50:	687b      	ldr	r3, [r7, #4]
 8008e52:	685a      	ldr	r2, [r3, #4]
 8008e54:	23c0      	movs	r3, #192	; 0xc0
 8008e56:	009b      	lsls	r3, r3, #2
 8008e58:	4013      	ands	r3, r2
 8008e5a:	68fa      	ldr	r2, [r7, #12]
 8008e5c:	429a      	cmp	r2, r3
 8008e5e:	d02c      	beq.n	8008eba <HAL_RCCEx_PeriphCLKConfig+0x112>
    {
      /* Store the content of BDCR register before the reset of Backup Domain */
      temp_reg = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 8008e60:	4b49      	ldr	r3, [pc, #292]	; (8008f88 <HAL_RCCEx_PeriphCLKConfig+0x1e0>)
 8008e62:	6a1b      	ldr	r3, [r3, #32]
 8008e64:	4a4a      	ldr	r2, [pc, #296]	; (8008f90 <HAL_RCCEx_PeriphCLKConfig+0x1e8>)
 8008e66:	4013      	ands	r3, r2
 8008e68:	60fb      	str	r3, [r7, #12]
      /* RTC Clock selection can be changed only if the Backup Domain is reset */
      __HAL_RCC_BACKUPRESET_FORCE();
 8008e6a:	4b47      	ldr	r3, [pc, #284]	; (8008f88 <HAL_RCCEx_PeriphCLKConfig+0x1e0>)
 8008e6c:	6a1a      	ldr	r2, [r3, #32]
 8008e6e:	4b46      	ldr	r3, [pc, #280]	; (8008f88 <HAL_RCCEx_PeriphCLKConfig+0x1e0>)
 8008e70:	2180      	movs	r1, #128	; 0x80
 8008e72:	0249      	lsls	r1, r1, #9
 8008e74:	430a      	orrs	r2, r1
 8008e76:	621a      	str	r2, [r3, #32]
      __HAL_RCC_BACKUPRESET_RELEASE();
 8008e78:	4b43      	ldr	r3, [pc, #268]	; (8008f88 <HAL_RCCEx_PeriphCLKConfig+0x1e0>)
 8008e7a:	6a1a      	ldr	r2, [r3, #32]
 8008e7c:	4b42      	ldr	r3, [pc, #264]	; (8008f88 <HAL_RCCEx_PeriphCLKConfig+0x1e0>)
 8008e7e:	4945      	ldr	r1, [pc, #276]	; (8008f94 <HAL_RCCEx_PeriphCLKConfig+0x1ec>)
 8008e80:	400a      	ands	r2, r1
 8008e82:	621a      	str	r2, [r3, #32]
      /* Restore the Content of BDCR register */
      RCC->BDCR = temp_reg;
 8008e84:	4b40      	ldr	r3, [pc, #256]	; (8008f88 <HAL_RCCEx_PeriphCLKConfig+0x1e0>)
 8008e86:	68fa      	ldr	r2, [r7, #12]
 8008e88:	621a      	str	r2, [r3, #32]
      
      /* Wait for LSERDY if LSE was enabled */
      if (HAL_IS_BIT_SET(temp_reg, RCC_BDCR_LSEON))
 8008e8a:	68fb      	ldr	r3, [r7, #12]
 8008e8c:	2201      	movs	r2, #1
 8008e8e:	4013      	ands	r3, r2
 8008e90:	d013      	beq.n	8008eba <HAL_RCCEx_PeriphCLKConfig+0x112>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8008e92:	f7fd fa69 	bl	8006368 <HAL_GetTick>
 8008e96:	0003      	movs	r3, r0
 8008e98:	613b      	str	r3, [r7, #16]
        
        /* Wait till LSE is ready */  
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8008e9a:	e009      	b.n	8008eb0 <HAL_RCCEx_PeriphCLKConfig+0x108>
        {
          if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8008e9c:	f7fd fa64 	bl	8006368 <HAL_GetTick>
 8008ea0:	0002      	movs	r2, r0
 8008ea2:	693b      	ldr	r3, [r7, #16]
 8008ea4:	1ad3      	subs	r3, r2, r3
 8008ea6:	4a3c      	ldr	r2, [pc, #240]	; (8008f98 <HAL_RCCEx_PeriphCLKConfig+0x1f0>)
 8008ea8:	4293      	cmp	r3, r2
 8008eaa:	d901      	bls.n	8008eb0 <HAL_RCCEx_PeriphCLKConfig+0x108>
          {
            return HAL_TIMEOUT;
 8008eac:	2303      	movs	r3, #3
 8008eae:	e067      	b.n	8008f80 <HAL_RCCEx_PeriphCLKConfig+0x1d8>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8008eb0:	4b35      	ldr	r3, [pc, #212]	; (8008f88 <HAL_RCCEx_PeriphCLKConfig+0x1e0>)
 8008eb2:	6a1b      	ldr	r3, [r3, #32]
 8008eb4:	2202      	movs	r2, #2
 8008eb6:	4013      	ands	r3, r2
 8008eb8:	d0f0      	beq.n	8008e9c <HAL_RCCEx_PeriphCLKConfig+0xf4>
          }
        }
      }
    }
    __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8008eba:	4b33      	ldr	r3, [pc, #204]	; (8008f88 <HAL_RCCEx_PeriphCLKConfig+0x1e0>)
 8008ebc:	6a1b      	ldr	r3, [r3, #32]
 8008ebe:	4a34      	ldr	r2, [pc, #208]	; (8008f90 <HAL_RCCEx_PeriphCLKConfig+0x1e8>)
 8008ec0:	4013      	ands	r3, r2
 8008ec2:	0019      	movs	r1, r3
 8008ec4:	687b      	ldr	r3, [r7, #4]
 8008ec6:	685a      	ldr	r2, [r3, #4]
 8008ec8:	4b2f      	ldr	r3, [pc, #188]	; (8008f88 <HAL_RCCEx_PeriphCLKConfig+0x1e0>)
 8008eca:	430a      	orrs	r2, r1
 8008ecc:	621a      	str	r2, [r3, #32]

    /* Require to disable power clock if necessary */
    if(pwrclkchanged == SET)
 8008ece:	2317      	movs	r3, #23
 8008ed0:	18fb      	adds	r3, r7, r3
 8008ed2:	781b      	ldrb	r3, [r3, #0]
 8008ed4:	2b01      	cmp	r3, #1
 8008ed6:	d105      	bne.n	8008ee4 <HAL_RCCEx_PeriphCLKConfig+0x13c>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8008ed8:	4b2b      	ldr	r3, [pc, #172]	; (8008f88 <HAL_RCCEx_PeriphCLKConfig+0x1e0>)
 8008eda:	69da      	ldr	r2, [r3, #28]
 8008edc:	4b2a      	ldr	r3, [pc, #168]	; (8008f88 <HAL_RCCEx_PeriphCLKConfig+0x1e0>)
 8008ede:	492f      	ldr	r1, [pc, #188]	; (8008f9c <HAL_RCCEx_PeriphCLKConfig+0x1f4>)
 8008ee0:	400a      	ands	r2, r1
 8008ee2:	61da      	str	r2, [r3, #28]
    }
  }

  /*------------------------------- USART1 Configuration ------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 8008ee4:	687b      	ldr	r3, [r7, #4]
 8008ee6:	681b      	ldr	r3, [r3, #0]
 8008ee8:	2201      	movs	r2, #1
 8008eea:	4013      	ands	r3, r2
 8008eec:	d009      	beq.n	8008f02 <HAL_RCCEx_PeriphCLKConfig+0x15a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));
    
    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 8008eee:	4b26      	ldr	r3, [pc, #152]	; (8008f88 <HAL_RCCEx_PeriphCLKConfig+0x1e0>)
 8008ef0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8008ef2:	2203      	movs	r2, #3
 8008ef4:	4393      	bics	r3, r2
 8008ef6:	0019      	movs	r1, r3
 8008ef8:	687b      	ldr	r3, [r7, #4]
 8008efa:	689a      	ldr	r2, [r3, #8]
 8008efc:	4b22      	ldr	r3, [pc, #136]	; (8008f88 <HAL_RCCEx_PeriphCLKConfig+0x1e0>)
 8008efe:	430a      	orrs	r2, r1
 8008f00:	631a      	str	r2, [r3, #48]	; 0x30
  }
  
#if defined(STM32F071xB) || defined(STM32F072xB) || defined(STM32F078xx)\
 || defined(STM32F091xC) || defined(STM32F098xx)
  /*----------------------------- USART2 Configuration --------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 8008f02:	687b      	ldr	r3, [r7, #4]
 8008f04:	681b      	ldr	r3, [r3, #0]
 8008f06:	2202      	movs	r2, #2
 8008f08:	4013      	ands	r3, r2
 8008f0a:	d009      	beq.n	8008f20 <HAL_RCCEx_PeriphCLKConfig+0x178>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(PeriphClkInit->Usart2ClockSelection));
    
    /* Configure the USART2 clock source */
    __HAL_RCC_USART2_CONFIG(PeriphClkInit->Usart2ClockSelection);
 8008f0c:	4b1e      	ldr	r3, [pc, #120]	; (8008f88 <HAL_RCCEx_PeriphCLKConfig+0x1e0>)
 8008f0e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8008f10:	4a23      	ldr	r2, [pc, #140]	; (8008fa0 <HAL_RCCEx_PeriphCLKConfig+0x1f8>)
 8008f12:	4013      	ands	r3, r2
 8008f14:	0019      	movs	r1, r3
 8008f16:	687b      	ldr	r3, [r7, #4]
 8008f18:	68da      	ldr	r2, [r3, #12]
 8008f1a:	4b1b      	ldr	r3, [pc, #108]	; (8008f88 <HAL_RCCEx_PeriphCLKConfig+0x1e0>)
 8008f1c:	430a      	orrs	r2, r1
 8008f1e:	631a      	str	r2, [r3, #48]	; 0x30
    __HAL_RCC_USART3_CONFIG(PeriphClkInit->Usart3ClockSelection);
  }
#endif /* STM32F091xC || STM32F098xx */  

  /*------------------------------ I2C1 Configuration ------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 8008f20:	687b      	ldr	r3, [r7, #4]
 8008f22:	681b      	ldr	r3, [r3, #0]
 8008f24:	2220      	movs	r2, #32
 8008f26:	4013      	ands	r3, r2
 8008f28:	d009      	beq.n	8008f3e <HAL_RCCEx_PeriphCLKConfig+0x196>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));
    
    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 8008f2a:	4b17      	ldr	r3, [pc, #92]	; (8008f88 <HAL_RCCEx_PeriphCLKConfig+0x1e0>)
 8008f2c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8008f2e:	2210      	movs	r2, #16
 8008f30:	4393      	bics	r3, r2
 8008f32:	0019      	movs	r1, r3
 8008f34:	687b      	ldr	r3, [r7, #4]
 8008f36:	691a      	ldr	r2, [r3, #16]
 8008f38:	4b13      	ldr	r3, [pc, #76]	; (8008f88 <HAL_RCCEx_PeriphCLKConfig+0x1e0>)
 8008f3a:	430a      	orrs	r2, r1
 8008f3c:	631a      	str	r2, [r3, #48]	; 0x30
  }

#if defined(STM32F042x6) || defined(STM32F048xx) || defined(STM32F072xB) || defined(STM32F078xx) || defined(STM32F070xB) || defined(STM32F070x6)
  /*------------------------------ USB Configuration ------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == RCC_PERIPHCLK_USB)
 8008f3e:	687b      	ldr	r3, [r7, #4]
 8008f40:	681a      	ldr	r2, [r3, #0]
 8008f42:	2380      	movs	r3, #128	; 0x80
 8008f44:	029b      	lsls	r3, r3, #10
 8008f46:	4013      	ands	r3, r2
 8008f48:	d009      	beq.n	8008f5e <HAL_RCCEx_PeriphCLKConfig+0x1b6>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USBCLKSOURCE(PeriphClkInit->UsbClockSelection));
    
    /* Configure the USB clock source */
    __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 8008f4a:	4b0f      	ldr	r3, [pc, #60]	; (8008f88 <HAL_RCCEx_PeriphCLKConfig+0x1e0>)
 8008f4c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8008f4e:	2280      	movs	r2, #128	; 0x80
 8008f50:	4393      	bics	r3, r2
 8008f52:	0019      	movs	r1, r3
 8008f54:	687b      	ldr	r3, [r7, #4]
 8008f56:	699a      	ldr	r2, [r3, #24]
 8008f58:	4b0b      	ldr	r3, [pc, #44]	; (8008f88 <HAL_RCCEx_PeriphCLKConfig+0x1e0>)
 8008f5a:	430a      	orrs	r2, r1
 8008f5c:	631a      	str	r2, [r3, #48]	; 0x30
#if defined(STM32F042x6) || defined(STM32F048xx)\
 || defined(STM32F051x8) || defined(STM32F058xx)\
 || defined(STM32F071xB) || defined(STM32F072xB) || defined(STM32F078xx)\
 || defined(STM32F091xC) || defined(STM32F098xx)
  /*------------------------------ CEC clock Configuration -------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CEC) == RCC_PERIPHCLK_CEC)
 8008f5e:	687b      	ldr	r3, [r7, #4]
 8008f60:	681a      	ldr	r2, [r3, #0]
 8008f62:	2380      	movs	r3, #128	; 0x80
 8008f64:	00db      	lsls	r3, r3, #3
 8008f66:	4013      	ands	r3, r2
 8008f68:	d009      	beq.n	8008f7e <HAL_RCCEx_PeriphCLKConfig+0x1d6>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CECCLKSOURCE(PeriphClkInit->CecClockSelection));
    
    /* Configure the CEC clock source */
    __HAL_RCC_CEC_CONFIG(PeriphClkInit->CecClockSelection);
 8008f6a:	4b07      	ldr	r3, [pc, #28]	; (8008f88 <HAL_RCCEx_PeriphCLKConfig+0x1e0>)
 8008f6c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8008f6e:	2240      	movs	r2, #64	; 0x40
 8008f70:	4393      	bics	r3, r2
 8008f72:	0019      	movs	r1, r3
 8008f74:	687b      	ldr	r3, [r7, #4]
 8008f76:	695a      	ldr	r2, [r3, #20]
 8008f78:	4b03      	ldr	r3, [pc, #12]	; (8008f88 <HAL_RCCEx_PeriphCLKConfig+0x1e0>)
 8008f7a:	430a      	orrs	r2, r1
 8008f7c:	631a      	str	r2, [r3, #48]	; 0x30
#endif /* STM32F042x6 || STM32F048xx ||                */
       /* STM32F051x8 || STM32F058xx ||                */
       /* STM32F071xB || STM32F072xB || STM32F078xx || */
       /* STM32F091xC || STM32F098xx */
  
  return HAL_OK;
 8008f7e:	2300      	movs	r3, #0
}
 8008f80:	0018      	movs	r0, r3
 8008f82:	46bd      	mov	sp, r7
 8008f84:	b006      	add	sp, #24
 8008f86:	bd80      	pop	{r7, pc}
 8008f88:	40021000 	.word	0x40021000
 8008f8c:	40007000 	.word	0x40007000
 8008f90:	fffffcff 	.word	0xfffffcff
 8008f94:	fffeffff 	.word	0xfffeffff
 8008f98:	00001388 	.word	0x00001388
 8008f9c:	efffffff 	.word	0xefffffff
 8008fa0:	fffcffff 	.word	0xfffcffff

08008fa4 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8008fa4:	b580      	push	{r7, lr}
 8008fa6:	b082      	sub	sp, #8
 8008fa8:	af00      	add	r7, sp, #0
 8008faa:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8008fac:	687b      	ldr	r3, [r7, #4]
 8008fae:	2b00      	cmp	r3, #0
 8008fb0:	d101      	bne.n	8008fb6 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8008fb2:	2301      	movs	r3, #1
 8008fb4:	e042      	b.n	800903c <HAL_TIM_Base_Init+0x98>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8008fb6:	687b      	ldr	r3, [r7, #4]
 8008fb8:	223d      	movs	r2, #61	; 0x3d
 8008fba:	5c9b      	ldrb	r3, [r3, r2]
 8008fbc:	b2db      	uxtb	r3, r3
 8008fbe:	2b00      	cmp	r3, #0
 8008fc0:	d107      	bne.n	8008fd2 <HAL_TIM_Base_Init+0x2e>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8008fc2:	687b      	ldr	r3, [r7, #4]
 8008fc4:	223c      	movs	r2, #60	; 0x3c
 8008fc6:	2100      	movs	r1, #0
 8008fc8:	5499      	strb	r1, [r3, r2]
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8008fca:	687b      	ldr	r3, [r7, #4]
 8008fcc:	0018      	movs	r0, r3
 8008fce:	f7fc fc95 	bl	80058fc <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8008fd2:	687b      	ldr	r3, [r7, #4]
 8008fd4:	223d      	movs	r2, #61	; 0x3d
 8008fd6:	2102      	movs	r1, #2
 8008fd8:	5499      	strb	r1, [r3, r2]

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8008fda:	687b      	ldr	r3, [r7, #4]
 8008fdc:	681a      	ldr	r2, [r3, #0]
 8008fde:	687b      	ldr	r3, [r7, #4]
 8008fe0:	3304      	adds	r3, #4
 8008fe2:	0019      	movs	r1, r3
 8008fe4:	0010      	movs	r0, r2
 8008fe6:	f000 fbf9 	bl	80097dc <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8008fea:	687b      	ldr	r3, [r7, #4]
 8008fec:	2246      	movs	r2, #70	; 0x46
 8008fee:	2101      	movs	r1, #1
 8008ff0:	5499      	strb	r1, [r3, r2]

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8008ff2:	687b      	ldr	r3, [r7, #4]
 8008ff4:	223e      	movs	r2, #62	; 0x3e
 8008ff6:	2101      	movs	r1, #1
 8008ff8:	5499      	strb	r1, [r3, r2]
 8008ffa:	687b      	ldr	r3, [r7, #4]
 8008ffc:	223f      	movs	r2, #63	; 0x3f
 8008ffe:	2101      	movs	r1, #1
 8009000:	5499      	strb	r1, [r3, r2]
 8009002:	687b      	ldr	r3, [r7, #4]
 8009004:	2240      	movs	r2, #64	; 0x40
 8009006:	2101      	movs	r1, #1
 8009008:	5499      	strb	r1, [r3, r2]
 800900a:	687b      	ldr	r3, [r7, #4]
 800900c:	2241      	movs	r2, #65	; 0x41
 800900e:	2101      	movs	r1, #1
 8009010:	5499      	strb	r1, [r3, r2]
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8009012:	687b      	ldr	r3, [r7, #4]
 8009014:	2242      	movs	r2, #66	; 0x42
 8009016:	2101      	movs	r1, #1
 8009018:	5499      	strb	r1, [r3, r2]
 800901a:	687b      	ldr	r3, [r7, #4]
 800901c:	2243      	movs	r2, #67	; 0x43
 800901e:	2101      	movs	r1, #1
 8009020:	5499      	strb	r1, [r3, r2]
 8009022:	687b      	ldr	r3, [r7, #4]
 8009024:	2244      	movs	r2, #68	; 0x44
 8009026:	2101      	movs	r1, #1
 8009028:	5499      	strb	r1, [r3, r2]
 800902a:	687b      	ldr	r3, [r7, #4]
 800902c:	2245      	movs	r2, #69	; 0x45
 800902e:	2101      	movs	r1, #1
 8009030:	5499      	strb	r1, [r3, r2]

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8009032:	687b      	ldr	r3, [r7, #4]
 8009034:	223d      	movs	r2, #61	; 0x3d
 8009036:	2101      	movs	r1, #1
 8009038:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 800903a:	2300      	movs	r3, #0
}
 800903c:	0018      	movs	r0, r3
 800903e:	46bd      	mov	sp, r7
 8009040:	b002      	add	sp, #8
 8009042:	bd80      	pop	{r7, pc}

08009044 <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 8009044:	b580      	push	{r7, lr}
 8009046:	b084      	sub	sp, #16
 8009048:	af00      	add	r7, sp, #0
 800904a:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 800904c:	687b      	ldr	r3, [r7, #4]
 800904e:	223d      	movs	r2, #61	; 0x3d
 8009050:	5c9b      	ldrb	r3, [r3, r2]
 8009052:	b2db      	uxtb	r3, r3
 8009054:	2b01      	cmp	r3, #1
 8009056:	d001      	beq.n	800905c <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 8009058:	2301      	movs	r3, #1
 800905a:	e03b      	b.n	80090d4 <HAL_TIM_Base_Start_IT+0x90>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 800905c:	687b      	ldr	r3, [r7, #4]
 800905e:	223d      	movs	r2, #61	; 0x3d
 8009060:	2102      	movs	r1, #2
 8009062:	5499      	strb	r1, [r3, r2]

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 8009064:	687b      	ldr	r3, [r7, #4]
 8009066:	681b      	ldr	r3, [r3, #0]
 8009068:	68da      	ldr	r2, [r3, #12]
 800906a:	687b      	ldr	r3, [r7, #4]
 800906c:	681b      	ldr	r3, [r3, #0]
 800906e:	2101      	movs	r1, #1
 8009070:	430a      	orrs	r2, r1
 8009072:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8009074:	687b      	ldr	r3, [r7, #4]
 8009076:	681b      	ldr	r3, [r3, #0]
 8009078:	4a18      	ldr	r2, [pc, #96]	; (80090dc <HAL_TIM_Base_Start_IT+0x98>)
 800907a:	4293      	cmp	r3, r2
 800907c:	d00f      	beq.n	800909e <HAL_TIM_Base_Start_IT+0x5a>
 800907e:	687b      	ldr	r3, [r7, #4]
 8009080:	681a      	ldr	r2, [r3, #0]
 8009082:	2380      	movs	r3, #128	; 0x80
 8009084:	05db      	lsls	r3, r3, #23
 8009086:	429a      	cmp	r2, r3
 8009088:	d009      	beq.n	800909e <HAL_TIM_Base_Start_IT+0x5a>
 800908a:	687b      	ldr	r3, [r7, #4]
 800908c:	681b      	ldr	r3, [r3, #0]
 800908e:	4a14      	ldr	r2, [pc, #80]	; (80090e0 <HAL_TIM_Base_Start_IT+0x9c>)
 8009090:	4293      	cmp	r3, r2
 8009092:	d004      	beq.n	800909e <HAL_TIM_Base_Start_IT+0x5a>
 8009094:	687b      	ldr	r3, [r7, #4]
 8009096:	681b      	ldr	r3, [r3, #0]
 8009098:	4a12      	ldr	r2, [pc, #72]	; (80090e4 <HAL_TIM_Base_Start_IT+0xa0>)
 800909a:	4293      	cmp	r3, r2
 800909c:	d111      	bne.n	80090c2 <HAL_TIM_Base_Start_IT+0x7e>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 800909e:	687b      	ldr	r3, [r7, #4]
 80090a0:	681b      	ldr	r3, [r3, #0]
 80090a2:	689b      	ldr	r3, [r3, #8]
 80090a4:	2207      	movs	r2, #7
 80090a6:	4013      	ands	r3, r2
 80090a8:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80090aa:	68fb      	ldr	r3, [r7, #12]
 80090ac:	2b06      	cmp	r3, #6
 80090ae:	d010      	beq.n	80090d2 <HAL_TIM_Base_Start_IT+0x8e>
    {
      __HAL_TIM_ENABLE(htim);
 80090b0:	687b      	ldr	r3, [r7, #4]
 80090b2:	681b      	ldr	r3, [r3, #0]
 80090b4:	681a      	ldr	r2, [r3, #0]
 80090b6:	687b      	ldr	r3, [r7, #4]
 80090b8:	681b      	ldr	r3, [r3, #0]
 80090ba:	2101      	movs	r1, #1
 80090bc:	430a      	orrs	r2, r1
 80090be:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80090c0:	e007      	b.n	80090d2 <HAL_TIM_Base_Start_IT+0x8e>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 80090c2:	687b      	ldr	r3, [r7, #4]
 80090c4:	681b      	ldr	r3, [r3, #0]
 80090c6:	681a      	ldr	r2, [r3, #0]
 80090c8:	687b      	ldr	r3, [r7, #4]
 80090ca:	681b      	ldr	r3, [r3, #0]
 80090cc:	2101      	movs	r1, #1
 80090ce:	430a      	orrs	r2, r1
 80090d0:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 80090d2:	2300      	movs	r3, #0
}
 80090d4:	0018      	movs	r0, r3
 80090d6:	46bd      	mov	sp, r7
 80090d8:	b004      	add	sp, #16
 80090da:	bd80      	pop	{r7, pc}
 80090dc:	40012c00 	.word	0x40012c00
 80090e0:	40000400 	.word	0x40000400
 80090e4:	40014000 	.word	0x40014000

080090e8 <HAL_TIM_PWM_Init>:
  *         Ex: call @ref HAL_TIM_PWM_DeInit() before HAL_TIM_PWM_Init()
  * @param  htim TIM PWM handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Init(TIM_HandleTypeDef *htim)
{
 80090e8:	b580      	push	{r7, lr}
 80090ea:	b082      	sub	sp, #8
 80090ec:	af00      	add	r7, sp, #0
 80090ee:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 80090f0:	687b      	ldr	r3, [r7, #4]
 80090f2:	2b00      	cmp	r3, #0
 80090f4:	d101      	bne.n	80090fa <HAL_TIM_PWM_Init+0x12>
  {
    return HAL_ERROR;
 80090f6:	2301      	movs	r3, #1
 80090f8:	e042      	b.n	8009180 <HAL_TIM_PWM_Init+0x98>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 80090fa:	687b      	ldr	r3, [r7, #4]
 80090fc:	223d      	movs	r2, #61	; 0x3d
 80090fe:	5c9b      	ldrb	r3, [r3, r2]
 8009100:	b2db      	uxtb	r3, r3
 8009102:	2b00      	cmp	r3, #0
 8009104:	d107      	bne.n	8009116 <HAL_TIM_PWM_Init+0x2e>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8009106:	687b      	ldr	r3, [r7, #4]
 8009108:	223c      	movs	r2, #60	; 0x3c
 800910a:	2100      	movs	r1, #0
 800910c:	5499      	strb	r1, [r3, r2]
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->PWM_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_PWM_MspInit(htim);
 800910e:	687b      	ldr	r3, [r7, #4]
 8009110:	0018      	movs	r0, r3
 8009112:	f000 f839 	bl	8009188 <HAL_TIM_PWM_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8009116:	687b      	ldr	r3, [r7, #4]
 8009118:	223d      	movs	r2, #61	; 0x3d
 800911a:	2102      	movs	r1, #2
 800911c:	5499      	strb	r1, [r3, r2]

  /* Init the base time for the PWM */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 800911e:	687b      	ldr	r3, [r7, #4]
 8009120:	681a      	ldr	r2, [r3, #0]
 8009122:	687b      	ldr	r3, [r7, #4]
 8009124:	3304      	adds	r3, #4
 8009126:	0019      	movs	r1, r3
 8009128:	0010      	movs	r0, r2
 800912a:	f000 fb57 	bl	80097dc <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 800912e:	687b      	ldr	r3, [r7, #4]
 8009130:	2246      	movs	r2, #70	; 0x46
 8009132:	2101      	movs	r1, #1
 8009134:	5499      	strb	r1, [r3, r2]

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8009136:	687b      	ldr	r3, [r7, #4]
 8009138:	223e      	movs	r2, #62	; 0x3e
 800913a:	2101      	movs	r1, #1
 800913c:	5499      	strb	r1, [r3, r2]
 800913e:	687b      	ldr	r3, [r7, #4]
 8009140:	223f      	movs	r2, #63	; 0x3f
 8009142:	2101      	movs	r1, #1
 8009144:	5499      	strb	r1, [r3, r2]
 8009146:	687b      	ldr	r3, [r7, #4]
 8009148:	2240      	movs	r2, #64	; 0x40
 800914a:	2101      	movs	r1, #1
 800914c:	5499      	strb	r1, [r3, r2]
 800914e:	687b      	ldr	r3, [r7, #4]
 8009150:	2241      	movs	r2, #65	; 0x41
 8009152:	2101      	movs	r1, #1
 8009154:	5499      	strb	r1, [r3, r2]
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8009156:	687b      	ldr	r3, [r7, #4]
 8009158:	2242      	movs	r2, #66	; 0x42
 800915a:	2101      	movs	r1, #1
 800915c:	5499      	strb	r1, [r3, r2]
 800915e:	687b      	ldr	r3, [r7, #4]
 8009160:	2243      	movs	r2, #67	; 0x43
 8009162:	2101      	movs	r1, #1
 8009164:	5499      	strb	r1, [r3, r2]
 8009166:	687b      	ldr	r3, [r7, #4]
 8009168:	2244      	movs	r2, #68	; 0x44
 800916a:	2101      	movs	r1, #1
 800916c:	5499      	strb	r1, [r3, r2]
 800916e:	687b      	ldr	r3, [r7, #4]
 8009170:	2245      	movs	r2, #69	; 0x45
 8009172:	2101      	movs	r1, #1
 8009174:	5499      	strb	r1, [r3, r2]

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8009176:	687b      	ldr	r3, [r7, #4]
 8009178:	223d      	movs	r2, #61	; 0x3d
 800917a:	2101      	movs	r1, #1
 800917c:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 800917e:	2300      	movs	r3, #0
}
 8009180:	0018      	movs	r0, r3
 8009182:	46bd      	mov	sp, r7
 8009184:	b002      	add	sp, #8
 8009186:	bd80      	pop	{r7, pc}

08009188 <HAL_TIM_PWM_MspInit>:
  * @brief  Initializes the TIM PWM MSP.
  * @param  htim TIM PWM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_MspInit(TIM_HandleTypeDef *htim)
{
 8009188:	b580      	push	{r7, lr}
 800918a:	b082      	sub	sp, #8
 800918c:	af00      	add	r7, sp, #0
 800918e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_MspInit could be implemented in the user file
   */
}
 8009190:	46c0      	nop			; (mov r8, r8)
 8009192:	46bd      	mov	sp, r7
 8009194:	b002      	add	sp, #8
 8009196:	bd80      	pop	{r7, pc}

08009198 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 8009198:	b580      	push	{r7, lr}
 800919a:	b082      	sub	sp, #8
 800919c:	af00      	add	r7, sp, #0
 800919e:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 80091a0:	687b      	ldr	r3, [r7, #4]
 80091a2:	681b      	ldr	r3, [r3, #0]
 80091a4:	691b      	ldr	r3, [r3, #16]
 80091a6:	2202      	movs	r2, #2
 80091a8:	4013      	ands	r3, r2
 80091aa:	2b02      	cmp	r3, #2
 80091ac:	d124      	bne.n	80091f8 <HAL_TIM_IRQHandler+0x60>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 80091ae:	687b      	ldr	r3, [r7, #4]
 80091b0:	681b      	ldr	r3, [r3, #0]
 80091b2:	68db      	ldr	r3, [r3, #12]
 80091b4:	2202      	movs	r2, #2
 80091b6:	4013      	ands	r3, r2
 80091b8:	2b02      	cmp	r3, #2
 80091ba:	d11d      	bne.n	80091f8 <HAL_TIM_IRQHandler+0x60>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 80091bc:	687b      	ldr	r3, [r7, #4]
 80091be:	681b      	ldr	r3, [r3, #0]
 80091c0:	2203      	movs	r2, #3
 80091c2:	4252      	negs	r2, r2
 80091c4:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 80091c6:	687b      	ldr	r3, [r7, #4]
 80091c8:	2201      	movs	r2, #1
 80091ca:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 80091cc:	687b      	ldr	r3, [r7, #4]
 80091ce:	681b      	ldr	r3, [r3, #0]
 80091d0:	699b      	ldr	r3, [r3, #24]
 80091d2:	2203      	movs	r2, #3
 80091d4:	4013      	ands	r3, r2
 80091d6:	d004      	beq.n	80091e2 <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 80091d8:	687b      	ldr	r3, [r7, #4]
 80091da:	0018      	movs	r0, r3
 80091dc:	f000 fa94 	bl	8009708 <HAL_TIM_IC_CaptureCallback>
 80091e0:	e007      	b.n	80091f2 <HAL_TIM_IRQHandler+0x5a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 80091e2:	687b      	ldr	r3, [r7, #4]
 80091e4:	0018      	movs	r0, r3
 80091e6:	f000 fa87 	bl	80096f8 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 80091ea:	687b      	ldr	r3, [r7, #4]
 80091ec:	0018      	movs	r0, r3
 80091ee:	f000 fa93 	bl	8009718 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80091f2:	687b      	ldr	r3, [r7, #4]
 80091f4:	2200      	movs	r2, #0
 80091f6:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 80091f8:	687b      	ldr	r3, [r7, #4]
 80091fa:	681b      	ldr	r3, [r3, #0]
 80091fc:	691b      	ldr	r3, [r3, #16]
 80091fe:	2204      	movs	r2, #4
 8009200:	4013      	ands	r3, r2
 8009202:	2b04      	cmp	r3, #4
 8009204:	d125      	bne.n	8009252 <HAL_TIM_IRQHandler+0xba>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 8009206:	687b      	ldr	r3, [r7, #4]
 8009208:	681b      	ldr	r3, [r3, #0]
 800920a:	68db      	ldr	r3, [r3, #12]
 800920c:	2204      	movs	r2, #4
 800920e:	4013      	ands	r3, r2
 8009210:	2b04      	cmp	r3, #4
 8009212:	d11e      	bne.n	8009252 <HAL_TIM_IRQHandler+0xba>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 8009214:	687b      	ldr	r3, [r7, #4]
 8009216:	681b      	ldr	r3, [r3, #0]
 8009218:	2205      	movs	r2, #5
 800921a:	4252      	negs	r2, r2
 800921c:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 800921e:	687b      	ldr	r3, [r7, #4]
 8009220:	2202      	movs	r2, #2
 8009222:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8009224:	687b      	ldr	r3, [r7, #4]
 8009226:	681b      	ldr	r3, [r3, #0]
 8009228:	699a      	ldr	r2, [r3, #24]
 800922a:	23c0      	movs	r3, #192	; 0xc0
 800922c:	009b      	lsls	r3, r3, #2
 800922e:	4013      	ands	r3, r2
 8009230:	d004      	beq.n	800923c <HAL_TIM_IRQHandler+0xa4>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8009232:	687b      	ldr	r3, [r7, #4]
 8009234:	0018      	movs	r0, r3
 8009236:	f000 fa67 	bl	8009708 <HAL_TIM_IC_CaptureCallback>
 800923a:	e007      	b.n	800924c <HAL_TIM_IRQHandler+0xb4>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800923c:	687b      	ldr	r3, [r7, #4]
 800923e:	0018      	movs	r0, r3
 8009240:	f000 fa5a 	bl	80096f8 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8009244:	687b      	ldr	r3, [r7, #4]
 8009246:	0018      	movs	r0, r3
 8009248:	f000 fa66 	bl	8009718 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800924c:	687b      	ldr	r3, [r7, #4]
 800924e:	2200      	movs	r2, #0
 8009250:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 8009252:	687b      	ldr	r3, [r7, #4]
 8009254:	681b      	ldr	r3, [r3, #0]
 8009256:	691b      	ldr	r3, [r3, #16]
 8009258:	2208      	movs	r2, #8
 800925a:	4013      	ands	r3, r2
 800925c:	2b08      	cmp	r3, #8
 800925e:	d124      	bne.n	80092aa <HAL_TIM_IRQHandler+0x112>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 8009260:	687b      	ldr	r3, [r7, #4]
 8009262:	681b      	ldr	r3, [r3, #0]
 8009264:	68db      	ldr	r3, [r3, #12]
 8009266:	2208      	movs	r2, #8
 8009268:	4013      	ands	r3, r2
 800926a:	2b08      	cmp	r3, #8
 800926c:	d11d      	bne.n	80092aa <HAL_TIM_IRQHandler+0x112>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 800926e:	687b      	ldr	r3, [r7, #4]
 8009270:	681b      	ldr	r3, [r3, #0]
 8009272:	2209      	movs	r2, #9
 8009274:	4252      	negs	r2, r2
 8009276:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8009278:	687b      	ldr	r3, [r7, #4]
 800927a:	2204      	movs	r2, #4
 800927c:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 800927e:	687b      	ldr	r3, [r7, #4]
 8009280:	681b      	ldr	r3, [r3, #0]
 8009282:	69db      	ldr	r3, [r3, #28]
 8009284:	2203      	movs	r2, #3
 8009286:	4013      	ands	r3, r2
 8009288:	d004      	beq.n	8009294 <HAL_TIM_IRQHandler+0xfc>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800928a:	687b      	ldr	r3, [r7, #4]
 800928c:	0018      	movs	r0, r3
 800928e:	f000 fa3b 	bl	8009708 <HAL_TIM_IC_CaptureCallback>
 8009292:	e007      	b.n	80092a4 <HAL_TIM_IRQHandler+0x10c>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8009294:	687b      	ldr	r3, [r7, #4]
 8009296:	0018      	movs	r0, r3
 8009298:	f000 fa2e 	bl	80096f8 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 800929c:	687b      	ldr	r3, [r7, #4]
 800929e:	0018      	movs	r0, r3
 80092a0:	f000 fa3a 	bl	8009718 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80092a4:	687b      	ldr	r3, [r7, #4]
 80092a6:	2200      	movs	r2, #0
 80092a8:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 80092aa:	687b      	ldr	r3, [r7, #4]
 80092ac:	681b      	ldr	r3, [r3, #0]
 80092ae:	691b      	ldr	r3, [r3, #16]
 80092b0:	2210      	movs	r2, #16
 80092b2:	4013      	ands	r3, r2
 80092b4:	2b10      	cmp	r3, #16
 80092b6:	d125      	bne.n	8009304 <HAL_TIM_IRQHandler+0x16c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 80092b8:	687b      	ldr	r3, [r7, #4]
 80092ba:	681b      	ldr	r3, [r3, #0]
 80092bc:	68db      	ldr	r3, [r3, #12]
 80092be:	2210      	movs	r2, #16
 80092c0:	4013      	ands	r3, r2
 80092c2:	2b10      	cmp	r3, #16
 80092c4:	d11e      	bne.n	8009304 <HAL_TIM_IRQHandler+0x16c>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 80092c6:	687b      	ldr	r3, [r7, #4]
 80092c8:	681b      	ldr	r3, [r3, #0]
 80092ca:	2211      	movs	r2, #17
 80092cc:	4252      	negs	r2, r2
 80092ce:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 80092d0:	687b      	ldr	r3, [r7, #4]
 80092d2:	2208      	movs	r2, #8
 80092d4:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 80092d6:	687b      	ldr	r3, [r7, #4]
 80092d8:	681b      	ldr	r3, [r3, #0]
 80092da:	69da      	ldr	r2, [r3, #28]
 80092dc:	23c0      	movs	r3, #192	; 0xc0
 80092de:	009b      	lsls	r3, r3, #2
 80092e0:	4013      	ands	r3, r2
 80092e2:	d004      	beq.n	80092ee <HAL_TIM_IRQHandler+0x156>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 80092e4:	687b      	ldr	r3, [r7, #4]
 80092e6:	0018      	movs	r0, r3
 80092e8:	f000 fa0e 	bl	8009708 <HAL_TIM_IC_CaptureCallback>
 80092ec:	e007      	b.n	80092fe <HAL_TIM_IRQHandler+0x166>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80092ee:	687b      	ldr	r3, [r7, #4]
 80092f0:	0018      	movs	r0, r3
 80092f2:	f000 fa01 	bl	80096f8 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80092f6:	687b      	ldr	r3, [r7, #4]
 80092f8:	0018      	movs	r0, r3
 80092fa:	f000 fa0d 	bl	8009718 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80092fe:	687b      	ldr	r3, [r7, #4]
 8009300:	2200      	movs	r2, #0
 8009302:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 8009304:	687b      	ldr	r3, [r7, #4]
 8009306:	681b      	ldr	r3, [r3, #0]
 8009308:	691b      	ldr	r3, [r3, #16]
 800930a:	2201      	movs	r2, #1
 800930c:	4013      	ands	r3, r2
 800930e:	2b01      	cmp	r3, #1
 8009310:	d10f      	bne.n	8009332 <HAL_TIM_IRQHandler+0x19a>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 8009312:	687b      	ldr	r3, [r7, #4]
 8009314:	681b      	ldr	r3, [r3, #0]
 8009316:	68db      	ldr	r3, [r3, #12]
 8009318:	2201      	movs	r2, #1
 800931a:	4013      	ands	r3, r2
 800931c:	2b01      	cmp	r3, #1
 800931e:	d108      	bne.n	8009332 <HAL_TIM_IRQHandler+0x19a>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 8009320:	687b      	ldr	r3, [r7, #4]
 8009322:	681b      	ldr	r3, [r3, #0]
 8009324:	2202      	movs	r2, #2
 8009326:	4252      	negs	r2, r2
 8009328:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 800932a:	687b      	ldr	r3, [r7, #4]
 800932c:	0018      	movs	r0, r3
 800932e:	f7fc ff0b 	bl	8006148 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 8009332:	687b      	ldr	r3, [r7, #4]
 8009334:	681b      	ldr	r3, [r3, #0]
 8009336:	691b      	ldr	r3, [r3, #16]
 8009338:	2280      	movs	r2, #128	; 0x80
 800933a:	4013      	ands	r3, r2
 800933c:	2b80      	cmp	r3, #128	; 0x80
 800933e:	d10f      	bne.n	8009360 <HAL_TIM_IRQHandler+0x1c8>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 8009340:	687b      	ldr	r3, [r7, #4]
 8009342:	681b      	ldr	r3, [r3, #0]
 8009344:	68db      	ldr	r3, [r3, #12]
 8009346:	2280      	movs	r2, #128	; 0x80
 8009348:	4013      	ands	r3, r2
 800934a:	2b80      	cmp	r3, #128	; 0x80
 800934c:	d108      	bne.n	8009360 <HAL_TIM_IRQHandler+0x1c8>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 800934e:	687b      	ldr	r3, [r7, #4]
 8009350:	681b      	ldr	r3, [r3, #0]
 8009352:	2281      	movs	r2, #129	; 0x81
 8009354:	4252      	negs	r2, r2
 8009356:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 8009358:	687b      	ldr	r3, [r7, #4]
 800935a:	0018      	movs	r0, r3
 800935c:	f000 fdde 	bl	8009f1c <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 8009360:	687b      	ldr	r3, [r7, #4]
 8009362:	681b      	ldr	r3, [r3, #0]
 8009364:	691b      	ldr	r3, [r3, #16]
 8009366:	2240      	movs	r2, #64	; 0x40
 8009368:	4013      	ands	r3, r2
 800936a:	2b40      	cmp	r3, #64	; 0x40
 800936c:	d10f      	bne.n	800938e <HAL_TIM_IRQHandler+0x1f6>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 800936e:	687b      	ldr	r3, [r7, #4]
 8009370:	681b      	ldr	r3, [r3, #0]
 8009372:	68db      	ldr	r3, [r3, #12]
 8009374:	2240      	movs	r2, #64	; 0x40
 8009376:	4013      	ands	r3, r2
 8009378:	2b40      	cmp	r3, #64	; 0x40
 800937a:	d108      	bne.n	800938e <HAL_TIM_IRQHandler+0x1f6>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 800937c:	687b      	ldr	r3, [r7, #4]
 800937e:	681b      	ldr	r3, [r3, #0]
 8009380:	2241      	movs	r2, #65	; 0x41
 8009382:	4252      	negs	r2, r2
 8009384:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 8009386:	687b      	ldr	r3, [r7, #4]
 8009388:	0018      	movs	r0, r3
 800938a:	f000 f9cd 	bl	8009728 <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 800938e:	687b      	ldr	r3, [r7, #4]
 8009390:	681b      	ldr	r3, [r3, #0]
 8009392:	691b      	ldr	r3, [r3, #16]
 8009394:	2220      	movs	r2, #32
 8009396:	4013      	ands	r3, r2
 8009398:	2b20      	cmp	r3, #32
 800939a:	d10f      	bne.n	80093bc <HAL_TIM_IRQHandler+0x224>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 800939c:	687b      	ldr	r3, [r7, #4]
 800939e:	681b      	ldr	r3, [r3, #0]
 80093a0:	68db      	ldr	r3, [r3, #12]
 80093a2:	2220      	movs	r2, #32
 80093a4:	4013      	ands	r3, r2
 80093a6:	2b20      	cmp	r3, #32
 80093a8:	d108      	bne.n	80093bc <HAL_TIM_IRQHandler+0x224>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 80093aa:	687b      	ldr	r3, [r7, #4]
 80093ac:	681b      	ldr	r3, [r3, #0]
 80093ae:	2221      	movs	r2, #33	; 0x21
 80093b0:	4252      	negs	r2, r2
 80093b2:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 80093b4:	687b      	ldr	r3, [r7, #4]
 80093b6:	0018      	movs	r0, r3
 80093b8:	f000 fda8 	bl	8009f0c <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 80093bc:	46c0      	nop			; (mov r8, r8)
 80093be:	46bd      	mov	sp, r7
 80093c0:	b002      	add	sp, #8
 80093c2:	bd80      	pop	{r7, pc}

080093c4 <HAL_TIM_PWM_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_ConfigChannel(TIM_HandleTypeDef *htim,
                                            const TIM_OC_InitTypeDef *sConfig,
                                            uint32_t Channel)
{
 80093c4:	b580      	push	{r7, lr}
 80093c6:	b086      	sub	sp, #24
 80093c8:	af00      	add	r7, sp, #0
 80093ca:	60f8      	str	r0, [r7, #12]
 80093cc:	60b9      	str	r1, [r7, #8]
 80093ce:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 80093d0:	2317      	movs	r3, #23
 80093d2:	18fb      	adds	r3, r7, r3
 80093d4:	2200      	movs	r2, #0
 80093d6:	701a      	strb	r2, [r3, #0]
  assert_param(IS_TIM_PWM_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));
  assert_param(IS_TIM_FAST_STATE(sConfig->OCFastMode));

  /* Process Locked */
  __HAL_LOCK(htim);
 80093d8:	68fb      	ldr	r3, [r7, #12]
 80093da:	223c      	movs	r2, #60	; 0x3c
 80093dc:	5c9b      	ldrb	r3, [r3, r2]
 80093de:	2b01      	cmp	r3, #1
 80093e0:	d101      	bne.n	80093e6 <HAL_TIM_PWM_ConfigChannel+0x22>
 80093e2:	2302      	movs	r3, #2
 80093e4:	e0ad      	b.n	8009542 <HAL_TIM_PWM_ConfigChannel+0x17e>
 80093e6:	68fb      	ldr	r3, [r7, #12]
 80093e8:	223c      	movs	r2, #60	; 0x3c
 80093ea:	2101      	movs	r1, #1
 80093ec:	5499      	strb	r1, [r3, r2]

  switch (Channel)
 80093ee:	687b      	ldr	r3, [r7, #4]
 80093f0:	2b0c      	cmp	r3, #12
 80093f2:	d100      	bne.n	80093f6 <HAL_TIM_PWM_ConfigChannel+0x32>
 80093f4:	e076      	b.n	80094e4 <HAL_TIM_PWM_ConfigChannel+0x120>
 80093f6:	687b      	ldr	r3, [r7, #4]
 80093f8:	2b0c      	cmp	r3, #12
 80093fa:	d900      	bls.n	80093fe <HAL_TIM_PWM_ConfigChannel+0x3a>
 80093fc:	e095      	b.n	800952a <HAL_TIM_PWM_ConfigChannel+0x166>
 80093fe:	687b      	ldr	r3, [r7, #4]
 8009400:	2b08      	cmp	r3, #8
 8009402:	d04e      	beq.n	80094a2 <HAL_TIM_PWM_ConfigChannel+0xde>
 8009404:	687b      	ldr	r3, [r7, #4]
 8009406:	2b08      	cmp	r3, #8
 8009408:	d900      	bls.n	800940c <HAL_TIM_PWM_ConfigChannel+0x48>
 800940a:	e08e      	b.n	800952a <HAL_TIM_PWM_ConfigChannel+0x166>
 800940c:	687b      	ldr	r3, [r7, #4]
 800940e:	2b00      	cmp	r3, #0
 8009410:	d003      	beq.n	800941a <HAL_TIM_PWM_ConfigChannel+0x56>
 8009412:	687b      	ldr	r3, [r7, #4]
 8009414:	2b04      	cmp	r3, #4
 8009416:	d021      	beq.n	800945c <HAL_TIM_PWM_ConfigChannel+0x98>
 8009418:	e087      	b.n	800952a <HAL_TIM_PWM_ConfigChannel+0x166>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the Channel 1 in PWM mode */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 800941a:	68fb      	ldr	r3, [r7, #12]
 800941c:	681b      	ldr	r3, [r3, #0]
 800941e:	68ba      	ldr	r2, [r7, #8]
 8009420:	0011      	movs	r1, r2
 8009422:	0018      	movs	r0, r3
 8009424:	f000 fa5a 	bl	80098dc <TIM_OC1_SetConfig>

      /* Set the Preload enable bit for channel1 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 8009428:	68fb      	ldr	r3, [r7, #12]
 800942a:	681b      	ldr	r3, [r3, #0]
 800942c:	699a      	ldr	r2, [r3, #24]
 800942e:	68fb      	ldr	r3, [r7, #12]
 8009430:	681b      	ldr	r3, [r3, #0]
 8009432:	2108      	movs	r1, #8
 8009434:	430a      	orrs	r2, r1
 8009436:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 8009438:	68fb      	ldr	r3, [r7, #12]
 800943a:	681b      	ldr	r3, [r3, #0]
 800943c:	699a      	ldr	r2, [r3, #24]
 800943e:	68fb      	ldr	r3, [r7, #12]
 8009440:	681b      	ldr	r3, [r3, #0]
 8009442:	2104      	movs	r1, #4
 8009444:	438a      	bics	r2, r1
 8009446:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 8009448:	68fb      	ldr	r3, [r7, #12]
 800944a:	681b      	ldr	r3, [r3, #0]
 800944c:	6999      	ldr	r1, [r3, #24]
 800944e:	68bb      	ldr	r3, [r7, #8]
 8009450:	691a      	ldr	r2, [r3, #16]
 8009452:	68fb      	ldr	r3, [r7, #12]
 8009454:	681b      	ldr	r3, [r3, #0]
 8009456:	430a      	orrs	r2, r1
 8009458:	619a      	str	r2, [r3, #24]
      break;
 800945a:	e06b      	b.n	8009534 <HAL_TIM_PWM_ConfigChannel+0x170>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the Channel 2 in PWM mode */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 800945c:	68fb      	ldr	r3, [r7, #12]
 800945e:	681b      	ldr	r3, [r3, #0]
 8009460:	68ba      	ldr	r2, [r7, #8]
 8009462:	0011      	movs	r1, r2
 8009464:	0018      	movs	r0, r3
 8009466:	f000 fac1 	bl	80099ec <TIM_OC2_SetConfig>

      /* Set the Preload enable bit for channel2 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 800946a:	68fb      	ldr	r3, [r7, #12]
 800946c:	681b      	ldr	r3, [r3, #0]
 800946e:	699a      	ldr	r2, [r3, #24]
 8009470:	68fb      	ldr	r3, [r7, #12]
 8009472:	681b      	ldr	r3, [r3, #0]
 8009474:	2180      	movs	r1, #128	; 0x80
 8009476:	0109      	lsls	r1, r1, #4
 8009478:	430a      	orrs	r2, r1
 800947a:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 800947c:	68fb      	ldr	r3, [r7, #12]
 800947e:	681b      	ldr	r3, [r3, #0]
 8009480:	699a      	ldr	r2, [r3, #24]
 8009482:	68fb      	ldr	r3, [r7, #12]
 8009484:	681b      	ldr	r3, [r3, #0]
 8009486:	4931      	ldr	r1, [pc, #196]	; (800954c <HAL_TIM_PWM_ConfigChannel+0x188>)
 8009488:	400a      	ands	r2, r1
 800948a:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 800948c:	68fb      	ldr	r3, [r7, #12]
 800948e:	681b      	ldr	r3, [r3, #0]
 8009490:	6999      	ldr	r1, [r3, #24]
 8009492:	68bb      	ldr	r3, [r7, #8]
 8009494:	691b      	ldr	r3, [r3, #16]
 8009496:	021a      	lsls	r2, r3, #8
 8009498:	68fb      	ldr	r3, [r7, #12]
 800949a:	681b      	ldr	r3, [r3, #0]
 800949c:	430a      	orrs	r2, r1
 800949e:	619a      	str	r2, [r3, #24]
      break;
 80094a0:	e048      	b.n	8009534 <HAL_TIM_PWM_ConfigChannel+0x170>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the Channel 3 in PWM mode */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 80094a2:	68fb      	ldr	r3, [r7, #12]
 80094a4:	681b      	ldr	r3, [r3, #0]
 80094a6:	68ba      	ldr	r2, [r7, #8]
 80094a8:	0011      	movs	r1, r2
 80094aa:	0018      	movs	r0, r3
 80094ac:	f000 fb22 	bl	8009af4 <TIM_OC3_SetConfig>

      /* Set the Preload enable bit for channel3 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 80094b0:	68fb      	ldr	r3, [r7, #12]
 80094b2:	681b      	ldr	r3, [r3, #0]
 80094b4:	69da      	ldr	r2, [r3, #28]
 80094b6:	68fb      	ldr	r3, [r7, #12]
 80094b8:	681b      	ldr	r3, [r3, #0]
 80094ba:	2108      	movs	r1, #8
 80094bc:	430a      	orrs	r2, r1
 80094be:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 80094c0:	68fb      	ldr	r3, [r7, #12]
 80094c2:	681b      	ldr	r3, [r3, #0]
 80094c4:	69da      	ldr	r2, [r3, #28]
 80094c6:	68fb      	ldr	r3, [r7, #12]
 80094c8:	681b      	ldr	r3, [r3, #0]
 80094ca:	2104      	movs	r1, #4
 80094cc:	438a      	bics	r2, r1
 80094ce:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 80094d0:	68fb      	ldr	r3, [r7, #12]
 80094d2:	681b      	ldr	r3, [r3, #0]
 80094d4:	69d9      	ldr	r1, [r3, #28]
 80094d6:	68bb      	ldr	r3, [r7, #8]
 80094d8:	691a      	ldr	r2, [r3, #16]
 80094da:	68fb      	ldr	r3, [r7, #12]
 80094dc:	681b      	ldr	r3, [r3, #0]
 80094de:	430a      	orrs	r2, r1
 80094e0:	61da      	str	r2, [r3, #28]
      break;
 80094e2:	e027      	b.n	8009534 <HAL_TIM_PWM_ConfigChannel+0x170>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the Channel 4 in PWM mode */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 80094e4:	68fb      	ldr	r3, [r7, #12]
 80094e6:	681b      	ldr	r3, [r3, #0]
 80094e8:	68ba      	ldr	r2, [r7, #8]
 80094ea:	0011      	movs	r1, r2
 80094ec:	0018      	movs	r0, r3
 80094ee:	f000 fb87 	bl	8009c00 <TIM_OC4_SetConfig>

      /* Set the Preload enable bit for channel4 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 80094f2:	68fb      	ldr	r3, [r7, #12]
 80094f4:	681b      	ldr	r3, [r3, #0]
 80094f6:	69da      	ldr	r2, [r3, #28]
 80094f8:	68fb      	ldr	r3, [r7, #12]
 80094fa:	681b      	ldr	r3, [r3, #0]
 80094fc:	2180      	movs	r1, #128	; 0x80
 80094fe:	0109      	lsls	r1, r1, #4
 8009500:	430a      	orrs	r2, r1
 8009502:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 8009504:	68fb      	ldr	r3, [r7, #12]
 8009506:	681b      	ldr	r3, [r3, #0]
 8009508:	69da      	ldr	r2, [r3, #28]
 800950a:	68fb      	ldr	r3, [r7, #12]
 800950c:	681b      	ldr	r3, [r3, #0]
 800950e:	490f      	ldr	r1, [pc, #60]	; (800954c <HAL_TIM_PWM_ConfigChannel+0x188>)
 8009510:	400a      	ands	r2, r1
 8009512:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 8009514:	68fb      	ldr	r3, [r7, #12]
 8009516:	681b      	ldr	r3, [r3, #0]
 8009518:	69d9      	ldr	r1, [r3, #28]
 800951a:	68bb      	ldr	r3, [r7, #8]
 800951c:	691b      	ldr	r3, [r3, #16]
 800951e:	021a      	lsls	r2, r3, #8
 8009520:	68fb      	ldr	r3, [r7, #12]
 8009522:	681b      	ldr	r3, [r3, #0]
 8009524:	430a      	orrs	r2, r1
 8009526:	61da      	str	r2, [r3, #28]
      break;
 8009528:	e004      	b.n	8009534 <HAL_TIM_PWM_ConfigChannel+0x170>
    }

    default:
      status = HAL_ERROR;
 800952a:	2317      	movs	r3, #23
 800952c:	18fb      	adds	r3, r7, r3
 800952e:	2201      	movs	r2, #1
 8009530:	701a      	strb	r2, [r3, #0]
      break;
 8009532:	46c0      	nop			; (mov r8, r8)
  }

  __HAL_UNLOCK(htim);
 8009534:	68fb      	ldr	r3, [r7, #12]
 8009536:	223c      	movs	r2, #60	; 0x3c
 8009538:	2100      	movs	r1, #0
 800953a:	5499      	strb	r1, [r3, r2]

  return status;
 800953c:	2317      	movs	r3, #23
 800953e:	18fb      	adds	r3, r7, r3
 8009540:	781b      	ldrb	r3, [r3, #0]
}
 8009542:	0018      	movs	r0, r3
 8009544:	46bd      	mov	sp, r7
 8009546:	b006      	add	sp, #24
 8009548:	bd80      	pop	{r7, pc}
 800954a:	46c0      	nop			; (mov r8, r8)
 800954c:	fffffbff 	.word	0xfffffbff

08009550 <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, const TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 8009550:	b580      	push	{r7, lr}
 8009552:	b084      	sub	sp, #16
 8009554:	af00      	add	r7, sp, #0
 8009556:	6078      	str	r0, [r7, #4]
 8009558:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 800955a:	230f      	movs	r3, #15
 800955c:	18fb      	adds	r3, r7, r3
 800955e:	2200      	movs	r2, #0
 8009560:	701a      	strb	r2, [r3, #0]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 8009562:	687b      	ldr	r3, [r7, #4]
 8009564:	223c      	movs	r2, #60	; 0x3c
 8009566:	5c9b      	ldrb	r3, [r3, r2]
 8009568:	2b01      	cmp	r3, #1
 800956a:	d101      	bne.n	8009570 <HAL_TIM_ConfigClockSource+0x20>
 800956c:	2302      	movs	r3, #2
 800956e:	e0bc      	b.n	80096ea <HAL_TIM_ConfigClockSource+0x19a>
 8009570:	687b      	ldr	r3, [r7, #4]
 8009572:	223c      	movs	r2, #60	; 0x3c
 8009574:	2101      	movs	r1, #1
 8009576:	5499      	strb	r1, [r3, r2]

  htim->State = HAL_TIM_STATE_BUSY;
 8009578:	687b      	ldr	r3, [r7, #4]
 800957a:	223d      	movs	r2, #61	; 0x3d
 800957c:	2102      	movs	r1, #2
 800957e:	5499      	strb	r1, [r3, r2]

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 8009580:	687b      	ldr	r3, [r7, #4]
 8009582:	681b      	ldr	r3, [r3, #0]
 8009584:	689b      	ldr	r3, [r3, #8]
 8009586:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 8009588:	68bb      	ldr	r3, [r7, #8]
 800958a:	2277      	movs	r2, #119	; 0x77
 800958c:	4393      	bics	r3, r2
 800958e:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8009590:	68bb      	ldr	r3, [r7, #8]
 8009592:	4a58      	ldr	r2, [pc, #352]	; (80096f4 <HAL_TIM_ConfigClockSource+0x1a4>)
 8009594:	4013      	ands	r3, r2
 8009596:	60bb      	str	r3, [r7, #8]
  htim->Instance->SMCR = tmpsmcr;
 8009598:	687b      	ldr	r3, [r7, #4]
 800959a:	681b      	ldr	r3, [r3, #0]
 800959c:	68ba      	ldr	r2, [r7, #8]
 800959e:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 80095a0:	683b      	ldr	r3, [r7, #0]
 80095a2:	681b      	ldr	r3, [r3, #0]
 80095a4:	2280      	movs	r2, #128	; 0x80
 80095a6:	0192      	lsls	r2, r2, #6
 80095a8:	4293      	cmp	r3, r2
 80095aa:	d040      	beq.n	800962e <HAL_TIM_ConfigClockSource+0xde>
 80095ac:	2280      	movs	r2, #128	; 0x80
 80095ae:	0192      	lsls	r2, r2, #6
 80095b0:	4293      	cmp	r3, r2
 80095b2:	d900      	bls.n	80095b6 <HAL_TIM_ConfigClockSource+0x66>
 80095b4:	e088      	b.n	80096c8 <HAL_TIM_ConfigClockSource+0x178>
 80095b6:	2280      	movs	r2, #128	; 0x80
 80095b8:	0152      	lsls	r2, r2, #5
 80095ba:	4293      	cmp	r3, r2
 80095bc:	d100      	bne.n	80095c0 <HAL_TIM_ConfigClockSource+0x70>
 80095be:	e088      	b.n	80096d2 <HAL_TIM_ConfigClockSource+0x182>
 80095c0:	2280      	movs	r2, #128	; 0x80
 80095c2:	0152      	lsls	r2, r2, #5
 80095c4:	4293      	cmp	r3, r2
 80095c6:	d900      	bls.n	80095ca <HAL_TIM_ConfigClockSource+0x7a>
 80095c8:	e07e      	b.n	80096c8 <HAL_TIM_ConfigClockSource+0x178>
 80095ca:	2b70      	cmp	r3, #112	; 0x70
 80095cc:	d018      	beq.n	8009600 <HAL_TIM_ConfigClockSource+0xb0>
 80095ce:	d900      	bls.n	80095d2 <HAL_TIM_ConfigClockSource+0x82>
 80095d0:	e07a      	b.n	80096c8 <HAL_TIM_ConfigClockSource+0x178>
 80095d2:	2b60      	cmp	r3, #96	; 0x60
 80095d4:	d04f      	beq.n	8009676 <HAL_TIM_ConfigClockSource+0x126>
 80095d6:	d900      	bls.n	80095da <HAL_TIM_ConfigClockSource+0x8a>
 80095d8:	e076      	b.n	80096c8 <HAL_TIM_ConfigClockSource+0x178>
 80095da:	2b50      	cmp	r3, #80	; 0x50
 80095dc:	d03b      	beq.n	8009656 <HAL_TIM_ConfigClockSource+0x106>
 80095de:	d900      	bls.n	80095e2 <HAL_TIM_ConfigClockSource+0x92>
 80095e0:	e072      	b.n	80096c8 <HAL_TIM_ConfigClockSource+0x178>
 80095e2:	2b40      	cmp	r3, #64	; 0x40
 80095e4:	d057      	beq.n	8009696 <HAL_TIM_ConfigClockSource+0x146>
 80095e6:	d900      	bls.n	80095ea <HAL_TIM_ConfigClockSource+0x9a>
 80095e8:	e06e      	b.n	80096c8 <HAL_TIM_ConfigClockSource+0x178>
 80095ea:	2b30      	cmp	r3, #48	; 0x30
 80095ec:	d063      	beq.n	80096b6 <HAL_TIM_ConfigClockSource+0x166>
 80095ee:	d86b      	bhi.n	80096c8 <HAL_TIM_ConfigClockSource+0x178>
 80095f0:	2b20      	cmp	r3, #32
 80095f2:	d060      	beq.n	80096b6 <HAL_TIM_ConfigClockSource+0x166>
 80095f4:	d868      	bhi.n	80096c8 <HAL_TIM_ConfigClockSource+0x178>
 80095f6:	2b00      	cmp	r3, #0
 80095f8:	d05d      	beq.n	80096b6 <HAL_TIM_ConfigClockSource+0x166>
 80095fa:	2b10      	cmp	r3, #16
 80095fc:	d05b      	beq.n	80096b6 <HAL_TIM_ConfigClockSource+0x166>
 80095fe:	e063      	b.n	80096c8 <HAL_TIM_ConfigClockSource+0x178>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8009600:	687b      	ldr	r3, [r7, #4]
 8009602:	6818      	ldr	r0, [r3, #0]
 8009604:	683b      	ldr	r3, [r7, #0]
 8009606:	6899      	ldr	r1, [r3, #8]
 8009608:	683b      	ldr	r3, [r7, #0]
 800960a:	685a      	ldr	r2, [r3, #4]
 800960c:	683b      	ldr	r3, [r7, #0]
 800960e:	68db      	ldr	r3, [r3, #12]
 8009610:	f000 fbda 	bl	8009dc8 <TIM_ETR_SetConfig>
                        sClockSourceConfig->ClockPrescaler,
                        sClockSourceConfig->ClockPolarity,
                        sClockSourceConfig->ClockFilter);

      /* Select the External clock mode1 and the ETRF trigger */
      tmpsmcr = htim->Instance->SMCR;
 8009614:	687b      	ldr	r3, [r7, #4]
 8009616:	681b      	ldr	r3, [r3, #0]
 8009618:	689b      	ldr	r3, [r3, #8]
 800961a:	60bb      	str	r3, [r7, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 800961c:	68bb      	ldr	r3, [r7, #8]
 800961e:	2277      	movs	r2, #119	; 0x77
 8009620:	4313      	orrs	r3, r2
 8009622:	60bb      	str	r3, [r7, #8]
      /* Write to TIMx SMCR */
      htim->Instance->SMCR = tmpsmcr;
 8009624:	687b      	ldr	r3, [r7, #4]
 8009626:	681b      	ldr	r3, [r3, #0]
 8009628:	68ba      	ldr	r2, [r7, #8]
 800962a:	609a      	str	r2, [r3, #8]
      break;
 800962c:	e052      	b.n	80096d4 <HAL_TIM_ConfigClockSource+0x184>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 800962e:	687b      	ldr	r3, [r7, #4]
 8009630:	6818      	ldr	r0, [r3, #0]
 8009632:	683b      	ldr	r3, [r7, #0]
 8009634:	6899      	ldr	r1, [r3, #8]
 8009636:	683b      	ldr	r3, [r7, #0]
 8009638:	685a      	ldr	r2, [r3, #4]
 800963a:	683b      	ldr	r3, [r7, #0]
 800963c:	68db      	ldr	r3, [r3, #12]
 800963e:	f000 fbc3 	bl	8009dc8 <TIM_ETR_SetConfig>
                        sClockSourceConfig->ClockPrescaler,
                        sClockSourceConfig->ClockPolarity,
                        sClockSourceConfig->ClockFilter);
      /* Enable the External clock mode2 */
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 8009642:	687b      	ldr	r3, [r7, #4]
 8009644:	681b      	ldr	r3, [r3, #0]
 8009646:	689a      	ldr	r2, [r3, #8]
 8009648:	687b      	ldr	r3, [r7, #4]
 800964a:	681b      	ldr	r3, [r3, #0]
 800964c:	2180      	movs	r1, #128	; 0x80
 800964e:	01c9      	lsls	r1, r1, #7
 8009650:	430a      	orrs	r2, r1
 8009652:	609a      	str	r2, [r3, #8]
      break;
 8009654:	e03e      	b.n	80096d4 <HAL_TIM_ConfigClockSource+0x184>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 8009656:	687b      	ldr	r3, [r7, #4]
 8009658:	6818      	ldr	r0, [r3, #0]
 800965a:	683b      	ldr	r3, [r7, #0]
 800965c:	6859      	ldr	r1, [r3, #4]
 800965e:	683b      	ldr	r3, [r7, #0]
 8009660:	68db      	ldr	r3, [r3, #12]
 8009662:	001a      	movs	r2, r3
 8009664:	f000 fb36 	bl	8009cd4 <TIM_TI1_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 8009668:	687b      	ldr	r3, [r7, #4]
 800966a:	681b      	ldr	r3, [r3, #0]
 800966c:	2150      	movs	r1, #80	; 0x50
 800966e:	0018      	movs	r0, r3
 8009670:	f000 fb90 	bl	8009d94 <TIM_ITRx_SetConfig>
      break;
 8009674:	e02e      	b.n	80096d4 <HAL_TIM_ConfigClockSource+0x184>

      /* Check TI2 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI2_ConfigInputStage(htim->Instance,
 8009676:	687b      	ldr	r3, [r7, #4]
 8009678:	6818      	ldr	r0, [r3, #0]
 800967a:	683b      	ldr	r3, [r7, #0]
 800967c:	6859      	ldr	r1, [r3, #4]
 800967e:	683b      	ldr	r3, [r7, #0]
 8009680:	68db      	ldr	r3, [r3, #12]
 8009682:	001a      	movs	r2, r3
 8009684:	f000 fb54 	bl	8009d30 <TIM_TI2_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 8009688:	687b      	ldr	r3, [r7, #4]
 800968a:	681b      	ldr	r3, [r3, #0]
 800968c:	2160      	movs	r1, #96	; 0x60
 800968e:	0018      	movs	r0, r3
 8009690:	f000 fb80 	bl	8009d94 <TIM_ITRx_SetConfig>
      break;
 8009694:	e01e      	b.n	80096d4 <HAL_TIM_ConfigClockSource+0x184>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 8009696:	687b      	ldr	r3, [r7, #4]
 8009698:	6818      	ldr	r0, [r3, #0]
 800969a:	683b      	ldr	r3, [r7, #0]
 800969c:	6859      	ldr	r1, [r3, #4]
 800969e:	683b      	ldr	r3, [r7, #0]
 80096a0:	68db      	ldr	r3, [r3, #12]
 80096a2:	001a      	movs	r2, r3
 80096a4:	f000 fb16 	bl	8009cd4 <TIM_TI1_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 80096a8:	687b      	ldr	r3, [r7, #4]
 80096aa:	681b      	ldr	r3, [r3, #0]
 80096ac:	2140      	movs	r1, #64	; 0x40
 80096ae:	0018      	movs	r0, r3
 80096b0:	f000 fb70 	bl	8009d94 <TIM_ITRx_SetConfig>
      break;
 80096b4:	e00e      	b.n	80096d4 <HAL_TIM_ConfigClockSource+0x184>
    case TIM_CLOCKSOURCE_ITR3:
    {
      /* Check whether or not the timer instance supports internal trigger input */
      assert_param(IS_TIM_CLOCKSOURCE_ITRX_INSTANCE(htim->Instance));

      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 80096b6:	687b      	ldr	r3, [r7, #4]
 80096b8:	681a      	ldr	r2, [r3, #0]
 80096ba:	683b      	ldr	r3, [r7, #0]
 80096bc:	681b      	ldr	r3, [r3, #0]
 80096be:	0019      	movs	r1, r3
 80096c0:	0010      	movs	r0, r2
 80096c2:	f000 fb67 	bl	8009d94 <TIM_ITRx_SetConfig>
      break;
 80096c6:	e005      	b.n	80096d4 <HAL_TIM_ConfigClockSource+0x184>
    }

    default:
      status = HAL_ERROR;
 80096c8:	230f      	movs	r3, #15
 80096ca:	18fb      	adds	r3, r7, r3
 80096cc:	2201      	movs	r2, #1
 80096ce:	701a      	strb	r2, [r3, #0]
      break;
 80096d0:	e000      	b.n	80096d4 <HAL_TIM_ConfigClockSource+0x184>
      break;
 80096d2:	46c0      	nop			; (mov r8, r8)
  }
  htim->State = HAL_TIM_STATE_READY;
 80096d4:	687b      	ldr	r3, [r7, #4]
 80096d6:	223d      	movs	r2, #61	; 0x3d
 80096d8:	2101      	movs	r1, #1
 80096da:	5499      	strb	r1, [r3, r2]

  __HAL_UNLOCK(htim);
 80096dc:	687b      	ldr	r3, [r7, #4]
 80096de:	223c      	movs	r2, #60	; 0x3c
 80096e0:	2100      	movs	r1, #0
 80096e2:	5499      	strb	r1, [r3, r2]

  return status;
 80096e4:	230f      	movs	r3, #15
 80096e6:	18fb      	adds	r3, r7, r3
 80096e8:	781b      	ldrb	r3, [r3, #0]
}
 80096ea:	0018      	movs	r0, r3
 80096ec:	46bd      	mov	sp, r7
 80096ee:	b004      	add	sp, #16
 80096f0:	bd80      	pop	{r7, pc}
 80096f2:	46c0      	nop			; (mov r8, r8)
 80096f4:	ffff00ff 	.word	0xffff00ff

080096f8 <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 80096f8:	b580      	push	{r7, lr}
 80096fa:	b082      	sub	sp, #8
 80096fc:	af00      	add	r7, sp, #0
 80096fe:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 8009700:	46c0      	nop			; (mov r8, r8)
 8009702:	46bd      	mov	sp, r7
 8009704:	b002      	add	sp, #8
 8009706:	bd80      	pop	{r7, pc}

08009708 <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 8009708:	b580      	push	{r7, lr}
 800970a:	b082      	sub	sp, #8
 800970c:	af00      	add	r7, sp, #0
 800970e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 8009710:	46c0      	nop			; (mov r8, r8)
 8009712:	46bd      	mov	sp, r7
 8009714:	b002      	add	sp, #8
 8009716:	bd80      	pop	{r7, pc}

08009718 <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 8009718:	b580      	push	{r7, lr}
 800971a:	b082      	sub	sp, #8
 800971c:	af00      	add	r7, sp, #0
 800971e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 8009720:	46c0      	nop			; (mov r8, r8)
 8009722:	46bd      	mov	sp, r7
 8009724:	b002      	add	sp, #8
 8009726:	bd80      	pop	{r7, pc}

08009728 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 8009728:	b580      	push	{r7, lr}
 800972a:	b082      	sub	sp, #8
 800972c:	af00      	add	r7, sp, #0
 800972e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 8009730:	46c0      	nop			; (mov r8, r8)
 8009732:	46bd      	mov	sp, r7
 8009734:	b002      	add	sp, #8
 8009736:	bd80      	pop	{r7, pc}

08009738 <HAL_TIM_ErrorCallback>:
  * @brief  Timer error callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_ErrorCallback(TIM_HandleTypeDef *htim)
{
 8009738:	b580      	push	{r7, lr}
 800973a:	b082      	sub	sp, #8
 800973c:	af00      	add	r7, sp, #0
 800973e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_ErrorCallback could be implemented in the user file
   */
}
 8009740:	46c0      	nop			; (mov r8, r8)
 8009742:	46bd      	mov	sp, r7
 8009744:	b002      	add	sp, #8
 8009746:	bd80      	pop	{r7, pc}

08009748 <TIM_DMAError>:
  * @brief  TIM DMA error callback
  * @param  hdma pointer to DMA handle.
  * @retval None
  */
void TIM_DMAError(DMA_HandleTypeDef *hdma)
{
 8009748:	b580      	push	{r7, lr}
 800974a:	b084      	sub	sp, #16
 800974c:	af00      	add	r7, sp, #0
 800974e:	6078      	str	r0, [r7, #4]
  TIM_HandleTypeDef *htim = (TIM_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8009750:	687b      	ldr	r3, [r7, #4]
 8009752:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8009754:	60fb      	str	r3, [r7, #12]

  if (hdma == htim->hdma[TIM_DMA_ID_CC1])
 8009756:	68fb      	ldr	r3, [r7, #12]
 8009758:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800975a:	687a      	ldr	r2, [r7, #4]
 800975c:	429a      	cmp	r2, r3
 800975e:	d107      	bne.n	8009770 <TIM_DMAError+0x28>
  {
    htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8009760:	68fb      	ldr	r3, [r7, #12]
 8009762:	2201      	movs	r2, #1
 8009764:	771a      	strb	r2, [r3, #28]
    TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_READY);
 8009766:	68fb      	ldr	r3, [r7, #12]
 8009768:	223e      	movs	r2, #62	; 0x3e
 800976a:	2101      	movs	r1, #1
 800976c:	5499      	strb	r1, [r3, r2]
 800976e:	e02a      	b.n	80097c6 <TIM_DMAError+0x7e>
  }
  else if (hdma == htim->hdma[TIM_DMA_ID_CC2])
 8009770:	68fb      	ldr	r3, [r7, #12]
 8009772:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8009774:	687a      	ldr	r2, [r7, #4]
 8009776:	429a      	cmp	r2, r3
 8009778:	d107      	bne.n	800978a <TIM_DMAError+0x42>
  {
    htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 800977a:	68fb      	ldr	r3, [r7, #12]
 800977c:	2202      	movs	r2, #2
 800977e:	771a      	strb	r2, [r3, #28]
    TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_READY);
 8009780:	68fb      	ldr	r3, [r7, #12]
 8009782:	223f      	movs	r2, #63	; 0x3f
 8009784:	2101      	movs	r1, #1
 8009786:	5499      	strb	r1, [r3, r2]
 8009788:	e01d      	b.n	80097c6 <TIM_DMAError+0x7e>
  }
  else if (hdma == htim->hdma[TIM_DMA_ID_CC3])
 800978a:	68fb      	ldr	r3, [r7, #12]
 800978c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800978e:	687a      	ldr	r2, [r7, #4]
 8009790:	429a      	cmp	r2, r3
 8009792:	d107      	bne.n	80097a4 <TIM_DMAError+0x5c>
  {
    htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8009794:	68fb      	ldr	r3, [r7, #12]
 8009796:	2204      	movs	r2, #4
 8009798:	771a      	strb	r2, [r3, #28]
    TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_3, HAL_TIM_CHANNEL_STATE_READY);
 800979a:	68fb      	ldr	r3, [r7, #12]
 800979c:	2240      	movs	r2, #64	; 0x40
 800979e:	2101      	movs	r1, #1
 80097a0:	5499      	strb	r1, [r3, r2]
 80097a2:	e010      	b.n	80097c6 <TIM_DMAError+0x7e>
  }
  else if (hdma == htim->hdma[TIM_DMA_ID_CC4])
 80097a4:	68fb      	ldr	r3, [r7, #12]
 80097a6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80097a8:	687a      	ldr	r2, [r7, #4]
 80097aa:	429a      	cmp	r2, r3
 80097ac:	d107      	bne.n	80097be <TIM_DMAError+0x76>
  {
    htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 80097ae:	68fb      	ldr	r3, [r7, #12]
 80097b0:	2208      	movs	r2, #8
 80097b2:	771a      	strb	r2, [r3, #28]
    TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_4, HAL_TIM_CHANNEL_STATE_READY);
 80097b4:	68fb      	ldr	r3, [r7, #12]
 80097b6:	2241      	movs	r2, #65	; 0x41
 80097b8:	2101      	movs	r1, #1
 80097ba:	5499      	strb	r1, [r3, r2]
 80097bc:	e003      	b.n	80097c6 <TIM_DMAError+0x7e>
  }
  else
  {
    htim->State = HAL_TIM_STATE_READY;
 80097be:	68fb      	ldr	r3, [r7, #12]
 80097c0:	223d      	movs	r2, #61	; 0x3d
 80097c2:	2101      	movs	r1, #1
 80097c4:	5499      	strb	r1, [r3, r2]
  }

#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
  htim->ErrorCallback(htim);
#else
  HAL_TIM_ErrorCallback(htim);
 80097c6:	68fb      	ldr	r3, [r7, #12]
 80097c8:	0018      	movs	r0, r3
 80097ca:	f7ff ffb5 	bl	8009738 <HAL_TIM_ErrorCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */

  htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80097ce:	68fb      	ldr	r3, [r7, #12]
 80097d0:	2200      	movs	r2, #0
 80097d2:	771a      	strb	r2, [r3, #28]
}
 80097d4:	46c0      	nop			; (mov r8, r8)
 80097d6:	46bd      	mov	sp, r7
 80097d8:	b004      	add	sp, #16
 80097da:	bd80      	pop	{r7, pc}

080097dc <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 80097dc:	b580      	push	{r7, lr}
 80097de:	b084      	sub	sp, #16
 80097e0:	af00      	add	r7, sp, #0
 80097e2:	6078      	str	r0, [r7, #4]
 80097e4:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 80097e6:	687b      	ldr	r3, [r7, #4]
 80097e8:	681b      	ldr	r3, [r3, #0]
 80097ea:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 80097ec:	687b      	ldr	r3, [r7, #4]
 80097ee:	4a34      	ldr	r2, [pc, #208]	; (80098c0 <TIM_Base_SetConfig+0xe4>)
 80097f0:	4293      	cmp	r3, r2
 80097f2:	d008      	beq.n	8009806 <TIM_Base_SetConfig+0x2a>
 80097f4:	687a      	ldr	r2, [r7, #4]
 80097f6:	2380      	movs	r3, #128	; 0x80
 80097f8:	05db      	lsls	r3, r3, #23
 80097fa:	429a      	cmp	r2, r3
 80097fc:	d003      	beq.n	8009806 <TIM_Base_SetConfig+0x2a>
 80097fe:	687b      	ldr	r3, [r7, #4]
 8009800:	4a30      	ldr	r2, [pc, #192]	; (80098c4 <TIM_Base_SetConfig+0xe8>)
 8009802:	4293      	cmp	r3, r2
 8009804:	d108      	bne.n	8009818 <TIM_Base_SetConfig+0x3c>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8009806:	68fb      	ldr	r3, [r7, #12]
 8009808:	2270      	movs	r2, #112	; 0x70
 800980a:	4393      	bics	r3, r2
 800980c:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 800980e:	683b      	ldr	r3, [r7, #0]
 8009810:	685b      	ldr	r3, [r3, #4]
 8009812:	68fa      	ldr	r2, [r7, #12]
 8009814:	4313      	orrs	r3, r2
 8009816:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8009818:	687b      	ldr	r3, [r7, #4]
 800981a:	4a29      	ldr	r2, [pc, #164]	; (80098c0 <TIM_Base_SetConfig+0xe4>)
 800981c:	4293      	cmp	r3, r2
 800981e:	d018      	beq.n	8009852 <TIM_Base_SetConfig+0x76>
 8009820:	687a      	ldr	r2, [r7, #4]
 8009822:	2380      	movs	r3, #128	; 0x80
 8009824:	05db      	lsls	r3, r3, #23
 8009826:	429a      	cmp	r2, r3
 8009828:	d013      	beq.n	8009852 <TIM_Base_SetConfig+0x76>
 800982a:	687b      	ldr	r3, [r7, #4]
 800982c:	4a25      	ldr	r2, [pc, #148]	; (80098c4 <TIM_Base_SetConfig+0xe8>)
 800982e:	4293      	cmp	r3, r2
 8009830:	d00f      	beq.n	8009852 <TIM_Base_SetConfig+0x76>
 8009832:	687b      	ldr	r3, [r7, #4]
 8009834:	4a24      	ldr	r2, [pc, #144]	; (80098c8 <TIM_Base_SetConfig+0xec>)
 8009836:	4293      	cmp	r3, r2
 8009838:	d00b      	beq.n	8009852 <TIM_Base_SetConfig+0x76>
 800983a:	687b      	ldr	r3, [r7, #4]
 800983c:	4a23      	ldr	r2, [pc, #140]	; (80098cc <TIM_Base_SetConfig+0xf0>)
 800983e:	4293      	cmp	r3, r2
 8009840:	d007      	beq.n	8009852 <TIM_Base_SetConfig+0x76>
 8009842:	687b      	ldr	r3, [r7, #4]
 8009844:	4a22      	ldr	r2, [pc, #136]	; (80098d0 <TIM_Base_SetConfig+0xf4>)
 8009846:	4293      	cmp	r3, r2
 8009848:	d003      	beq.n	8009852 <TIM_Base_SetConfig+0x76>
 800984a:	687b      	ldr	r3, [r7, #4]
 800984c:	4a21      	ldr	r2, [pc, #132]	; (80098d4 <TIM_Base_SetConfig+0xf8>)
 800984e:	4293      	cmp	r3, r2
 8009850:	d108      	bne.n	8009864 <TIM_Base_SetConfig+0x88>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8009852:	68fb      	ldr	r3, [r7, #12]
 8009854:	4a20      	ldr	r2, [pc, #128]	; (80098d8 <TIM_Base_SetConfig+0xfc>)
 8009856:	4013      	ands	r3, r2
 8009858:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 800985a:	683b      	ldr	r3, [r7, #0]
 800985c:	68db      	ldr	r3, [r3, #12]
 800985e:	68fa      	ldr	r2, [r7, #12]
 8009860:	4313      	orrs	r3, r2
 8009862:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8009864:	68fb      	ldr	r3, [r7, #12]
 8009866:	2280      	movs	r2, #128	; 0x80
 8009868:	4393      	bics	r3, r2
 800986a:	001a      	movs	r2, r3
 800986c:	683b      	ldr	r3, [r7, #0]
 800986e:	695b      	ldr	r3, [r3, #20]
 8009870:	4313      	orrs	r3, r2
 8009872:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8009874:	687b      	ldr	r3, [r7, #4]
 8009876:	68fa      	ldr	r2, [r7, #12]
 8009878:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 800987a:	683b      	ldr	r3, [r7, #0]
 800987c:	689a      	ldr	r2, [r3, #8]
 800987e:	687b      	ldr	r3, [r7, #4]
 8009880:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8009882:	683b      	ldr	r3, [r7, #0]
 8009884:	681a      	ldr	r2, [r3, #0]
 8009886:	687b      	ldr	r3, [r7, #4]
 8009888:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 800988a:	687b      	ldr	r3, [r7, #4]
 800988c:	4a0c      	ldr	r2, [pc, #48]	; (80098c0 <TIM_Base_SetConfig+0xe4>)
 800988e:	4293      	cmp	r3, r2
 8009890:	d00b      	beq.n	80098aa <TIM_Base_SetConfig+0xce>
 8009892:	687b      	ldr	r3, [r7, #4]
 8009894:	4a0d      	ldr	r2, [pc, #52]	; (80098cc <TIM_Base_SetConfig+0xf0>)
 8009896:	4293      	cmp	r3, r2
 8009898:	d007      	beq.n	80098aa <TIM_Base_SetConfig+0xce>
 800989a:	687b      	ldr	r3, [r7, #4]
 800989c:	4a0c      	ldr	r2, [pc, #48]	; (80098d0 <TIM_Base_SetConfig+0xf4>)
 800989e:	4293      	cmp	r3, r2
 80098a0:	d003      	beq.n	80098aa <TIM_Base_SetConfig+0xce>
 80098a2:	687b      	ldr	r3, [r7, #4]
 80098a4:	4a0b      	ldr	r2, [pc, #44]	; (80098d4 <TIM_Base_SetConfig+0xf8>)
 80098a6:	4293      	cmp	r3, r2
 80098a8:	d103      	bne.n	80098b2 <TIM_Base_SetConfig+0xd6>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 80098aa:	683b      	ldr	r3, [r7, #0]
 80098ac:	691a      	ldr	r2, [r3, #16]
 80098ae:	687b      	ldr	r3, [r7, #4]
 80098b0:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 80098b2:	687b      	ldr	r3, [r7, #4]
 80098b4:	2201      	movs	r2, #1
 80098b6:	615a      	str	r2, [r3, #20]
}
 80098b8:	46c0      	nop			; (mov r8, r8)
 80098ba:	46bd      	mov	sp, r7
 80098bc:	b004      	add	sp, #16
 80098be:	bd80      	pop	{r7, pc}
 80098c0:	40012c00 	.word	0x40012c00
 80098c4:	40000400 	.word	0x40000400
 80098c8:	40002000 	.word	0x40002000
 80098cc:	40014000 	.word	0x40014000
 80098d0:	40014400 	.word	0x40014400
 80098d4:	40014800 	.word	0x40014800
 80098d8:	fffffcff 	.word	0xfffffcff

080098dc <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 80098dc:	b580      	push	{r7, lr}
 80098de:	b086      	sub	sp, #24
 80098e0:	af00      	add	r7, sp, #0
 80098e2:	6078      	str	r0, [r7, #4]
 80098e4:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 80098e6:	687b      	ldr	r3, [r7, #4]
 80098e8:	6a1b      	ldr	r3, [r3, #32]
 80098ea:	2201      	movs	r2, #1
 80098ec:	4393      	bics	r3, r2
 80098ee:	001a      	movs	r2, r3
 80098f0:	687b      	ldr	r3, [r7, #4]
 80098f2:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80098f4:	687b      	ldr	r3, [r7, #4]
 80098f6:	6a1b      	ldr	r3, [r3, #32]
 80098f8:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 80098fa:	687b      	ldr	r3, [r7, #4]
 80098fc:	685b      	ldr	r3, [r3, #4]
 80098fe:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8009900:	687b      	ldr	r3, [r7, #4]
 8009902:	699b      	ldr	r3, [r3, #24]
 8009904:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
 8009906:	68fb      	ldr	r3, [r7, #12]
 8009908:	2270      	movs	r2, #112	; 0x70
 800990a:	4393      	bics	r3, r2
 800990c:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 800990e:	68fb      	ldr	r3, [r7, #12]
 8009910:	2203      	movs	r2, #3
 8009912:	4393      	bics	r3, r2
 8009914:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8009916:	683b      	ldr	r3, [r7, #0]
 8009918:	681b      	ldr	r3, [r3, #0]
 800991a:	68fa      	ldr	r2, [r7, #12]
 800991c:	4313      	orrs	r3, r2
 800991e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 8009920:	697b      	ldr	r3, [r7, #20]
 8009922:	2202      	movs	r2, #2
 8009924:	4393      	bics	r3, r2
 8009926:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 8009928:	683b      	ldr	r3, [r7, #0]
 800992a:	689b      	ldr	r3, [r3, #8]
 800992c:	697a      	ldr	r2, [r7, #20]
 800992e:	4313      	orrs	r3, r2
 8009930:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 8009932:	687b      	ldr	r3, [r7, #4]
 8009934:	4a27      	ldr	r2, [pc, #156]	; (80099d4 <TIM_OC1_SetConfig+0xf8>)
 8009936:	4293      	cmp	r3, r2
 8009938:	d00b      	beq.n	8009952 <TIM_OC1_SetConfig+0x76>
 800993a:	687b      	ldr	r3, [r7, #4]
 800993c:	4a26      	ldr	r2, [pc, #152]	; (80099d8 <TIM_OC1_SetConfig+0xfc>)
 800993e:	4293      	cmp	r3, r2
 8009940:	d007      	beq.n	8009952 <TIM_OC1_SetConfig+0x76>
 8009942:	687b      	ldr	r3, [r7, #4]
 8009944:	4a25      	ldr	r2, [pc, #148]	; (80099dc <TIM_OC1_SetConfig+0x100>)
 8009946:	4293      	cmp	r3, r2
 8009948:	d003      	beq.n	8009952 <TIM_OC1_SetConfig+0x76>
 800994a:	687b      	ldr	r3, [r7, #4]
 800994c:	4a24      	ldr	r2, [pc, #144]	; (80099e0 <TIM_OC1_SetConfig+0x104>)
 800994e:	4293      	cmp	r3, r2
 8009950:	d10c      	bne.n	800996c <TIM_OC1_SetConfig+0x90>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
 8009952:	697b      	ldr	r3, [r7, #20]
 8009954:	2208      	movs	r2, #8
 8009956:	4393      	bics	r3, r2
 8009958:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 800995a:	683b      	ldr	r3, [r7, #0]
 800995c:	68db      	ldr	r3, [r3, #12]
 800995e:	697a      	ldr	r2, [r7, #20]
 8009960:	4313      	orrs	r3, r2
 8009962:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
 8009964:	697b      	ldr	r3, [r7, #20]
 8009966:	2204      	movs	r2, #4
 8009968:	4393      	bics	r3, r2
 800996a:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800996c:	687b      	ldr	r3, [r7, #4]
 800996e:	4a19      	ldr	r2, [pc, #100]	; (80099d4 <TIM_OC1_SetConfig+0xf8>)
 8009970:	4293      	cmp	r3, r2
 8009972:	d00b      	beq.n	800998c <TIM_OC1_SetConfig+0xb0>
 8009974:	687b      	ldr	r3, [r7, #4]
 8009976:	4a18      	ldr	r2, [pc, #96]	; (80099d8 <TIM_OC1_SetConfig+0xfc>)
 8009978:	4293      	cmp	r3, r2
 800997a:	d007      	beq.n	800998c <TIM_OC1_SetConfig+0xb0>
 800997c:	687b      	ldr	r3, [r7, #4]
 800997e:	4a17      	ldr	r2, [pc, #92]	; (80099dc <TIM_OC1_SetConfig+0x100>)
 8009980:	4293      	cmp	r3, r2
 8009982:	d003      	beq.n	800998c <TIM_OC1_SetConfig+0xb0>
 8009984:	687b      	ldr	r3, [r7, #4]
 8009986:	4a16      	ldr	r2, [pc, #88]	; (80099e0 <TIM_OC1_SetConfig+0x104>)
 8009988:	4293      	cmp	r3, r2
 800998a:	d111      	bne.n	80099b0 <TIM_OC1_SetConfig+0xd4>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS1;
 800998c:	693b      	ldr	r3, [r7, #16]
 800998e:	4a15      	ldr	r2, [pc, #84]	; (80099e4 <TIM_OC1_SetConfig+0x108>)
 8009990:	4013      	ands	r3, r2
 8009992:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 8009994:	693b      	ldr	r3, [r7, #16]
 8009996:	4a14      	ldr	r2, [pc, #80]	; (80099e8 <TIM_OC1_SetConfig+0x10c>)
 8009998:	4013      	ands	r3, r2
 800999a:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
 800999c:	683b      	ldr	r3, [r7, #0]
 800999e:	695b      	ldr	r3, [r3, #20]
 80099a0:	693a      	ldr	r2, [r7, #16]
 80099a2:	4313      	orrs	r3, r2
 80099a4:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 80099a6:	683b      	ldr	r3, [r7, #0]
 80099a8:	699b      	ldr	r3, [r3, #24]
 80099aa:	693a      	ldr	r2, [r7, #16]
 80099ac:	4313      	orrs	r3, r2
 80099ae:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80099b0:	687b      	ldr	r3, [r7, #4]
 80099b2:	693a      	ldr	r2, [r7, #16]
 80099b4:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 80099b6:	687b      	ldr	r3, [r7, #4]
 80099b8:	68fa      	ldr	r2, [r7, #12]
 80099ba:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 80099bc:	683b      	ldr	r3, [r7, #0]
 80099be:	685a      	ldr	r2, [r3, #4]
 80099c0:	687b      	ldr	r3, [r7, #4]
 80099c2:	635a      	str	r2, [r3, #52]	; 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80099c4:	687b      	ldr	r3, [r7, #4]
 80099c6:	697a      	ldr	r2, [r7, #20]
 80099c8:	621a      	str	r2, [r3, #32]
}
 80099ca:	46c0      	nop			; (mov r8, r8)
 80099cc:	46bd      	mov	sp, r7
 80099ce:	b006      	add	sp, #24
 80099d0:	bd80      	pop	{r7, pc}
 80099d2:	46c0      	nop			; (mov r8, r8)
 80099d4:	40012c00 	.word	0x40012c00
 80099d8:	40014000 	.word	0x40014000
 80099dc:	40014400 	.word	0x40014400
 80099e0:	40014800 	.word	0x40014800
 80099e4:	fffffeff 	.word	0xfffffeff
 80099e8:	fffffdff 	.word	0xfffffdff

080099ec <TIM_OC2_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
void TIM_OC2_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 80099ec:	b580      	push	{r7, lr}
 80099ee:	b086      	sub	sp, #24
 80099f0:	af00      	add	r7, sp, #0
 80099f2:	6078      	str	r0, [r7, #4]
 80099f4:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 80099f6:	687b      	ldr	r3, [r7, #4]
 80099f8:	6a1b      	ldr	r3, [r3, #32]
 80099fa:	2210      	movs	r2, #16
 80099fc:	4393      	bics	r3, r2
 80099fe:	001a      	movs	r2, r3
 8009a00:	687b      	ldr	r3, [r7, #4]
 8009a02:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8009a04:	687b      	ldr	r3, [r7, #4]
 8009a06:	6a1b      	ldr	r3, [r3, #32]
 8009a08:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8009a0a:	687b      	ldr	r3, [r7, #4]
 8009a0c:	685b      	ldr	r3, [r3, #4]
 8009a0e:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8009a10:	687b      	ldr	r3, [r7, #4]
 8009a12:	699b      	ldr	r3, [r3, #24]
 8009a14:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
 8009a16:	68fb      	ldr	r3, [r7, #12]
 8009a18:	4a2e      	ldr	r2, [pc, #184]	; (8009ad4 <TIM_OC2_SetConfig+0xe8>)
 8009a1a:	4013      	ands	r3, r2
 8009a1c:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 8009a1e:	68fb      	ldr	r3, [r7, #12]
 8009a20:	4a2d      	ldr	r2, [pc, #180]	; (8009ad8 <TIM_OC2_SetConfig+0xec>)
 8009a22:	4013      	ands	r3, r2
 8009a24:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8009a26:	683b      	ldr	r3, [r7, #0]
 8009a28:	681b      	ldr	r3, [r3, #0]
 8009a2a:	021b      	lsls	r3, r3, #8
 8009a2c:	68fa      	ldr	r2, [r7, #12]
 8009a2e:	4313      	orrs	r3, r2
 8009a30:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 8009a32:	697b      	ldr	r3, [r7, #20]
 8009a34:	2220      	movs	r2, #32
 8009a36:	4393      	bics	r3, r2
 8009a38:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 8009a3a:	683b      	ldr	r3, [r7, #0]
 8009a3c:	689b      	ldr	r3, [r3, #8]
 8009a3e:	011b      	lsls	r3, r3, #4
 8009a40:	697a      	ldr	r2, [r7, #20]
 8009a42:	4313      	orrs	r3, r2
 8009a44:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 8009a46:	687b      	ldr	r3, [r7, #4]
 8009a48:	4a24      	ldr	r2, [pc, #144]	; (8009adc <TIM_OC2_SetConfig+0xf0>)
 8009a4a:	4293      	cmp	r3, r2
 8009a4c:	d10d      	bne.n	8009a6a <TIM_OC2_SetConfig+0x7e>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC2NP;
 8009a4e:	697b      	ldr	r3, [r7, #20]
 8009a50:	2280      	movs	r2, #128	; 0x80
 8009a52:	4393      	bics	r3, r2
 8009a54:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 8009a56:	683b      	ldr	r3, [r7, #0]
 8009a58:	68db      	ldr	r3, [r3, #12]
 8009a5a:	011b      	lsls	r3, r3, #4
 8009a5c:	697a      	ldr	r2, [r7, #20]
 8009a5e:	4313      	orrs	r3, r2
 8009a60:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC2NE;
 8009a62:	697b      	ldr	r3, [r7, #20]
 8009a64:	2240      	movs	r2, #64	; 0x40
 8009a66:	4393      	bics	r3, r2
 8009a68:	617b      	str	r3, [r7, #20]

  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8009a6a:	687b      	ldr	r3, [r7, #4]
 8009a6c:	4a1b      	ldr	r2, [pc, #108]	; (8009adc <TIM_OC2_SetConfig+0xf0>)
 8009a6e:	4293      	cmp	r3, r2
 8009a70:	d00b      	beq.n	8009a8a <TIM_OC2_SetConfig+0x9e>
 8009a72:	687b      	ldr	r3, [r7, #4]
 8009a74:	4a1a      	ldr	r2, [pc, #104]	; (8009ae0 <TIM_OC2_SetConfig+0xf4>)
 8009a76:	4293      	cmp	r3, r2
 8009a78:	d007      	beq.n	8009a8a <TIM_OC2_SetConfig+0x9e>
 8009a7a:	687b      	ldr	r3, [r7, #4]
 8009a7c:	4a19      	ldr	r2, [pc, #100]	; (8009ae4 <TIM_OC2_SetConfig+0xf8>)
 8009a7e:	4293      	cmp	r3, r2
 8009a80:	d003      	beq.n	8009a8a <TIM_OC2_SetConfig+0x9e>
 8009a82:	687b      	ldr	r3, [r7, #4]
 8009a84:	4a18      	ldr	r2, [pc, #96]	; (8009ae8 <TIM_OC2_SetConfig+0xfc>)
 8009a86:	4293      	cmp	r3, r2
 8009a88:	d113      	bne.n	8009ab2 <TIM_OC2_SetConfig+0xc6>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS2;
 8009a8a:	693b      	ldr	r3, [r7, #16]
 8009a8c:	4a17      	ldr	r2, [pc, #92]	; (8009aec <TIM_OC2_SetConfig+0x100>)
 8009a8e:	4013      	ands	r3, r2
 8009a90:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS2N;
 8009a92:	693b      	ldr	r3, [r7, #16]
 8009a94:	4a16      	ldr	r2, [pc, #88]	; (8009af0 <TIM_OC2_SetConfig+0x104>)
 8009a96:	4013      	ands	r3, r2
 8009a98:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 8009a9a:	683b      	ldr	r3, [r7, #0]
 8009a9c:	695b      	ldr	r3, [r3, #20]
 8009a9e:	009b      	lsls	r3, r3, #2
 8009aa0:	693a      	ldr	r2, [r7, #16]
 8009aa2:	4313      	orrs	r3, r2
 8009aa4:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 8009aa6:	683b      	ldr	r3, [r7, #0]
 8009aa8:	699b      	ldr	r3, [r3, #24]
 8009aaa:	009b      	lsls	r3, r3, #2
 8009aac:	693a      	ldr	r2, [r7, #16]
 8009aae:	4313      	orrs	r3, r2
 8009ab0:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8009ab2:	687b      	ldr	r3, [r7, #4]
 8009ab4:	693a      	ldr	r2, [r7, #16]
 8009ab6:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8009ab8:	687b      	ldr	r3, [r7, #4]
 8009aba:	68fa      	ldr	r2, [r7, #12]
 8009abc:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 8009abe:	683b      	ldr	r3, [r7, #0]
 8009ac0:	685a      	ldr	r2, [r3, #4]
 8009ac2:	687b      	ldr	r3, [r7, #4]
 8009ac4:	639a      	str	r2, [r3, #56]	; 0x38

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8009ac6:	687b      	ldr	r3, [r7, #4]
 8009ac8:	697a      	ldr	r2, [r7, #20]
 8009aca:	621a      	str	r2, [r3, #32]
}
 8009acc:	46c0      	nop			; (mov r8, r8)
 8009ace:	46bd      	mov	sp, r7
 8009ad0:	b006      	add	sp, #24
 8009ad2:	bd80      	pop	{r7, pc}
 8009ad4:	ffff8fff 	.word	0xffff8fff
 8009ad8:	fffffcff 	.word	0xfffffcff
 8009adc:	40012c00 	.word	0x40012c00
 8009ae0:	40014000 	.word	0x40014000
 8009ae4:	40014400 	.word	0x40014400
 8009ae8:	40014800 	.word	0x40014800
 8009aec:	fffffbff 	.word	0xfffffbff
 8009af0:	fffff7ff 	.word	0xfffff7ff

08009af4 <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8009af4:	b580      	push	{r7, lr}
 8009af6:	b086      	sub	sp, #24
 8009af8:	af00      	add	r7, sp, #0
 8009afa:	6078      	str	r0, [r7, #4]
 8009afc:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 8009afe:	687b      	ldr	r3, [r7, #4]
 8009b00:	6a1b      	ldr	r3, [r3, #32]
 8009b02:	4a35      	ldr	r2, [pc, #212]	; (8009bd8 <TIM_OC3_SetConfig+0xe4>)
 8009b04:	401a      	ands	r2, r3
 8009b06:	687b      	ldr	r3, [r7, #4]
 8009b08:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8009b0a:	687b      	ldr	r3, [r7, #4]
 8009b0c:	6a1b      	ldr	r3, [r3, #32]
 8009b0e:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8009b10:	687b      	ldr	r3, [r7, #4]
 8009b12:	685b      	ldr	r3, [r3, #4]
 8009b14:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8009b16:	687b      	ldr	r3, [r7, #4]
 8009b18:	69db      	ldr	r3, [r3, #28]
 8009b1a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
 8009b1c:	68fb      	ldr	r3, [r7, #12]
 8009b1e:	2270      	movs	r2, #112	; 0x70
 8009b20:	4393      	bics	r3, r2
 8009b22:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 8009b24:	68fb      	ldr	r3, [r7, #12]
 8009b26:	2203      	movs	r2, #3
 8009b28:	4393      	bics	r3, r2
 8009b2a:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8009b2c:	683b      	ldr	r3, [r7, #0]
 8009b2e:	681b      	ldr	r3, [r3, #0]
 8009b30:	68fa      	ldr	r2, [r7, #12]
 8009b32:	4313      	orrs	r3, r2
 8009b34:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 8009b36:	697b      	ldr	r3, [r7, #20]
 8009b38:	4a28      	ldr	r2, [pc, #160]	; (8009bdc <TIM_OC3_SetConfig+0xe8>)
 8009b3a:	4013      	ands	r3, r2
 8009b3c:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 8009b3e:	683b      	ldr	r3, [r7, #0]
 8009b40:	689b      	ldr	r3, [r3, #8]
 8009b42:	021b      	lsls	r3, r3, #8
 8009b44:	697a      	ldr	r2, [r7, #20]
 8009b46:	4313      	orrs	r3, r2
 8009b48:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 8009b4a:	687b      	ldr	r3, [r7, #4]
 8009b4c:	4a24      	ldr	r2, [pc, #144]	; (8009be0 <TIM_OC3_SetConfig+0xec>)
 8009b4e:	4293      	cmp	r3, r2
 8009b50:	d10d      	bne.n	8009b6e <TIM_OC3_SetConfig+0x7a>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
 8009b52:	697b      	ldr	r3, [r7, #20]
 8009b54:	4a23      	ldr	r2, [pc, #140]	; (8009be4 <TIM_OC3_SetConfig+0xf0>)
 8009b56:	4013      	ands	r3, r2
 8009b58:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 8009b5a:	683b      	ldr	r3, [r7, #0]
 8009b5c:	68db      	ldr	r3, [r3, #12]
 8009b5e:	021b      	lsls	r3, r3, #8
 8009b60:	697a      	ldr	r2, [r7, #20]
 8009b62:	4313      	orrs	r3, r2
 8009b64:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
 8009b66:	697b      	ldr	r3, [r7, #20]
 8009b68:	4a1f      	ldr	r2, [pc, #124]	; (8009be8 <TIM_OC3_SetConfig+0xf4>)
 8009b6a:	4013      	ands	r3, r2
 8009b6c:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8009b6e:	687b      	ldr	r3, [r7, #4]
 8009b70:	4a1b      	ldr	r2, [pc, #108]	; (8009be0 <TIM_OC3_SetConfig+0xec>)
 8009b72:	4293      	cmp	r3, r2
 8009b74:	d00b      	beq.n	8009b8e <TIM_OC3_SetConfig+0x9a>
 8009b76:	687b      	ldr	r3, [r7, #4]
 8009b78:	4a1c      	ldr	r2, [pc, #112]	; (8009bec <TIM_OC3_SetConfig+0xf8>)
 8009b7a:	4293      	cmp	r3, r2
 8009b7c:	d007      	beq.n	8009b8e <TIM_OC3_SetConfig+0x9a>
 8009b7e:	687b      	ldr	r3, [r7, #4]
 8009b80:	4a1b      	ldr	r2, [pc, #108]	; (8009bf0 <TIM_OC3_SetConfig+0xfc>)
 8009b82:	4293      	cmp	r3, r2
 8009b84:	d003      	beq.n	8009b8e <TIM_OC3_SetConfig+0x9a>
 8009b86:	687b      	ldr	r3, [r7, #4]
 8009b88:	4a1a      	ldr	r2, [pc, #104]	; (8009bf4 <TIM_OC3_SetConfig+0x100>)
 8009b8a:	4293      	cmp	r3, r2
 8009b8c:	d113      	bne.n	8009bb6 <TIM_OC3_SetConfig+0xc2>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
 8009b8e:	693b      	ldr	r3, [r7, #16]
 8009b90:	4a19      	ldr	r2, [pc, #100]	; (8009bf8 <TIM_OC3_SetConfig+0x104>)
 8009b92:	4013      	ands	r3, r2
 8009b94:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 8009b96:	693b      	ldr	r3, [r7, #16]
 8009b98:	4a18      	ldr	r2, [pc, #96]	; (8009bfc <TIM_OC3_SetConfig+0x108>)
 8009b9a:	4013      	ands	r3, r2
 8009b9c:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 8009b9e:	683b      	ldr	r3, [r7, #0]
 8009ba0:	695b      	ldr	r3, [r3, #20]
 8009ba2:	011b      	lsls	r3, r3, #4
 8009ba4:	693a      	ldr	r2, [r7, #16]
 8009ba6:	4313      	orrs	r3, r2
 8009ba8:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 8009baa:	683b      	ldr	r3, [r7, #0]
 8009bac:	699b      	ldr	r3, [r3, #24]
 8009bae:	011b      	lsls	r3, r3, #4
 8009bb0:	693a      	ldr	r2, [r7, #16]
 8009bb2:	4313      	orrs	r3, r2
 8009bb4:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8009bb6:	687b      	ldr	r3, [r7, #4]
 8009bb8:	693a      	ldr	r2, [r7, #16]
 8009bba:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8009bbc:	687b      	ldr	r3, [r7, #4]
 8009bbe:	68fa      	ldr	r2, [r7, #12]
 8009bc0:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 8009bc2:	683b      	ldr	r3, [r7, #0]
 8009bc4:	685a      	ldr	r2, [r3, #4]
 8009bc6:	687b      	ldr	r3, [r7, #4]
 8009bc8:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8009bca:	687b      	ldr	r3, [r7, #4]
 8009bcc:	697a      	ldr	r2, [r7, #20]
 8009bce:	621a      	str	r2, [r3, #32]
}
 8009bd0:	46c0      	nop			; (mov r8, r8)
 8009bd2:	46bd      	mov	sp, r7
 8009bd4:	b006      	add	sp, #24
 8009bd6:	bd80      	pop	{r7, pc}
 8009bd8:	fffffeff 	.word	0xfffffeff
 8009bdc:	fffffdff 	.word	0xfffffdff
 8009be0:	40012c00 	.word	0x40012c00
 8009be4:	fffff7ff 	.word	0xfffff7ff
 8009be8:	fffffbff 	.word	0xfffffbff
 8009bec:	40014000 	.word	0x40014000
 8009bf0:	40014400 	.word	0x40014400
 8009bf4:	40014800 	.word	0x40014800
 8009bf8:	ffffefff 	.word	0xffffefff
 8009bfc:	ffffdfff 	.word	0xffffdfff

08009c00 <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8009c00:	b580      	push	{r7, lr}
 8009c02:	b086      	sub	sp, #24
 8009c04:	af00      	add	r7, sp, #0
 8009c06:	6078      	str	r0, [r7, #4]
 8009c08:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 8009c0a:	687b      	ldr	r3, [r7, #4]
 8009c0c:	6a1b      	ldr	r3, [r3, #32]
 8009c0e:	4a28      	ldr	r2, [pc, #160]	; (8009cb0 <TIM_OC4_SetConfig+0xb0>)
 8009c10:	401a      	ands	r2, r3
 8009c12:	687b      	ldr	r3, [r7, #4]
 8009c14:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8009c16:	687b      	ldr	r3, [r7, #4]
 8009c18:	6a1b      	ldr	r3, [r3, #32]
 8009c1a:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8009c1c:	687b      	ldr	r3, [r7, #4]
 8009c1e:	685b      	ldr	r3, [r3, #4]
 8009c20:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8009c22:	687b      	ldr	r3, [r7, #4]
 8009c24:	69db      	ldr	r3, [r3, #28]
 8009c26:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
 8009c28:	68fb      	ldr	r3, [r7, #12]
 8009c2a:	4a22      	ldr	r2, [pc, #136]	; (8009cb4 <TIM_OC4_SetConfig+0xb4>)
 8009c2c:	4013      	ands	r3, r2
 8009c2e:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 8009c30:	68fb      	ldr	r3, [r7, #12]
 8009c32:	4a21      	ldr	r2, [pc, #132]	; (8009cb8 <TIM_OC4_SetConfig+0xb8>)
 8009c34:	4013      	ands	r3, r2
 8009c36:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8009c38:	683b      	ldr	r3, [r7, #0]
 8009c3a:	681b      	ldr	r3, [r3, #0]
 8009c3c:	021b      	lsls	r3, r3, #8
 8009c3e:	68fa      	ldr	r2, [r7, #12]
 8009c40:	4313      	orrs	r3, r2
 8009c42:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 8009c44:	693b      	ldr	r3, [r7, #16]
 8009c46:	4a1d      	ldr	r2, [pc, #116]	; (8009cbc <TIM_OC4_SetConfig+0xbc>)
 8009c48:	4013      	ands	r3, r2
 8009c4a:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 8009c4c:	683b      	ldr	r3, [r7, #0]
 8009c4e:	689b      	ldr	r3, [r3, #8]
 8009c50:	031b      	lsls	r3, r3, #12
 8009c52:	693a      	ldr	r2, [r7, #16]
 8009c54:	4313      	orrs	r3, r2
 8009c56:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8009c58:	687b      	ldr	r3, [r7, #4]
 8009c5a:	4a19      	ldr	r2, [pc, #100]	; (8009cc0 <TIM_OC4_SetConfig+0xc0>)
 8009c5c:	4293      	cmp	r3, r2
 8009c5e:	d00b      	beq.n	8009c78 <TIM_OC4_SetConfig+0x78>
 8009c60:	687b      	ldr	r3, [r7, #4]
 8009c62:	4a18      	ldr	r2, [pc, #96]	; (8009cc4 <TIM_OC4_SetConfig+0xc4>)
 8009c64:	4293      	cmp	r3, r2
 8009c66:	d007      	beq.n	8009c78 <TIM_OC4_SetConfig+0x78>
 8009c68:	687b      	ldr	r3, [r7, #4]
 8009c6a:	4a17      	ldr	r2, [pc, #92]	; (8009cc8 <TIM_OC4_SetConfig+0xc8>)
 8009c6c:	4293      	cmp	r3, r2
 8009c6e:	d003      	beq.n	8009c78 <TIM_OC4_SetConfig+0x78>
 8009c70:	687b      	ldr	r3, [r7, #4]
 8009c72:	4a16      	ldr	r2, [pc, #88]	; (8009ccc <TIM_OC4_SetConfig+0xcc>)
 8009c74:	4293      	cmp	r3, r2
 8009c76:	d109      	bne.n	8009c8c <TIM_OC4_SetConfig+0x8c>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;
 8009c78:	697b      	ldr	r3, [r7, #20]
 8009c7a:	4a15      	ldr	r2, [pc, #84]	; (8009cd0 <TIM_OC4_SetConfig+0xd0>)
 8009c7c:	4013      	ands	r3, r2
 8009c7e:	617b      	str	r3, [r7, #20]

    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 8009c80:	683b      	ldr	r3, [r7, #0]
 8009c82:	695b      	ldr	r3, [r3, #20]
 8009c84:	019b      	lsls	r3, r3, #6
 8009c86:	697a      	ldr	r2, [r7, #20]
 8009c88:	4313      	orrs	r3, r2
 8009c8a:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8009c8c:	687b      	ldr	r3, [r7, #4]
 8009c8e:	697a      	ldr	r2, [r7, #20]
 8009c90:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8009c92:	687b      	ldr	r3, [r7, #4]
 8009c94:	68fa      	ldr	r2, [r7, #12]
 8009c96:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 8009c98:	683b      	ldr	r3, [r7, #0]
 8009c9a:	685a      	ldr	r2, [r3, #4]
 8009c9c:	687b      	ldr	r3, [r7, #4]
 8009c9e:	641a      	str	r2, [r3, #64]	; 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8009ca0:	687b      	ldr	r3, [r7, #4]
 8009ca2:	693a      	ldr	r2, [r7, #16]
 8009ca4:	621a      	str	r2, [r3, #32]
}
 8009ca6:	46c0      	nop			; (mov r8, r8)
 8009ca8:	46bd      	mov	sp, r7
 8009caa:	b006      	add	sp, #24
 8009cac:	bd80      	pop	{r7, pc}
 8009cae:	46c0      	nop			; (mov r8, r8)
 8009cb0:	ffffefff 	.word	0xffffefff
 8009cb4:	ffff8fff 	.word	0xffff8fff
 8009cb8:	fffffcff 	.word	0xfffffcff
 8009cbc:	ffffdfff 	.word	0xffffdfff
 8009cc0:	40012c00 	.word	0x40012c00
 8009cc4:	40014000 	.word	0x40014000
 8009cc8:	40014400 	.word	0x40014400
 8009ccc:	40014800 	.word	0x40014800
 8009cd0:	ffffbfff 	.word	0xffffbfff

08009cd4 <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8009cd4:	b580      	push	{r7, lr}
 8009cd6:	b086      	sub	sp, #24
 8009cd8:	af00      	add	r7, sp, #0
 8009cda:	60f8      	str	r0, [r7, #12]
 8009cdc:	60b9      	str	r1, [r7, #8]
 8009cde:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 8009ce0:	68fb      	ldr	r3, [r7, #12]
 8009ce2:	6a1b      	ldr	r3, [r3, #32]
 8009ce4:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8009ce6:	68fb      	ldr	r3, [r7, #12]
 8009ce8:	6a1b      	ldr	r3, [r3, #32]
 8009cea:	2201      	movs	r2, #1
 8009cec:	4393      	bics	r3, r2
 8009cee:	001a      	movs	r2, r3
 8009cf0:	68fb      	ldr	r3, [r7, #12]
 8009cf2:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8009cf4:	68fb      	ldr	r3, [r7, #12]
 8009cf6:	699b      	ldr	r3, [r3, #24]
 8009cf8:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 8009cfa:	693b      	ldr	r3, [r7, #16]
 8009cfc:	22f0      	movs	r2, #240	; 0xf0
 8009cfe:	4393      	bics	r3, r2
 8009d00:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 8009d02:	687b      	ldr	r3, [r7, #4]
 8009d04:	011b      	lsls	r3, r3, #4
 8009d06:	693a      	ldr	r2, [r7, #16]
 8009d08:	4313      	orrs	r3, r2
 8009d0a:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 8009d0c:	697b      	ldr	r3, [r7, #20]
 8009d0e:	220a      	movs	r2, #10
 8009d10:	4393      	bics	r3, r2
 8009d12:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 8009d14:	697a      	ldr	r2, [r7, #20]
 8009d16:	68bb      	ldr	r3, [r7, #8]
 8009d18:	4313      	orrs	r3, r2
 8009d1a:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 8009d1c:	68fb      	ldr	r3, [r7, #12]
 8009d1e:	693a      	ldr	r2, [r7, #16]
 8009d20:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8009d22:	68fb      	ldr	r3, [r7, #12]
 8009d24:	697a      	ldr	r2, [r7, #20]
 8009d26:	621a      	str	r2, [r3, #32]
}
 8009d28:	46c0      	nop			; (mov r8, r8)
 8009d2a:	46bd      	mov	sp, r7
 8009d2c:	b006      	add	sp, #24
 8009d2e:	bd80      	pop	{r7, pc}

08009d30 <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8009d30:	b580      	push	{r7, lr}
 8009d32:	b086      	sub	sp, #24
 8009d34:	af00      	add	r7, sp, #0
 8009d36:	60f8      	str	r0, [r7, #12]
 8009d38:	60b9      	str	r1, [r7, #8]
 8009d3a:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8009d3c:	68fb      	ldr	r3, [r7, #12]
 8009d3e:	6a1b      	ldr	r3, [r3, #32]
 8009d40:	2210      	movs	r2, #16
 8009d42:	4393      	bics	r3, r2
 8009d44:	001a      	movs	r2, r3
 8009d46:	68fb      	ldr	r3, [r7, #12]
 8009d48:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8009d4a:	68fb      	ldr	r3, [r7, #12]
 8009d4c:	699b      	ldr	r3, [r3, #24]
 8009d4e:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 8009d50:	68fb      	ldr	r3, [r7, #12]
 8009d52:	6a1b      	ldr	r3, [r3, #32]
 8009d54:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 8009d56:	697b      	ldr	r3, [r7, #20]
 8009d58:	4a0d      	ldr	r2, [pc, #52]	; (8009d90 <TIM_TI2_ConfigInputStage+0x60>)
 8009d5a:	4013      	ands	r3, r2
 8009d5c:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 8009d5e:	687b      	ldr	r3, [r7, #4]
 8009d60:	031b      	lsls	r3, r3, #12
 8009d62:	697a      	ldr	r2, [r7, #20]
 8009d64:	4313      	orrs	r3, r2
 8009d66:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 8009d68:	693b      	ldr	r3, [r7, #16]
 8009d6a:	22a0      	movs	r2, #160	; 0xa0
 8009d6c:	4393      	bics	r3, r2
 8009d6e:	613b      	str	r3, [r7, #16]
  tmpccer |= (TIM_ICPolarity << 4U);
 8009d70:	68bb      	ldr	r3, [r7, #8]
 8009d72:	011b      	lsls	r3, r3, #4
 8009d74:	693a      	ldr	r2, [r7, #16]
 8009d76:	4313      	orrs	r3, r2
 8009d78:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 8009d7a:	68fb      	ldr	r3, [r7, #12]
 8009d7c:	697a      	ldr	r2, [r7, #20]
 8009d7e:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8009d80:	68fb      	ldr	r3, [r7, #12]
 8009d82:	693a      	ldr	r2, [r7, #16]
 8009d84:	621a      	str	r2, [r3, #32]
}
 8009d86:	46c0      	nop			; (mov r8, r8)
 8009d88:	46bd      	mov	sp, r7
 8009d8a:	b006      	add	sp, #24
 8009d8c:	bd80      	pop	{r7, pc}
 8009d8e:	46c0      	nop			; (mov r8, r8)
 8009d90:	ffff0fff 	.word	0xffff0fff

08009d94 <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 8009d94:	b580      	push	{r7, lr}
 8009d96:	b084      	sub	sp, #16
 8009d98:	af00      	add	r7, sp, #0
 8009d9a:	6078      	str	r0, [r7, #4]
 8009d9c:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 8009d9e:	687b      	ldr	r3, [r7, #4]
 8009da0:	689b      	ldr	r3, [r3, #8]
 8009da2:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 8009da4:	68fb      	ldr	r3, [r7, #12]
 8009da6:	2270      	movs	r2, #112	; 0x70
 8009da8:	4393      	bics	r3, r2
 8009daa:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 8009dac:	683a      	ldr	r2, [r7, #0]
 8009dae:	68fb      	ldr	r3, [r7, #12]
 8009db0:	4313      	orrs	r3, r2
 8009db2:	2207      	movs	r2, #7
 8009db4:	4313      	orrs	r3, r2
 8009db6:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8009db8:	687b      	ldr	r3, [r7, #4]
 8009dba:	68fa      	ldr	r2, [r7, #12]
 8009dbc:	609a      	str	r2, [r3, #8]
}
 8009dbe:	46c0      	nop			; (mov r8, r8)
 8009dc0:	46bd      	mov	sp, r7
 8009dc2:	b004      	add	sp, #16
 8009dc4:	bd80      	pop	{r7, pc}
	...

08009dc8 <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 8009dc8:	b580      	push	{r7, lr}
 8009dca:	b086      	sub	sp, #24
 8009dcc:	af00      	add	r7, sp, #0
 8009dce:	60f8      	str	r0, [r7, #12]
 8009dd0:	60b9      	str	r1, [r7, #8]
 8009dd2:	607a      	str	r2, [r7, #4]
 8009dd4:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 8009dd6:	68fb      	ldr	r3, [r7, #12]
 8009dd8:	689b      	ldr	r3, [r3, #8]
 8009dda:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8009ddc:	697b      	ldr	r3, [r7, #20]
 8009dde:	4a09      	ldr	r2, [pc, #36]	; (8009e04 <TIM_ETR_SetConfig+0x3c>)
 8009de0:	4013      	ands	r3, r2
 8009de2:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 8009de4:	683b      	ldr	r3, [r7, #0]
 8009de6:	021a      	lsls	r2, r3, #8
 8009de8:	687b      	ldr	r3, [r7, #4]
 8009dea:	431a      	orrs	r2, r3
 8009dec:	68bb      	ldr	r3, [r7, #8]
 8009dee:	4313      	orrs	r3, r2
 8009df0:	697a      	ldr	r2, [r7, #20]
 8009df2:	4313      	orrs	r3, r2
 8009df4:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8009df6:	68fb      	ldr	r3, [r7, #12]
 8009df8:	697a      	ldr	r2, [r7, #20]
 8009dfa:	609a      	str	r2, [r3, #8]
}
 8009dfc:	46c0      	nop			; (mov r8, r8)
 8009dfe:	46bd      	mov	sp, r7
 8009e00:	b006      	add	sp, #24
 8009e02:	bd80      	pop	{r7, pc}
 8009e04:	ffff00ff 	.word	0xffff00ff

08009e08 <TIM_CCxChannelCmd>:
  * @param  ChannelState specifies the TIM Channel CCxE bit new state.
  *          This parameter can be: TIM_CCx_ENABLE or TIM_CCx_DISABLE.
  * @retval None
  */
void TIM_CCxChannelCmd(TIM_TypeDef *TIMx, uint32_t Channel, uint32_t ChannelState)
{
 8009e08:	b580      	push	{r7, lr}
 8009e0a:	b086      	sub	sp, #24
 8009e0c:	af00      	add	r7, sp, #0
 8009e0e:	60f8      	str	r0, [r7, #12]
 8009e10:	60b9      	str	r1, [r7, #8]
 8009e12:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_CC1_INSTANCE(TIMx));
  assert_param(IS_TIM_CHANNELS(Channel));

  tmp = TIM_CCER_CC1E << (Channel & 0x1FU); /* 0x1FU = 31 bits max shift */
 8009e14:	68bb      	ldr	r3, [r7, #8]
 8009e16:	221f      	movs	r2, #31
 8009e18:	4013      	ands	r3, r2
 8009e1a:	2201      	movs	r2, #1
 8009e1c:	409a      	lsls	r2, r3
 8009e1e:	0013      	movs	r3, r2
 8009e20:	617b      	str	r3, [r7, #20]

  /* Reset the CCxE Bit */
  TIMx->CCER &= ~tmp;
 8009e22:	68fb      	ldr	r3, [r7, #12]
 8009e24:	6a1b      	ldr	r3, [r3, #32]
 8009e26:	697a      	ldr	r2, [r7, #20]
 8009e28:	43d2      	mvns	r2, r2
 8009e2a:	401a      	ands	r2, r3
 8009e2c:	68fb      	ldr	r3, [r7, #12]
 8009e2e:	621a      	str	r2, [r3, #32]

  /* Set or reset the CCxE Bit */
  TIMx->CCER |= (uint32_t)(ChannelState << (Channel & 0x1FU)); /* 0x1FU = 31 bits max shift */
 8009e30:	68fb      	ldr	r3, [r7, #12]
 8009e32:	6a1a      	ldr	r2, [r3, #32]
 8009e34:	68bb      	ldr	r3, [r7, #8]
 8009e36:	211f      	movs	r1, #31
 8009e38:	400b      	ands	r3, r1
 8009e3a:	6879      	ldr	r1, [r7, #4]
 8009e3c:	4099      	lsls	r1, r3
 8009e3e:	000b      	movs	r3, r1
 8009e40:	431a      	orrs	r2, r3
 8009e42:	68fb      	ldr	r3, [r7, #12]
 8009e44:	621a      	str	r2, [r3, #32]
}
 8009e46:	46c0      	nop			; (mov r8, r8)
 8009e48:	46bd      	mov	sp, r7
 8009e4a:	b006      	add	sp, #24
 8009e4c:	bd80      	pop	{r7, pc}
	...

08009e50 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        const TIM_MasterConfigTypeDef *sMasterConfig)
{
 8009e50:	b580      	push	{r7, lr}
 8009e52:	b084      	sub	sp, #16
 8009e54:	af00      	add	r7, sp, #0
 8009e56:	6078      	str	r0, [r7, #4]
 8009e58:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 8009e5a:	687b      	ldr	r3, [r7, #4]
 8009e5c:	223c      	movs	r2, #60	; 0x3c
 8009e5e:	5c9b      	ldrb	r3, [r3, r2]
 8009e60:	2b01      	cmp	r3, #1
 8009e62:	d101      	bne.n	8009e68 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 8009e64:	2302      	movs	r3, #2
 8009e66:	e047      	b.n	8009ef8 <HAL_TIMEx_MasterConfigSynchronization+0xa8>
 8009e68:	687b      	ldr	r3, [r7, #4]
 8009e6a:	223c      	movs	r2, #60	; 0x3c
 8009e6c:	2101      	movs	r1, #1
 8009e6e:	5499      	strb	r1, [r3, r2]

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 8009e70:	687b      	ldr	r3, [r7, #4]
 8009e72:	223d      	movs	r2, #61	; 0x3d
 8009e74:	2102      	movs	r1, #2
 8009e76:	5499      	strb	r1, [r3, r2]

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8009e78:	687b      	ldr	r3, [r7, #4]
 8009e7a:	681b      	ldr	r3, [r3, #0]
 8009e7c:	685b      	ldr	r3, [r3, #4]
 8009e7e:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8009e80:	687b      	ldr	r3, [r7, #4]
 8009e82:	681b      	ldr	r3, [r3, #0]
 8009e84:	689b      	ldr	r3, [r3, #8]
 8009e86:	60bb      	str	r3, [r7, #8]

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 8009e88:	68fb      	ldr	r3, [r7, #12]
 8009e8a:	2270      	movs	r2, #112	; 0x70
 8009e8c:	4393      	bics	r3, r2
 8009e8e:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8009e90:	683b      	ldr	r3, [r7, #0]
 8009e92:	681b      	ldr	r3, [r3, #0]
 8009e94:	68fa      	ldr	r2, [r7, #12]
 8009e96:	4313      	orrs	r3, r2
 8009e98:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 8009e9a:	687b      	ldr	r3, [r7, #4]
 8009e9c:	681b      	ldr	r3, [r3, #0]
 8009e9e:	68fa      	ldr	r2, [r7, #12]
 8009ea0:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8009ea2:	687b      	ldr	r3, [r7, #4]
 8009ea4:	681b      	ldr	r3, [r3, #0]
 8009ea6:	4a16      	ldr	r2, [pc, #88]	; (8009f00 <HAL_TIMEx_MasterConfigSynchronization+0xb0>)
 8009ea8:	4293      	cmp	r3, r2
 8009eaa:	d00f      	beq.n	8009ecc <HAL_TIMEx_MasterConfigSynchronization+0x7c>
 8009eac:	687b      	ldr	r3, [r7, #4]
 8009eae:	681a      	ldr	r2, [r3, #0]
 8009eb0:	2380      	movs	r3, #128	; 0x80
 8009eb2:	05db      	lsls	r3, r3, #23
 8009eb4:	429a      	cmp	r2, r3
 8009eb6:	d009      	beq.n	8009ecc <HAL_TIMEx_MasterConfigSynchronization+0x7c>
 8009eb8:	687b      	ldr	r3, [r7, #4]
 8009eba:	681b      	ldr	r3, [r3, #0]
 8009ebc:	4a11      	ldr	r2, [pc, #68]	; (8009f04 <HAL_TIMEx_MasterConfigSynchronization+0xb4>)
 8009ebe:	4293      	cmp	r3, r2
 8009ec0:	d004      	beq.n	8009ecc <HAL_TIMEx_MasterConfigSynchronization+0x7c>
 8009ec2:	687b      	ldr	r3, [r7, #4]
 8009ec4:	681b      	ldr	r3, [r3, #0]
 8009ec6:	4a10      	ldr	r2, [pc, #64]	; (8009f08 <HAL_TIMEx_MasterConfigSynchronization+0xb8>)
 8009ec8:	4293      	cmp	r3, r2
 8009eca:	d10c      	bne.n	8009ee6 <HAL_TIMEx_MasterConfigSynchronization+0x96>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 8009ecc:	68bb      	ldr	r3, [r7, #8]
 8009ece:	2280      	movs	r2, #128	; 0x80
 8009ed0:	4393      	bics	r3, r2
 8009ed2:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 8009ed4:	683b      	ldr	r3, [r7, #0]
 8009ed6:	685b      	ldr	r3, [r3, #4]
 8009ed8:	68ba      	ldr	r2, [r7, #8]
 8009eda:	4313      	orrs	r3, r2
 8009edc:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 8009ede:	687b      	ldr	r3, [r7, #4]
 8009ee0:	681b      	ldr	r3, [r3, #0]
 8009ee2:	68ba      	ldr	r2, [r7, #8]
 8009ee4:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 8009ee6:	687b      	ldr	r3, [r7, #4]
 8009ee8:	223d      	movs	r2, #61	; 0x3d
 8009eea:	2101      	movs	r1, #1
 8009eec:	5499      	strb	r1, [r3, r2]

  __HAL_UNLOCK(htim);
 8009eee:	687b      	ldr	r3, [r7, #4]
 8009ef0:	223c      	movs	r2, #60	; 0x3c
 8009ef2:	2100      	movs	r1, #0
 8009ef4:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 8009ef6:	2300      	movs	r3, #0
}
 8009ef8:	0018      	movs	r0, r3
 8009efa:	46bd      	mov	sp, r7
 8009efc:	b004      	add	sp, #16
 8009efe:	bd80      	pop	{r7, pc}
 8009f00:	40012c00 	.word	0x40012c00
 8009f04:	40000400 	.word	0x40000400
 8009f08:	40014000 	.word	0x40014000

08009f0c <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 8009f0c:	b580      	push	{r7, lr}
 8009f0e:	b082      	sub	sp, #8
 8009f10:	af00      	add	r7, sp, #0
 8009f12:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 8009f14:	46c0      	nop			; (mov r8, r8)
 8009f16:	46bd      	mov	sp, r7
 8009f18:	b002      	add	sp, #8
 8009f1a:	bd80      	pop	{r7, pc}

08009f1c <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 8009f1c:	b580      	push	{r7, lr}
 8009f1e:	b082      	sub	sp, #8
 8009f20:	af00      	add	r7, sp, #0
 8009f22:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 8009f24:	46c0      	nop			; (mov r8, r8)
 8009f26:	46bd      	mov	sp, r7
 8009f28:	b002      	add	sp, #8
 8009f2a:	bd80      	pop	{r7, pc}

08009f2c <floorf>:
 8009f2c:	b570      	push	{r4, r5, r6, lr}
 8009f2e:	0045      	lsls	r5, r0, #1
 8009f30:	086e      	lsrs	r6, r5, #1
 8009f32:	0e2d      	lsrs	r5, r5, #24
 8009f34:	3d7f      	subs	r5, #127	; 0x7f
 8009f36:	0004      	movs	r4, r0
 8009f38:	2d16      	cmp	r5, #22
 8009f3a:	dc24      	bgt.n	8009f86 <floorf+0x5a>
 8009f3c:	2d00      	cmp	r5, #0
 8009f3e:	da0e      	bge.n	8009f5e <floorf+0x32>
 8009f40:	4916      	ldr	r1, [pc, #88]	; (8009f9c <floorf+0x70>)
 8009f42:	f7f6 fb05 	bl	8000550 <__aeabi_fadd>
 8009f46:	2100      	movs	r1, #0
 8009f48:	f7f6 fab8 	bl	80004bc <__aeabi_fcmpgt>
 8009f4c:	2800      	cmp	r0, #0
 8009f4e:	d004      	beq.n	8009f5a <floorf+0x2e>
 8009f50:	2c00      	cmp	r4, #0
 8009f52:	da20      	bge.n	8009f96 <floorf+0x6a>
 8009f54:	2e00      	cmp	r6, #0
 8009f56:	d000      	beq.n	8009f5a <floorf+0x2e>
 8009f58:	4c11      	ldr	r4, [pc, #68]	; (8009fa0 <floorf+0x74>)
 8009f5a:	1c20      	adds	r0, r4, #0
 8009f5c:	e01a      	b.n	8009f94 <floorf+0x68>
 8009f5e:	4e11      	ldr	r6, [pc, #68]	; (8009fa4 <floorf+0x78>)
 8009f60:	412e      	asrs	r6, r5
 8009f62:	4206      	tst	r6, r0
 8009f64:	d016      	beq.n	8009f94 <floorf+0x68>
 8009f66:	490d      	ldr	r1, [pc, #52]	; (8009f9c <floorf+0x70>)
 8009f68:	f7f6 faf2 	bl	8000550 <__aeabi_fadd>
 8009f6c:	2100      	movs	r1, #0
 8009f6e:	f7f6 faa5 	bl	80004bc <__aeabi_fcmpgt>
 8009f72:	2800      	cmp	r0, #0
 8009f74:	d0f1      	beq.n	8009f5a <floorf+0x2e>
 8009f76:	2c00      	cmp	r4, #0
 8009f78:	da03      	bge.n	8009f82 <floorf+0x56>
 8009f7a:	2380      	movs	r3, #128	; 0x80
 8009f7c:	041b      	lsls	r3, r3, #16
 8009f7e:	412b      	asrs	r3, r5
 8009f80:	18e4      	adds	r4, r4, r3
 8009f82:	43b4      	bics	r4, r6
 8009f84:	e7e9      	b.n	8009f5a <floorf+0x2e>
 8009f86:	23ff      	movs	r3, #255	; 0xff
 8009f88:	05db      	lsls	r3, r3, #23
 8009f8a:	429e      	cmp	r6, r3
 8009f8c:	d302      	bcc.n	8009f94 <floorf+0x68>
 8009f8e:	1c01      	adds	r1, r0, #0
 8009f90:	f7f6 fade 	bl	8000550 <__aeabi_fadd>
 8009f94:	bd70      	pop	{r4, r5, r6, pc}
 8009f96:	2400      	movs	r4, #0
 8009f98:	e7df      	b.n	8009f5a <floorf+0x2e>
 8009f9a:	46c0      	nop			; (mov r8, r8)
 8009f9c:	7149f2ca 	.word	0x7149f2ca
 8009fa0:	bf800000 	.word	0xbf800000
 8009fa4:	007fffff 	.word	0x007fffff

08009fa8 <fmod>:
 8009fa8:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 8009faa:	0006      	movs	r6, r0
 8009fac:	000f      	movs	r7, r1
 8009fae:	0014      	movs	r4, r2
 8009fb0:	001d      	movs	r5, r3
 8009fb2:	f000 f843 	bl	800a03c <__ieee754_fmod>
 8009fb6:	0022      	movs	r2, r4
 8009fb8:	9000      	str	r0, [sp, #0]
 8009fba:	9101      	str	r1, [sp, #4]
 8009fbc:	002b      	movs	r3, r5
 8009fbe:	0030      	movs	r0, r6
 8009fc0:	0039      	movs	r1, r7
 8009fc2:	f7f8 ff01 	bl	8002dc8 <__aeabi_dcmpun>
 8009fc6:	2800      	cmp	r0, #0
 8009fc8:	d113      	bne.n	8009ff2 <fmod+0x4a>
 8009fca:	2200      	movs	r2, #0
 8009fcc:	2300      	movs	r3, #0
 8009fce:	0020      	movs	r0, r4
 8009fd0:	0029      	movs	r1, r5
 8009fd2:	f7f6 fa1f 	bl	8000414 <__aeabi_dcmpeq>
 8009fd6:	2800      	cmp	r0, #0
 8009fd8:	d00b      	beq.n	8009ff2 <fmod+0x4a>
 8009fda:	f000 fb2b 	bl	800a634 <__errno>
 8009fde:	2321      	movs	r3, #33	; 0x21
 8009fe0:	2200      	movs	r2, #0
 8009fe2:	6003      	str	r3, [r0, #0]
 8009fe4:	2300      	movs	r3, #0
 8009fe6:	0010      	movs	r0, r2
 8009fe8:	0019      	movs	r1, r3
 8009fea:	f7f7 fced 	bl	80019c8 <__aeabi_ddiv>
 8009fee:	9000      	str	r0, [sp, #0]
 8009ff0:	9101      	str	r1, [sp, #4]
 8009ff2:	9800      	ldr	r0, [sp, #0]
 8009ff4:	9901      	ldr	r1, [sp, #4]
 8009ff6:	b003      	add	sp, #12
 8009ff8:	bdf0      	pop	{r4, r5, r6, r7, pc}

08009ffa <atan2f>:
 8009ffa:	b510      	push	{r4, lr}
 8009ffc:	f000 f932 	bl	800a264 <__ieee754_atan2f>
 800a000:	bd10      	pop	{r4, pc}

0800a002 <sqrtf>:
 800a002:	b570      	push	{r4, r5, r6, lr}
 800a004:	1c05      	adds	r5, r0, #0
 800a006:	f000 f9a9 	bl	800a35c <__ieee754_sqrtf>
 800a00a:	1c29      	adds	r1, r5, #0
 800a00c:	1c04      	adds	r4, r0, #0
 800a00e:	1c28      	adds	r0, r5, #0
 800a010:	f7f7 f8d8 	bl	80011c4 <__aeabi_fcmpun>
 800a014:	2800      	cmp	r0, #0
 800a016:	d10e      	bne.n	800a036 <sqrtf+0x34>
 800a018:	2100      	movs	r1, #0
 800a01a:	1c28      	adds	r0, r5, #0
 800a01c:	f7f6 fa3a 	bl	8000494 <__aeabi_fcmplt>
 800a020:	2800      	cmp	r0, #0
 800a022:	d008      	beq.n	800a036 <sqrtf+0x34>
 800a024:	f000 fb06 	bl	800a634 <__errno>
 800a028:	2321      	movs	r3, #33	; 0x21
 800a02a:	2100      	movs	r1, #0
 800a02c:	6003      	str	r3, [r0, #0]
 800a02e:	1c08      	adds	r0, r1, #0
 800a030:	f7f6 fc2c 	bl	800088c <__aeabi_fdiv>
 800a034:	1c04      	adds	r4, r0, #0
 800a036:	1c20      	adds	r0, r4, #0
 800a038:	bd70      	pop	{r4, r5, r6, pc}
	...

0800a03c <__ieee754_fmod>:
 800a03c:	b5f0      	push	{r4, r5, r6, r7, lr}
 800a03e:	0005      	movs	r5, r0
 800a040:	0010      	movs	r0, r2
 800a042:	b085      	sub	sp, #20
 800a044:	9200      	str	r2, [sp, #0]
 800a046:	9302      	str	r3, [sp, #8]
 800a048:	9201      	str	r2, [sp, #4]
 800a04a:	005a      	lsls	r2, r3, #1
 800a04c:	0003      	movs	r3, r0
 800a04e:	0852      	lsrs	r2, r2, #1
 800a050:	000c      	movs	r4, r1
 800a052:	4313      	orrs	r3, r2
 800a054:	d00c      	beq.n	800a070 <__ieee754_fmod+0x34>
 800a056:	4b79      	ldr	r3, [pc, #484]	; (800a23c <__ieee754_fmod+0x200>)
 800a058:	9103      	str	r1, [sp, #12]
 800a05a:	0049      	lsls	r1, r1, #1
 800a05c:	0849      	lsrs	r1, r1, #1
 800a05e:	4299      	cmp	r1, r3
 800a060:	dc06      	bgt.n	800a070 <__ieee754_fmod+0x34>
 800a062:	4243      	negs	r3, r0
 800a064:	4303      	orrs	r3, r0
 800a066:	4e76      	ldr	r6, [pc, #472]	; (800a240 <__ieee754_fmod+0x204>)
 800a068:	0fdb      	lsrs	r3, r3, #31
 800a06a:	4313      	orrs	r3, r2
 800a06c:	42b3      	cmp	r3, r6
 800a06e:	d90c      	bls.n	800a08a <__ieee754_fmod+0x4e>
 800a070:	9a00      	ldr	r2, [sp, #0]
 800a072:	9b02      	ldr	r3, [sp, #8]
 800a074:	0028      	movs	r0, r5
 800a076:	0021      	movs	r1, r4
 800a078:	f7f8 f8a8 	bl	80021cc <__aeabi_dmul>
 800a07c:	0002      	movs	r2, r0
 800a07e:	000b      	movs	r3, r1
 800a080:	f7f7 fca2 	bl	80019c8 <__aeabi_ddiv>
 800a084:	0005      	movs	r5, r0
 800a086:	000c      	movs	r4, r1
 800a088:	e010      	b.n	800a0ac <__ieee754_fmod+0x70>
 800a08a:	0fe7      	lsrs	r7, r4, #31
 800a08c:	07ff      	lsls	r7, r7, #31
 800a08e:	002e      	movs	r6, r5
 800a090:	002b      	movs	r3, r5
 800a092:	46bc      	mov	ip, r7
 800a094:	4291      	cmp	r1, r2
 800a096:	dc0d      	bgt.n	800a0b4 <__ieee754_fmod+0x78>
 800a098:	db08      	blt.n	800a0ac <__ieee754_fmod+0x70>
 800a09a:	4285      	cmp	r5, r0
 800a09c:	d306      	bcc.n	800a0ac <__ieee754_fmod+0x70>
 800a09e:	d109      	bne.n	800a0b4 <__ieee754_fmod+0x78>
 800a0a0:	4663      	mov	r3, ip
 800a0a2:	0f1a      	lsrs	r2, r3, #28
 800a0a4:	4b67      	ldr	r3, [pc, #412]	; (800a244 <__ieee754_fmod+0x208>)
 800a0a6:	189b      	adds	r3, r3, r2
 800a0a8:	681d      	ldr	r5, [r3, #0]
 800a0aa:	685c      	ldr	r4, [r3, #4]
 800a0ac:	0028      	movs	r0, r5
 800a0ae:	0021      	movs	r1, r4
 800a0b0:	b005      	add	sp, #20
 800a0b2:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800a0b4:	9c03      	ldr	r4, [sp, #12]
 800a0b6:	4d62      	ldr	r5, [pc, #392]	; (800a240 <__ieee754_fmod+0x204>)
 800a0b8:	422c      	tst	r4, r5
 800a0ba:	d14c      	bne.n	800a156 <__ieee754_fmod+0x11a>
 800a0bc:	2900      	cmp	r1, #0
 800a0be:	d143      	bne.n	800a148 <__ieee754_fmod+0x10c>
 800a0c0:	0035      	movs	r5, r6
 800a0c2:	4c61      	ldr	r4, [pc, #388]	; (800a248 <__ieee754_fmod+0x20c>)
 800a0c4:	2d00      	cmp	r5, #0
 800a0c6:	dc3c      	bgt.n	800a142 <__ieee754_fmod+0x106>
 800a0c8:	9d02      	ldr	r5, [sp, #8]
 800a0ca:	4f5d      	ldr	r7, [pc, #372]	; (800a240 <__ieee754_fmod+0x204>)
 800a0cc:	422f      	tst	r7, r5
 800a0ce:	d150      	bne.n	800a172 <__ieee754_fmod+0x136>
 800a0d0:	2a00      	cmp	r2, #0
 800a0d2:	d147      	bne.n	800a164 <__ieee754_fmod+0x128>
 800a0d4:	4d5c      	ldr	r5, [pc, #368]	; (800a248 <__ieee754_fmod+0x20c>)
 800a0d6:	2800      	cmp	r0, #0
 800a0d8:	dc41      	bgt.n	800a15e <__ieee754_fmod+0x122>
 800a0da:	485c      	ldr	r0, [pc, #368]	; (800a24c <__ieee754_fmod+0x210>)
 800a0dc:	4284      	cmp	r4, r0
 800a0de:	db4c      	blt.n	800a17a <__ieee754_fmod+0x13e>
 800a0e0:	2680      	movs	r6, #128	; 0x80
 800a0e2:	9903      	ldr	r1, [sp, #12]
 800a0e4:	0376      	lsls	r6, r6, #13
 800a0e6:	0309      	lsls	r1, r1, #12
 800a0e8:	0b09      	lsrs	r1, r1, #12
 800a0ea:	4331      	orrs	r1, r6
 800a0ec:	4857      	ldr	r0, [pc, #348]	; (800a24c <__ieee754_fmod+0x210>)
 800a0ee:	4285      	cmp	r5, r0
 800a0f0:	db56      	blt.n	800a1a0 <__ieee754_fmod+0x164>
 800a0f2:	2680      	movs	r6, #128	; 0x80
 800a0f4:	9a02      	ldr	r2, [sp, #8]
 800a0f6:	0376      	lsls	r6, r6, #13
 800a0f8:	0312      	lsls	r2, r2, #12
 800a0fa:	0b12      	lsrs	r2, r2, #12
 800a0fc:	4332      	orrs	r2, r6
 800a0fe:	1b64      	subs	r4, r4, r5
 800a100:	9801      	ldr	r0, [sp, #4]
 800a102:	1a8e      	subs	r6, r1, r2
 800a104:	1a1f      	subs	r7, r3, r0
 800a106:	2c00      	cmp	r4, #0
 800a108:	d15f      	bne.n	800a1ca <__ieee754_fmod+0x18e>
 800a10a:	4283      	cmp	r3, r0
 800a10c:	4192      	sbcs	r2, r2
 800a10e:	4252      	negs	r2, r2
 800a110:	1ab6      	subs	r6, r6, r2
 800a112:	d401      	bmi.n	800a118 <__ieee754_fmod+0xdc>
 800a114:	003b      	movs	r3, r7
 800a116:	0031      	movs	r1, r6
 800a118:	000a      	movs	r2, r1
 800a11a:	431a      	orrs	r2, r3
 800a11c:	d0c0      	beq.n	800a0a0 <__ieee754_fmod+0x64>
 800a11e:	2280      	movs	r2, #128	; 0x80
 800a120:	0352      	lsls	r2, r2, #13
 800a122:	4291      	cmp	r1, r2
 800a124:	db66      	blt.n	800a1f4 <__ieee754_fmod+0x1b8>
 800a126:	4a49      	ldr	r2, [pc, #292]	; (800a24c <__ieee754_fmod+0x210>)
 800a128:	4295      	cmp	r5, r2
 800a12a:	db69      	blt.n	800a200 <__ieee754_fmod+0x1c4>
 800a12c:	4a48      	ldr	r2, [pc, #288]	; (800a250 <__ieee754_fmod+0x214>)
 800a12e:	0018      	movs	r0, r3
 800a130:	1889      	adds	r1, r1, r2
 800a132:	4662      	mov	r2, ip
 800a134:	430a      	orrs	r2, r1
 800a136:	4947      	ldr	r1, [pc, #284]	; (800a254 <__ieee754_fmod+0x218>)
 800a138:	186d      	adds	r5, r5, r1
 800a13a:	052d      	lsls	r5, r5, #20
 800a13c:	432a      	orrs	r2, r5
 800a13e:	0011      	movs	r1, r2
 800a140:	e7a0      	b.n	800a084 <__ieee754_fmod+0x48>
 800a142:	3c01      	subs	r4, #1
 800a144:	006d      	lsls	r5, r5, #1
 800a146:	e7bd      	b.n	800a0c4 <__ieee754_fmod+0x88>
 800a148:	4c40      	ldr	r4, [pc, #256]	; (800a24c <__ieee754_fmod+0x210>)
 800a14a:	02cd      	lsls	r5, r1, #11
 800a14c:	2d00      	cmp	r5, #0
 800a14e:	ddbb      	ble.n	800a0c8 <__ieee754_fmod+0x8c>
 800a150:	3c01      	subs	r4, #1
 800a152:	006d      	lsls	r5, r5, #1
 800a154:	e7fa      	b.n	800a14c <__ieee754_fmod+0x110>
 800a156:	4d40      	ldr	r5, [pc, #256]	; (800a258 <__ieee754_fmod+0x21c>)
 800a158:	150c      	asrs	r4, r1, #20
 800a15a:	1964      	adds	r4, r4, r5
 800a15c:	e7b4      	b.n	800a0c8 <__ieee754_fmod+0x8c>
 800a15e:	3d01      	subs	r5, #1
 800a160:	0040      	lsls	r0, r0, #1
 800a162:	e7b8      	b.n	800a0d6 <__ieee754_fmod+0x9a>
 800a164:	4d39      	ldr	r5, [pc, #228]	; (800a24c <__ieee754_fmod+0x210>)
 800a166:	02d0      	lsls	r0, r2, #11
 800a168:	2800      	cmp	r0, #0
 800a16a:	ddb6      	ble.n	800a0da <__ieee754_fmod+0x9e>
 800a16c:	3d01      	subs	r5, #1
 800a16e:	0040      	lsls	r0, r0, #1
 800a170:	e7fa      	b.n	800a168 <__ieee754_fmod+0x12c>
 800a172:	4839      	ldr	r0, [pc, #228]	; (800a258 <__ieee754_fmod+0x21c>)
 800a174:	1515      	asrs	r5, r2, #20
 800a176:	182d      	adds	r5, r5, r0
 800a178:	e7af      	b.n	800a0da <__ieee754_fmod+0x9e>
 800a17a:	4b34      	ldr	r3, [pc, #208]	; (800a24c <__ieee754_fmod+0x210>)
 800a17c:	1b1b      	subs	r3, r3, r4
 800a17e:	2b1f      	cmp	r3, #31
 800a180:	dc08      	bgt.n	800a194 <__ieee754_fmod+0x158>
 800a182:	4836      	ldr	r0, [pc, #216]	; (800a25c <__ieee754_fmod+0x220>)
 800a184:	4099      	lsls	r1, r3
 800a186:	1827      	adds	r7, r4, r0
 800a188:	0030      	movs	r0, r6
 800a18a:	409e      	lsls	r6, r3
 800a18c:	40f8      	lsrs	r0, r7
 800a18e:	0033      	movs	r3, r6
 800a190:	4301      	orrs	r1, r0
 800a192:	e7ab      	b.n	800a0ec <__ieee754_fmod+0xb0>
 800a194:	0031      	movs	r1, r6
 800a196:	4b32      	ldr	r3, [pc, #200]	; (800a260 <__ieee754_fmod+0x224>)
 800a198:	1b1b      	subs	r3, r3, r4
 800a19a:	4099      	lsls	r1, r3
 800a19c:	2300      	movs	r3, #0
 800a19e:	e7a5      	b.n	800a0ec <__ieee754_fmod+0xb0>
 800a1a0:	482a      	ldr	r0, [pc, #168]	; (800a24c <__ieee754_fmod+0x210>)
 800a1a2:	1b46      	subs	r6, r0, r5
 800a1a4:	2e1f      	cmp	r6, #31
 800a1a6:	dc09      	bgt.n	800a1bc <__ieee754_fmod+0x180>
 800a1a8:	482c      	ldr	r0, [pc, #176]	; (800a25c <__ieee754_fmod+0x220>)
 800a1aa:	40b2      	lsls	r2, r6
 800a1ac:	182f      	adds	r7, r5, r0
 800a1ae:	9800      	ldr	r0, [sp, #0]
 800a1b0:	40f8      	lsrs	r0, r7
 800a1b2:	4302      	orrs	r2, r0
 800a1b4:	9800      	ldr	r0, [sp, #0]
 800a1b6:	40b0      	lsls	r0, r6
 800a1b8:	9001      	str	r0, [sp, #4]
 800a1ba:	e7a0      	b.n	800a0fe <__ieee754_fmod+0xc2>
 800a1bc:	4a28      	ldr	r2, [pc, #160]	; (800a260 <__ieee754_fmod+0x224>)
 800a1be:	9800      	ldr	r0, [sp, #0]
 800a1c0:	1b52      	subs	r2, r2, r5
 800a1c2:	4090      	lsls	r0, r2
 800a1c4:	0002      	movs	r2, r0
 800a1c6:	2000      	movs	r0, #0
 800a1c8:	e7f6      	b.n	800a1b8 <__ieee754_fmod+0x17c>
 800a1ca:	9801      	ldr	r0, [sp, #4]
 800a1cc:	4283      	cmp	r3, r0
 800a1ce:	4180      	sbcs	r0, r0
 800a1d0:	4240      	negs	r0, r0
 800a1d2:	1a36      	subs	r6, r6, r0
 800a1d4:	d505      	bpl.n	800a1e2 <__ieee754_fmod+0x1a6>
 800a1d6:	0fde      	lsrs	r6, r3, #31
 800a1d8:	0049      	lsls	r1, r1, #1
 800a1da:	1989      	adds	r1, r1, r6
 800a1dc:	005b      	lsls	r3, r3, #1
 800a1de:	3c01      	subs	r4, #1
 800a1e0:	e78e      	b.n	800a100 <__ieee754_fmod+0xc4>
 800a1e2:	0033      	movs	r3, r6
 800a1e4:	433b      	orrs	r3, r7
 800a1e6:	d100      	bne.n	800a1ea <__ieee754_fmod+0x1ae>
 800a1e8:	e75a      	b.n	800a0a0 <__ieee754_fmod+0x64>
 800a1ea:	0076      	lsls	r6, r6, #1
 800a1ec:	0ff9      	lsrs	r1, r7, #31
 800a1ee:	1871      	adds	r1, r6, r1
 800a1f0:	007b      	lsls	r3, r7, #1
 800a1f2:	e7f4      	b.n	800a1de <__ieee754_fmod+0x1a2>
 800a1f4:	0fdc      	lsrs	r4, r3, #31
 800a1f6:	0049      	lsls	r1, r1, #1
 800a1f8:	1909      	adds	r1, r1, r4
 800a1fa:	005b      	lsls	r3, r3, #1
 800a1fc:	3d01      	subs	r5, #1
 800a1fe:	e790      	b.n	800a122 <__ieee754_fmod+0xe6>
 800a200:	4a12      	ldr	r2, [pc, #72]	; (800a24c <__ieee754_fmod+0x210>)
 800a202:	1b50      	subs	r0, r2, r5
 800a204:	2814      	cmp	r0, #20
 800a206:	dc0b      	bgt.n	800a220 <__ieee754_fmod+0x1e4>
 800a208:	000c      	movs	r4, r1
 800a20a:	4a14      	ldr	r2, [pc, #80]	; (800a25c <__ieee754_fmod+0x220>)
 800a20c:	40c3      	lsrs	r3, r0
 800a20e:	18ad      	adds	r5, r5, r2
 800a210:	40ac      	lsls	r4, r5
 800a212:	4101      	asrs	r1, r0
 800a214:	431c      	orrs	r4, r3
 800a216:	4660      	mov	r0, ip
 800a218:	4308      	orrs	r0, r1
 800a21a:	0025      	movs	r5, r4
 800a21c:	0004      	movs	r4, r0
 800a21e:	e745      	b.n	800a0ac <__ieee754_fmod+0x70>
 800a220:	281f      	cmp	r0, #31
 800a222:	dc07      	bgt.n	800a234 <__ieee754_fmod+0x1f8>
 800a224:	4a0d      	ldr	r2, [pc, #52]	; (800a25c <__ieee754_fmod+0x220>)
 800a226:	40c3      	lsrs	r3, r0
 800a228:	18ad      	adds	r5, r5, r2
 800a22a:	40a9      	lsls	r1, r5
 800a22c:	4319      	orrs	r1, r3
 800a22e:	000c      	movs	r4, r1
 800a230:	4661      	mov	r1, ip
 800a232:	e7f0      	b.n	800a216 <__ieee754_fmod+0x1da>
 800a234:	4b0a      	ldr	r3, [pc, #40]	; (800a260 <__ieee754_fmod+0x224>)
 800a236:	1b5d      	subs	r5, r3, r5
 800a238:	4129      	asrs	r1, r5
 800a23a:	e7f8      	b.n	800a22e <__ieee754_fmod+0x1f2>
 800a23c:	7fefffff 	.word	0x7fefffff
 800a240:	7ff00000 	.word	0x7ff00000
 800a244:	0800b098 	.word	0x0800b098
 800a248:	fffffbed 	.word	0xfffffbed
 800a24c:	fffffc02 	.word	0xfffffc02
 800a250:	fff00000 	.word	0xfff00000
 800a254:	000003ff 	.word	0x000003ff
 800a258:	fffffc01 	.word	0xfffffc01
 800a25c:	0000041e 	.word	0x0000041e
 800a260:	fffffbe2 	.word	0xfffffbe2

0800a264 <__ieee754_atan2f>:
 800a264:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 800a266:	25ff      	movs	r5, #255	; 0xff
 800a268:	004a      	lsls	r2, r1, #1
 800a26a:	9101      	str	r1, [sp, #4]
 800a26c:	0852      	lsrs	r2, r2, #1
 800a26e:	05ed      	lsls	r5, r5, #23
 800a270:	42aa      	cmp	r2, r5
 800a272:	dc04      	bgt.n	800a27e <__ieee754_atan2f+0x1a>
 800a274:	0043      	lsls	r3, r0, #1
 800a276:	0007      	movs	r7, r0
 800a278:	085b      	lsrs	r3, r3, #1
 800a27a:	42ab      	cmp	r3, r5
 800a27c:	dd02      	ble.n	800a284 <__ieee754_atan2f+0x20>
 800a27e:	f7f6 f967 	bl	8000550 <__aeabi_fadd>
 800a282:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}
 800a284:	24fe      	movs	r4, #254	; 0xfe
 800a286:	05a4      	lsls	r4, r4, #22
 800a288:	42a1      	cmp	r1, r4
 800a28a:	d102      	bne.n	800a292 <__ieee754_atan2f+0x2e>
 800a28c:	f000 f8be 	bl	800a40c <atanf>
 800a290:	e7f7      	b.n	800a282 <__ieee754_atan2f+0x1e>
 800a292:	2602      	movs	r6, #2
 800a294:	178c      	asrs	r4, r1, #30
 800a296:	4034      	ands	r4, r6
 800a298:	0fc6      	lsrs	r6, r0, #31
 800a29a:	4334      	orrs	r4, r6
 800a29c:	2b00      	cmp	r3, #0
 800a29e:	d105      	bne.n	800a2ac <__ieee754_atan2f+0x48>
 800a2a0:	2c02      	cmp	r4, #2
 800a2a2:	d045      	beq.n	800a330 <__ieee754_atan2f+0xcc>
 800a2a4:	2c03      	cmp	r4, #3
 800a2a6:	d1ec      	bne.n	800a282 <__ieee754_atan2f+0x1e>
 800a2a8:	4824      	ldr	r0, [pc, #144]	; (800a33c <__ieee754_atan2f+0xd8>)
 800a2aa:	e7ea      	b.n	800a282 <__ieee754_atan2f+0x1e>
 800a2ac:	2a00      	cmp	r2, #0
 800a2ae:	d103      	bne.n	800a2b8 <__ieee754_atan2f+0x54>
 800a2b0:	2f00      	cmp	r7, #0
 800a2b2:	da41      	bge.n	800a338 <__ieee754_atan2f+0xd4>
 800a2b4:	4822      	ldr	r0, [pc, #136]	; (800a340 <__ieee754_atan2f+0xdc>)
 800a2b6:	e7e4      	b.n	800a282 <__ieee754_atan2f+0x1e>
 800a2b8:	42aa      	cmp	r2, r5
 800a2ba:	d10e      	bne.n	800a2da <__ieee754_atan2f+0x76>
 800a2bc:	3c01      	subs	r4, #1
 800a2be:	4293      	cmp	r3, r2
 800a2c0:	d105      	bne.n	800a2ce <__ieee754_atan2f+0x6a>
 800a2c2:	2c02      	cmp	r4, #2
 800a2c4:	d836      	bhi.n	800a334 <__ieee754_atan2f+0xd0>
 800a2c6:	4b1f      	ldr	r3, [pc, #124]	; (800a344 <__ieee754_atan2f+0xe0>)
 800a2c8:	00a4      	lsls	r4, r4, #2
 800a2ca:	58e0      	ldr	r0, [r4, r3]
 800a2cc:	e7d9      	b.n	800a282 <__ieee754_atan2f+0x1e>
 800a2ce:	2000      	movs	r0, #0
 800a2d0:	2c02      	cmp	r4, #2
 800a2d2:	d8d6      	bhi.n	800a282 <__ieee754_atan2f+0x1e>
 800a2d4:	4b1c      	ldr	r3, [pc, #112]	; (800a348 <__ieee754_atan2f+0xe4>)
 800a2d6:	00a4      	lsls	r4, r4, #2
 800a2d8:	e7f7      	b.n	800a2ca <__ieee754_atan2f+0x66>
 800a2da:	42ab      	cmp	r3, r5
 800a2dc:	d0e8      	beq.n	800a2b0 <__ieee754_atan2f+0x4c>
 800a2de:	1a9b      	subs	r3, r3, r2
 800a2e0:	15db      	asrs	r3, r3, #23
 800a2e2:	2b3c      	cmp	r3, #60	; 0x3c
 800a2e4:	dc14      	bgt.n	800a310 <__ieee754_atan2f+0xac>
 800a2e6:	2900      	cmp	r1, #0
 800a2e8:	da01      	bge.n	800a2ee <__ieee754_atan2f+0x8a>
 800a2ea:	333c      	adds	r3, #60	; 0x3c
 800a2ec:	db12      	blt.n	800a314 <__ieee754_atan2f+0xb0>
 800a2ee:	f7f6 facd 	bl	800088c <__aeabi_fdiv>
 800a2f2:	f000 f99b 	bl	800a62c <fabsf>
 800a2f6:	f000 f889 	bl	800a40c <atanf>
 800a2fa:	2c01      	cmp	r4, #1
 800a2fc:	d00c      	beq.n	800a318 <__ieee754_atan2f+0xb4>
 800a2fe:	2c02      	cmp	r4, #2
 800a300:	d00e      	beq.n	800a320 <__ieee754_atan2f+0xbc>
 800a302:	2c00      	cmp	r4, #0
 800a304:	d0bd      	beq.n	800a282 <__ieee754_atan2f+0x1e>
 800a306:	4911      	ldr	r1, [pc, #68]	; (800a34c <__ieee754_atan2f+0xe8>)
 800a308:	f7f6 f922 	bl	8000550 <__aeabi_fadd>
 800a30c:	4910      	ldr	r1, [pc, #64]	; (800a350 <__ieee754_atan2f+0xec>)
 800a30e:	e00c      	b.n	800a32a <__ieee754_atan2f+0xc6>
 800a310:	4810      	ldr	r0, [pc, #64]	; (800a354 <__ieee754_atan2f+0xf0>)
 800a312:	e7f2      	b.n	800a2fa <__ieee754_atan2f+0x96>
 800a314:	2000      	movs	r0, #0
 800a316:	e7f0      	b.n	800a2fa <__ieee754_atan2f+0x96>
 800a318:	2380      	movs	r3, #128	; 0x80
 800a31a:	061b      	lsls	r3, r3, #24
 800a31c:	18c0      	adds	r0, r0, r3
 800a31e:	e7b0      	b.n	800a282 <__ieee754_atan2f+0x1e>
 800a320:	490a      	ldr	r1, [pc, #40]	; (800a34c <__ieee754_atan2f+0xe8>)
 800a322:	f7f6 f915 	bl	8000550 <__aeabi_fadd>
 800a326:	1c01      	adds	r1, r0, #0
 800a328:	4809      	ldr	r0, [pc, #36]	; (800a350 <__ieee754_atan2f+0xec>)
 800a32a:	f7f6 fd9d 	bl	8000e68 <__aeabi_fsub>
 800a32e:	e7a8      	b.n	800a282 <__ieee754_atan2f+0x1e>
 800a330:	4807      	ldr	r0, [pc, #28]	; (800a350 <__ieee754_atan2f+0xec>)
 800a332:	e7a6      	b.n	800a282 <__ieee754_atan2f+0x1e>
 800a334:	4808      	ldr	r0, [pc, #32]	; (800a358 <__ieee754_atan2f+0xf4>)
 800a336:	e7a4      	b.n	800a282 <__ieee754_atan2f+0x1e>
 800a338:	4806      	ldr	r0, [pc, #24]	; (800a354 <__ieee754_atan2f+0xf0>)
 800a33a:	e7a2      	b.n	800a282 <__ieee754_atan2f+0x1e>
 800a33c:	c0490fdb 	.word	0xc0490fdb
 800a340:	bfc90fdb 	.word	0xbfc90fdb
 800a344:	0800b0a8 	.word	0x0800b0a8
 800a348:	0800b0b4 	.word	0x0800b0b4
 800a34c:	33bbbd2e 	.word	0x33bbbd2e
 800a350:	40490fdb 	.word	0x40490fdb
 800a354:	3fc90fdb 	.word	0x3fc90fdb
 800a358:	3f490fdb 	.word	0x3f490fdb

0800a35c <__ieee754_sqrtf>:
 800a35c:	0042      	lsls	r2, r0, #1
 800a35e:	0003      	movs	r3, r0
 800a360:	b570      	push	{r4, r5, r6, lr}
 800a362:	1c04      	adds	r4, r0, #0
 800a364:	20ff      	movs	r0, #255	; 0xff
 800a366:	0852      	lsrs	r2, r2, #1
 800a368:	05c0      	lsls	r0, r0, #23
 800a36a:	4282      	cmp	r2, r0
 800a36c:	d30a      	bcc.n	800a384 <__ieee754_sqrtf+0x28>
 800a36e:	1c21      	adds	r1, r4, #0
 800a370:	1c20      	adds	r0, r4, #0
 800a372:	f7f6 fc53 	bl	8000c1c <__aeabi_fmul>
 800a376:	1c01      	adds	r1, r0, #0
 800a378:	1c20      	adds	r0, r4, #0
 800a37a:	f7f6 f8e9 	bl	8000550 <__aeabi_fadd>
 800a37e:	1c04      	adds	r4, r0, #0
 800a380:	1c20      	adds	r0, r4, #0
 800a382:	bd70      	pop	{r4, r5, r6, pc}
 800a384:	2a00      	cmp	r2, #0
 800a386:	d0fb      	beq.n	800a380 <__ieee754_sqrtf+0x24>
 800a388:	2c00      	cmp	r4, #0
 800a38a:	da07      	bge.n	800a39c <__ieee754_sqrtf+0x40>
 800a38c:	1c21      	adds	r1, r4, #0
 800a38e:	1c20      	adds	r0, r4, #0
 800a390:	f7f6 fd6a 	bl	8000e68 <__aeabi_fsub>
 800a394:	1c01      	adds	r1, r0, #0
 800a396:	f7f6 fa79 	bl	800088c <__aeabi_fdiv>
 800a39a:	e7f0      	b.n	800a37e <__ieee754_sqrtf+0x22>
 800a39c:	0022      	movs	r2, r4
 800a39e:	15e1      	asrs	r1, r4, #23
 800a3a0:	4002      	ands	r2, r0
 800a3a2:	4204      	tst	r4, r0
 800a3a4:	d02e      	beq.n	800a404 <__ieee754_sqrtf+0xa8>
 800a3a6:	2280      	movs	r2, #128	; 0x80
 800a3a8:	000c      	movs	r4, r1
 800a3aa:	025b      	lsls	r3, r3, #9
 800a3ac:	0a5b      	lsrs	r3, r3, #9
 800a3ae:	0412      	lsls	r2, r2, #16
 800a3b0:	3c7f      	subs	r4, #127	; 0x7f
 800a3b2:	4313      	orrs	r3, r2
 800a3b4:	07ca      	lsls	r2, r1, #31
 800a3b6:	d400      	bmi.n	800a3ba <__ieee754_sqrtf+0x5e>
 800a3b8:	005b      	lsls	r3, r3, #1
 800a3ba:	2200      	movs	r2, #0
 800a3bc:	2180      	movs	r1, #128	; 0x80
 800a3be:	2019      	movs	r0, #25
 800a3c0:	0016      	movs	r6, r2
 800a3c2:	1064      	asrs	r4, r4, #1
 800a3c4:	005b      	lsls	r3, r3, #1
 800a3c6:	0449      	lsls	r1, r1, #17
 800a3c8:	1875      	adds	r5, r6, r1
 800a3ca:	429d      	cmp	r5, r3
 800a3cc:	dc02      	bgt.n	800a3d4 <__ieee754_sqrtf+0x78>
 800a3ce:	186e      	adds	r6, r5, r1
 800a3d0:	1b5b      	subs	r3, r3, r5
 800a3d2:	1852      	adds	r2, r2, r1
 800a3d4:	3801      	subs	r0, #1
 800a3d6:	005b      	lsls	r3, r3, #1
 800a3d8:	0849      	lsrs	r1, r1, #1
 800a3da:	2800      	cmp	r0, #0
 800a3dc:	d1f4      	bne.n	800a3c8 <__ieee754_sqrtf+0x6c>
 800a3de:	2b00      	cmp	r3, #0
 800a3e0:	d002      	beq.n	800a3e8 <__ieee754_sqrtf+0x8c>
 800a3e2:	2301      	movs	r3, #1
 800a3e4:	3201      	adds	r2, #1
 800a3e6:	439a      	bics	r2, r3
 800a3e8:	23fc      	movs	r3, #252	; 0xfc
 800a3ea:	1052      	asrs	r2, r2, #1
 800a3ec:	059b      	lsls	r3, r3, #22
 800a3ee:	18d2      	adds	r2, r2, r3
 800a3f0:	05e4      	lsls	r4, r4, #23
 800a3f2:	18a4      	adds	r4, r4, r2
 800a3f4:	e7c4      	b.n	800a380 <__ieee754_sqrtf+0x24>
 800a3f6:	005b      	lsls	r3, r3, #1
 800a3f8:	3201      	adds	r2, #1
 800a3fa:	4203      	tst	r3, r0
 800a3fc:	d0fb      	beq.n	800a3f6 <__ieee754_sqrtf+0x9a>
 800a3fe:	3a01      	subs	r2, #1
 800a400:	1a89      	subs	r1, r1, r2
 800a402:	e7d0      	b.n	800a3a6 <__ieee754_sqrtf+0x4a>
 800a404:	2080      	movs	r0, #128	; 0x80
 800a406:	0400      	lsls	r0, r0, #16
 800a408:	e7f7      	b.n	800a3fa <__ieee754_sqrtf+0x9e>
	...

0800a40c <atanf>:
 800a40c:	23a1      	movs	r3, #161	; 0xa1
 800a40e:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 800a410:	0045      	lsls	r5, r0, #1
 800a412:	1c04      	adds	r4, r0, #0
 800a414:	9001      	str	r0, [sp, #4]
 800a416:	086d      	lsrs	r5, r5, #1
 800a418:	05db      	lsls	r3, r3, #23
 800a41a:	429d      	cmp	r5, r3
 800a41c:	db0f      	blt.n	800a43e <atanf+0x32>
 800a41e:	23ff      	movs	r3, #255	; 0xff
 800a420:	05db      	lsls	r3, r3, #23
 800a422:	429d      	cmp	r5, r3
 800a424:	dd04      	ble.n	800a430 <atanf+0x24>
 800a426:	1c01      	adds	r1, r0, #0
 800a428:	f7f6 f892 	bl	8000550 <__aeabi_fadd>
 800a42c:	1c04      	adds	r4, r0, #0
 800a42e:	e004      	b.n	800a43a <atanf+0x2e>
 800a430:	9b01      	ldr	r3, [sp, #4]
 800a432:	2b00      	cmp	r3, #0
 800a434:	dd00      	ble.n	800a438 <atanf+0x2c>
 800a436:	e0cc      	b.n	800a5d2 <atanf+0x1c6>
 800a438:	4c67      	ldr	r4, [pc, #412]	; (800a5d8 <atanf+0x1cc>)
 800a43a:	1c20      	adds	r0, r4, #0
 800a43c:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}
 800a43e:	4b67      	ldr	r3, [pc, #412]	; (800a5dc <atanf+0x1d0>)
 800a440:	429d      	cmp	r5, r3
 800a442:	dc0f      	bgt.n	800a464 <atanf+0x58>
 800a444:	23c4      	movs	r3, #196	; 0xc4
 800a446:	059b      	lsls	r3, r3, #22
 800a448:	429d      	cmp	r5, r3
 800a44a:	da08      	bge.n	800a45e <atanf+0x52>
 800a44c:	4964      	ldr	r1, [pc, #400]	; (800a5e0 <atanf+0x1d4>)
 800a44e:	f7f6 f87f 	bl	8000550 <__aeabi_fadd>
 800a452:	21fe      	movs	r1, #254	; 0xfe
 800a454:	0589      	lsls	r1, r1, #22
 800a456:	f7f6 f831 	bl	80004bc <__aeabi_fcmpgt>
 800a45a:	2800      	cmp	r0, #0
 800a45c:	d1ed      	bne.n	800a43a <atanf+0x2e>
 800a45e:	2601      	movs	r6, #1
 800a460:	4276      	negs	r6, r6
 800a462:	e01b      	b.n	800a49c <atanf+0x90>
 800a464:	f000 f8e2 	bl	800a62c <fabsf>
 800a468:	4b5e      	ldr	r3, [pc, #376]	; (800a5e4 <atanf+0x1d8>)
 800a46a:	1c04      	adds	r4, r0, #0
 800a46c:	429d      	cmp	r5, r3
 800a46e:	dc7b      	bgt.n	800a568 <atanf+0x15c>
 800a470:	4b5d      	ldr	r3, [pc, #372]	; (800a5e8 <atanf+0x1dc>)
 800a472:	429d      	cmp	r5, r3
 800a474:	dc67      	bgt.n	800a546 <atanf+0x13a>
 800a476:	1c01      	adds	r1, r0, #0
 800a478:	f7f6 f86a 	bl	8000550 <__aeabi_fadd>
 800a47c:	21fe      	movs	r1, #254	; 0xfe
 800a47e:	0589      	lsls	r1, r1, #22
 800a480:	f7f6 fcf2 	bl	8000e68 <__aeabi_fsub>
 800a484:	2180      	movs	r1, #128	; 0x80
 800a486:	1c05      	adds	r5, r0, #0
 800a488:	05c9      	lsls	r1, r1, #23
 800a48a:	1c20      	adds	r0, r4, #0
 800a48c:	f7f6 f860 	bl	8000550 <__aeabi_fadd>
 800a490:	1c01      	adds	r1, r0, #0
 800a492:	1c28      	adds	r0, r5, #0
 800a494:	f7f6 f9fa 	bl	800088c <__aeabi_fdiv>
 800a498:	2600      	movs	r6, #0
 800a49a:	1c04      	adds	r4, r0, #0
 800a49c:	1c21      	adds	r1, r4, #0
 800a49e:	1c20      	adds	r0, r4, #0
 800a4a0:	f7f6 fbbc 	bl	8000c1c <__aeabi_fmul>
 800a4a4:	1c01      	adds	r1, r0, #0
 800a4a6:	1c07      	adds	r7, r0, #0
 800a4a8:	f7f6 fbb8 	bl	8000c1c <__aeabi_fmul>
 800a4ac:	494f      	ldr	r1, [pc, #316]	; (800a5ec <atanf+0x1e0>)
 800a4ae:	1c05      	adds	r5, r0, #0
 800a4b0:	f7f6 fbb4 	bl	8000c1c <__aeabi_fmul>
 800a4b4:	494e      	ldr	r1, [pc, #312]	; (800a5f0 <atanf+0x1e4>)
 800a4b6:	f7f6 f84b 	bl	8000550 <__aeabi_fadd>
 800a4ba:	1c29      	adds	r1, r5, #0
 800a4bc:	f7f6 fbae 	bl	8000c1c <__aeabi_fmul>
 800a4c0:	494c      	ldr	r1, [pc, #304]	; (800a5f4 <atanf+0x1e8>)
 800a4c2:	f7f6 f845 	bl	8000550 <__aeabi_fadd>
 800a4c6:	1c29      	adds	r1, r5, #0
 800a4c8:	f7f6 fba8 	bl	8000c1c <__aeabi_fmul>
 800a4cc:	494a      	ldr	r1, [pc, #296]	; (800a5f8 <atanf+0x1ec>)
 800a4ce:	f7f6 f83f 	bl	8000550 <__aeabi_fadd>
 800a4d2:	1c29      	adds	r1, r5, #0
 800a4d4:	f7f6 fba2 	bl	8000c1c <__aeabi_fmul>
 800a4d8:	4948      	ldr	r1, [pc, #288]	; (800a5fc <atanf+0x1f0>)
 800a4da:	f7f6 f839 	bl	8000550 <__aeabi_fadd>
 800a4de:	1c29      	adds	r1, r5, #0
 800a4e0:	f7f6 fb9c 	bl	8000c1c <__aeabi_fmul>
 800a4e4:	4946      	ldr	r1, [pc, #280]	; (800a600 <atanf+0x1f4>)
 800a4e6:	f7f6 f833 	bl	8000550 <__aeabi_fadd>
 800a4ea:	1c39      	adds	r1, r7, #0
 800a4ec:	f7f6 fb96 	bl	8000c1c <__aeabi_fmul>
 800a4f0:	4944      	ldr	r1, [pc, #272]	; (800a604 <atanf+0x1f8>)
 800a4f2:	1c07      	adds	r7, r0, #0
 800a4f4:	1c28      	adds	r0, r5, #0
 800a4f6:	f7f6 fb91 	bl	8000c1c <__aeabi_fmul>
 800a4fa:	4943      	ldr	r1, [pc, #268]	; (800a608 <atanf+0x1fc>)
 800a4fc:	f7f6 fcb4 	bl	8000e68 <__aeabi_fsub>
 800a500:	1c29      	adds	r1, r5, #0
 800a502:	f7f6 fb8b 	bl	8000c1c <__aeabi_fmul>
 800a506:	4941      	ldr	r1, [pc, #260]	; (800a60c <atanf+0x200>)
 800a508:	f7f6 fcae 	bl	8000e68 <__aeabi_fsub>
 800a50c:	1c29      	adds	r1, r5, #0
 800a50e:	f7f6 fb85 	bl	8000c1c <__aeabi_fmul>
 800a512:	493f      	ldr	r1, [pc, #252]	; (800a610 <atanf+0x204>)
 800a514:	f7f6 fca8 	bl	8000e68 <__aeabi_fsub>
 800a518:	1c29      	adds	r1, r5, #0
 800a51a:	f7f6 fb7f 	bl	8000c1c <__aeabi_fmul>
 800a51e:	493d      	ldr	r1, [pc, #244]	; (800a614 <atanf+0x208>)
 800a520:	f7f6 fca2 	bl	8000e68 <__aeabi_fsub>
 800a524:	1c29      	adds	r1, r5, #0
 800a526:	f7f6 fb79 	bl	8000c1c <__aeabi_fmul>
 800a52a:	1c01      	adds	r1, r0, #0
 800a52c:	1c38      	adds	r0, r7, #0
 800a52e:	f7f6 f80f 	bl	8000550 <__aeabi_fadd>
 800a532:	1c21      	adds	r1, r4, #0
 800a534:	f7f6 fb72 	bl	8000c1c <__aeabi_fmul>
 800a538:	1c73      	adds	r3, r6, #1
 800a53a:	d134      	bne.n	800a5a6 <atanf+0x19a>
 800a53c:	1c01      	adds	r1, r0, #0
 800a53e:	1c20      	adds	r0, r4, #0
 800a540:	f7f6 fc92 	bl	8000e68 <__aeabi_fsub>
 800a544:	e772      	b.n	800a42c <atanf+0x20>
 800a546:	21fe      	movs	r1, #254	; 0xfe
 800a548:	0589      	lsls	r1, r1, #22
 800a54a:	f7f6 fc8d 	bl	8000e68 <__aeabi_fsub>
 800a54e:	21fe      	movs	r1, #254	; 0xfe
 800a550:	1c05      	adds	r5, r0, #0
 800a552:	0589      	lsls	r1, r1, #22
 800a554:	1c20      	adds	r0, r4, #0
 800a556:	f7f5 fffb 	bl	8000550 <__aeabi_fadd>
 800a55a:	1c01      	adds	r1, r0, #0
 800a55c:	1c28      	adds	r0, r5, #0
 800a55e:	f7f6 f995 	bl	800088c <__aeabi_fdiv>
 800a562:	2601      	movs	r6, #1
 800a564:	1c04      	adds	r4, r0, #0
 800a566:	e799      	b.n	800a49c <atanf+0x90>
 800a568:	4b2b      	ldr	r3, [pc, #172]	; (800a618 <atanf+0x20c>)
 800a56a:	429d      	cmp	r5, r3
 800a56c:	dc14      	bgt.n	800a598 <atanf+0x18c>
 800a56e:	21ff      	movs	r1, #255	; 0xff
 800a570:	0589      	lsls	r1, r1, #22
 800a572:	f7f6 fc79 	bl	8000e68 <__aeabi_fsub>
 800a576:	21ff      	movs	r1, #255	; 0xff
 800a578:	1c05      	adds	r5, r0, #0
 800a57a:	0589      	lsls	r1, r1, #22
 800a57c:	1c20      	adds	r0, r4, #0
 800a57e:	f7f6 fb4d 	bl	8000c1c <__aeabi_fmul>
 800a582:	21fe      	movs	r1, #254	; 0xfe
 800a584:	0589      	lsls	r1, r1, #22
 800a586:	f7f5 ffe3 	bl	8000550 <__aeabi_fadd>
 800a58a:	1c01      	adds	r1, r0, #0
 800a58c:	1c28      	adds	r0, r5, #0
 800a58e:	f7f6 f97d 	bl	800088c <__aeabi_fdiv>
 800a592:	2602      	movs	r6, #2
 800a594:	1c04      	adds	r4, r0, #0
 800a596:	e781      	b.n	800a49c <atanf+0x90>
 800a598:	1c01      	adds	r1, r0, #0
 800a59a:	4820      	ldr	r0, [pc, #128]	; (800a61c <atanf+0x210>)
 800a59c:	f7f6 f976 	bl	800088c <__aeabi_fdiv>
 800a5a0:	2603      	movs	r6, #3
 800a5a2:	1c04      	adds	r4, r0, #0
 800a5a4:	e77a      	b.n	800a49c <atanf+0x90>
 800a5a6:	4b1e      	ldr	r3, [pc, #120]	; (800a620 <atanf+0x214>)
 800a5a8:	00b6      	lsls	r6, r6, #2
 800a5aa:	58f1      	ldr	r1, [r6, r3]
 800a5ac:	f7f6 fc5c 	bl	8000e68 <__aeabi_fsub>
 800a5b0:	1c21      	adds	r1, r4, #0
 800a5b2:	f7f6 fc59 	bl	8000e68 <__aeabi_fsub>
 800a5b6:	4b1b      	ldr	r3, [pc, #108]	; (800a624 <atanf+0x218>)
 800a5b8:	1c01      	adds	r1, r0, #0
 800a5ba:	58f0      	ldr	r0, [r6, r3]
 800a5bc:	f7f6 fc54 	bl	8000e68 <__aeabi_fsub>
 800a5c0:	9b01      	ldr	r3, [sp, #4]
 800a5c2:	1c04      	adds	r4, r0, #0
 800a5c4:	2b00      	cmp	r3, #0
 800a5c6:	db00      	blt.n	800a5ca <atanf+0x1be>
 800a5c8:	e737      	b.n	800a43a <atanf+0x2e>
 800a5ca:	2380      	movs	r3, #128	; 0x80
 800a5cc:	061b      	lsls	r3, r3, #24
 800a5ce:	18c4      	adds	r4, r0, r3
 800a5d0:	e733      	b.n	800a43a <atanf+0x2e>
 800a5d2:	4c15      	ldr	r4, [pc, #84]	; (800a628 <atanf+0x21c>)
 800a5d4:	e731      	b.n	800a43a <atanf+0x2e>
 800a5d6:	46c0      	nop			; (mov r8, r8)
 800a5d8:	bfc90fdb 	.word	0xbfc90fdb
 800a5dc:	3edfffff 	.word	0x3edfffff
 800a5e0:	7149f2ca 	.word	0x7149f2ca
 800a5e4:	3f97ffff 	.word	0x3f97ffff
 800a5e8:	3f2fffff 	.word	0x3f2fffff
 800a5ec:	3c8569d7 	.word	0x3c8569d7
 800a5f0:	3d4bda59 	.word	0x3d4bda59
 800a5f4:	3d886b35 	.word	0x3d886b35
 800a5f8:	3dba2e6e 	.word	0x3dba2e6e
 800a5fc:	3e124925 	.word	0x3e124925
 800a600:	3eaaaaab 	.word	0x3eaaaaab
 800a604:	bd15a221 	.word	0xbd15a221
 800a608:	3d6ef16b 	.word	0x3d6ef16b
 800a60c:	3d9d8795 	.word	0x3d9d8795
 800a610:	3de38e38 	.word	0x3de38e38
 800a614:	3e4ccccd 	.word	0x3e4ccccd
 800a618:	401bffff 	.word	0x401bffff
 800a61c:	bf800000 	.word	0xbf800000
 800a620:	0800b0d0 	.word	0x0800b0d0
 800a624:	0800b0c0 	.word	0x0800b0c0
 800a628:	3fc90fdb 	.word	0x3fc90fdb

0800a62c <fabsf>:
 800a62c:	0040      	lsls	r0, r0, #1
 800a62e:	0840      	lsrs	r0, r0, #1
 800a630:	4770      	bx	lr
	...

0800a634 <__errno>:
 800a634:	4b01      	ldr	r3, [pc, #4]	; (800a63c <__errno+0x8>)
 800a636:	6818      	ldr	r0, [r3, #0]
 800a638:	4770      	bx	lr
 800a63a:	46c0      	nop			; (mov r8, r8)
 800a63c:	20000010 	.word	0x20000010

0800a640 <__libc_init_array>:
 800a640:	b570      	push	{r4, r5, r6, lr}
 800a642:	2600      	movs	r6, #0
 800a644:	4d0c      	ldr	r5, [pc, #48]	; (800a678 <__libc_init_array+0x38>)
 800a646:	4c0d      	ldr	r4, [pc, #52]	; (800a67c <__libc_init_array+0x3c>)
 800a648:	1b64      	subs	r4, r4, r5
 800a64a:	10a4      	asrs	r4, r4, #2
 800a64c:	42a6      	cmp	r6, r4
 800a64e:	d109      	bne.n	800a664 <__libc_init_array+0x24>
 800a650:	2600      	movs	r6, #0
 800a652:	f000 f887 	bl	800a764 <_init>
 800a656:	4d0a      	ldr	r5, [pc, #40]	; (800a680 <__libc_init_array+0x40>)
 800a658:	4c0a      	ldr	r4, [pc, #40]	; (800a684 <__libc_init_array+0x44>)
 800a65a:	1b64      	subs	r4, r4, r5
 800a65c:	10a4      	asrs	r4, r4, #2
 800a65e:	42a6      	cmp	r6, r4
 800a660:	d105      	bne.n	800a66e <__libc_init_array+0x2e>
 800a662:	bd70      	pop	{r4, r5, r6, pc}
 800a664:	00b3      	lsls	r3, r6, #2
 800a666:	58eb      	ldr	r3, [r5, r3]
 800a668:	4798      	blx	r3
 800a66a:	3601      	adds	r6, #1
 800a66c:	e7ee      	b.n	800a64c <__libc_init_array+0xc>
 800a66e:	00b3      	lsls	r3, r6, #2
 800a670:	58eb      	ldr	r3, [r5, r3]
 800a672:	4798      	blx	r3
 800a674:	3601      	adds	r6, #1
 800a676:	e7f2      	b.n	800a65e <__libc_init_array+0x1e>
 800a678:	0800b0e0 	.word	0x0800b0e0
 800a67c:	0800b0e0 	.word	0x0800b0e0
 800a680:	0800b0e0 	.word	0x0800b0e0
 800a684:	0800b0e8 	.word	0x0800b0e8

0800a688 <free>:
 800a688:	b510      	push	{r4, lr}
 800a68a:	4b03      	ldr	r3, [pc, #12]	; (800a698 <free+0x10>)
 800a68c:	0001      	movs	r1, r0
 800a68e:	6818      	ldr	r0, [r3, #0]
 800a690:	f000 f80c 	bl	800a6ac <_free_r>
 800a694:	bd10      	pop	{r4, pc}
 800a696:	46c0      	nop			; (mov r8, r8)
 800a698:	20000010 	.word	0x20000010

0800a69c <memset>:
 800a69c:	0003      	movs	r3, r0
 800a69e:	1882      	adds	r2, r0, r2
 800a6a0:	4293      	cmp	r3, r2
 800a6a2:	d100      	bne.n	800a6a6 <memset+0xa>
 800a6a4:	4770      	bx	lr
 800a6a6:	7019      	strb	r1, [r3, #0]
 800a6a8:	3301      	adds	r3, #1
 800a6aa:	e7f9      	b.n	800a6a0 <memset+0x4>

0800a6ac <_free_r>:
 800a6ac:	b570      	push	{r4, r5, r6, lr}
 800a6ae:	0005      	movs	r5, r0
 800a6b0:	2900      	cmp	r1, #0
 800a6b2:	d010      	beq.n	800a6d6 <_free_r+0x2a>
 800a6b4:	1f0c      	subs	r4, r1, #4
 800a6b6:	6823      	ldr	r3, [r4, #0]
 800a6b8:	2b00      	cmp	r3, #0
 800a6ba:	da00      	bge.n	800a6be <_free_r+0x12>
 800a6bc:	18e4      	adds	r4, r4, r3
 800a6be:	0028      	movs	r0, r5
 800a6c0:	f000 f83e 	bl	800a740 <__malloc_lock>
 800a6c4:	4a1d      	ldr	r2, [pc, #116]	; (800a73c <_free_r+0x90>)
 800a6c6:	6813      	ldr	r3, [r2, #0]
 800a6c8:	2b00      	cmp	r3, #0
 800a6ca:	d105      	bne.n	800a6d8 <_free_r+0x2c>
 800a6cc:	6063      	str	r3, [r4, #4]
 800a6ce:	6014      	str	r4, [r2, #0]
 800a6d0:	0028      	movs	r0, r5
 800a6d2:	f000 f83d 	bl	800a750 <__malloc_unlock>
 800a6d6:	bd70      	pop	{r4, r5, r6, pc}
 800a6d8:	42a3      	cmp	r3, r4
 800a6da:	d908      	bls.n	800a6ee <_free_r+0x42>
 800a6dc:	6821      	ldr	r1, [r4, #0]
 800a6de:	1860      	adds	r0, r4, r1
 800a6e0:	4283      	cmp	r3, r0
 800a6e2:	d1f3      	bne.n	800a6cc <_free_r+0x20>
 800a6e4:	6818      	ldr	r0, [r3, #0]
 800a6e6:	685b      	ldr	r3, [r3, #4]
 800a6e8:	1841      	adds	r1, r0, r1
 800a6ea:	6021      	str	r1, [r4, #0]
 800a6ec:	e7ee      	b.n	800a6cc <_free_r+0x20>
 800a6ee:	001a      	movs	r2, r3
 800a6f0:	685b      	ldr	r3, [r3, #4]
 800a6f2:	2b00      	cmp	r3, #0
 800a6f4:	d001      	beq.n	800a6fa <_free_r+0x4e>
 800a6f6:	42a3      	cmp	r3, r4
 800a6f8:	d9f9      	bls.n	800a6ee <_free_r+0x42>
 800a6fa:	6811      	ldr	r1, [r2, #0]
 800a6fc:	1850      	adds	r0, r2, r1
 800a6fe:	42a0      	cmp	r0, r4
 800a700:	d10b      	bne.n	800a71a <_free_r+0x6e>
 800a702:	6820      	ldr	r0, [r4, #0]
 800a704:	1809      	adds	r1, r1, r0
 800a706:	1850      	adds	r0, r2, r1
 800a708:	6011      	str	r1, [r2, #0]
 800a70a:	4283      	cmp	r3, r0
 800a70c:	d1e0      	bne.n	800a6d0 <_free_r+0x24>
 800a70e:	6818      	ldr	r0, [r3, #0]
 800a710:	685b      	ldr	r3, [r3, #4]
 800a712:	1841      	adds	r1, r0, r1
 800a714:	6011      	str	r1, [r2, #0]
 800a716:	6053      	str	r3, [r2, #4]
 800a718:	e7da      	b.n	800a6d0 <_free_r+0x24>
 800a71a:	42a0      	cmp	r0, r4
 800a71c:	d902      	bls.n	800a724 <_free_r+0x78>
 800a71e:	230c      	movs	r3, #12
 800a720:	602b      	str	r3, [r5, #0]
 800a722:	e7d5      	b.n	800a6d0 <_free_r+0x24>
 800a724:	6821      	ldr	r1, [r4, #0]
 800a726:	1860      	adds	r0, r4, r1
 800a728:	4283      	cmp	r3, r0
 800a72a:	d103      	bne.n	800a734 <_free_r+0x88>
 800a72c:	6818      	ldr	r0, [r3, #0]
 800a72e:	685b      	ldr	r3, [r3, #4]
 800a730:	1841      	adds	r1, r0, r1
 800a732:	6021      	str	r1, [r4, #0]
 800a734:	6063      	str	r3, [r4, #4]
 800a736:	6054      	str	r4, [r2, #4]
 800a738:	e7ca      	b.n	800a6d0 <_free_r+0x24>
 800a73a:	46c0      	nop			; (mov r8, r8)
 800a73c:	200003cc 	.word	0x200003cc

0800a740 <__malloc_lock>:
 800a740:	b510      	push	{r4, lr}
 800a742:	4802      	ldr	r0, [pc, #8]	; (800a74c <__malloc_lock+0xc>)
 800a744:	f000 f80c 	bl	800a760 <__retarget_lock_acquire_recursive>
 800a748:	bd10      	pop	{r4, pc}
 800a74a:	46c0      	nop			; (mov r8, r8)
 800a74c:	200003d0 	.word	0x200003d0

0800a750 <__malloc_unlock>:
 800a750:	b510      	push	{r4, lr}
 800a752:	4802      	ldr	r0, [pc, #8]	; (800a75c <__malloc_unlock+0xc>)
 800a754:	f000 f805 	bl	800a762 <__retarget_lock_release_recursive>
 800a758:	bd10      	pop	{r4, pc}
 800a75a:	46c0      	nop			; (mov r8, r8)
 800a75c:	200003d0 	.word	0x200003d0

0800a760 <__retarget_lock_acquire_recursive>:
 800a760:	4770      	bx	lr

0800a762 <__retarget_lock_release_recursive>:
 800a762:	4770      	bx	lr

0800a764 <_init>:
 800a764:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800a766:	46c0      	nop			; (mov r8, r8)
 800a768:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800a76a:	bc08      	pop	{r3}
 800a76c:	469e      	mov	lr, r3
 800a76e:	4770      	bx	lr

0800a770 <_fini>:
 800a770:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800a772:	46c0      	nop			; (mov r8, r8)
 800a774:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800a776:	bc08      	pop	{r3}
 800a778:	469e      	mov	lr, r3
 800a77a:	4770      	bx	lr
